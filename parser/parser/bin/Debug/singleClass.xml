<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="Employee.java"><package>package <name>assignment3</name>;</package> 

<class><specifier>public</specifier> class <name>Employee</name> <super><implements>implements <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Employee</name></argument>&gt;</argument_list></name></implements></super><block>{
	
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EQUAL_RESULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INVERSE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>grossSalary</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>TAX</name> <init>= <expr><literal type="number">0.1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>choose</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>orderBy</name></decl>;</decl_stmt>


	
	<constructor><specifier>public</specifier> <name>Employee</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name><operator>=</operator><name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name><operator>=</operator><name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>grossSalary</name></name><operator>=</operator> <name>grossSalary</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<comment type="block">/*
	 * this method is to keep the getGrossSalary() from changing, 
	 * so all the changes will affect calculateSalary() not getGrossSalary().
	 */</comment>
	<function><specifier>public</specifier> <type><name>double</name></type> <name>calculateSalary</name><parameter_list>()</parameter_list> <block>{ 
		<return>return <expr><name><name>this</name><operator>.</operator><name>grossSalary</name></name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>getNetSalary</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>grossSalary</name></name><operator>-</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>grossSalary</name></name><operator>*</operator><name>TAX</name><operator>)</operator></expr>;</return>
	}</block></function>

	
	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Employee</name></type> <name>newEmployee</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareToIgnoreCase</name><argument_list>(<argument><expr><call><name><name>newEmployee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>EQUAL_RESULT</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>Double</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>newEmployee</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	

		
		<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>name</name></expr>;</return>
		}</block></function>
		
		<function><specifier>public</specifier> <type><name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		}</block></function>
		

		<function><specifier>public</specifier> <type><name>String</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>id</name></expr>;</return>
		}</block></function>

		<function><specifier>public</specifier> <type><name>double</name></type> <name>getGrossSalary</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>grossSalary</name></expr>;</return>
		}</block></function>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>setGrossSalary</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>grossSalary</name></name><operator>=</operator><name>grossSalary</name></expr>;</expr_stmt>
		}</block></function>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>name</name></name><operator>+</operator><literal type="string">"'s gross Salary is of "</literal><operator>+</operator> <name><name>this</name><operator>.</operator><name>grossSalary</name></name><operator>+</operator><literal type="string">" SEK per month. "</literal></expr>;</return>
	}</block></function>
	<comment type="line">// CHALLENGE 1</comment>
		<comment type="block">/*@Override 
		public int compareTo(Employee newEmployee) {
			if (choose.equalsIgnoreCase("Name")) {
				return compareByName(newEmployee);
			} else if (choose.equalsIgnoreCase("Net Salary")) {
				return compareByNetSalary(newEmployee);
			} else {
				return  ( this.getName().compareToIgnoreCase(newEmployee.getName()) )  ;
			}

		}
	/*
	 * we have two methods that will be called in the compareTo() 
	 *  so depending on the String (choose) we will call either 
	 *  compareByName() or compareByNetSalary().
	 *  
	 *   Regarding Challenge 1.
	 *
		
		public int compareByName (Employee newEmployee) {
			int result;
			result = this.getName().compareToIgnoreCase(newEmployee.getName());
			if(result== EQUAL_RESULT) {
				result= Double.compare(this.getNetSalary(), newEmployee.getNetSalary());
				
			}
			return result;
		}
		
			public int compareByNetSalary (Employee newEmployee) {
				int result = Double.compare(this.getNetSalary(), newEmployee.getNetSalary());
				if(result== EQUAL_RESULT) {
					result = this.getName().compareToIgnoreCase(newEmployee.getName());	
				}
				return result;
			}
  */</comment>
		
	<comment type="block">/*	CHALLENGE 2
		@Override 
		public int compareTo(Employee newEmployee) {
			if (choose.equalsIgnoreCase("Name") &amp;&amp; orderBy.equalsIgnoreCase("asc")) {
				return compareByName(newEmployee);
			}
			else if (choose.equalsIgnoreCase("Name") &amp;&amp; orderBy.equalsIgnoreCase("dasc")) {
				return compareByNameDasc(newEmployee) ;
			} else if (choose.equalsIgnoreCase("Net Salary") &amp;&amp; orderBy.equalsIgnoreCase("asc")) {
				return compareByNetSalary(newEmployee);
			} else if (choose.equalsIgnoreCase("Net Salary") &amp;&amp; orderBy.equalsIgnoreCase("dasc")) {
				return compareByNetSalaryDasc(newEmployee);
			}else {
				return this.getName().compareToIgnoreCase(newEmployee.getName()) ;
			}

		}
		
		 
		public int compareByName(Employee newEmployee) {
			int result;
			result = this.getName().compareToIgnoreCase(newEmployee.getName());
			if (result == EQUAL_RESULT) {
				result = Double.compare(this.getNetSalary(), newEmployee.getNetSalary());
			}
			return result;
		}
		
		public int compareByNetSalary(Employee newEmployee) {
			int result = Double.compare(this.getNetSalary(), newEmployee.getNetSalary());
			if (result == EQUAL_RESULT) {
				result = this.getName().compareToIgnoreCase(newEmployee.getName());
			}
			return result;
		}
		
		public int compareByNetSalaryDasc(Employee newEmployee) {
			int result = ( Double.compare(this.getNetSalary(), newEmployee.getNetSalary()) * INVERSE );
			if (result == EQUAL_RESULT) {
				result = ( this.getName().compareToIgnoreCase(newEmployee.getName()) * INVERSE);
			}
			return result;
		}
		
		public int compareByNameDasc(Employee newEmployee) {
			int result;
			result = ( this.getName().compareToIgnoreCase(newEmployee.getName()) * INVERSE);
			if (result == EQUAL_RESULT) {
				result = ( Double.compare(this.getNetSalary(), newEmployee.getNetSalary()) * INVERSE );
			}
			return result;
		}
	*/</comment>	

}</block></class>
</unit>
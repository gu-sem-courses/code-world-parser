<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\BaseFragment.java" hash="0ab19910937bf8d6ab3235615b0c9ee997363ecd"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>leakcanary</name><operator>.</operator><name>RefWatcher</name></name>;</import>


<class><specifier>public</specifier> class <name>BaseFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackScreenView</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>RefWatcher</name></type> <name>refWatcher</name> <init>= <expr><call><name><name>OmniNotes</name><operator>.</operator><name>getRefWatcher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>refWatcher</name><operator>.</operator><name>watch</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\AboutActivity.java" hash="c6fe360afdd2ea5660320200d984cdff7f394a12"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>webkit</name><operator>.</operator><name>WebView</name></name>;</import>


<class><specifier>public</specifier> class <name>AboutActivity</name> <super><extends>extends <name>BaseActivity</name></extends></super> <block>{

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_about</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>WebView</name></type> <name>webview</name> <init>= <expr><operator>(</operator><name>WebView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>webview</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>webview</name><operator>.</operator><name>loadUrl</name></name><argument_list>(<argument><expr><literal type="string">"file:///android_asset/html/about.html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>initUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackScreenView</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onNavigateUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>initUI</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setHomeButtonEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setNavigationOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>onNavigateUp</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\FontSizeListPreference.java" hash="8a26daee13000943b74fa6349fe13664e6116500"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>ListPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckedTextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>utils</name><operator>.</operator><name>DensityUtil</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fonts</name></name>;</import>

<class><specifier>public</specifier> class <name>FontSizeListPreference</name> <super><extends>extends <name>ListPreference</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>clickedDialogEntryIndex</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>FontSizeListPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onBindView</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBindView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>summary</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>summary</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Fonts</name><operator>.</operator><name>overrideTextSize</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name>getSharedPreferences</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>summary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPrepareDialogBuilder</name><parameter_list>(<parameter><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>CharSequence</name></argument>&gt;</argument_list></name></type> <name>adapter</name> <init>= <expr><operator>new</operator> <class><super><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>CharSequence</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>settings_font_size_dialog_item</name></name></expr></argument>, <argument><expr><call><name>getEntries</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>NonNull</name></annotation>
            <annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><name>CheckedTextView</name></type> <name>view</name> <init>= <expr><operator>(</operator><name>CheckedTextView</name><operator>)</operator> <name>convertView</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>view</name> <operator>=</operator> <operator>(</operator><name>CheckedTextView</name><operator>)</operator> <call><name><name>View</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>settings_font_size_dialog_item</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getEntries</name><argument_list>()</argument_list></call><index>[<expr><name>position</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Context</name></type> <name>privateContext</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>currentSize</name> <init>= <expr><call><name><name>DensityUtil</name><operator>.</operator><name>pxToDp</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>View</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>settings_font_size_dialog_item</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getTextSize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>privateContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>offset</name> <init>= <expr><call><name><name>privateContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntArray</name><argument_list>(
                        <argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>text_size_offset</name></name></expr></argument>)</argument_list></call><index>[<expr><name>position</name></expr>]</index></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>currentSize</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>view</name></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>clickedDialogEntryIndex</name> <operator>=</operator> <call><name>findIndexOfValue</name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSingleChoiceItems</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>clickedDialogEntryIndex</name></expr></argument>,
                <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block>{
                    <expr_stmt><expr><name>clickedDialogEntryIndex</name> <operator>=</operator> <name>which</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>FontSizeListPreference</name><operator>.</operator><name>this</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDialogClosed</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>positiveResult</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDialogClosed</name></name><argument_list>(<argument><expr><name>positiveResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>positiveResult</name> <operator>&amp;&amp;</operator> <name>clickedDialogEntryIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>getEntryValues</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name>getEntryValues</name><argument_list>()</argument_list></call><index>[<expr><name>clickedDialogEntryIndex</name></expr>]</index><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>callChangeListener</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\CategoryActivity.java" hash="98544e3e057ba87f583e630ee2e460a8d3009f00"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NavUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>MaterialDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>color</name><operator>.</operator><name>ColorChooserDialog</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>OnClick</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>CategoriesUpdatedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>simplegallery</name><operator>.</operator><name>util</name><operator>.</operator><name>BitmapUtils</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Integer</name><operator>.</operator><name>parseInt</name></name>;</import>


<class><specifier>public</specifier> class <name>CategoryActivity</name> <super><extends>extends <name>AppCompatActivity</name></extends> <implements>implements <name><name>ColorChooserDialog</name><operator>.</operator><name>ColorCallback</name></name></implements></super><block>{

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>category_title</name></name></expr></argument>)</argument_list></annotation> <type><name>EditText</name></type> <name>title</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>category_description</name></name></expr></argument>)</argument_list></annotation> <type><name>EditText</name></type> <name>description</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>delete</name></name></expr></argument>)</argument_list></annotation> <type><name>Button</name></type> <name>deleteBtn</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>save</name></name></expr></argument>)</argument_list></annotation> <type><name>Button</name></type> <name>saveBtn</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>color_chooser</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>colorChooser</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Category</name></type> <name>category</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>selectedColor</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_category</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>category</name> <operator>=</operator> <call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelableExtra</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_CATEGORY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>category</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Adding new category"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>category</name> <operator>=</operator> <operator>new</operator> <call><name>Category</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>category</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getRandomPaletteColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Editing category "</literal> <operator>+</operator> <call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>selectedColor</name> <operator>=</operator> <call><name>parseInt</name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>populateViews</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>int</name></type> <name>getRandomPaletteColor</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>paletteArray</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>material_colors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>paletteArray</name><index>[<expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><operator>(</operator><name><name>paletteArray</name><operator>.</operator><name>length</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>OnClick</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>color_chooser</name></name></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showColorChooserCustomColors</name><parameter_list>()</parameter_list> <block>{

        <expr_stmt><expr><operator>new</operator> <call><name><name>ColorChooserDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>dynamicButtonColor</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>preselect</name><argument_list>(<argument><expr><name>selectedColor</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onColorSelection</name><parameter_list>(<parameter><decl><type><name>ColorChooserDialog</name></type> <name>colorChooserDialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>BitmapUtils</name><operator>.</operator><name>changeImageViewDrawableColor</name></name><argument_list>(<argument><expr><name>colorChooser</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>selectedColor</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>populateViews</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Reset picker to saved color</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>color</name> <init>= <expr><call><name><name>category</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>color</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>color</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>colorChooser</name><operator>.</operator><name>getDrawable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mutate</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColorFilter</name><argument_list>(<argument><expr><call><name>parseInt</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>SRC_ATOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>deleteBtn</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Category saving
     */</comment>
    <function><annotation>@<name>OnClick</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>save</name></name></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>saveCategory</name><parameter_list>()</parameter_list> <block>{

        <if>if <condition>(<expr><call><name><name>title</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>category_missing_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

		<decl_stmt><decl><type><name>Long</name></type> <name>id</name> <init>= <expr><ternary><condition><expr><call><name><name>category</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>category</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>category</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>category</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>title</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>category</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><call><name><name>description</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>selectedColor</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>category</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>category</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>selectedColor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Saved to DB and new id or update result catched</comment>
        <decl_stmt><decl><type><name>DbHelper</name></type> <name>db</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>category</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>updateCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Sets result to show proper message</comment>
        <expr_stmt><expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_CATEGORY</name></name></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>OnClick</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>delete</name></name></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>deleteCategory</name><parameter_list>()</parameter_list> <block>{

        <expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>delete_unused_category_confirmation</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>delete_category_confirmation</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveColorRes</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorAccent</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
                        <comment type="line">// Changes navigation if actually are shown notes associated with this category</comment>
                        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name>MODE_MULTI_PROCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>navNotes</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list_codes</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>navigation</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>, <argument><expr><name>navNotes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>, <argument><expr><name>navNotes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                        <comment type="line">// Removes category and edit notes associated with it</comment>
                        <decl_stmt><decl><type><name>DbHelper</name></type> <name>db</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>deleteCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CategoriesUpdatedEvent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>BaseActivity</name><operator>.</operator><name>notifyAppWidgets</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_FIRST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>goHome</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// In this case the caller activity is DetailActivity</comment>
        <if>if <condition>(<expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBooleanExtra</name><argument_list>(<argument><expr><literal type="string">"noHome"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>NavUtils</name><operator>.</operator><name>navigateUpFromSameTask</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_CANCELED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <try>try <block>{
            <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelableExtra</name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>EXTRA_OUTPUT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>bitmapFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>bitmapFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><name>bitmap</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
            <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name><name>Bitmap</name><operator>.</operator><name>CompressFormat</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>bitmapFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Intent</name></type> <name>localIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setData</name><argument_list>(<argument><expr><call><name><name>Uri</name>
                        <operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><name>bitmapFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>localIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_CANCELED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Bitmap not found"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\BaseActivity.java" hash="48bde7d5855be51a4756ce8a584824ac2ed6a913"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>appwidget</name><operator>.</operator><name>AppWidgetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentTransaction</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>LocalBroadcastManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewConfiguration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>LanguageHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>PasswordValidator</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Navigation</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>PasswordHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListWidgetProvider</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"Registered"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>BaseActivity</name> <super><extends>extends <name>ActionBarActivity</name></extends></super> <block>{

    <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TRANSITION_VERTICAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TRANSITION_HORIZONTAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>protected</specifier> <type><name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>navigation</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>navigationTmp</name></decl>;</decl_stmt> <comment type="line">// used for widget navigation</comment>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>menu_list</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>attachBaseContext</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>newBase</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Context</name></type> <name>context</name> <init>= <expr><call><name><name>LanguageHelper</name><operator>.</operator><name>updateLanguage</name></name><argument_list>(<argument><expr><name>newBase</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>attachBaseContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>prefs</name> <operator>=</operator> <call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name>MODE_MULTI_PROCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Forces menu overflow icon</comment>
        <try>try <block>{
            <decl_stmt><decl><type><name>ViewConfiguration</name></type> <name>config</name> <init>= <expr><call><name><name>ViewConfiguration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Field</name></type> <name>menuKeyField</name> <init>= <expr><call><name><name>ViewConfiguration</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"sHasPermanentMenuKey"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>menuKeyField</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>menuKeyField</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>menuKeyField</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Just a little issue in physical menu button management"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>navNotes</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list_codes</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>navigation</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>, <argument><expr><name>navNotes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getAll</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>protected</specifier> <type><name>void</name></type> <name>showToast</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_enable_info"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


	<comment type="block" format="javadoc">/**
	 * Method to validate security password to protect a list of notes.
	 * When "Request password on access" in switched on this check not required all the times.
	 * It uses an interface callback.
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>requestPassword</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>mActivity</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>,
								<parameter><decl><type><specifier>final</specifier> <name>PasswordValidator</name></type> <name>mPasswordValidator</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_password_access"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mPasswordValidator</name><operator>.</operator><name>onPasswordValidated</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name>boolean</name></type> <name>askForPassword</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><name>notes</name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>askForPassword</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
		<if>if <condition>(<expr><name>askForPassword</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name>mPasswordValidator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>mPasswordValidator</name><operator>.</operator><name>onPasswordValidated</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>


	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>updateNavigation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>nav</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>nav</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>navigationTmp</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>navigationTmp</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Navigation</name><operator>.</operator><name>getNavigationText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>nav</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>, <argument><expr><name>nav</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>navigation</name> <operator>=</operator> <name>nav</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>navigationTmp</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves resource by name
     *
     * @param aString
     * @returnnotifyAppWidgets
     */</comment>
    <function><specifier>private</specifier> <type><name>String</name></type> <name>getStringResourceByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>aString</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>packageName</name> <init>= <expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>resId</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentifier</name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getString</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Notifies App Widgets about data changes so they can update theirselves
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>notifyAppWidgets</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Home widgets</comment>
        <decl_stmt><decl><type><name>AppWidgetManager</name></type> <name>mgr</name> <init>= <expr><call><name><name>AppWidgetManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>ids</name> <init>= <expr><call><name><name>mgr</name><operator>.</operator><name>getAppWidgetIds</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ComponentName</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>ListWidgetProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Notifies AppWidget data changed for widgets "</literal> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>notifyAppWidgetViewDataChanged</name></name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Dashclock</comment>
        <expr_stmt><expr><call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sendBroadcast</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_UPDATE_DASHCLOCK</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"InlinedApi"</literal></expr></argument>)</argument_list></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>animateTransition</name><parameter_list>(<parameter><decl><type><name>FragmentTransaction</name></type> <name>transaction</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>TRANSITION_HORIZONTAL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>setCustomAnimations</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_in_support</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_out_support</name></name></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_in_support</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_out_support</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>TRANSITION_VERTICAL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>setCustomAnimations</name></name><argument_list>(
                    <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>anim_in</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>anim_out</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>anim_in_pop</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>anim_out_pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>protected</specifier> <type><name>void</name></type> <name>setActionBarTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Creating a spannable to support custom fonts on ActionBar</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>actionBarTitle</name> <init>= <expr><call><name><name>Resources</name><operator>.</operator><name>getSystem</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentifier</name><argument_list>(<argument><expr><literal type="string">"action_bar_title"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"android"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>actionBarTitleView</name> <init>= <expr><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name>actionBarTitle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Typeface</name></type> <name>font</name> <init>= <expr><call><name><name>Typeface</name><operator>.</operator><name>createFromAsset</name></name><argument_list>(<argument><expr><call><name>getAssets</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fonts/Roboto-Regular.ttf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>actionBarTitleView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>actionBarTitleView</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>String</name></type> <name>getNavigationTmp</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>navigationTmp</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onKeyDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyCode</name></decl></parameter>, <parameter><decl><type><name>KeyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>keyCode</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_MENU</name></name> <operator>||</operator> <call><name><name>super</name><operator>.</operator><name>onKeyDown</name></name><argument_list>(<argument><expr><name>keyCode</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\GalleryActivity.java" hash="1a5e6727c98656fa6887a3bcd18138e97bb8da62"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPager</name><operator>.</operator><name>OnPageChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnViewTouchedListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>InterceptorFrameLayout</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>StorageHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>simplegallery</name><operator>.</operator><name>models</name><operator>.</operator><name>GalleryPagerAdapter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>simplegallery</name><operator>.</operator><name>views</name><operator>.</operator><name>GalleryViewPager</name></name>;</import>


<comment type="block" format="javadoc">/**
 * An example full-screen activity that shows and hides the system UI (i.e. status bar and navigation/system bar) 
 * * with user interaction.
 */</comment>
<class><specifier>public</specifier> class <name>GalleryActivity</name> <super><extends>extends <name>ActionBarActivity</name></extends></super> <block>{

    <comment type="block" format="javadoc">/**
     * Whether or not the system UI should be auto-hidden after {@link #AUTO_HIDE_DELAY_MILLIS} milliseconds.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>AUTO_HIDE</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@link #AUTO_HIDE} is set, the number of milliseconds to wait after user interaction before hiding the 
     * * system UI.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>AUTO_HIDE_DELAY_MILLIS</name> <init>= <expr><literal type="number">3000</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If set, will toggle the system UI visibility upon interaction. Otherwise, will show the system UI visibility 
     * * upon interaction.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>TOGGLE_ON_CLICK</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gallery_root</name></name></expr></argument>)</argument_list></annotation> <type><name>InterceptorFrameLayout</name></type> <name>galleryRootView</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fullscreen_content</name></name></expr></argument>)</argument_list></annotation>  <type><name>GalleryViewPager</name></type> <name>mViewPager</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>images</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_gallery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>initViews</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackScreenView</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>menu_gallery</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>initViews</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Show the Up button in the action bar.</comment>
        <if>if <condition>(<expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayShowTitleEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>galleryRootView</name><operator>.</operator><name>setOnViewTouchedListener</name></name><argument_list>(<argument><expr><name>screenTouches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mViewPager</name><operator>.</operator><name>setOnPageChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnPageChangeListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onPageSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSubtitle</name><argument_list>(<argument><expr><literal type="string">"("</literal> <operator>+</operator> <operator>(</operator><name>arg0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>images</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>


            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrolled</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg2</name></decl></parameter>)</parameter_list> <block>{
            }</block></function>


            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrollStateChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Initializes data received from note detail screen
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initData</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringExtra</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>GALLERY_TITLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>images</name> <operator>=</operator> <call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelableArrayListExtra</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>GALLERY_IMAGES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>clickedImage</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntExtra</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>GALLERY_CLICKED_IMAGE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>imageUris</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>mAttachment</name> <range>: <expr><name>images</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>imageUris</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

		<decl_stmt><decl><type><name>GalleryPagerAdapter</name></type> <name>pagerAdapter</name> <init>= <expr><operator>new</operator> <call><name>GalleryPagerAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>imageUris</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mViewPager</name><operator>.</operator><name>setOffscreenPageLimit</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mViewPager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>pagerAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mViewPager</name><operator>.</operator><name>setCurrentItem</name></name><argument_list>(<argument><expr><name>clickedImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSubtitle</name><argument_list>(<argument><expr><literal type="string">"("</literal> <operator>+</operator> <operator>(</operator><name>clickedImage</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>images</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If selected attachment is a video it will be immediately played</comment>
        <if>if <condition>(<expr><call><name><name>images</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>clickedImage</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMime_type</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>viewMedia</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
                <expr_stmt><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_gallery_share</name></name></expr>:</case>
                <expr_stmt><expr><call><name>shareMedia</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_gallery</name></name></expr>:</case>
                <expr_stmt><expr><call><name>viewMedia</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></switch>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>viewMedia</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>images</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>mViewPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setDataAndType</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>StorageHelper</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>shareMedia</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>images</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>mViewPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SEND</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>StorageHelper</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <decl_stmt><decl><type><name>OnViewTouchedListener</name></type> <name>screenTouches</name> <init>= <expr><operator>new</operator> <class><super><name>OnViewTouchedListener</name></super><argument_list>()</argument_list> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MOVING_THRESHOLD</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>status_pressed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>


        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onViewTouchOccurred</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><operator>(</operator><call><name><name>ev</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>MotionEvent</name><operator>.</operator><name>ACTION_MASK</name></name><operator>)</operator> <operator>==</operator> <name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>ev</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>ev</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>status_pressed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><call><name><name>ev</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>MotionEvent</name><operator>.</operator><name>ACTION_MASK</name></name><operator>)</operator> <operator>==</operator> <name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <call><name><name>ev</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <call><name><name>ev</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>dxy</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>dx</name> <operator>*</operator> <name>dx</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Moved of "</literal> <operator>+</operator> <name>dxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>dxy</name> <operator>&gt;=</operator> <name>MOVING_THRESHOLD</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>status_pressed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><call><name><name>ev</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>MotionEvent</name><operator>.</operator><name>ACTION_MASK</name></name><operator>)</operator> <operator>==</operator> <name><name>MotionEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>status_pressed</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>click</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>status_pressed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>


        <function><specifier>private</specifier> <type><name>void</name></type> <name>click</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>images</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>mViewPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>viewMedia</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\MainActivity.java" hash="524f00545ae19e6bdebd76e852754f4a4b9fdf2b"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>DatePickerDialog</name><operator>.</operator><name>OnDateSetListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>TimePickerDialog</name><operator>.</operator><name>OnTimeSetListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ActivityInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentTransaction</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>GravityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarDrawerToggle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>DatePicker</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TimePicker</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Crouton</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>emory</name><operator>.</operator><name>mathcs</name><operator>.</operator><name>backport</name><operator>.</operator><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>UpdateWidgetsTask</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>UpdaterTask</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>PasswordRemovedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>SwitchFragmentEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name><operator>.</operator><name>NoteProcessorDelete</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>NotesHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>intro</name><operator>.</operator><name>IntroActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>ONStyle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>PasswordHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>SystemHelper</name></name>;</import>


<class><specifier>public</specifier> class <name>MainActivity</name> <super><extends>extends <name>BaseActivity</name></extends> <implements>implements <name>OnDateSetListener</name>, <name>OnTimeSetListener</name></implements></super> <block>{

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>crouton_handle</name></name></expr></argument>)</argument_list></annotation> <type><name>ViewGroup</name></type> <name>croutonViewContainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></annotation> <type><name>Toolbar</name></type> <name>toolbar</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawer_layout</name></name></expr></argument>)</argument_list></annotation> <type><name>DrawerLayout</name></type> <name>drawerLayout</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_DRAWER_TAG</name> <init>= <expr><literal type="string">"fragment_drawer"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_LIST_TAG</name> <init>= <expr><literal type="string">"fragment_list"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_DETAIL_TAG</name> <init>= <expr><literal type="string">"fragment_detail"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_SKETCH_TAG</name> <init>= <expr><literal type="string">"fragment_sketch"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isPasswordAccepted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>FragmentManager</name></type> <name>mFragmentManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><name>Uri</name></type> <name>sketchUri</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setTheme</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>OmniNotesTheme_ApiSpec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>initUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name><name>IntroActivity</name><operator>.</operator><name>mustRun</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>IntroActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

        <expr_stmt><expr><operator>new</operator> <call><name>UpdaterTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>isPasswordAccepted</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>checkPassword</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unregister</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>initUI</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setHomeButtonEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


	<comment type="block" format="javadoc">/**
	 * This method starts the bootstrap chain.
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>checkPassword</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
				<operator>&amp;&amp;</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_password_access"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
                <switch>switch <condition>(<expr><name>passwordConfirmed</name></expr>)</condition> <block>{
                    <case>case <expr><name>SUCCEED</name></expr>:</case>
                        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>FAIL</name></expr>:</case>
                        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>RESTORE</name></expr>:</case>
                        <expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>resetPassword</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></switch>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>PasswordRemovedEvent</name></type> <name>passwordRemovedEvent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>password_successfully_removed</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>isPasswordAccepted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>NavigationDrawerFragment</name></type> <name>mNavigationDrawerFragment</name> <init>= <expr><operator>(</operator><name>NavigationDrawerFragment</name><operator>)</operator> <call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>findFragmentById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_drawer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mNavigationDrawerFragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>fragmentTransaction</name> <init>= <expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fragmentTransaction</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_drawer</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NavigationDrawerFragment</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>FRAGMENT_DRAWER_TAG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name>FRAGMENT_LIST_TAG</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>fragmentTransaction</name> <init>= <expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fragmentTransaction</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ListFragment</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FRAGMENT_LIST_TAG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>handleIntents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

	<function><specifier>private</specifier> <type><name>FragmentManager</name></type> <name>getFragmentManagerInstance</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>mFragmentManager</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>mFragmentManager</name> <operator>=</operator> <call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>mFragmentManager</name></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onNewIntent</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_START_APP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onNewIntent</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setIntent</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>handleIntents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"onNewIntent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>MenuItem</name></type> <name>getSearchMenuItem</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Fragment</name></type> <name>f</name> <init>= <expr><call><name>checkFragmentInstance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name><name>ListFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><operator>(</operator><operator>(</operator><name>ListFragment</name><operator>)</operator> <name>f</name><operator>)</operator><operator>.</operator><call><name>getSearchMenuItem</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>editTag</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Fragment</name></type> <name>f</name> <init>= <expr><call><name>checkFragmentInstance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name><name>ListFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ListFragment</name><operator>)</operator> <name>f</name><operator>)</operator><operator>.</operator><call><name>editCategory</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>initNotesList</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Fragment</name></type> <name>f</name> <init>= <expr><call><name>checkFragmentInstance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name><name>ListFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ListFragment</name><operator>)</operator> <name>f</name><operator>)</operator><operator>.</operator><call><name>toggleSearchLabel</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ListFragment</name><operator>)</operator> <name>f</name><operator>)</operator><operator>.</operator><call><name>initNotesList</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>commitPending</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Fragment</name></type> <name>f</name> <init>= <expr><call><name>checkFragmentInstance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name><name>ListFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ListFragment</name><operator>)</operator> <name>f</name><operator>)</operator><operator>.</operator><call><name>commitPending</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Checks if allocated fragment is of the required type and then returns it or returns null
     */</comment>
    <function><specifier>private</specifier> <type><name>Fragment</name></type> <name>checkFragmentInstance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instanceClass</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Fragment</name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Fragment</name></type> <name>fragment</name> <init>= <expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentById</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>fragment</name><operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>instanceClass</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>fragment</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>fragment</name></expr>;</expr_stmt>
		}</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>


    <comment type="block">/*
     * (non-Javadoc)
     * @see android.support.v7.app.ActionBarActivity#onBackPressed()
     *
     * Overrides the onBackPressed behavior for the attached fragments
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{

        <comment type="line">// SketchFragment</comment>
		<decl_stmt><decl><type><name>Fragment</name></type> <name>f</name> <init>= <expr><call><name>checkFragmentInstance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name><name>SketchFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SketchFragment</name><operator>)</operator> <name>f</name><operator>)</operator><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Removes forced portrait orientation for this fragment</comment>
            <expr_stmt><expr><call><name>setRequestedOrientation</name><argument_list>(
                    <argument><expr><name><name>ActivityInfo</name><operator>.</operator><name>SCREEN_ORIENTATION_UNSPECIFIED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>popBackStack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// DetailFragment</comment>
        <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>checkFragmentInstance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name><name>DetailFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>DetailFragment</name><operator>)</operator> <name>f</name><operator>)</operator><operator>.</operator><name>goBack</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>DetailFragment</name><operator>)</operator> <name>f</name><operator>)</operator><operator>.</operator><call><name>saveAndExit</name><argument_list>(<argument><expr><operator>(</operator><name>DetailFragment</name><operator>)</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// ListFragment</comment>
        <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>checkFragmentInstance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name><name>ListFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <comment type="line">// Before exiting from app the navigation drawer is opened</comment>
            <if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_navdrawer_on_exit"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getDrawerLayout</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> 
                    <operator>!</operator><call><name>getDrawerLayout</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDrawerOpen</name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getDrawerLayout</name><argument_list>()</argument_list></call><operator>.</operator><call><name>openDrawer</name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_navdrawer_on_exit"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getDrawerLayout</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> 
                    <call><name>getDrawerLayout</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDrawerOpen</name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getDrawerLayout</name><argument_list>()</argument_list></call><operator>.</operator><call><name>closeDrawer</name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ListFragment</name><operator>)</operator><name>f</name><operator>)</operator><operator>.</operator><call><name>closeFab</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>isPasswordAccepted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><literal type="string">"navigationTmp"</literal></expr></argument>, <argument><expr><name>navigationTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Crouton</name><operator>.</operator><name>cancelAllCroutons</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>DrawerLayout</name></type> <name>getDrawerLayout</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>drawerLayout</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>ActionBarDrawerToggle</name></type> <name>getDrawerToggle</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_drawer</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><operator>(</operator><operator>(</operator><name>NavigationDrawerFragment</name><operator>)</operator> <call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_drawer</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><name>mDrawerToggle</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Finishes multiselection mode started by ListFragment
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>finishActionMode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ListFragment</name></type> <name>fragment</name> <init>= <expr><operator>(</operator><name>ListFragment</name><operator>)</operator> <call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name>FRAGMENT_LIST_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fragment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>finishActionMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><type><name>Toolbar</name></type> <name>getToolbar</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>toolbar</name></name></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleIntents</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

        <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>ACTION_RESTART_APP</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>SystemHelper</name><operator>.</operator><name>restartApp</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>receivedIntent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>note</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>note</name> <operator>=</operator> <call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNote</name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_KEY</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// Checks if the same note is already opened to avoid to open again</comment>
            <if>if <condition>(<expr><name>note</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>noteAlreadyOpened</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <comment type="line">// Empty note instantiation</comment>
            <if>if <condition>(<expr><name>note</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>note</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>switchToDetail</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>ACTION_SEND_AND_EXIT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>saveAndExit</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// Tag search</comment>
        <if>if <condition>(<expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>switchToList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// Home launcher shortcut widget</comment>
        <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>ACTION_SHORTCUT_WIDGET</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>switchToDetail</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Used to perform a quick text-only note saving (eg. Tasker+Pushbullet)
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>saveAndExit</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SUBJECT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_TEXT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showToast</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_updated</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>receivedIntent</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Constants</name><operator>.</operator><name>ACTION_SHORTCUT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>ACTION_NOTIFICATION_CLICK</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET_TAKE_PHOTO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>||</operator> <operator>(</operator><operator>(</operator><call><name><name>Intent</name><operator>.</operator><name>ACTION_SEND</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>Intent</name><operator>.</operator><name>ACTION_SEND_MULTIPLE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>INTENT_GOOGLE_NOW</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>&amp;&amp;</operator> <call><name><name>i</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator>
                <operator>||</operator> <call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_NOTIFICATION_CLICK</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>noteAlreadyOpened</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DetailFragment</name></type> <name>detailFragment</name> <init>= <expr><operator>(</operator><name>DetailFragment</name><operator>)</operator> <call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name>FRAGMENT_DETAIL_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>detailFragment</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>NotesHelper</name><operator>.</operator><name>haveSameId</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><call><name><name>detailFragment</name><operator>.</operator><name>getCurrentNote</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>switchToList</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>transaction</name> <init>= <expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>animateTransition</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name>TRANSITION_HORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ListFragment</name></type> <name>mListFragment</name> <init>= <expr><operator>new</operator> <call><name>ListFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name>mListFragment</name></expr></argument>, <argument><expr><name>FRAGMENT_LIST_TAG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addToBackStack</name>
                <argument_list>(<argument><expr><name>FRAGMENT_DETAIL_TAG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commitAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getDrawerToggle</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getDrawerToggle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDrawerIndicatorEnabled</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
		<expr_stmt><expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFragments</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SwitchFragmentEvent</name><argument_list>(<argument><expr><name><name>SwitchFragmentEvent</name><operator>.</operator><name>Direction</name><operator>.</operator><name>PARENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>switchToDetail</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>transaction</name> <init>= <expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>animateTransition</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name>TRANSITION_HORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DetailFragment</name></type> <name>mDetailFragment</name> <init>= <expr><operator>new</operator> <call><name>DetailFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Bundle</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mDetailFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name>FRAGMENT_DETAIL_TAG</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name>mDetailFragment</name></expr></argument>, <argument><expr><name>FRAGMENT_DETAIL_TAG</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>addToBackStack</name><argument_list>(<argument><expr><name>FRAGMENT_LIST_TAG</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>commitAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>popBackStackImmediate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name>mDetailFragment</name></expr></argument>, <argument><expr><name>FRAGMENT_DETAIL_TAG</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>addToBackStack</name><argument_list>(<argument><expr><name>FRAGMENT_DETAIL_TAG</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>commitAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Notes sharing
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>shareNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>titleText</name> <init>= <expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>contentText</name> <init>= <expr><name>titleText</name>
                <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call>
                <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><name>Intent</name></type> <name>shareIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Prepare sharing intent with only text</comment>
        <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SEND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Intent with single image attachment</comment>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SEND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMime_type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Intent with multiple images</comment>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SEND_MULTIPLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>uris</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// A check to decide the mime type of attachments to share is done here</comment>
            <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>mimeTypes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>uris</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mimeTypes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <comment type="line">// If many mime types are present a general type is assigned to intent</comment>
            <if>if <condition>(<expr><call><name><name>mimeTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"*/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>mimeTypes</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>putParcelableArrayListExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>, <argument><expr><name>uris</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SUBJECT</name></name></expr></argument>, <argument><expr><name>titleText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_TEXT</name></name></expr></argument>, <argument><expr><name>contentText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><call><name><name>Intent</name><operator>.</operator><name>createChooser</name></name><argument_list>(<argument><expr><name>shareIntent</name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>share_message_chooser</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Single note permanent deletion
     *
     * @param note Note to be deleted
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>deleteNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name>NoteProcessorDelete</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Note</name><index>[]</index></name><block>{<expr><name>note</name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>process</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>BaseActivity</name><operator>.</operator><name>notifyAppWidgets</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Deleted permanently note with id '"</literal> <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateWidgets</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name>UpdateWidgetsTask</name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>showMessage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>Style</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>showMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Style</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// ViewGroup used to show Crouton keeping compatibility with the new Toolbar</comment>
		<expr_stmt><expr><call><name>runOnUiThread</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Crouton</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>croutonViewContainer</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTimeSet</name><parameter_list>(<parameter><decl><type><name>TimePicker</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hourOfDay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minute</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DetailFragment</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>DetailFragment</name><operator>)</operator> <call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name>FRAGMENT_DETAIL_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>f</name><operator>.</operator><name>isAdded</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>onTimeSetListener</name><operator>.</operator><name>onTimeSet</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>hourOfDay</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDateSet</name><parameter_list>(<parameter><decl><type><name>DatePicker</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>monthOfYear</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>dayOfMonth</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DetailFragment</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>DetailFragment</name><operator>)</operator> <call><name>getFragmentManagerInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name>FRAGMENT_DETAIL_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>f</name><operator>.</operator><name>isAdded</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>f</name><operator>.</operator><name>onDateSetListener</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>onDateSetListener</name><operator>.</operator><name>onDateSet</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>monthOfYear</name></expr></argument>, <argument><expr><name>dayOfMonth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\NoteInfosActivity.java" hash="975bc9f774155065794eb21f1941d46313a8ceaf"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>NotesHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>StatsSingleNote</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>


<class><specifier>public</specifier> class <name>NoteInfosActivity</name> <super><extends>extends <name>Activity</name></extends></super> <block>{

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_category</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>category</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_tags</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>tags</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_chars</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>chars</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_words</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>words</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_checklist_items</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>checklistItems</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_completed_checklist_items</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>checklistCompletedItems</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_images</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>images</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_videos</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>videos</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_audiorecordings</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>audioRecordings</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_sketches</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>sketches</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_infos_files</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>files</name></decl>;</decl_stmt>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_note_infos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><call><name><name>Objects</name><operator>.</operator><name>requireNonNull</name></name><argument_list>(<argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getExtras</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>populateViews</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>populateViews</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>StatsSingleNote</name></type> <name>infos</name> <init>= <expr><call><name><name>NotesHelper</name><operator>.</operator><name>getNoteInfos</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getCategoryName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getChars</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>words</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getWords</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>checklistItems</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getChecklistItemsNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>checklistCompletedItems</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getChecklistCompletedItemsNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>images</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getImages</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>videos</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getVideos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>audioRecordings</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getAudioRecordings</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>sketches</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getSketches</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>populateView</name><parameter_list>(<parameter><decl><type><name>TextView</name></type> <name>textView</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numberValue</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>stringValue</name> <init>= <expr><ternary><condition><expr><name>numberValue</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>numberValue</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>textView</name></expr></argument>, <argument><expr><name>stringValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>populateView</name><parameter_list>(<parameter><decl><type><name>TextView</name></type> <name>textView</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>View</name><operator>)</operator> <call><name><name>textView</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\NavigationDrawerFragment.java" hash="f7a4c8b6677f0d84bc4fe46c724c0e0975fdc64d"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>ValueAnimator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>GravityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarDrawerToggle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>DecelerateInterpolator</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>CategoryMenuTask</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>MainMenuTask</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>NavigationItem</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Display</name></name>;</import>


<class><specifier>public</specifier> class <name>NavigationDrawerFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BURGER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ARROW</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ActionBarDrawerToggle</name></type> <name>mDrawerToggle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DrawerLayout</name></type> <name>mDrawerLayout</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MainActivity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>alreadyInitialized</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRetainInstance</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unregister</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_navigation_drawer</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mActivity</name> <operator>=</operator> <operator>(</operator><name>MainActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>MainActivity</name></type> <name>getMainActivity</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name>MainActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEventMainThread</name><parameter_list>(<parameter><decl><type><name>DynamicNavigationReadyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>alreadyInitialized</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>alreadyInitialized</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>refreshMenus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>CategoriesUpdatedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>refreshMenus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEventAsync</name><parameter_list>(<parameter><decl><type><name>NotesUpdatedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>alreadyInitialized</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>NotesLoadedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerLayout</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><operator>!</operator><call><name>isDoublePanelActive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>setDrawerLockMode</name></name><argument_list>(<argument><expr><name><name>DrawerLayout</name><operator>.</operator><name>LOCK_MODE_UNLOCKED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
        <if>if <condition>(<expr><call><name>getMainActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBackStackEntryCount</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>refreshMenus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>alreadyInitialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>SwitchFragmentEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>direction</name></name></expr>)</condition> <block>{
            <case>case <expr><name>CHILDREN</name></expr>:</case>
                <expr_stmt><expr><call><name>animateBurger</name><argument_list>(<argument><expr><name>ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>animateBurger</name><argument_list>(<argument><expr><name>BURGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></switch>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>NavigationUpdatedEvent</name></type> <name>navigationUpdatedEvent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>navigationUpdatedEvent</name><operator>.</operator><name>navigationItem</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAssignableFrom</name><argument_list>(<argument><expr><name><name>NavigationItem</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>getSupportActionBar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>NavigationItem</name><operator>)</operator> <name><name>navigationUpdatedEvent</name><operator>.</operator><name>navigationItem</name></name><operator>)</operator><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>getSupportActionBar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Category</name><operator>)</operator> <name><name>navigationUpdatedEvent</name><operator>.</operator><name>navigationItem</name></name><operator>)</operator><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>mDrawerLayout</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><operator>!</operator><call><name>isDoublePanelActive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>closeDrawer</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
            <expr_stmt><expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>postDelayed</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NavigationUpdatedNavDrawerClosedEvent</name>
                    <argument_list>(<argument><expr><name><name>navigationUpdatedEvent</name><operator>.</operator><name>navigationItem</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Started navigation drawer initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mDrawerLayout</name> <operator>=</operator> <operator>(</operator><name>DrawerLayout</name><operator>)</operator> <call><name><name>mActivity</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawer_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>setFocusableInTouchMode</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Setting specific bottom margin for Kitkat with translucent nav bar</comment>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>leftDrawer</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>left_drawer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>leftDrawerBottomPadding</name> <init>= <expr><call><name><name>Display</name><operator>.</operator><name>getNavigationBarHeightKitkat</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>leftDrawer</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><call><name><name>leftDrawer</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>leftDrawer</name><operator>.</operator><name>getPaddingTop</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>leftDrawer</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>leftDrawerBottomPadding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// ActionBarDrawerToggleÂ± ties together the the proper interactions</comment>
        <comment type="line">// between the sliding drawer and the action bar app icon</comment>
        <expr_stmt><expr><name>mDrawerToggle</name> <operator>=</operator> <operator>new</operator> <class><super><name>ActionBarDrawerToggle</name></super><argument_list>(<argument><expr><name>mActivity</name></expr></argument>,
                <argument><expr><name>mDrawerLayout</name></expr></argument>,
                <argument><expr><call><name>getMainActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToolbar</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>drawer_open</name></name></expr></argument>,
                <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>drawer_close</name></name></expr></argument>
        )</argument_list> <block>{
            <function><specifier>public</specifier> <type><name>void</name></type> <name>onDrawerClosed</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>supportInvalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>


            <function><specifier>public</specifier> <type><name>void</name></type> <name>onDrawerOpened</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>drawerView</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>commitPending</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>finishActionMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isDoublePanelActive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>setDrawerLockMode</name></name><argument_list>(<argument><expr><name><name>DrawerLayout</name><operator>.</operator><name>LOCK_MODE_LOCKED_OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Styling options</comment>
        <expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>setDrawerShadow</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>drawer_shadow</name></name></expr></argument>, <argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>setDrawerListener</name></name><argument_list>(<argument><expr><name>mDrawerToggle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mDrawerToggle</name><operator>.</operator><name>setDrawerIndicatorEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Finished navigation drawer initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>refreshMenus</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>buildMainMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Finished main menu initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>buildCategoriesMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Finished categories menu initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mDrawerToggle</name><operator>.</operator><name>syncState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>buildCategoriesMenu</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>CategoryMenuTask</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>CategoryMenuTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>executeOnExecutor</name></name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>buildMainMenu</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>MainMenuTask</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>MainMenuTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>executeOnExecutor</name></name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><name>void</name></type> <name>animateBurger</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>targetShape</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerToggle</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>targetShape</name> <operator>!=</operator> <name>BURGER</name> <operator>&amp;&amp;</operator> <name>targetShape</name> <operator>!=</operator> <name>ARROW</name></expr>)</condition><then>
                <block type="pseudo"><return>return;</return></block></then></if>
            <decl_stmt><decl><type><name>ValueAnimator</name></type> <name>anim</name> <init>= <expr><call><name><name>ValueAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><operator>(</operator><name>targetShape</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>targetShape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>addUpdateListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>valueAnimator</name></decl></parameter></parameter_list> -&gt; <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>slideOffset</name> <init>= <expr><operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>valueAnimator</name><operator>.</operator><name>getAnimatedValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mDrawerToggle</name><operator>.</operator><name>onDrawerSlide</name></name><argument_list>(<argument><expr><name>mDrawerLayout</name></expr></argument>, <argument><expr><name>slideOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecelerateInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDoublePanelActive</name><parameter_list>()</parameter_list> <block>{
<comment type="line">//		Resources resources = OmniNotes.getAppContext().getResources();</comment>
<comment type="line">//		return resources.getDimension(R.dimen.navigation_drawer_width) == resources.getDimension(R.dimen</comment>
<comment type="line">//				.navigation_drawer_reserved_space);</comment>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\OmniNotes.java" hash="0f884374b955dfe9ef3cc6d4e140fec7b25067c2"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>StrictMode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>multidex</name><operator>.</operator><name>MultiDexApplication</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>leakcanary</name><operator>.</operator><name>LeakCanary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>leakcanary</name><operator>.</operator><name>RefWatcher</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>analitica</name><operator>.</operator><name>AnalyticsHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>analitica</name><operator>.</operator><name>AnalyticsHelperFactory</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>analitica</name><operator>.</operator><name>MockAnalyticsHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>analitica</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>AnalyticsInstantiationException</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>analitica</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidIdentifierException</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>LanguageHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>acra</name><operator>.</operator><name>ACRA</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>acra</name><operator>.</operator><name>ReportingInteractionMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>acra</name><operator>.</operator><name>annotation</name><operator>.</operator><name>ReportsCrashes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>acra</name><operator>.</operator><name>sender</name><operator>.</operator><name>HttpSender</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>acra</name><operator>.</operator><name>sender</name><operator>.</operator><name>HttpSender</name><operator>.</operator><name>Type</name></name>;</import>


<class><annotation>@<name>ReportsCrashes</name><argument_list>(<argument><expr><name>httpMethod</name> <operator>=</operator> <name><name>Method</name><operator>.</operator><name>POST</name></name></expr></argument>, <argument><expr><name>reportType</name> <operator>=</operator> <name><name>Type</name><operator>.</operator><name>FORM</name></name></expr></argument>, <argument><expr><name>formUri</name> <operator>=</operator> <name><name>BuildConfig</name><operator>.</operator><name>CRASH_REPORTING_URL</name></name></expr></argument>, <argument><expr><name>mode</name> <operator>=</operator>
		<name><name>ReportingInteractionMode</name><operator>.</operator><name>TOAST</name></name></expr></argument>, <argument><expr><name>forceCloseDialogAfterToast</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>, <argument><expr><name>resToastText</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>crash_toast</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>OmniNotes</name> <super><extends>extends <name>MultiDexApplication</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>static</specifier> <type><name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>RefWatcher</name></type> <name>refWatcher</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>AnalyticsHelper</name></type> <name>analyticsHelper</name></decl>;</decl_stmt>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mContext</name> <operator>=</operator> <call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prefs</name> <operator>=</operator> <call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name>MODE_MULTI_PROCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name>isDebugBuild</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>StrictMode</name><operator>.</operator><name>enableDefaults</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name>initAcra</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initLeakCanary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>initLeakCanary</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name><name>LeakCanary</name><operator>.</operator><name>isInAnalyzerProcess</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>refWatcher</name> <operator>=</operator> <call><name><name>LeakCanary</name><operator>.</operator><name>install</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>initAcra</name><parameter_list>(<parameter><decl><type><name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
			<function><annotation>@<name>Override</name></annotation>
			<specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>ACRA</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>ACRA</name><operator>.</operator><name>getErrorReporter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putCustomData</name><argument_list>(<argument><expr><literal type="string">"TRACEPOT_DEVELOP_MODE"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>isDebugBuild</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="null">null</literal></expr>;</return>
			}</block></function>
		}</block></class><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>NonNull</name></annotation>
	<specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDebugBuild</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>BuildConfig</name><operator>.</operator><name>BUILD_TYPE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onConfigurationChanged</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>newConfig</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onConfigurationChanged</name></name><argument_list>(<argument><expr><name>newConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>language</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_LANG</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>LanguageHelper</name><operator>.</operator><name>updateLanguage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Context</name></type> <name>getAppContext</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>OmniNotes</name><operator>.</operator><name>mContext</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>RefWatcher</name></type> <name>getRefWatcher</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>OmniNotes</name><operator>.</operator><name>refWatcher</name></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Statically returns app's default SharedPreferences instance
	 *
	 * @return SharedPreferences object instance
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>SharedPreferences</name></type> <name>getSharedPreferences</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>getAppContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name>MODE_MULTI_PROCESS</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>AnalyticsHelper</name></type> <name>getAnalyticsHelper</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>analyticsHelper</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>boolean</name></type> <name>enableAnalytics</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_SEND_ANALYTICS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>analyticsParams</name> <init>= <expr><call><name><name>BuildConfig</name><operator>.</operator><name>ANALYTICS_PARAMS</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PROPERTIES_PARAMS_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>analyticsHelper</name> <operator>=</operator> <operator>new</operator> <call><name>AnalyticsHelperFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>enableAnalytics</name></expr></argument>,
						<argument><expr><name>analyticsParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AnalyticsInstantiationException</name></type> | <type><name>InvalidIdentifierException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><name>analyticsHelper</name> <operator>=</operator> <operator>new</operator> <call><name>MockAnalyticsHelper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>
		<return>return <expr><name>analyticsHelper</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\PasswordActivity.java" hash="c5b68fee358667234d0abea67d44b0fe84cf97a5"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>MaterialDialog</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Crouton</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>LifecycleCallback</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>PasswordRemovedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>ONStyle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>PasswordValidator</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>PasswordHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Security</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>android</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>AndroidSchedulers</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>


<class><specifier>public</specifier> class <name>PasswordActivity</name> <super><extends>extends <name>BaseActivity</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type> <name>crouton_handle</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>passwordCheck</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>password</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>question</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>answer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>answerCheck</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>PasswordActivity</name></type> <name>mActivity</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>metrics</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>screenWidth</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name><name>metrics</name><operator>.</operator><name>widthPixels</name></name> <operator>*</operator> <literal type="number">0.80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>screenHeight</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name><name>metrics</name><operator>.</operator><name>heightPixels</name></name> <operator>*</operator> <literal type="number">0.80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayout</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mActivity</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setActionBarTitle</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>title_activity_password</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initViews</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>initViews</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>crouton_handle</name> <operator>=</operator> <operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>crouton_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>password</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>passwordCheck</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password_check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>question</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>question</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>answer</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>answer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>answerCheck</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>answer_check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password_remove</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOnClickListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
					<if>if <condition>(<expr><call><name><name>passwordConfirmed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>updatePassword</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>Crouton</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>password_not_set</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>, <argument><expr><name>crouton_handle</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password_confirm</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOnClickListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<if>if <condition>(<expr><call><name>checkData</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>passwordText</name> <init>= <expr><call><name><name>password</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>questionText</name> <init>= <expr><call><name><name>question</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>answerText</name> <init>= <expr><call><name><name>answer</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
						<if>if <condition>(<expr><call><name><name>passwordConfirmed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><call><name>updatePassword</name><argument_list>(<argument><expr><name>passwordText</name></expr></argument>, <argument><expr><name>questionText</name></expr></argument>, <argument><expr><name>answerText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name>updatePassword</name><argument_list>(<argument><expr><name>passwordText</name></expr></argument>, <argument><expr><name>questionText</name></expr></argument>, <argument><expr><name>answerText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password_forgotten</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOnClickListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>Crouton</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>password_not_set</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>, <argument><expr><name>crouton_handle</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
			<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>resetPassword</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>



	<function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>PasswordRemovedEvent</name></type> <name>passwordRemovedEvent</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>passwordCheck</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>answer</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>answerCheck</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Crouton</name></type> <name>crouton</name> <init>= <expr><call><name><name>Crouton</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>password_successfully_removed</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name>
							<operator>.</operator><name>ALERT</name></name></expr></argument>,
					<argument><expr><name>crouton_handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>crouton</name><operator>.</operator><name>setLifecycleCallback</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>LifecycleCallback</name></super><argument_list>()</argument_list> <block>{
				<function><annotation>@<name>Override</name></annotation>
				<specifier>public</specifier> <type><name>void</name></type> <name>onDisplayed</name><parameter_list>()</parameter_list> <block>{
					<comment type="line">// Does nothing!</comment>
				}</block></function>


				<function><annotation>@<name>Override</name></annotation>
				<specifier>public</specifier> <type><name>void</name></type> <name>onRemoved</name><parameter_list>()</parameter_list> <block>{
					<expr_stmt><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>crouton</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"CommitPrefEdits"</literal></expr></argument>)</argument_list></annotation>
	<specifier>private</specifier> <type><name>void</name></type> <name>updatePassword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>passwordText</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>questionText</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>answerText</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>passwordText</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>Crouton</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>password_not_set</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>, <argument><expr><name>crouton_handle</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
			<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>agree_unlocking_all_notes</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
						<function><annotation>@<name>Override</name></annotation>
						<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{
							<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>removePassword</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						}</block></function>
					}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>passwordText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>Crouton</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>empty_password</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>, <argument><expr><name>crouton_handle</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif> <else>else <block>{
			<expr_stmt><expr><call><name><name>Observable</name>
					<operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotesWithLock</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>subscribeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>newThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>doOnSubscribe</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call>
							<operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><call><name><name>Security</name><operator>.</operator><name>md5</name></name><argument_list>(<argument><expr><name>passwordText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD_QUESTION</name></name></expr></argument>, <argument><expr><name>questionText</name></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD_ANSWER</name></name></expr></argument>, <argument><expr><call><name><name>Security</name><operator>.</operator><name>md5</name></name><argument_list>(<argument><expr><name>answerText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>doOnNext</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>note</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>doOnCompleted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
						<expr><name>Crouton</name> <name>crouton</name> <operator>=</operator> <call><name><name>Crouton</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>password_successfully_changed</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name>
										<operator>.</operator><name>CONFIRM</name></name></expr></argument>, <argument><expr><name>crouton_handle</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
						<expr_stmt><expr><call><name><name>crouton</name><operator>.</operator><name>setLifecycleCallback</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>LifecycleCallback</name></super><argument_list>()</argument_list> <block>{
							<function><annotation>@<name>Override</name></annotation>
							<specifier>public</specifier> <type><name>void</name></type> <name>onDisplayed</name><parameter_list>()</parameter_list> <block>{
								<comment type="line">// Does nothing!</comment>
							}</block></function>


							<function><annotation>@<name>Override</name></annotation>
							<specifier>public</specifier> <type><name>void</name></type> <name>onRemoved</name><parameter_list>()</parameter_list> <block>{
								<expr_stmt><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
							}</block></function>
						}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>crouton</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>)</block>
					.subscribe<parameter_list>()</parameter_list>;</function>
		}</block></class>
	}


    <comment type="block" format="javadoc">/**
     * Checks correctness of form data
     *
     * @return
     */</comment>
    private <function><type><name>boolean</name></type> <name>checkData</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>password</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>passwordCheck</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>passwordCheck</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>passwordOk</name> <init>= <expr><call><name><name>password</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>passwordCheckOk</name> <init>= <expr><call><name><name>passwordCheck</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>password</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>passwordCheck</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>questionOk</name> <init>= <expr><call><name><name>question</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>answerOk</name> <init>= <expr><call><name><name>answer</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>answerCheckOk</name> <init>= <expr><call><name><name>answerCheck</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>answer</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name>
                <argument_list>(<argument><expr><call><name><name>answerCheck</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><name>passwordOk</name> <operator>||</operator> <operator>!</operator><name>passwordCheckOk</name> <operator>||</operator> <operator>!</operator><name>questionOk</name> <operator>||</operator> <operator>!</operator><name>answerOk</name> <operator>||</operator> <operator>!</operator><name>answerCheckOk</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>passwordOk</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_password_not_matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>!</operator><name>passwordCheckOk</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>passwordCheck</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_password_not_matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>!</operator><name>questionOk</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>question</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_password_question</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>!</operator><name>answerOk</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>answer</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_answer_not_matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>!</operator><name>answerCheckOk</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>answerCheck</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_answer_not_matching</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\SettingsActivity.java" hash="6cb31155c2edd57ece10b9d96e1694016eefd20f"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Crouton</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Style</name></name>;</import>


<class><specifier>public</specifier> class <name>SettingsActivity</name> <super><extends>extends <name>ActionBarActivity</name></extends></super> <block>{

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></annotation> <type><name>Toolbar</name></type> <name>toolbar</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>crouton_handle</name></name></expr></argument>)</argument_list></annotation> <type><name>ViewGroup</name></type> <name>croutonViewContainer</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name></type> <name>backStack</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content_frame</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SettingsFragment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><name>void</name></type> <name>initUI</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setNavigationOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setHomeButtonEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><name>void</name></type> <name>switchToScreen</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SettingsFragment</name></type> <name>sf</name> <init>= <expr><operator>new</operator> <call><name>SettingsFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Bundle</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>SettingsFragment</name><operator>.</operator><name>XML_NAME</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sf</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>backStack</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content_frame</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>replaceFragment</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>replaceFragment</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>sf</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCustomAnimations</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_in</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_out</name></name></expr></argument>,
                <argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_in</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_out</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content_frame</name></name></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>backStack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>replaceFragment</name><argument_list>(<argument><expr><call><name><name>backStack</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>backStack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>showMessage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>Style</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>showMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Style</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// ViewGroup used to show Crouton keeping compatibility with the new Toolbar</comment>
		<expr_stmt><expr><call><name><name>Crouton</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>croutonViewContainer</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\ShortcutActivity.java" hash="02d89274d8fecf5328a3010d29a77f967a92038e"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>ShortcutActivity</name> <super><extends>extends <name>Activity</name></extends></super> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Intent</name></type> <name>shortcutIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>shortcutIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_SHORTCUT_WIDGET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Intent</name><operator>.</operator><name>ShortcutIconResource</name></name></type> <name>iconResource</name> <init>= <expr><call><name><name>Intent</name><operator>.</operator><name>ShortcutIconResource</name><operator>.</operator><name>fromContext</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name>
				<operator>.</operator><name>shortcut_icon</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SHORTCUT_INTENT</name></name></expr></argument>, <argument><expr><name>shortcutIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SHORTCUT_NAME</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>add_note</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SHORTCUT_ICON_RESOURCE</name></name></expr></argument>, <argument><expr><name>iconResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\SketchFragment.java" hash="a592d220a51c64dd3a1302adf91e720e87860e2b"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name><operator>.</operator><name>LayoutParams</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>PopupWindow</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>SeekBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>SeekBar</name><operator>.</operator><name>OnSeekBarChangeListener</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>MaterialDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>larswerkman</name><operator>.</operator><name>holocolorpicker</name><operator>.</operator><name>ColorPicker</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>larswerkman</name><operator>.</operator><name>holocolorpicker</name><operator>.</operator><name>OpacityBar</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>larswerkman</name><operator>.</operator><name>holocolorpicker</name><operator>.</operator><name>SVBar</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>utils</name><operator>.</operator><name>AlphaManager</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>ONStyle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnDrawChangedListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>SketchView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>SketchFragment</name> <super><extends>extends <name>Fragment</name></extends> <implements>implements <name>OnDrawChangedListener</name></implements></super> <block>{

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sketch_stroke</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>stroke</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sketch_eraser</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>eraser</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawing</name></name></expr></argument>)</argument_list></annotation> <type><name>SketchView</name></type> <name>mSketchView</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sketch_undo</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>undo</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sketch_redo</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>redo</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sketch_erase</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>erase</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>seekBarStrokeProgress</name></decl>, <decl><type ref="prev"/><name>seekBarEraserProgress</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>popupLayout</name></decl>, <decl><type ref="prev"/><name>popupEraserLayout</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ImageView</name></type> <name>strokeImageView</name></decl>, <decl><type ref="prev"/><name>eraserImageView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ColorPicker</name></type> <name>mColorPicker</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>oldColor</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRetainInstance</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackScreenView</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_sketch</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getMainActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToolbar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setNavigationOnClickListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mSketchView</name><operator>.</operator><name>setOnDrawChangedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Uri</name></type> <name>baseUri</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><literal type="string">"base"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>baseUri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Bitmap</name></type> <name>bmp</name></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>decodeStream</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContentResolver</name><argument_list>()</argument_list></call><operator>.</operator><call><name>openInputStream</name><argument_list>(<argument><expr><name>baseUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mSketchView</name><operator>.</operator><name>setBackgroundBitmap</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error replacing sketch bitmap background"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>

        <comment type="line">// Show the Up button in the action bar.</comment>
        <if>if <condition>(<expr><call><name>getMainActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportActionBar</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getMainActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayShowTitleEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getMainActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>title_activity_sketch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getMainActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>stroke</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><call><name><name>mSketchView</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>SketchView</name><operator>.</operator><name>STROKE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>showPopup</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>SketchView</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>mSketchView</name><operator>.</operator><name>setMode</name></name><argument_list>(<argument><expr><name><name>SketchView</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>eraser</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>eraser</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>eraser</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<if>if <condition>(<expr><call><name><name>mSketchView</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>SketchView</name><operator>.</operator><name>ERASER</name></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>showPopup</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>SketchView</name><operator>.</operator><name>ERASER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>mSketchView</name><operator>.</operator><name>setMode</name></name><argument_list>(<argument><expr><name><name>SketchView</name><operator>.</operator><name>ERASER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>eraser</name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>undo</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>mSketchView</name><operator>.</operator><name>undo</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>redo</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>mSketchView</name><operator>.</operator><name>redo</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>erase</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>askForErase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

			<function><specifier>private</specifier> <type><name>void</name></type> <name>askForErase</name><parameter_list>()</parameter_list> <block>{
				<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>erase_sketch</name></name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
							<function><annotation>@<name>Override</name></annotation>
							<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
								<expr_stmt><expr><call><name><name>mSketchView</name><operator>.</operator><name>erase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
							}</block></function>
						}</block></class></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// Inflate the popup_layout.xml</comment>
        <decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>ActionBarActivity</name>
                <operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>popupLayout</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>popup_sketch_stroke</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// And the one for eraser</comment>
        <decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflaterEraser</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>ActionBarActivity</name>
                <operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>popupEraserLayout</name> <operator>=</operator> <call><name><name>inflaterEraser</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>popup_sketch_eraser</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Actual stroke shape size is retrieved</comment>
        <expr_stmt><expr><name>strokeImageView</name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>popupLayout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stroke_circle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Drawable</name></type> <name>circleDrawable</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>circle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>circleDrawable</name><operator>.</operator><name>getIntrinsicWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Actual eraser shape size is retrieved</comment>
        <expr_stmt><expr><name>eraserImageView</name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>popupEraserLayout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stroke_circle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>circleDrawable</name><operator>.</operator><name>getIntrinsicWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setSeekbarProgress</name><argument_list>(<argument><expr><name><name>SketchView</name><operator>.</operator><name>DEFAULT_STROKE_SIZE</name></name></expr></argument>, <argument><expr><name><name>SketchView</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSeekbarProgress</name><argument_list>(<argument><expr><name><name>SketchView</name><operator>.</operator><name>DEFAULT_ERASER_SIZE</name></name></expr></argument>, <argument><expr><name><name>SketchView</name><operator>.</operator><name>ERASER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Stroke color picker initialization and event managing</comment>
        <expr_stmt><expr><name>mColorPicker</name> <operator>=</operator> <operator>(</operator><name>ColorPicker</name><operator>)</operator> <call><name><name>popupLayout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stroke_color_picker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mColorPicker</name><operator>.</operator><name>addSVBar</name></name><argument_list>(<argument><expr><operator>(</operator><name>SVBar</name><operator>)</operator> <call><name><name>popupLayout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>svbar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mColorPicker</name><operator>.</operator><name>addOpacityBar</name></name><argument_list>(<argument><expr><operator>(</operator><name>OpacityBar</name><operator>)</operator> <call><name><name>popupLayout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>opacitybar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mColorPicker</name><operator>.</operator><name>setOnColorChangedListener</name></name><argument_list>(<argument><expr><name>mSketchView</name><operator>::</operator><name>setStrokeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mColorPicker</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>mSketchView</name><operator>.</operator><name>getStrokeColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mColorPicker</name><operator>.</operator><name>setOldCenterColor</name></name><argument_list>(<argument><expr><call><name><name>mSketchView</name><operator>.</operator><name>getStrokeColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
                <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></switch>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>save</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><call><name><name>mSketchView</name><operator>.</operator><name>getBitmap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bitmap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

            <try>try <block>{
                <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>EXTRA_OUTPUT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>bitmapFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>bitmapFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name><name>Bitmap</name><operator>.</operator><name>CompressFormat</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>bitmapFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>getMainActivity</name><argument_list>()</argument_list></call><operator>.</operator><name>sketchUri</name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>getMainActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>showMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error writing sketch image data"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>


    <comment type="line">// The method that displays the popup.</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showPopup</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>anchor</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>eraserOrStroke</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>boolean</name></type> <name>isErasing</name> <init>= <expr><name>eraserOrStroke</name> <operator>==</operator> <name><name>SketchView</name><operator>.</operator><name>ERASER</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>oldColor</name> <operator>=</operator> <call><name><name>mColorPicker</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>metrics</name> <init>= <expr><operator>new</operator> <call><name>DisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindowManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMetrics</name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Creating the PopupWindow</comment>
        <decl_stmt><decl><type><name>PopupWindow</name></type> <name>popup</name> <init>= <expr><operator>new</operator> <call><name>PopupWindow</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>setContentView</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isErasing</name></expr> ?</condition><then> <expr><name>popupEraserLayout</name></expr> </then><else>: <expr><name>popupLayout</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>setWidth</name></name><argument_list>(<argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>setHeight</name></name><argument_list>(<argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>setFocusable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>setOnDismissListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
			<if>if <condition>(<expr><call><name><name>mColorPicker</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>oldColor</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>mColorPicker</name><operator>.</operator><name>setOldCenterColor</name></name><argument_list>(<argument><expr><name>oldColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Clear the default translucent background</comment>
        <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>setBackgroundDrawable</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BitmapDrawable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Displaying the popup at the specified location, + offsets (transformed </comment>
        <comment type="line">// dp to pixel to support multiple screen sizes)</comment>
        <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>showAsDropDown</name></name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Stroke size seekbar initialization and event managing</comment>
        <decl_stmt><decl><type><name>SeekBar</name></type> <name>mSeekBar</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>mSeekBar</name> <operator>=</operator> <call>(<name>SeekBar</name>) <argument_list>(<argument><expr><ternary><condition><expr><name>isErasing</name></expr> ?</condition><then> <expr><call><name><name>popupEraserLayout</name>
                <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stroke_seekbar</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>popupLayout</name>
                <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stroke_seekbar</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mSeekBar</name><operator>.</operator><name>setOnSeekBarChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnSeekBarChangeListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onStopTrackingTouch</name><parameter_list>(<parameter><decl><type><name>SeekBar</name></type> <name>seekBar</name></decl></parameter>)</parameter_list> <block>{
            }</block></function>


            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onStartTrackingTouch</name><parameter_list>(<parameter><decl><type><name>SeekBar</name></type> <name>seekBar</name></decl></parameter>)</parameter_list> <block>{
            }</block></function>


            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onProgressChanged</name><parameter_list>(<parameter><decl><type><name>SeekBar</name></type> <name>seekBar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>progress</name></decl></parameter>,
                                          <parameter><decl><type><name>boolean</name></type> <name>fromUser</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// When the seekbar is moved a new size is calculated and the new shape</comment>
                <comment type="line">// is positioned centrally into the ImageView</comment>
                <expr_stmt><expr><call><name>setSeekbarProgress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name>eraserOrStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>progress</name> <init>= <expr><ternary><condition><expr><name>isErasing</name></expr> ?</condition><then> <expr><name>seekBarEraserProgress</name></expr> </then><else>: <expr><name>seekBarStrokeProgress</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mSeekBar</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>protected</specifier> <type><name>void</name></type> <name>setSeekbarProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eraserOrStroke</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>calcProgress</name> <init>= <expr><ternary><condition><expr><name>progress</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>progress</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>newSize</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>/</operator> <literal type="number">100f</literal><operator>)</operator> <operator>*</operator> <name>calcProgress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>size</name> <operator>-</operator> <name>newSize</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Stroke size "</literal> <operator>+</operator> <name>newSize</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>calcProgress</name> <operator>+</operator> <literal type="string">"%)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LayoutParams</name></type> <name>lp</name> <init>= <expr><operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><name>newSize</name></expr></argument>, <argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lp</name><operator>.</operator><name>setMargins</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>eraserOrStroke</name> <operator>==</operator> <name><name>SketchView</name><operator>.</operator><name>STROKE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>strokeImageView</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seekBarStrokeProgress</name> <operator>=</operator> <name>progress</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>eraserImageView</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seekBarEraserProgress</name> <operator>=</operator> <name>progress</name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>mSketchView</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name>newSize</name></expr></argument>, <argument><expr><name>eraserOrStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDrawChanged</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Undo</comment>
        <if>if <condition>(<expr><call><name><name>mSketchView</name><operator>.</operator><name>getPaths</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>undo</name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>undo</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <comment type="line">// Redo</comment>
        <if>if <condition>(<expr><call><name><name>mSketchView</name><operator>.</operator><name>getUndoneCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>redo</name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>redo</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name>MainActivity</name></type> <name>getMainActivity</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name>MainActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\SnoozeActivity.java" hash="e4a6f5aaff0056a2fbf3fd3928a23a1974f7ebe8"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>DatePickerDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>TimePickerDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>DatePicker</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TimePicker</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name><operator>.</operator><name>SaveNoteTask</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>date</name><operator>.</operator><name>DateHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnReminderPickedListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>ReminderHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>ReminderPickers</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>


<class><specifier>public</specifier> class <name>SnoozeActivity</name> <super><extends>extends <name>ActionBarActivity</name></extends> <implements>implements <name>OnReminderPickedListener</name>, <name><name>DatePickerDialog</name><operator>.</operator><name>OnDateSetListener</name></name>, <name><name>TimePickerDialog</name><operator>.</operator><name>OnTimeSetListener</name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Note</name></type> <name>note</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Note</name><index>[]</index></name></type> <name>notes</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ReminderPickers</name></type> <name>onDateSetListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ReminderPickers</name></type> <name>onTimeSetListener</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelableExtra</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>note</name> <operator>=</operator> <call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelableExtra</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>manageNotification</name><argument_list>(<argument><expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name>MODE_MULTI_PROCESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>notesObjs</name> <init>= <expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getExtras</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>notes</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>notesObjs</name></expr></argument>, <argument><expr><name><name>notesObjs</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>Note</name><index>[]</index></name><operator>.</operator>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>postpone</name><argument_list>(<argument><expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name>MODE_MULTI_PROCESS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>getNextMinute</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>manageNotification</name><parameter_list>(<parameter><decl><type><name>SharedPreferences</name></type> <name>prefs</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>ACTION_DISMISS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setNextRecurrentReminder</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>ACTION_SNOOZE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>snoozeDelay</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_notification_snooze_delay"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_SNOOZE_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>newReminder</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>snoozeDelay</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>updateNoteReminder</name><argument_list>(<argument><expr><name>newReminder</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>ACTION_POSTPONE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>postpone</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getRecurrenceRule</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_KEY</name></name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_NOTIFICATION_CLICK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>removeNotification</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>postpone</name><parameter_list>(<parameter><decl><type><name>SharedPreferences</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>alarm</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pickerType</name> <init>= <expr><ternary><condition><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_simple_calendar"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>ReminderPickers</name><operator>.</operator><name>TYPE_AOSP</name></name></expr> </then><else>:
				<expr><name><name>ReminderPickers</name><operator>.</operator><name>TYPE_GOOGLE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ReminderPickers</name></type> <name>reminderPicker</name> <init>= <expr><operator>new</operator> <call><name>ReminderPickers</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>pickerType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reminderPicker</name><operator>.</operator><name>pick</name></name><argument_list>(<argument><expr><name>alarm</name></expr></argument>, <argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>onDateSetListener</name> <operator>=</operator> <name>reminderPicker</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>onTimeSetListener</name> <operator>=</operator> <name>reminderPicker</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>removeNotification</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>NotificationManager</name></type> <name>manager</name> <init>= <expr><operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>manager</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReminderPicked</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>note</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>note</name><operator>.</operator><name>setAlarm</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><name><name>this</name><operator>.</operator><name>notes</name></name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setAlarm</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRecurrenceReminderPicked</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>note</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>note</name><operator>.</operator><name>setRecurrenceRule</name></name><argument_list>(<argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setNextRecurrentReminder</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>note</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><name><name>this</name><operator>.</operator><name>notes</name></name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setRecurrenceRule</name></name><argument_list>(<argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setNextRecurrentReminder</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNextRecurrentReminder</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getRecurrenceRule</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>nextReminder</name> <init>= <expr><call><name><name>DateHelper</name><operator>.</operator><name>nextReminderFromRecurrenceRule</name></name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>note</name>
					<operator>.</operator><name>getRecurrenceRule</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nextReminder</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>updateNoteReminder</name><argument_list>(<argument><expr><name>nextReminder</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><operator>new</operator> <call><name>SaveNoteTask</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateNoteReminder</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>updateNoteReminder</name><argument_list>(<argument><expr><name>reminder</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateNoteReminder</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>noteToUpdate</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateNote</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>updateNote</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>noteToUpdate</name><operator>.</operator><name>setAlarm</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>new</operator> <call><name>SaveNoteTask</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><name>noteToUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>addReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noteToUpdate</name></expr></argument>, <argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>showReminderMessage</name></name><argument_list>(<argument><expr><call><name><name>noteToUpdate</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDateSet</name><parameter_list>(<parameter><decl><type><name>DatePicker</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>monthOfYear</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dayOfMonth</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>onDateSetListener</name><operator>.</operator><name>onDateSet</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>monthOfYear</name></expr></argument>, <argument><expr><name>dayOfMonth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTimeSet</name><parameter_list>(<parameter><decl><type><name>TimePicker</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hourOfDay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minute</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>onTimeSetListener</name><operator>.</operator><name>onTimeSet</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>hourOfDay</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\SettingsFragment.java" hash="b46716fca08fa9535c07892b69e73ddcc707454b"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>RingtoneManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>MaterialDialog</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>analitica</name><operator>.</operator><name>AnalyticsHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>DataBackupIntentService</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>AppVersionHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>LanguageHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PermissionsHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>ONStyle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>PasswordValidator</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>SettingsFragment</name> <super><extends>extends <name>PreferenceFragment</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SPRINGPAD_IMPORT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RINGTONE_REQUEST_CODE</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>XML_NAME</name> <init>= <expr><literal type="string">"xmlName"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>xmlId</name> <init>= <expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>settings</name></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>getArguments</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>XML_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>xmlId</name> <operator>=</operator> <call><name><name>ResourcesUtils</name><operator>.</operator><name>getXmlId</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ResourcesUtils</name><operator>.</operator><name>ResourceIdentifiers</name><operator>.</operator><name>xml</name></name></expr></argument>, <argument><expr><call><name><name>String</name>
					<operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>XML_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name>xmlId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prefs</name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>setTitle</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>getArguments</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>XML_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>xmlName</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>XML_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>xmlName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>stringResourceId</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentifier</name><argument_list>(<argument><expr><call><name><name>xmlName</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"settings_"</literal></expr></argument>,
						<argument><expr><literal type="string">"settings_screen_"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>title</name> <operator>=</operator> <ternary><condition><expr><name>stringResourceId</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>getString</name><argument_list>(<argument><expr><name>stringResourceId</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>title</name></expr></else></ternary></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>toolbar</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
				<expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></switch>
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>boolean</name></type> <name>onPreferenceTreeClick</name><parameter_list>(<parameter><decl><type><name>PreferenceScreen</name></type> <name>preferenceScreen</name></decl></parameter>, <parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPreferenceTreeClick</name></name><argument_list>(<argument><expr><name>preferenceScreen</name></expr></argument>, <argument><expr><name>preference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>preference</name> <operator>instanceof</operator> <name>PreferenceScreen</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>SettingsActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>switchToScreen</name><argument_list>(<argument><expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>


	<function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
	<annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Export notes</comment>
		<decl_stmt><decl><type><name>Preference</name></type> <name>export</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_export_data"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>export</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>export</name><operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>arg0</name></decl></parameter></parameter_list> -&gt; <block>{

				<comment type="line">// Inflate layout</comment>
				<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLayoutInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>View</name></type> <name>v</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>dialog_backup_layout</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="line">// Finds actually saved backups names</comment>
				<expr_stmt><expr><call><name><name>PermissionsHelper</name><operator>.</operator><name>requestPermission</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></argument>, <argument><expr><name><name>R</name>
						<operator>.</operator><name>string</name><operator>.</operator><name>permission_external_storage</name></name></expr></argument>, <argument><expr><call><name><name>activity</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>crouton_handle</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>export</name>
						<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// Import notes</comment>
		<decl_stmt><decl><type><name>Preference</name></type> <name>importData</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_import_data"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>importData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>importData</name><operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>arg0</name></decl></parameter></parameter_list> -&gt; <block>{
				<expr_stmt><expr><call><name><name>PermissionsHelper</name><operator>.</operator><name>requestPermission</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></argument>, <argument><expr><name><name>R</name>
						<operator>.</operator><name>string</name><operator>.</operator><name>permission_external_storage</name></name></expr></argument>, <argument><expr><call><name><name>activity</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>crouton_handle</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>importNotes</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Import notes from Springpad export zip file</comment>
		<decl_stmt><decl><type><name>Preference</name></type> <name>importFromSpringpad</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_import_from_springpad"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>importFromSpringpad</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>importFromSpringpad</name><operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>arg0</name></decl></parameter></parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name></decl>;</decl_stmt>
				<expr_stmt><expr><name>intent</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_GET_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addCategory</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>CATEGORY_OPENABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"application/zip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><operator>!</operator><call><name><name>IntentChecker</name><operator>.</operator><name>isAvailable</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>feature_not_available_on_this_device</name></name></expr></argument>,
							<argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>SPRINGPAD_IMPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


<comment type="line">//		Preference syncWithDrive = findPreference("settings_backup_drive");</comment>
<comment type="line">//		importFromSpringpad.setOnPreferenceClickListener(new OnPreferenceClickListener() {</comment>
<comment type="line">//			@Override</comment>
<comment type="line">//			public boolean onPreferenceClick(Preference arg0) {</comment>
<comment type="line">//				Intent intent;</comment>
<comment type="line">//				intent = new Intent(Intent.ACTION_GET_CONTENT);</comment>
<comment type="line">//				intent.addCategory(Intent.CATEGORY_OPENABLE);</comment>
<comment type="line">//				intent.setType("application/zip");</comment>
<comment type="line">//				if (!IntentChecker.isAvailable(getActivity(), intent, null)) {</comment>
<comment type="line">//					Crouton.makeText(getActivity(), R.string.feature_not_available_on_this_device,</comment>
<comment type="line">// ONStyle.ALERT).show();</comment>
<comment type="line">//					return false;</comment>
<comment type="line">//				}</comment>
<comment type="line">//				startActivityForResult(intent, SPRINGPAD_IMPORT);</comment>
<comment type="line">//				return false;</comment>
<comment type="line">//			}</comment>
<comment type="line">//		});</comment>


		<comment type="line">// Swiping action</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>SwitchPreference</name></type> <name>swipeToTrash</name> <init>= <expr><operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_swipe_to_trash"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>swipeToTrash</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_swipe_to_trash"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>swipeToTrash</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>swipeToTrash</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_swipe_to_trash_summary_2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>swipeToTrash</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>swipeToTrash</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_swipe_to_trash_summary_1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name><name>swipeToTrash</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<if>if <condition>(<expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>newValue</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>swipeToTrash</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_swipe_to_trash_summary_2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>swipeToTrash</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_swipe_to_trash_summary_1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Show uncategorized notes in menu</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>SwitchPreference</name></type> <name>showUncategorized</name> <init>= <expr><operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><name><name>Constants</name>
				<operator>.</operator><name>PREF_SHOW_UNCATEGORIZED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>showUncategorized</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>showUncategorized</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Show Automatically adds location to new notes</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>SwitchPreference</name></type> <name>autoLocation</name> <init>= <expr><operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_AUTO_LOCATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>autoLocation</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>autoLocation</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Maximum video attachment size</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>EditTextPreference</name></type> <name>maxVideoSize</name> <init>= <expr><operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_max_video_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>maxVideoSize</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>maxVideoSizeValue</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_max_video_size"</literal></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>not_set</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>maxVideoSize</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_max_video_size_summary</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name>
					<argument_list>(<argument><expr><name>maxVideoSizeValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>maxVideoSize</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<expr_stmt><expr><call><name><name>maxVideoSize</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_max_video_size_summary</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>String</name>
						<operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><literal type="string">"settings_max_video_size"</literal></expr></argument>, <argument><expr><call><name><name>newValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Set notes' protection password</comment>
		<decl_stmt><decl><type><name>Preference</name></type> <name>password</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_password"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>password</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>preference</name></decl></parameter></parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>Intent</name></type> <name>passwordIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PasswordActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>passwordIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Use password to grant application access</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>SwitchPreference</name></type> <name>passwordAccess</name> <init>= <expr><operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_password_access"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>passwordAccess</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>passwordAccess</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>passwordAccess</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>passwordAccess</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name><name>passwordAccess</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
					<if>if <condition>(<expr><call><name><name>passwordConfirmed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>passwordAccess</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Languages</comment>
		<decl_stmt><decl><type><name>ListPreference</name></type> <name>lang</name> <init>= <expr><operator>(</operator><name>ListPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_language"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>lang</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>languageName</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>locale</name><operator>.</operator><name>getDisplayName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>lang</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name><name>languageName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>locale</name></expr></argument>)</argument_list></call>
					<operator>+</operator> <call><name><name>languageName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>languageName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>lang</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>value</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<expr_stmt><expr><call><name><name>LanguageHelper</name><operator>.</operator><name>updateLanguage</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>SystemHelper</name><operator>.</operator><name>restartApp</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Text size</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>ListPreference</name></type> <name>textSize</name> <init>= <expr><operator>(</operator><name>ListPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_text_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>textSize</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>textSizeIndex</name> <init>= <expr><call><name><name>textSize</name><operator>.</operator><name>findIndexOfValue</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_text_size"</literal></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>textSizeString</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>text_size</name></name></expr></argument>)</argument_list></call><index>[<expr><name>textSizeIndex</name></expr>]</index></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>textSize</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>textSizeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>textSize</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>textSizeIndex1</name> <init>= <expr><call><name><name>textSize</name><operator>.</operator><name>findIndexOfValue</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>checklistString</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>text_size</name></name></expr></argument>)</argument_list></call><index>[<expr><name>textSizeIndex1</name></expr>]</index></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>textSize</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>checklistString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><literal type="string">"settings_text_size"</literal></expr></argument>, <argument><expr><call><name><name>newValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>textSize</name><operator>.</operator><name>setValueIndex</name></name><argument_list>(<argument><expr><name>textSizeIndex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Application's colors</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>ListPreference</name></type> <name>colorsApp</name> <init>= <expr><operator>(</operator><name>ListPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_colors_app"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>colorsApp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>colorsAppIndex</name> <init>= <expr><call><name><name>colorsApp</name><operator>.</operator><name>findIndexOfValue</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_colors_app"</literal></expr></argument>,
					<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_COLORS_APP_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>colorsAppString</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>colors_app</name></name></expr></argument>)</argument_list></call><index>[<expr><name>colorsAppIndex</name></expr>]</index></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>colorsApp</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>colorsAppString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>colorsApp</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>colorsAppIndex1</name> <init>= <expr><call><name><name>colorsApp</name><operator>.</operator><name>findIndexOfValue</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>colorsAppString1</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>colors_app</name></name></expr></argument>)</argument_list></call><index>[<expr><name>colorsAppIndex1</name></expr>]</index></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>colorsApp</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>colorsAppString1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><literal type="string">"settings_colors_app"</literal></expr></argument>, <argument><expr><call><name><name>newValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>colorsApp</name><operator>.</operator><name>setValueIndex</name></name><argument_list>(<argument><expr><name>colorsAppIndex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Checklists</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>ListPreference</name></type> <name>checklist</name> <init>= <expr><operator>(</operator><name>ListPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_checked_items_behavior"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>checklist</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>checklistIndex</name> <init>= <expr><call><name><name>checklist</name><operator>.</operator><name>findIndexOfValue</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_checked_items_behavior"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>checklistString</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>checked_items_behavior</name></name></expr></argument>)</argument_list></call><index>[<expr><name>checklistIndex</name></expr>]</index></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>checklist</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>checklistString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>checklist</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>checklistIndex1</name> <init>= <expr><call><name><name>checklist</name><operator>.</operator><name>findIndexOfValue</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>checklistString1</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>checked_items_behavior</name></name></expr></argument>)</argument_list></call>
						<index>[<expr><name>checklistIndex1</name></expr>]</index></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>checklist</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>checklistString1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><literal type="string">"settings_checked_items_behavior"</literal></expr></argument>, <argument><expr><call><name><name>newValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>checklist</name><operator>.</operator><name>setValueIndex</name></name><argument_list>(<argument><expr><name>checklistIndex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Widget's colors</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>ListPreference</name></type> <name>colorsWidget</name> <init>= <expr><operator>(</operator><name>ListPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_colors_widget"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>colorsWidget</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>colorsWidgetIndex</name> <init>= <expr><call><name><name>colorsWidget</name><operator>.</operator><name>findIndexOfValue</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_colors_widget"</literal></expr></argument>,
					<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_COLORS_APP_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>colorsWidgetString</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>colors_widget</name></name></expr></argument>)</argument_list></call><index>[<expr><name>colorsWidgetIndex</name></expr>]</index></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>colorsWidget</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>colorsWidgetString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>colorsWidget</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>colorsWidgetIndex1</name> <init>= <expr><call><name><name>colorsWidget</name><operator>.</operator><name>findIndexOfValue</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>colorsWidgetString1</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>colors_widget</name></name></expr></argument>)</argument_list></call><index>[<expr><name>colorsWidgetIndex1</name></expr>]</index></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>colorsWidget</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>colorsWidgetString1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><literal type="string">"settings_colors_widget"</literal></expr></argument>, <argument><expr><call><name><name>newValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>colorsWidget</name><operator>.</operator><name>setValueIndex</name></name><argument_list>(<argument><expr><name>colorsWidgetIndex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// Notification snooze delay</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>EditTextPreference</name></type> <name>snoozeDelay</name> <init>= <expr><operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name>
				<argument_list>(<argument><expr><literal type="string">"settings_notification_snooze_delay"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>snoozeDelay</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>snooze</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_notification_snooze_delay"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_SNOOZE_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>snooze</name> <operator>=</operator> <ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>snooze</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>Constants</name><operator>.</operator><name>PREF_SNOOZE_DEFAULT</name></name></expr> </then><else>: <expr><name>snooze</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>snoozeDelay</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>snooze</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>snoozeDelay</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>preference</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>snoozeUpdated</name> <init>= <expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>Constants</name>
						<operator>.</operator><name>PREF_SNOOZE_DEFAULT</name></name></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>snoozeDelay</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>snoozeUpdated</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>minutes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><literal type="string">"settings_notification_snooze_delay"</literal></expr></argument>, <argument><expr><name>snoozeUpdated</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// NotificationServiceListener shortcut</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Preference</name></type> <name>norificationServiceListenerPreference</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_notification_service_listener"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>norificationServiceListenerPreference</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR2</name></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>getPreferenceScreen</name><argument_list>()</argument_list></call><operator>.</operator><call><name>removePreference</name><argument_list>(<argument><expr><name>norificationServiceListenerPreference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>


		<comment type="line">// Changelog</comment>
		<decl_stmt><decl><type><name>Preference</name></type> <name>changelog</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_changelog"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>changelog</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>changelog</name><operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>arg0</name></decl></parameter></parameter_list> -&gt; <block>{

				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackEvent</name><argument_list>(<argument><expr><name><name>AnalyticsHelper</name><operator>.</operator><name>CATEGORIES</name><operator>.</operator><name>SETTING</name></name></expr></argument>, <argument><expr><literal type="string">"settings_changelog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>customView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_changelog</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try>try <block>{
				<expr_stmt><expr><call><name><name>changelog</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name><name>AppVersionHelper</name><operator>.</operator><name>getCurrentAppVersionName</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NameNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error retrieving version"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>


		<comment type="line">// Settings reset</comment>
		<decl_stmt><decl><type><name>Preference</name></type> <name>resetData</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"reset_all_data"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>resetData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>resetData</name><operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>arg0</name></decl></parameter></parameter_list> -&gt; <block>{

				<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>reset_all_data_confirmation</name></name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
							<function><annotation>@<name>Override</name></annotation>
							<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
								<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
								<decl_stmt><decl><type><name>File</name></type> <name>db</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatabasePath</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DATABASE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>db</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<decl_stmt><decl><type><name>File</name></type> <name>attachmentsDir</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getAttachmentDir</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attachmentsDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<decl_stmt><decl><type><name>File</name></type> <name>cacheDir</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getCacheDir</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cacheDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name>SystemHelper</name><operator>.</operator><name>restartApp</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></function>
						}</block></class></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Instructions</comment>
		<decl_stmt><decl><type><name>Preference</name></type> <name>instructions</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"settings_tour_show_again"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>instructions</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>instructions</name><operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>arg0</name></decl></parameter></parameter_list> -&gt; <block>{
				<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_tour_show_again_summary</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"?"</literal></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
							<function><annotation>@<name>Override</name></annotation>
							<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{

								<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackEvent</name><argument_list>(<argument><expr><name><name>AnalyticsHelper</name><operator>.</operator><name>CATEGORIES</name><operator>.</operator><name>SETTING</name></name></expr></argument>, <argument><expr><literal type="string">"settings_tour_show_again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

								<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_TOUR_COMPLETE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name>SystemHelper</name><operator>.</operator><name>restartApp</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></function>
						}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line">// Donations</comment>
<comment type="line">//        Preference donation = findPreference("settings_donation");</comment>
<comment type="line">//        if (donation != null) {</comment>
<comment type="line">//            donation.setOnPreferenceClickListener(new OnPreferenceClickListener() {</comment>
<comment type="line">//                @Override</comment>
<comment type="line">//                public boolean onPreferenceClick(Preference preference) {</comment>
<comment type="line">//                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getActivity());</comment>
<comment type="line">//</comment>
<comment type="line">//                    ArrayList&lt;ImageAndTextItem&gt; options = new ArrayList&lt;ImageAndTextItem&gt;();</comment>
<comment type="line">//                    options.add(new ImageAndTextItem(R.drawable.ic_paypal, getString(R.string.paypal)));</comment>
<comment type="line">//                    options.add(new ImageAndTextItem(R.drawable.ic_bitcoin, getString(R.string.bitcoin)));</comment>
<comment type="line">//</comment>
<comment type="line">//                    alertDialogBuilder</comment>
<comment type="line">//                            .setAdapter(new ImageAndTextAdapter(getActivity(), options),</comment>
<comment type="line">//                                    new DialogInterface.OnClickListener() {</comment>
<comment type="line">//                                        @Override</comment>
<comment type="line">//                                        public void onClick(DialogInterface dialog, int which) {</comment>
<comment type="line">//                                            switch (which) {</comment>
<comment type="line">//                                                case 0:</comment>
<comment type="line">//                                                    Intent intentPaypal = new Intent(Intent.ACTION_VIEW);</comment>
<comment type="line">//                                                    intentPaypal.setData(Uri.parse(getString(R.string.paypal_url)));</comment>
<comment type="line">//                                                    startActivity(intentPaypal);</comment>
<comment type="line">//                                                    break;</comment>
<comment type="line">//                                                case 1:</comment>
<comment type="line">//                                                    Intent intentBitcoin = new Intent(Intent.ACTION_VIEW);</comment>
<comment type="line">//                                                    intentBitcoin.setData(Uri.parse(getString(R.string.bitcoin_url)));</comment>
<comment type="line">//                                                    startActivity(intentBitcoin);</comment>
<comment type="line">//                                                    break;</comment>
<comment type="line">//                                            }</comment>
<comment type="line">//                                        }</comment>
<comment type="line">//                                    });</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>
<comment type="line">//                    // create alert dialog</comment>
<comment type="line">//                    AlertDialog alertDialog = alertDialogBuilder.create();</comment>
<comment type="line">//                    // show it</comment>
<comment type="line">//                    alertDialog.show();</comment>
<comment type="line">//                    return false;</comment>
<comment type="line">//                }</comment>
<comment type="line">//            });</comment>
<comment type="line">//        }</comment>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>importNotes</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name><name>CharSequence</name><index>[]</index></name></type> <name>backups</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getExternalStoragePublicDir</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>list</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>backups</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>backups</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>SettingsActivity</name><operator>)</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>showMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_backups_available</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{

			<decl_stmt><decl><type><name>MaterialDialog</name></type> <name>importDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>data_import_message</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>items</name><argument_list>(<argument><expr><name>backups</name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
						<function><annotation>@<name>Override</name></annotation>
						<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{

						}</block></function>
					}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// OnShow is overridden to allow long-click on item so user can remove them</comment>
			<expr_stmt><expr><call><name><name>importDialog</name><operator>.</operator><name>setOnShowListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>dialog</name></decl></parameter></parameter_list> -&gt; <block>{

				<decl_stmt><decl><type><name>ListView</name></type> <name>lv</name> <init>= <expr><call><name><name>importDialog</name><operator>.</operator><name>getListView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<assert>assert <expr><name>lv</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
				<expr_stmt><expr><call><name><name>lv</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{

					<comment type="line">// Retrieves backup size</comment>
					<decl_stmt><decl><type><name>File</name></type> <name>backupDir</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getBackupDir</name></name><argument_list>(<argument><expr><name><name>backups</name><index>[<expr><name>position</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>sizeString</name> <init>= <expr><ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="string">"Mb"</literal></expr> </then><else>: <expr><name>size</name> <operator>+</operator> <literal type="string">"Kb"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

					<comment type="line">// Check preference presence</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>prefName</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getSharedPreferencesFile</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>boolean</name></type> <name>hasPreferences</name> <init>= <expr><operator>(</operator><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><name>prefName</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><name><name>backups</name><index>[<expr><name>position</name></expr>]</index></name>
							<operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>sizeString</name>
							<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>hasPreferences</name></expr> ?</condition><then> <expr><literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_included</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator>
							<operator>+</operator> <literal type="string">")"</literal></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm_restoring_backup</name></name></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
								<function><annotation>@<name>Override</name></annotation>
								<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{

									<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackEvent</name><argument_list>(<argument><expr><name><name>AnalyticsHelper</name><operator>.</operator><name>CATEGORIES</name><operator>.</operator><name>SETTING</name></name></expr></argument>,
											<argument><expr><literal type="string">"settings_import_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

									<expr_stmt><expr><call><name><name>importDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

									<comment type="line">// An IntentService will be launched to accomplish the import task</comment>
									<decl_stmt><decl><type><name>Intent</name></type> <name>service</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
											<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>ACTION_DATA_IMPORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>INTENT_BACKUP_NAME</name></name></expr></argument>,
											<argument><expr><name><name>backups</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startService</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></function>
							}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Creation of backup removal dialog</comment>
				<expr_stmt><expr><call><name><name>lv</name><operator>.</operator><name>setOnItemLongClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{

					<comment type="line">// Retrieves backup size</comment>
					<decl_stmt><decl><type><name>File</name></type> <name>backupDir</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getBackupDir</name></name><argument_list>(<argument><expr><name><name>backups</name><index>[<expr><name>position</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>sizeString</name> <init>= <expr><ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="string">"Mb"</literal></expr> </then><else>: <expr><name>size</name> <operator>+</operator> <literal type="string">"Kb"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm_removing_backup</name></name></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>backups</name><index>[<expr><name>position</name></expr>]</index></name> <operator>+</operator> <literal type="string">""</literal> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>sizeString</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
								<function><annotation>@<name>Override</name></annotation>
								<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{
									<expr_stmt><expr><call><name><name>importDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
									<comment type="line">// An IntentService will be launched to accomplish the deletion task</comment>
									<decl_stmt><decl><type><name>Intent</name></type> <name>service</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
											<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>ACTION_DATA_DELETE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>INTENT_BACKUP_NAME</name></name></expr></argument>,
											<argument><expr><name><name>backups</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startService</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></function>
							}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>importDialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>export</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>backups</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>StorageHelper</name><operator>.</operator><name>getExternalStoragePublicDir</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>list</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Sets default export file name</comment>
		<decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DATE_FORMAT_EXPORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>sdf</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>EditText</name></type> <name>fileNameEditText</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>export_file_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>backupExistingTextView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>backup_existing</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>fileNameEditText</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fileNameEditText</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>TextWatcher</name></super><argument_list>()</argument_list> <block>{
			<function><annotation>@<name>Override</name></annotation>
			<specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg3</name></decl></parameter>)</parameter_list> <block>{}</block></function>
			<function><annotation>@<name>Override</name></annotation>
			<specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg3</name></decl></parameter>)</parameter_list> <block>{}</block></function>
			<function><annotation>@<name>Override</name></annotation>
			<specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><call><name><name>backups</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>arg0</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>backupExistingTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>backup_existing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>backupExistingTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>data_export_message</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>customView</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
					<function><annotation>@<name>Override</name></annotation>
					<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackEvent</name><argument_list>(<argument><expr><name><name>AnalyticsHelper</name><operator>.</operator><name>CATEGORIES</name><operator>.</operator><name>SETTING</name></name></expr></argument>, <argument><expr><literal type="string">"settings_export_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="line">// An IntentService will be launched to accomplish the export task</comment>
						<decl_stmt><decl><type><name>Intent</name></type> <name>service</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>ACTION_DATA_EXPORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>backupName</name> <init>= <expr><ternary><condition><expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>fileNameEditText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then>
								<expr><call><name><name>fileNameEditText</name><operator>.</operator><name>getHint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>fileNameEditText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>INTENT_BACKUP_NAME</name></name></expr></argument>, <argument><expr><name>backupName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startService</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackScreenView</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
			<switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{
				<case>case <expr><name>SPRINGPAD_IMPORT</name></expr>:</case>
					<decl_stmt><decl><type><name>Uri</name></type> <name>filesUri</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>FileHelper</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filesUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line">// An IntentService will be launched to accomplish the import task</comment>
					<decl_stmt><decl><type><name>Intent</name></type> <name>service</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>ACTION_DATA_IMPORT_SPRINGPAD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>DataBackupIntentService</name><operator>.</operator><name>EXTRA_SPRINGPAD_BACKUP</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startService</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><name>RINGTONE_REQUEST_CODE</name></expr>:</case>
					<decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name><name>RingtoneManager</name><operator>.</operator><name>EXTRA_RINGTONE_PICKED_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>notificationSound</name> <init>= <expr><ternary><condition><expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><literal type="string">"settings_notification_ringtone"</literal></expr></argument>, <argument><expr><name>notificationSound</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<default>default:</default>
					<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></switch>
		}</block></then></if>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\ListFragment.java" hash="78edbfb22e573a2e0ecba177baf8ede3b1e32e65"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimatorListenerAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>SearchManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>AnimationDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>GravityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItemCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>view</name><operator>.</operator><name>ActionMode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>SearchView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>SearchView</name><operator>.</operator><name>OnQueryTextListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>SubMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>EditorInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>MaterialDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>neopixl</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>components</name><operator>.</operator><name>textview</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nhaarman</name><operator>.</operator><name>listviewanimations</name><operator>.</operator><name>itemmanipulation</name><operator>.</operator><name>DynamicListView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>pnikosis</name><operator>.</operator><name>materialishprogress</name><operator>.</operator><name>ProgressWheel</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>PasswordValidator</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>ObjectUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Crouton</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name><operator>.</operator><name>NoteLoaderTask</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name><operator>.</operator><name>NoteProcessorArchive</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name><operator>.</operator><name>NoteProcessorCategorize</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name><operator>.</operator><name>NoteProcessorDelete</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name><operator>.</operator><name>NoteProcessorTrash</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>NotesHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>ONStyle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Tag</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>UndoBarController</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name><operator>.</operator><name>NavDrawerCategoryAdapter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name><operator>.</operator><name>NoteAdapter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>holders</name><operator>.</operator><name>NoteViewHolder</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnViewTouchedListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>Fab</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>InterceptorLinearLayout</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>links</name><operator>.</operator><name>UrlCompleter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>simplegallery</name><operator>.</operator><name>util</name><operator>.</operator><name>BitmapUtils</name></name>;</import>

<import>import static <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewCompat</name><operator>.</operator><name>animate</name></name>;</import>


<class><specifier>public</specifier> class <name>ListFragment</name> <super><extends>extends <name>BaseFragment</name></extends> <implements>implements <name>OnViewTouchedListener</name>, <name><name>UndoBarController</name><operator>.</operator><name>UndoListener</name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_CATEGORY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_CATEGORY_NOTES</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_ADD_ALARMS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list_root</name></name></expr></argument>)</argument_list></annotation> <type><name>InterceptorLinearLayout</name></type> <name>listRoot</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></annotation> <type><name>DynamicListView</name></type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>search_layout</name></name></expr></argument>)</argument_list></annotation> <type><name>View</name></type> <name>searchLayout</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>search_query</name></name></expr></argument>)</argument_list></annotation> <type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>searchQueryView</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>search_cancel</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>searchCancel</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>empty_list</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>empyListItem</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>expanded_image</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>expandedImageView</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab</name></name></expr></argument>)</argument_list></annotation>  <type><name>View</name></type> <name>fabView</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>undobar</name></name></expr></argument>)</argument_list></annotation> <type><name>View</name></type> <name>undoBarView</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>progress_wheel</name></name></expr></argument>)</argument_list></annotation> <type><name>ProgressWheel</name></type> <name>progress_wheel</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>snackbar_placeholder</name></name></expr></argument>)</argument_list></annotation> <type><name>View</name></type> <name>snackBarPlaceholder</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>NoteViewHolder</name></type> <name>noteViewHolder</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>selectedNotes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SearchView</name></type> <name>searchView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MenuItem</name></type> <name>searchMenuItem</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Menu</name></type> <name>menu</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AnimationDrawable</name></type> <name>jinglesAnimation</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>listViewPosition</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>listViewPositionOffset</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>sendToArchive</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ListFragment</name></type> <name>mFragment</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>view</name><operator>.</operator><name>ActionMode</name></name></type> <name>actionMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>keepActionMode</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Undo archive/trash</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>undoTrash</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>undoArchive</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>undoCategorize</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Category</name></type> <name>undoCategorizeCategory</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>undoNotesMap</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Used to remember removed categories from notes</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>, <argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>undoCategoryMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Used to remember archived state from notes</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>undoArchivedMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Search variables</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>searchQuery</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>searchQueryInstant</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>searchTags</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>searchUncompleteChecklists</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>goBackOnToggleSearchLabel</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>searchLabelActive</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>NoteAdapter</name></type> <name>listAdapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>UndoBarController</name></type> <name>ubc</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Fab</name></type> <name>fab</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MainActivity</name></type> <name>mainActivity</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mFragment</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRetainInstance</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unregister</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>savedInstanceState</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="string">"listViewPosition"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>listViewPosition</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"listViewPosition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>listViewPositionOffset</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"listViewPositionOffset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>searchQuery</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"searchQuery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>searchTags</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"searchTags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>keepActionMode</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_list</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mainActivity</name> <operator>=</operator> <operator>(</operator><name>MainActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>prefs</name> <operator>=</operator> <name><name>mainActivity</name><operator>.</operator><name>prefs</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>mainActivity</name><operator>.</operator><name>navigationTmp</name></name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"navigationTmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
		<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>initEasterEgg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initListView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ubc</name> <operator>=</operator> <operator>new</operator> <call><name>UndoBarController</name><argument_list>(<argument><expr><name>undoBarView</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initFab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Restores again DefaultSharedPreferences too reload in case of data erased from Settings</comment>
		<expr_stmt><expr><name>prefs</name> <operator>=</operator> <call><name><name>mainActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFab</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>fab</name> <operator>=</operator> <operator>new</operator> <call><name>Fab</name><argument_list>(<argument><expr><name>fabView</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_FAB_EXPANSION_BEHAVIOR</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setOnFabItemClickedListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>id</name></decl></parameter></parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>v</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab_expand_menu_button</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>editNote</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab_note</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>editNote</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab_camera</name></name></expr>:</case>
                    <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_FAB_TAKE_PHOTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>setIntent</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>editNote</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab_checklist</name></name></expr>:</case>
                    <decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setChecklist</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>editNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            }</block></switch>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><name>boolean</name></type> <name>closeFab</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>fab</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>fab</name><operator>.</operator><name>isExpanded</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>performToggle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Activity title initialization based on navigation
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initTitle</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>navigationList</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>navigationListCodes</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list_codes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>navigation</name> <init>= <expr><ternary><condition><expr><name><name>mainActivity</name><operator>.</operator><name>navigationTmp</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>mainActivity</name><operator>.</operator><name>navigationTmp</name></name></expr> </then><else>: <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name>
                <argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>, <argument><expr><name><name>navigationListCodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>navigationListCodes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>;</decl_stmt>
        <comment type="line">// If is a traditional navigation item</comment>
        <if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <name><name>navigationListCodes</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>title</name> <operator>=</operator> <name><name>navigationList</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Category</name></type> <name>category</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCategory</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>title</name> <operator>=</operator> <ternary><condition><expr><name>category</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>title</name> <operator>=</operator> <ternary><condition><expr><name>title</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>title_activity_list</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>title</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>setActionBarTitle</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Starts a little animation on Mr.Jingles!
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initEasterEgg</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>empyListItem</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><name>jinglesAnimation</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>jinglesAnimation</name> <operator>=</operator> <operator>(</operator><name>AnimationDrawable</name><operator>)</operator> <call><name><name>empyListItem</name><operator>.</operator><name>getCompoundDrawables</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>empyListItem</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                    <if>if <condition>(<expr><name>jinglesAnimation</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>jinglesAnimation</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>stopJingles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>stopJingles</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>jinglesAnimation</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>jinglesAnimation</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>jinglesAnimation</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>empyListItem</name><operator>.</operator><name>setCompoundDrawablesWithIntrinsicBounds</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>jingles_animation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>searchQueryInstant</name> <operator>=</operator> <name>searchQuery</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stopJingles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Crouton</name><operator>.</operator><name>cancelAllCroutons</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>closeFab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>keepActionMode</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>commitPending</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>clearChoices</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getActionMode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>refreshListScrollPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><literal type="string">"listViewPosition"</literal></expr></argument>, <argument><expr><name>listViewPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><literal type="string">"listViewPositionOffset"</literal></expr></argument>, <argument><expr><name>listViewPositionOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><literal type="string">"searchQuery"</literal></expr></argument>, <argument><expr><name>searchQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><literal type="string">"searchTags"</literal></expr></argument>, <argument><expr><name>searchTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>refreshListScrollPosition</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>list</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>listViewPosition</name> <operator>=</operator> <call><name><name>list</name><operator>.</operator><name>getFirstVisiblePosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>View</name></type> <name>v</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>listViewPositionOffset</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimension</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>vertical_margin</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>v</name><operator>.</operator><name>getTop</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"static-access"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_SEARCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <class><specifier>private</specifier> <specifier>final</specifier> class <name>ModeCallback</name> <super><implements>implements <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>view</name><operator>.</operator><name>ActionMode</name><operator>.</operator><name>Callback</name></name></implements></super> <block>{

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateActionMode</name><parameter_list>(<parameter><decl><type><name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// Inflate the menu for the CAB</comment>
            <decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>mode</name><operator>.</operator><name>getMenuInflater</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>menu_list</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>actionMode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setAllowed</name></name><argument_list>(<argument><expr><call><name>isFabAllowed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>hideFab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>


        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyActionMode</name><parameter_list>(<parameter><decl><type><name>ActionMode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// Here you can make any necessary updates to the activity when</comment>
            <comment type="line">// the CAB is removed. By default, selected items are</comment>
            <comment type="line">// deselected/unchecked.</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>listAdapter</name><operator>.</operator><name>getSelectedItems</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name><name>listAdapter</name><operator>.</operator><name>getSelectedItems</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keyAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>View</name></type> <name>v</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>key</name> <operator>-</operator> <call><name><name>list</name><operator>.</operator><name>getFirstVisiblePosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>listAdapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>key</name> <operator>&amp;&amp;</operator> <call><name><name>listAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>restoreDrawable</name></name><argument_list>(<argument><expr><call><name><name>listAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>card_layout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

            <comment type="line">// Clears data structures</comment>
            <expr_stmt><expr><call><name><name>selectedNotes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>clearSelectedItems</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>clearChoices</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setAllowed</name></name><argument_list>(<argument><expr><call><name>isFabAllowed</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>undoNotesMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>showFab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>actionMode</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Closed multiselection contextual menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>onPrepareActionMode</name><parameter_list>(<parameter><decl><type><name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>prepareActionModeMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>


        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>onActionItemClicked</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>protectedActions</name> <init>= <expr><block>{<expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_select_all</name></name></expr>, <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_merge</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>protectedActions</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
                            <if>if <condition>(<expr><call><name><name>passwordConfirmed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>performAction</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>performAction</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>
    }</block></class>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>finishActionMode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getActionMode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Manage check/uncheck of notes in list during multiple selection phase
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>toggleListViewItem</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><call><name><name>listAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LinearLayout</name></type> <name>cardLayout</name> <init>= <expr><operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>card_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>addSelectedItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cardLayout</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>list_bg_selected</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>removeSelectedItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>restoreDrawable</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>cardLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>prepareActionModeMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Close CAB if no items are selected</comment>
        <if>if <condition>(<expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>finishActionMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>


    <comment type="block" format="javadoc">/**
     * Notes list initialization. Data, actions and callback are defined here.
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initListView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setChoiceMode</name></name><argument_list>(<argument><expr><name><name>ListView</name><operator>.</operator><name>CHOICE_MODE_MULTIPLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setItemsCanFocus</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Note long click to start CAB mode</comment>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setOnItemLongClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>arg0</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>arg3</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
            <comment type="line">// Start the CAB using the ActionMode.Callback defined above</comment>
            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>startSupportActionMode</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ModeCallback</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>toggleListViewItem</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setCabTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Note single click listener managed by the activity itself</comment>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>arg0</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>arg3</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>editNote</name><argument_list>(<argument><expr><call><name><name>listAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <comment type="line">// If in CAB mode</comment>
            <expr_stmt><expr><call><name>toggleListViewItem</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setCabTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>listRoot</name><operator>.</operator><name>setOnViewTouchedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves from the single listview note item the element to be zoomed when opening a note
     */</comment>
    <function><specifier>private</specifier> <type><name>ImageView</name></type> <name>getZoomListItemView</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>expandedImageView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>targetView</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>targetView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachmentThumbnail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>targetView</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>targetView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>category_marker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>targetView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>targetView</name> <operator>=</operator> <operator>new</operator> <call><name>ImageView</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>targetView</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>targetView</name><operator>.</operator><name>setDrawingCacheEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>targetView</name><operator>.</operator><name>buildDrawingCache</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Bitmap</name></type> <name>bmp</name> <init>= <expr><call><name><name>targetView</name><operator>.</operator><name>getDrawingCache</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>expandedImageView</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>BitmapUtils</name><operator>.</operator><name>getDominantColor</name></name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>expandedImageView</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Listener that fires note opening once the zooming animation is finished
     */</comment>
    <function><specifier>private</specifier> <type><name>AnimatorListenerAdapter</name></type> <name>buildAnimatorListenerAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <class><super><name>AnimatorListenerAdapter</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>Animator</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>editNote2</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewTouchOccurred</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Notes list: onViewTouchOccurred "</literal> <operator>+</operator> <call><name><name>ev</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>commitPending</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>menu_list</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>menu</name></name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initSearchView</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>initSortingSubmenu</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>arrayDb</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>sortable_columns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>arrayDialog</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>sortable_columns_human_readable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>selected</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>arrayDb</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_SORTING_COLUMN</name></name></expr></argument>, <argument><expr><name><name>arrayDb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SubMenu</name></type> <name>sortMenu</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_sort</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSubMenu</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arrayDialog</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>sortMenu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sortMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MENU_SORT_GROUP_ID</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>arrayDialog</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selected</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>sortMenu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>sortMenu</name><operator>.</operator><name>setGroupCheckable</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MENU_SORT_GROUP_ID</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setActionItemsVisibility</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>prepareActionModeMenu</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Menu</name></type> <name>menu</name> <init>= <expr><call><name>getActionMode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMenu</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>navigation</name> <init>= <expr><call><name><name>Navigation</name><operator>.</operator><name>getNavigation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>showArchive</name> <init>= <expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>NOTES</name></name> <operator>||</operator> <name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name> <operator>||</operator> <name>navigation</name> <operator>==</operator>
                <name><name>Navigation</name><operator>.</operator><name>UNCATEGORIZED</name></name> <operator>||</operator> <name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>showUnarchive</name> <init>= <expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>ARCHIVE</name></name> <operator>||</operator> <name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>UNCATEGORIZED</name></name> <operator>||</operator>
                <name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>TRASH</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_untrash</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_delete</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>getSelectedCount</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_share</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_merge</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_archive</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name>showArchive</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isArchived</name>
                                <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_unarchive</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name>showUnarchive</name> <operator>&amp;&amp;</operator> <call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isArchived</name>
                                <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_share</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_merge</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_archive</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name>showArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_unarchive</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name>showUnarchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block></else></if>
            <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_add_reminder</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_category</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_uncomplete_checklists</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_tags</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_trash</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_select_all</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setCabTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>int</name></type> <name>getSelectedCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>setCabTitle</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>title</name> <init>= <expr><call><name>getSelectedCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>getActionMode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * SearchView initialization. It's a little complex because it's not using SearchManager but is implementing on its
     * own.
     */</comment>
    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>void</name></type> <name>initSearchView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Prevents some mysterious NullPointer on app fast-switching</comment>
        <if>if <condition>(<expr><name>mainActivity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

        <comment type="line">// Save item as class attribute to make it collapse on drawer opening</comment>
        <expr_stmt><expr><name>searchMenuItem</name> <operator>=</operator> <call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_search</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Associate searchable configuration with the SearchView</comment>
        <decl_stmt><decl><type><name>SearchManager</name></type> <name>searchManager</name> <init>= <expr><operator>(</operator><name>SearchManager</name><operator>)</operator> <call><name><name>mainActivity</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>SEARCH_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>searchView</name> <operator>=</operator> <operator>(</operator><name>SearchView</name><operator>)</operator> <call><name><name>MenuItemCompat</name><operator>.</operator><name>getActionView</name></name><argument_list>(<argument><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_search</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setSearchableInfo</name></name><argument_list>(<argument><expr><call><name><name>searchManager</name><operator>.</operator><name>getSearchableInfo</name></name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getComponentName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setImeOptions</name></name><argument_list>(<argument><expr><name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_SEARCH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Expands the widget hiding other actionbar icons</comment>
        <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setOnQueryTextFocusChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>v</name></decl></parameter>, <parameter><decl><name>hasFocus</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>setActionItemsVisibility</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>hasFocus</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>MenuItemCompat</name><operator>.</operator><name>setOnActionExpandListener</name></name><argument_list>(<argument><expr><name>searchMenuItem</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>MenuItemCompat</name><operator>.</operator><name>OnActionExpandListener</name></name></super><argument_list>()</argument_list> <block>{

			<decl_stmt><decl><type><name>boolean</name></type> <name>searchPerformed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>


			<function><annotation>@<name>Override</name></annotation>
			<specifier>public</specifier> <type><name>boolean</name></type> <name>onMenuItemActionCollapse</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
				<comment type="line">// Reinitialize notes list to all notes when search is collapsed</comment>
				<expr_stmt><expr><name>searchQuery</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
				<if>if <condition>(<expr><call><name><name>searchLayout</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>toggleSearchLabel</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAction</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_MAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>supportInvalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></function>


			<function><annotation>@<name>Override</name></annotation>
			<specifier>public</specifier> <type><name>boolean</name></type> <name>onMenuItemActionExpand</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{

				<expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setOnQueryTextListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnQueryTextListener</name></super><argument_list>()</argument_list> <block>{
					<function><annotation>@<name>Override</name></annotation>
					<specifier>public</specifier> <type><name>boolean</name></type> <name>onQueryTextSubmit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{

						<return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_instant_search"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
					}</block></function>


					<function><annotation>@<name>Override</name></annotation>
					<specifier>public</specifier> <type><name>boolean</name></type> <name>onQueryTextChange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{

						<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_instant_search"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>searchLayout</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
								<name>searchPerformed</name> <operator>&amp;&amp;</operator> <call><name><name>mFragment</name><operator>.</operator><name>isAdded</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>searchTags</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name>searchQuery</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>NoteLoaderTask</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><literal type="string">"getNotesByPattern"</literal></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><literal type="boolean">true</literal></expr>;</return>
						}</block></then> <else>else <block>{
							<expr_stmt><expr><name>searchPerformed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<return>return <expr><literal type="boolean">false</literal></expr>;</return>
						}</block></else></if>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>setActionItemsVisibility</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>searchViewHasFocus</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>drawerOpen</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getDrawerLayout</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mainActivity</name><operator>.</operator><name>getDrawerLayout</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDrawerOpen</name>
				<argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>expandedView</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_EXPANDED_VIEW</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>navigation</name> <init>= <expr><call><name><name>Navigation</name><operator>.</operator><name>getNavigation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>navigationReminders</name> <init>= <expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>navigationArchive</name> <init>= <expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>ARCHIVE</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>navigationTrash</name> <init>= <expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>TRASH</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>navigationCategory</name> <init>= <expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>boolean</name></type> <name>filterPastReminders</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_FILTER_PAST_REMINDERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>filterArchivedInCategory</name> <init>= <expr><name>navigationCategory</name> <operator>&amp;&amp;</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name>
				<operator>.</operator><name>PREF_FILTER_ARCHIVED_IN_CATEGORIES</name></name> <operator>+</operator> <call><name><name>Navigation</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>isFabAllowed</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setAllowed</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>showFab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setAllowed</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>hideFab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_search</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>drawerOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_filter</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>drawerOpen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>filterPastReminders</name> <operator>&amp;&amp;</operator> <name>navigationReminders</name> <operator>&amp;&amp;</operator>
				<operator>!</operator><name>searchViewHasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_filter_remove</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>drawerOpen</name> <operator>&amp;&amp;</operator> <name>filterPastReminders</name> <operator>&amp;&amp;</operator> <name>navigationReminders</name>
				<operator>&amp;&amp;</operator> <operator>!</operator><name>searchViewHasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_filter_category</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>drawerOpen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>filterArchivedInCategory</name> <operator>&amp;&amp;</operator>
				<name>navigationCategory</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>searchViewHasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_filter_category_remove</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>drawerOpen</name> <operator>&amp;&amp;</operator> <name>filterArchivedInCategory</name> <operator>&amp;&amp;</operator>
				<name>navigationCategory</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>searchViewHasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_sort</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>drawerOpen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>navigationReminders</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>searchViewHasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_expanded_view</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>drawerOpen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>expandedView</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>searchViewHasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_contracted_view</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>drawerOpen</name> <operator>&amp;&amp;</operator> <name>expandedView</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>searchViewHasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_empty_trash</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>drawerOpen</name> <operator>&amp;&amp;</operator> <name>navigationTrash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_uncomplete_checklists</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name>searchViewHasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_tags</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name>searchViewHasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>protectedActions</name> <init>= <expr><block>{<expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_empty_trash</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>protectedActions</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
                <if>if <condition>(<expr><call><name><name>passwordConfirmed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>  )</condition><then> <block>{
                    <expr_stmt><expr><call><name>performAction</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>performAction</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Performs one of the ActionBar button's actions after checked notes protection
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>performAction</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>ActionMode</name></type> <name>actionMode</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>actionMode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
                    <if>if <condition>(<expr><call><name><name>mainActivity</name><operator>.</operator><name>getDrawerLayout</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDrawerOpen</name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getDrawerLayout</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>closeDrawer</name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getDrawerLayout</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openDrawer</name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_filter</name></name></expr>:</case>
					<expr_stmt><expr><call><name>filterReminders</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_filter_remove</name></name></expr>:</case>
					<expr_stmt><expr><call><name>filterReminders</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_filter_category</name></name></expr>:</case>
					<expr_stmt><expr><call><name>filterCategoryArchived</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_filter_category_remove</name></name></expr>:</case>
					<expr_stmt><expr><call><name>filterCategoryArchived</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_uncomplete_checklists</name></name></expr>:</case>
					<expr_stmt><expr><call><name>filterByUncompleteChecklists</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_tags</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>filterByTags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_sort</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>initSortingSubmenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_expanded_view</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>switchNotesView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_contracted_view</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>switchNotesView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_empty_trash</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>emptyTrash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></switch>
        }</block></then> <else>else <block>{
            <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_category</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>categorizeNotes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_tags</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>tagNotes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_share</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>share</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_merge</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>merge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_archive</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>archiveNotes</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_unarchive</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>archiveNotes</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_trash</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>trashNotes</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_untrash</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>trashNotes</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_delete</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>deleteNotes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_select_all</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>selectAllNotes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_add_reminder</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>addReminders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
<comment type="line">//                case R.id.menu_synchronize:</comment>
<comment type="line">//                    synchronizeSelectedNotes();</comment>
<comment type="line">//                    break;</comment>
            }</block></switch>
        }</block></else></if>

        <expr_stmt><expr><call><name>checkSortActionPerformed</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>addReminders</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SnoozeActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_POSTPONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>, <argument><expr><call><name><name>selectedNotes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Note</name><index>[<expr><call><name><name>selectedNotes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>REQUEST_CODE_ADD_ALARMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>switchNotesView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>expandedView</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_EXPANDED_VIEW</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_EXPANDED_VIEW</name></name></expr></argument>, <argument><expr><operator>!</operator><name>expandedView</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Change list view</comment>
        <expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Called to switch menu voices</comment>
        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>supportInvalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><name>void</name></type> <name>editNote</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_password_access"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
                <if>if <condition>(<expr><call><name><name>passwordConfirmed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setPasswordChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>AnimationsHelper</name><operator>.</operator><name>zoomListItem</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>view</name></expr></argument>, <argument><expr><call><name>getZoomListItemView</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name>listRoot</name></expr></argument>, <argument><expr><call><name>buildAnimatorListenerAdapter</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>AnimationsHelper</name><operator>.</operator><name>zoomListItem</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>view</name></expr></argument>, <argument><expr><call><name>getZoomListItemView</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>listRoot</name></expr></argument>, <argument><expr><call><name>buildAnimatorListenerAdapter</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


	<function><type><name>void</name></type> <name>editNote2</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Adding new note"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// if navigation is a category it will be set into note</comment>
            <try>try <block>{
                <if>if <condition>(<expr><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name><name>mainActivity</name><operator>.</operator><name>navigationTmp</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>String</name></type> <name>categoryId</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>ObjectUtils</name><operator>.</operator><name>defaultIfNull</name></name><argument_list>(<argument><expr><name><name>mainActivity</name><operator>.</operator><name>navigationTmp</name></name></expr></argument>,
							<argument><expr><call><name><name>Navigation</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCategory</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>categoryId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Maybe was not a category!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Editing note with id: "</literal> <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Current list scrolling position is saved to be restored later</comment>
        <expr_stmt><expr><call><name>refreshListScrollPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Fragments replacing</comment>
        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>switchToDetail</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier><comment type="line">// Used to show a Crouton dialog after saved (or tried to) a note</comment>
    <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{
            <case>case <expr><name>REQUEST_CODE_CATEGORY</name></expr>:</case>
                <comment type="line">// Dialog retarded to give time to activity's views of being completely initialized</comment>
                <comment type="line">// The dialog style is choosen depending on result code</comment>
                <switch>switch <condition>(<expr><name>resultCode</name></expr>)</condition> <block>{
                    <case>case <expr><name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>:</case>
                        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>category_saved</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>CONFIRM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CategoriesUpdatedEvent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name><name>Activity</name><operator>.</operator><name>RESULT_FIRST_USER</name></name></expr>:</case>
                        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>category_deleted</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <break>break;</break>
                }</block></switch>

                <break>break;</break>

            <case>case <expr><name>REQUEST_CODE_CATEGORY_NOTES</name></expr>:</case>
                <if>if <condition>(<expr><name>intent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Category</name></type> <name>tag</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_CATEGORY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>categorizeNotesExecute</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <break>break;</break>

            <case>case <expr><name>REQUEST_CODE_ADD_ALARMS</name></expr>:</case>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>clearChoices</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>selectedNotes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>finishActionMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>invalidateViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <break>break;</break>
        }</block></switch>

    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>checkSortActionPerformed</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getGroupId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Constants</name><operator>.</operator><name>MENU_SORT_GROUP_ID</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>arrayDb</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>sortable_columns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_SORTING_COLUMN</name></name></expr></argument>, <argument><expr><name><name>arrayDb</name><index>[<expr><call><name><name>item</name><operator>.</operator><name>getOrder</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Resets list scrolling position</comment>
            <expr_stmt><expr><name>listViewPositionOffset</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>listViewPosition</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>restoreListScrollPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>toggleSearchLabel</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Updates app widgets</comment>
            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>updateWidgets</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackActionFromResourceId</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Empties trash deleting all the notes
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>emptyTrash</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>empty_trash_confirmation</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
					<function><annotation>@<name>Override</name></annotation>
					<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{

						<decl_stmt><decl><type><name>boolean</name></type> <name>mustDeleteLockedNotes</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>listAdapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
							<expr_stmt><expr><call><name><name>selectedNotes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>listAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>mustDeleteLockedNotes</name> <operator>=</operator> <name>mustDeleteLockedNotes</name> <operator>||</operator> <call><name><name>listAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isLocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						}</block></for>
						<if>if <condition>(<expr><name>mustDeleteLockedNotes</name></expr>)</condition><then> <block>{
							<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
                                        <if>if <condition>(<expr><call><name><name>passwordConfirmed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>  )</condition><then> <block>{
                                            <expr_stmt><expr><call><name>deleteNotesExecute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
										}</block></then></if>
									}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else>else <block>{
							<expr_stmt><expr><call><name>deleteNotesExecute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Notes list adapter initialization and association to view
	 * @FIXME: This method is a divine opprobrium and MUST be refactored. I'm ashamed by myself.
     */</comment>
    <function><type><name>void</name></type> <name>initNotesList</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"initNotesList intent: "</literal> <operator>+</operator> <call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>progress_wheel</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Search for a tag</comment>
        <comment type="line">// A workaround to simplify it's to simulate normal search</comment>
        <if>if <condition>(<expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>intent</name><operator>.</operator><name>getCategories</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <call><name><name>intent</name><operator>.</operator><name>getCategories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>CATEGORY_BROWSABLE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>searchTags</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getDataString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>UrlCompleter</name><operator>.</operator><name>HASHTAG_SCHEME</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>goBackOnToggleSearchLabel</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>ACTION_SHORTCUT_WIDGET</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        	<return>return;</return>
		}</block></then></if>

        <comment type="line">// Searching</comment>
        <expr_stmt><expr><name>searchQuery</name> <operator>=</operator> <name>searchQueryInstant</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>searchQueryInstant</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>searchTags</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>searchQuery</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>searchUncompleteChecklists</name>
				<operator>||</operator> <call><name><name>IntentChecker</name><operator>.</operator><name>checkAction</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SEARCH</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_SEARCH_UNCOMPLETE_CHECKLISTS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

            <comment type="line">// Using tags</comment>
            <if>if <condition>(<expr><name>searchTags</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>SearchManager</name><operator>.</operator><name>QUERY</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>searchQuery</name> <operator>=</operator> <name>searchTags</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>NoteLoaderTask</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><literal type="string">"getNotesByTag"</literal></expr></argument>,
                        <argument><expr><name>searchQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>searchUncompleteChecklists</name> <operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>ACTION_SEARCH_UNCOMPLETE_CHECKLISTS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>searchQuery</name> <operator>=</operator> <call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>uncompleted_checklists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>searchUncompleteChecklists</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>NoteLoaderTask</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><literal type="string">"getNotesByUncompleteChecklist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <comment type="line">// Get the intent, verify the action and get the query</comment>
                <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>SearchManager</name><operator>.</operator><name>QUERY</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>searchQuery</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>SearchManager</name><operator>.</operator><name>QUERY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>searchTags</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>NoteLoaderTask</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><literal type="string">"getNotesByPattern"</literal></expr></argument>,
                        <argument><expr><name>searchQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name>toggleSearchLabel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then> <else>else <block>{
            <comment type="line">// Check if is launched from a widget with categories</comment>
            <if>if <condition>(<expr><operator>(</operator><call><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET_SHOW_LIST</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>intent</name>
                    <operator>.</operator><name>hasExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_WIDGET</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>||</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name><name>mainActivity</name><operator>.</operator><name>navigationTmp</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>widgetId</name> <init>= <expr><ternary><condition><expr><call><name><name>intent</name><operator>.</operator><name>hasExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_WIDGET</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>intent</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_WIDGET</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>widgetId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>sqlCondition</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_WIDGET_PREFIX</name></name> <operator>+</operator> <name>widgetId</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>categoryId</name> <init>= <expr><call><name><name>TextHelper</name><operator>.</operator><name>checkIntentCategory</name></name><argument_list>(<argument><expr><name>sqlCondition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>mainActivity</name><operator>.</operator><name>navigationTmp</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>categoryId</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>categoryId</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>removeExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_WIDGET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><name><name>mainActivity</name><operator>.</operator><name>navigationTmp</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Long</name></type> <name>categoryId</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>mainActivity</name><operator>.</operator><name>navigationTmp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>NoteLoaderTask</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>,
                            <argument><expr><literal type="string">"getNotesByCategory"</literal></expr></argument>, <argument><expr><name>categoryId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>NoteLoaderTask</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><literal type="string">"getAllNotes"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>NoteLoaderTask</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><literal type="string">"getAllNotes"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>toggleSearchLabel</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>activate</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>activate</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>searchQueryView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>search</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;b&gt; "</literal> <operator>+</operator> <name>searchQuery</name> <operator>+</operator> <literal type="string">"&lt;/b&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>searchLayout</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>searchCancel</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>toggleSearchLabel</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>searchLabelActive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>searchLabelActive</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>searchLabelActive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>AnimationsHelper</name><operator>.</operator><name>expandOrCollapse</name></name><argument_list>(<argument><expr><name>searchLayout</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>searchTags</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>searchQuery</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>searchUncompleteChecklists</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>goBackOnToggleSearchLabel</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAction</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_MAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>searchView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>MenuItemCompat</name><operator>.</operator><name>collapseActionView</name></name><argument_list>(<argument><expr><name>searchMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>goBackOnToggleSearchLabel</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAction</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></else></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>NavigationUpdatedNavDrawerClosedEvent</name></type> <name>navigationUpdatedNavDrawerClosedEvent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>listViewPosition</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>listViewPositionOffset</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setActionItemsVisibility</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>CategoriesUpdatedEvent</name></type> <name>categoriesUpdatedEvent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>NotesLoadedEvent</name></type> <name>notesLoadedEvent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>layoutSelected</name> <init>= <expr><ternary><condition><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_EXPANDED_VIEW</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>note_layout_expanded</name></name></expr>
                </then><else>: <expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>note_layout</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>listAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>NoteAdapter</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>layoutSelected</name></expr></argument>, <argument><expr><name><name>notesLoadedEvent</name><operator>.</operator><name>notes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>View</name></type> <name>noteLayout</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name>layoutSelected</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>noteViewHolder</name> <operator>=</operator> <operator>new</operator> <call><name>NoteViewHolder</name><argument_list>(<argument><expr><name>noteLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name><name>Navigation</name><operator>.</operator><name>getNavigation</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Navigation</name><operator>.</operator><name>UNCATEGORIZED</name></name> <operator>&amp;&amp;</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_ENABLE_SWIPE</name></name></expr></argument>,
				<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>enableSwipeToDismiss</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>viewGroup</name></decl></parameter>, <parameter><decl><name>reverseSortedPositions</name></decl></parameter>)</parameter_list> -&gt; <block>{

                <comment type="line">// Avoids conflicts with action mode</comment>
                <expr_stmt><expr><call><name>finishActionMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int</name></type> <name>position</name> <range>: <expr><name>reverseSortedPositions</name></expr></range></decl></init>)</control> <block>{
                    <decl_stmt><decl><type><name>Note</name></type> <name>note</name></decl>;</decl_stmt>
                    <try>try <block>{
                        <expr_stmt><expr><name>note</name> <operator>=</operator> <call><name><name>listAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IndexOutOfBoundsException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Please stop swiping in the zone beneath the last card"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    }</block></catch></try>

					<if>if <condition>(<expr><name>note</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
                            <if>if <condition>(<expr><operator>!</operator><call><name><name>passwordConfirmed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
								<expr_stmt><expr><call><name>onUndo</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
						}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>

                    <expr_stmt><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Depending on settings and note status this action will...</comment>
                    <comment type="line">// ...restore</comment>
                    <if>if <condition>(<expr><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>TRASH</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>trashNotes</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <comment type="line">// ...removes category</comment>
                    <elseif>else <if>if <condition>(<expr><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>categorizeNotesExecute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></elseif> <else>else <block>{
                        <comment type="line">// ...trash</comment>
                        <if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_swipe_to_trash"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                                <operator>||</operator> <call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>ARCHIVE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>trashNotes</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// ...archive</comment>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name>archiveNotes</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></else></if>
                }</block></for>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>disableSwipeToDismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>listAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Replace listview with Mr. Jingles if it is empty</comment>
        <if>if <condition>(<expr><call><name><name>notesLoadedEvent</name><operator>.</operator><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>empyListItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <comment type="line">// Restores listview position when turning back to list or when navigating reminders</comment>
        <if>if <condition>(<expr><name>list</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>notesLoadedEvent</name><operator>.</operator><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>listViewPosition</name> <operator>=</operator> <call><name><name>listAdapter</name><operator>.</operator><name>getClosestNotePosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>restoreListScrollPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

		<expr_stmt><expr><call><name>animateListView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>closeFab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>PasswordRemovedEvent</name></type> <name>passwordRemovedEvent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>animateListView</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name><name>OmniNotes</name><operator>.</operator><name>isDebugBuild</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>animate</name><argument_list>(<argument><expr><name>progress_wheel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setDuration</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>list_view_fade_anim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>alpha</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>animate</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setDuration</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>list_view_fade_anim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>alpha</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>progress_wheel</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>restoreListScrollPosition</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>listViewPosition</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setSelectionFromTop</name></name><argument_list>(<argument><expr><name>listViewPosition</name></expr></argument>, <argument><expr><name>listViewPositionOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>postDelayed</name><argument_list>(<argument><expr><name>fab</name><operator>::</operator><name>showFab</name></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setSelectionFromTop</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Batch note trashing
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>trashNotes</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>trash</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>selectedNotesSize</name> <init>= <expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Restore is performed immediately, otherwise undo bar is shown</comment>
        <if>if <condition>(<expr><name>trash</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>trackModifiedNotes</name><argument_list>(<argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>removeReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>trashNote</name><argument_list>(<argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// If list is empty again Mr Jingles will appear again</comment>
        <if>if <condition>(<expr><call><name><name>listAdapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>empyListItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name>finishActionMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Advice to user</comment>
        <if>if <condition>(<expr><name>trash</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_trashed</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_untrashed</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Creation of undo bar</comment>
        <if>if <condition>(<expr><name>trash</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ubc</name><operator>.</operator><name>showUndoBar</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>selectedNotesSize</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>trashed</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>hideFab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>undoTrash</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>view</name><operator>.</operator><name>ActionMode</name></name></type> <name>getActionMode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>actionMode</name></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getSelectedNotes</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>selectedNotes</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Single note logical deletion
     */</comment>
    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>trashNote</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trash</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>NoteProcessorTrash</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><name>trash</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>process</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Selects all notes in list
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>selectAllNotes</name><parameter_list>()</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>LinearLayout</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name><name>list</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>card_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>list_bg_selected</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>selectedNotes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>listAdapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name><name>selectedNotes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>listAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>addSelectedItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>prepareActionModeMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setCabTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Batch note permanent deletion
     */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>deleteNotes</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>delete_note_confirmation</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>onPositive</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>mainActivity</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{</block></lambda></expr></argument></argument_list></call></expr>
							if (passwordConfirmed.equals(PasswordValidator.Result.SUCCEED</block></lambda></expr></argument>)</argument_list></call></expr></expr_stmt>  )</block> <block>{
								<expr_stmt><expr><call><name>deleteNotesExecute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
							}</block></function>
						}</block></class>))
				<expr_stmt><expr><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}


    <comment type="block" format="javadoc">/**
     * Performs notes permanent deletion after confirmation by the user
     */</comment>
    private <function><type><name>void</name></type> <name>deleteNotesExecute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>NoteProcessorDelete</name><argument_list>(<argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>process</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>clearChoices</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selectedNotes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finishActionMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// If list is empty again Mr Jingles will appear again</comment>
        <if>if <condition>(<expr><call><name><name>listAdapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>empyListItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_deleted</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Batch note archiviation
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>archiveNotes</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>archive</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>selectedNotesSize</name> <init>= <expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Used in undo bar commit</comment>
        <expr_stmt><expr><name>sendToArchive</name> <operator>=</operator> <name>archive</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><operator>!</operator><name>archive</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>archiveNote</name><argument_list>(<argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>trackModifiedNotes</name><argument_list>(<argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <comment type="line">// If is restore it will be done immediately, otherwise the undo bar will be shown</comment>
            <if>if <condition>(<expr><name>archive</name></expr>)</condition><then> <block>{
                <comment type="line">// Saves archived state to eventually undo</comment>
                <expr_stmt><expr><call><name><name>undoArchivedMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>isArchived</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// If actual navigation is not "Notes" the item will not be removed but replaced to fit the new state</comment>
            <if>if <condition>(<expr><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>NOTES</name></name></expr></argument>)</argument_list></call>
					<operator>||</operator> <operator>(</operator><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>ARCHIVE</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>archive</name><operator>)</operator>
					<operator>||</operator> <operator>(</operator><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name>
					<operator>.</operator><name>PREF_FILTER_ARCHIVED_IN_CATEGORIES</name></name> <operator>+</operator> <call><name><name>Navigation</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setArchived</name></name><argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><call><name><name>listAdapter</name><operator>.</operator><name>getPosition</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finishActionMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If list is empty again Mr Jingles will appear again</comment>
        <if>if <condition>(<expr><call><name><name>listAdapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>empyListItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <comment type="line">// Advice to user</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>msg</name> <init>= <expr><ternary><condition><expr><name>archive</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_archived</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_unarchived</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Style</name></type> <name>style</name> <init>= <expr><ternary><condition><expr><name>archive</name></expr> ?</condition><then> <expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr> </then><else>: <expr><name><name>ONStyle</name><operator>.</operator><name>INFO</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Creation of undo bar</comment>
        <if>if <condition>(<expr><name>archive</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ubc</name><operator>.</operator><name>showUndoBar</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>selectedNotesSize</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>archived</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>hideFab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>undoArchive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Saves notes to be eventually restored at right position
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>trackModifiedNotes</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>modifiedNotesToTrack</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><name>modifiedNotesToTrack</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>undoNotesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>listAdapter</name><operator>.</operator><name>getPosition</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>archiveNote</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>archive</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name>NoteProcessorArchive</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><name>archive</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>process</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Notes"</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>archive</name></expr> ?</condition><then> <expr><literal type="string">"archived"</literal></expr> </then><else>: <expr><literal type="string">"restored from archive"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Categories addition and editing
     */</comment>
    <function><type><name>void</name></type> <name>editCategory</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>categoryIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>CategoryActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>categoryIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_CATEGORY</name></name></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>categoryIntent</name></expr></argument>, <argument><expr><name>REQUEST_CODE_CATEGORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Associates to or removes categories
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>categorizeNotes</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Retrieves all available categories</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categories</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCategories</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>MaterialDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>categorize_as</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>adapter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NavDrawerCategoryAdapter</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>categories</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>add_category</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveColorRes</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>negativeText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>remove_category</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>negativeColorRes</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorAccent</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><name>keepActionMode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>CategoryActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"noHome"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>REQUEST_CODE_CATEGORY_NOTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>


                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onNegative</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>categorizeNotesExecute</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ListView</name></type> <name>dialogList</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>getListView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>dialogList</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><call><name><name>dialogList</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>categorizeNotesExecute</name><argument_list>(<argument><expr><call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>categorizeNotesExecute</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>categorizeNote</name><argument_list>(<argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>trackModifiedNotes</name><argument_list>(<argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <comment type="line">// If is restore it will be done immediately, otherwise the undo bar</comment>
            <comment type="line">// will be shown</comment>
            <if>if <condition>(<expr><name>category</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <comment type="line">// Saves categories associated to eventually undo</comment>
                <expr_stmt><expr><call><name><name>undoCategoryMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// Update adapter content if actual navigation is the category</comment>
            <comment type="line">// associated with actually cycled note</comment>
            <if>if <condition>(<expr><operator>(</operator><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Navigation</name><operator>.</operator><name>checkNavigationCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
                    <call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>UNCATEGORIZED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><call><name><name>listAdapter</name><operator>.</operator><name>getPosition</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <expr_stmt><expr><call><name>finishActionMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If list is empty again Mr Jingles will appear again</comment>
        <if>if <condition>(<expr><call><name><name>listAdapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>empyListItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <comment type="line">// Advice to user</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>category</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notes_categorized_as</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" '"</literal> <operator>+</operator> <call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notes_category_removed</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Creation of undo bar</comment>
        <if>if <condition>(<expr><name>category</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ubc</name><operator>.</operator><name>showUndoBar</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notes_category_removed</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>hideFab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>undoCategorize</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>undoCategorizeCategory</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>categorizeNote</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name>NoteProcessorCategorize</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>process</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Bulk tag selected notes
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>tagNotes</name><parameter_list>()</parameter_list> <block>{

        <comment type="line">// Retrieves all available tags</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If there is no tag a message will be shown</comment>
        <if>if <condition>(<expr><call><name><name>tags</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>finishActionMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_tags_created</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Integer</name><index>[]</index></name></type> <name>preSelectedTags</name> <init>= <expr><call><name><name>TagsHelper</name><operator>.</operator><name>getPreselectedTagsArray</name></name><argument_list>(<argument><expr><name>selectedNotes</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>select_tags</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>items</name><argument_list>(<argument><expr><call><name><name>TagsHelper</name><operator>.</operator><name>getTagsArray</name></name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>itemsCallbackMultiChoice</name><argument_list>(<argument><expr><name>preSelectedTags</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>, <parameter><decl><name>text</name></decl></parameter>)</parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>tagNotesExecute</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr><name>preSelectedTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>tagNotesExecute</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>selectedTags</name></decl></parameter>, <parameter><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>preSelectedTags</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Retrieves selected tags</comment>
        <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name>tagNote</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>selectedTags</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// Clears data structures</comment>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>clearChoices</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Refreshes list</comment>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>invalidateViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If list is empty again Mr Jingles will appear again</comment>
        <if>if <condition>(<expr><call><name><name>listAdapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>empyListItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <if>if <condition>(<expr><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getActionMode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tags_added</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>tagNote</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>selectedTags</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>taggingResult</name> <init>= <expr><call><name><name>TagsHelper</name><operator>.</operator><name>addTagToNote</name></name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>selectedTags</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>taggingResult</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>sb</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>taggingResult</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Removes unchecked tags</comment>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>titleAndContent</name> <init>= <expr><call><name><name>TagsHelper</name><operator>.</operator><name>removeTag</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>taggingResult</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


<comment type="line">//	private void synchronizeSelectedNotes() {</comment>
<comment type="line">//		new DriveSyncTask(mainActivity).execute(new ArrayList&lt;Note&gt;(getSelectedNotes()));</comment>
<comment type="line">//		// Clears data structures</comment>
<comment type="line">//		listAdapter.clearSelectedItems();</comment>
<comment type="line">//		list.clearChoices();</comment>
<comment type="line">//		finishActionMode();</comment>
<comment type="line">//	}</comment>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onUndo</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>undoToken</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Cycles removed items to re-insert into adapter</comment>
        <for>for <control>(<init><decl><type><name>Integer</name></type> <name>notePosition</name> <range>: <expr><call><name><name>undoNotesMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>Note</name></type> <name>currentNote</name> <init>= <expr><call><name><name>undoNotesMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>notePosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//   Manages uncategorize or archive  undo</comment>
            <if>if <condition>(<expr><operator>(</operator><name>undoCategorize</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Navigation</name><operator>.</operator><name>checkNavigationCategory</name></name><argument_list>(<argument><expr><call><name><name>undoCategoryMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currentNote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>||</operator> <name>undoArchive</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>NOTES</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>undoCategorize</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>currentNote</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><call><name><name>undoCategoryMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currentNote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>undoArchive</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>currentNote</name><operator>.</operator><name>setArchived</name></name><argument_list>(<argument><expr><call><name><name>undoArchivedMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currentNote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
                <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>currentNote</name></expr></argument>, <argument><expr><call><name><name>listAdapter</name><operator>.</operator><name>getPosition</name></name><argument_list>(<argument><expr><name>currentNote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Manages trash undo</comment>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>notePosition</name></expr></argument>, <argument><expr><name>currentNote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <expr_stmt><expr><call><name><name>listAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>selectedNotes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>undoNotesMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>undoTrash</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>undoArchive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>undoCategorize</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>undoNotesMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>undoCategoryMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>undoArchivedMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>undoCategorizeCategory</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Crouton</name><operator>.</operator><name>cancelAllCroutons</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getActionMode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>ubc</name><operator>.</operator><name>hideUndoBar</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>showFab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><name>void</name></type> <name>commitPending</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>undoTrash</name> <operator>||</operator> <name>undoArchive</name> <operator>||</operator> <name>undoCategorize</name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notesList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>undoNotesMap</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>undoTrash</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>trashNote</name><argument_list>(<argument><expr><name>notesList</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><name>undoArchive</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>archiveNote</name><argument_list>(<argument><expr><name>notesList</name></expr></argument>, <argument><expr><name>sendToArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <elseif>else <if>if <condition>(<expr><name>undoCategorize</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>categorizeNote</name><argument_list>(<argument><expr><name>notesList</name></expr></argument>, <argument><expr><name>undoCategorizeCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>

            <expr_stmt><expr><name>undoTrash</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>undoArchive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>undoCategorize</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>undoCategorizeCategory</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

            <comment type="line">// Clears data structures</comment>
            <expr_stmt><expr><call><name><name>selectedNotes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>undoNotesMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>undoCategoryMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>undoArchivedMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>clearChoices</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>ubc</name><operator>.</operator><name>hideUndoBar</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>showFab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Changes committed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>updateWidgets</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Shares the selected note from the list
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>share</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Only one note should be selected to perform sharing but they'll be cycled anyhow</comment>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Note</name></type> <name>note</name> <range>: <expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>shareNote</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getActionMode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>merge</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>delete_merged</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>negativeText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NotesMergeEvent</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>


                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onNegative</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NotesMergeEvent</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></function>
                }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Merges all the selected notes
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onEventAsync</name><parameter_list>(<parameter><decl><type><name>NotesMergeEvent</name></type> <name>notesMergeEvent</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><specifier>final</specifier> <name>Note</name></type> <name>finalMergedNote</name> <init>= <expr><call><name><name>NotesHelper</name><operator>.</operator><name>mergeNotes</name></name><argument_list>(<argument><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>notesMergeEvent</name><operator>.</operator><name>keepMergedNotes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>getMainLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{

            <if>if <condition>(<expr><operator>!</operator><name><name>notesMergeEvent</name><operator>.</operator><name>keepMergedNotes</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>notesIds</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Note</name></type> <name>selectedNote</name> <range>: <expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                    <expr_stmt><expr><call><name><name>notesIds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>selectedNote</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><literal type="string">"merged_notes"</literal></expr></argument>, <argument><expr><name>notesIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>getSelectedNotes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getActionMode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAction</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_MERGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>switchToDetail</name></name><argument_list>(<argument><expr><name>finalMergedNote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


	<comment type="block" format="javadoc">/**
     * Excludes past reminders
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>filterReminders</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_FILTER_PAST_REMINDERS</name></name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Change list view</comment>
        <expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Called to switch menu voices</comment>
        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>supportInvalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


	<comment type="block" format="javadoc">/**
     * Excludes archived notes in categories navigation
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>filterCategoryArchived</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>filter</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_FILTER_ARCHIVED_IN_CATEGORIES</name></name> <operator>+</operator> <call><name><name>Navigation</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_FILTER_ARCHIVED_IN_CATEGORIES</name></name> <operator>+</operator> <call><name><name>Navigation</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
        <comment type="line">// Change list view</comment>
        <expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Called to switch menu voices</comment>
        <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>supportInvalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>filterByUncompleteChecklists</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_SEARCH_UNCOMPLETE_CHECKLISTS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>filterByTags</name><parameter_list>()</parameter_list> <block>{

        <comment type="line">// Retrieves all available categories</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name> <init>= <expr><call><name><name>TagsHelper</name><operator>.</operator><name>getAllTags</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If there is no category a message will be shown</comment>
        <if>if <condition>(<expr><call><name><name>tags</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_tags_created</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// Dialog and events creation</comment>
        <expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>select_tags</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>items</name><argument_list>(<argument><expr><call><name><name>TagsHelper</name><operator>.</operator><name>getTagsArray</name></name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>itemsCallbackMultiChoice</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Integer</name><index>[]</index></name><block>{}</block></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>, <parameter><decl><name>text</name></decl></parameter>)</parameter_list> -&gt; <block>{
                    <comment type="line">// Retrieves selected tags</comment>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>selectedTags</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>Integer</name></type> <name>aWhich</name> <range>: <expr><name>which</name></expr></range></decl></init>)</control> <block>{
                        <expr_stmt><expr><call><name><name>selectedTags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tags</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>aWhich</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>

                    <comment type="line">// Saved here to allow persisting search</comment>
                    <expr_stmt><expr><name>searchTags</name> <operator>=</operator> <call><name><name>selectedTags</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>selectedTags</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Hides keyboard</comment>
                    <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>KeyboardUtils</name><operator>.</operator><name>hideKeyboard</name></name><argument_list>(<argument><expr><name>searchView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>removeExtra</name></name><argument_list>(<argument><expr><name><name>SearchManager</name><operator>.</operator><name>QUERY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>initNotesList</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>MenuItem</name></type> <name>getSearchMenuItem</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>searchMenuItem</name></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isFabAllowed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isFabAllowed</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isFabAllowed</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>actionModeFinishing</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>boolean</name></type> <name>isAllowed</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Actionmode check</comment>
        <expr_stmt><expr><name>isAllowed</name> <operator>=</operator> <name>isAllowed</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>getActionMode</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>actionModeFinishing</name><operator>)</operator></expr>;</expr_stmt>
        <comment type="line">// Navigation check</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>navigation</name> <init>= <expr><call><name><name>Navigation</name><operator>.</operator><name>getNavigation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>isAllowed</name> <operator>=</operator> <name>isAllowed</name> <operator>&amp;&amp;</operator> <name>navigation</name> <operator>!=</operator> <name><name>Navigation</name><operator>.</operator><name>ARCHIVE</name></name> <operator>&amp;&amp;</operator> <name>navigation</name> <operator>!=</operator> <name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name> <operator>&amp;&amp;</operator> <name>navigation</name>
                <operator>!=</operator> <name><name>Navigation</name><operator>.</operator><name>TRASH</name></name></expr>;</expr_stmt>
        <comment type="line">// Navigation drawer check</comment>
        <expr_stmt><expr><name>isAllowed</name> <operator>=</operator> <name>isAllowed</name> <operator>&amp;&amp;</operator> <call><name><name>mainActivity</name><operator>.</operator><name>getDrawerLayout</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mainActivity</name><operator>.</operator><name>getDrawerLayout</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDrawerOpen</name>
                <argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>isAllowed</name></expr>;</return>
    }</block></function>


}
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\StatsActivity.java" hash="8dce8022ebb77fb9a00253c4c532891738df9e8f"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Stats</name></name>;</import>


<class><specifier>public</specifier> class <name>StatsActivity</name> <super><extends>extends <name>Activity</name></extends></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>void</name></type> <name>initData</name><parameter_list>()</parameter_list> <block>{
        <class>class <name>StatsTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Stats</name></argument>&gt;</argument_list></name></extends></super> <block>{

            <decl_stmt><decl><specifier>private</specifier> <type><name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>


            <constructor><specifier>public</specifier> <name>StatsTask</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mContext</name></name> <operator>=</operator> <name>mContext</name></expr>;</expr_stmt>
            }</block></constructor>


            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>Stats</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><operator>(</operator><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getStats</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>


            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Stats</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>populateViews</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class>

		<expr_stmt><expr><operator>new</operator> <call><name>StatsTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>populateViews</name><parameter_list>(<parameter><decl><type><name>Stats</name></type> <name>mStats</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_notes_total</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getNotesTotalNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_notes_active</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getNotesActive</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_notes_archived</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getNotesArchived</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_notes_trashed</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getNotesTrashed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_reminders</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getReminders</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_reminders_futures</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getRemindersFutures</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_checklists</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getNotesChecklist</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_masked</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getNotesMasked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_categories</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getCategories</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_tags</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_attachments</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getAttachments</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_attachments_images</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getImages</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_attachments_videos</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getVideos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_attachments_audiorecordings</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name>
                <operator>.</operator><name>getAudioRecordings</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_attachments_sketches</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getSketches</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_attachments_files</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_locations</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_words</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getWords</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_words_max</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getWordsMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_words_avg</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getWordsAvg</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_chars</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getChars</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_chars_max</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getCharsMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>stat_chars_avg</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>mStats</name><operator>.</operator><name>getCharsAvg</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\widget\ListWidgetService.java" hash="d5cf294c88eb057a4797e6317dc05512e1ec9ff0"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>widget</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RemoteViewsService</name></name>;</import>


<class><specifier>public</specifier> class <name>ListWidgetService</name> <super><extends>extends <name>RemoteViewsService</name></extends></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>RemoteViewsFactory</name></type> <name>onGetViewFactory</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>ListRemoteViewsFactory</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getApplication</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\widget\ListWidgetProvider.java" hash="b1dc15cc557e1b5a15d1450d859db8a439e72edb"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>widget</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>appwidget</name><operator>.</operator><name>AppWidgetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>SparseArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RemoteViews</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>ListWidgetProvider</name> <super><extends>extends <name>WidgetProvider</name></extends></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>RemoteViews</name></type> <name>getRemoteViews</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>widgetId</name></decl></parameter>,
                                         <parameter><decl><type><name>boolean</name></type> <name>isSmall</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSingleLine</name></decl></parameter>, 
                                         <parameter><decl><type><name><name>SparseArray</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>pendingIntentsMap</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RemoteViews</name></type> <name>views</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>isSmall</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>views</name> <operator>=</operator> <operator>new</operator> <call><name>RemoteViews</name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>widget_layout_small</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>,
                    <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>isSingleLine</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>views</name> <operator>=</operator> <operator>new</operator> <call><name>RemoteViews</name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>widget_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add</name></name></expr></argument>,
                    <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>,
                    <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera</name></name></expr></argument>,
                    <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><name>views</name> <operator>=</operator> <operator>new</operator> <call><name>RemoteViews</name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>widget_layout_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add</name></name></expr></argument>,
                    <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>,
                    <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera</name></name></expr></argument>,
                    <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Set up the intent that starts the ListViewService, which will</comment>
            <comment type="line">// provide the views for this collection.</comment>
            <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>ListWidgetService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Add the app widget ID to the intent extras.</comment>
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>EXTRA_APPWIDGET_ID</name></name></expr></argument>, <argument><expr><name>widgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>toUri</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>URI_INTENT_SCHEME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setRemoteAdapter</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_list</name></name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Intent</name></type> <name>clickIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>clickIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PendingIntent</name></type> <name>clickPI</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                    <argument><expr><name>clickIntent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setPendingIntentTemplate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_list</name></name></expr></argument>, <argument><expr><name>clickPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>views</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\widget\SimpleWidgetProvider.java" hash="6444c4eea56bbcd0bd7fc9182593cbb91a53718e"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>widget</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>SparseArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RemoteViews</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>SimpleWidgetProvider</name> <super><extends>extends <name>WidgetProvider</name></extends></super> <block>{


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>RemoteViews</name></type> <name>getRemoteViews</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>widgetId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSmall</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSingleLine</name></decl></parameter>, 
                                         <parameter><decl><type><name><name>SparseArray</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>pendingIntentsMap</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RemoteViews</name></type> <name>views</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>isSmall</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>views</name> <operator>=</operator> <operator>new</operator> <call><name>RemoteViews</name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>widget_layout_small</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>views</name> <operator>=</operator> <operator>new</operator> <call><name>RemoteViews</name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>widget_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add</name></name></expr></argument>, <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera</name></name></expr></argument>, <argument><expr><call><name><name>pendingIntentsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>views</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\widget\ListRemoteViewsFactory.java" hash="b9d8b0d48f8b3bc1a0ec53734107d8e14b27b28b"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>widget</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>appwidget</name><operator>.</operator><name>AppWidgetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RemoteViews</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RemoteViewsService</name><operator>.</operator><name>RemoteViewsFactory</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>BitmapHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Navigation</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>TextHelper</name></name>;</import>


<class><specifier>public</specifier> class <name>ListRemoteViewsFactory</name> <super><implements>implements <name>RemoteViewsFactory</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WIDTH</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>HEIGHT</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>showThumbnails</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>showTimestamps</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>OmniNotes</name></type> <name>app</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>appWidgetId</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>navigation</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>ListRemoteViewsFactory</name><parameter_list>(<parameter><decl><type><name>Application</name></type> <name>app</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>app</name></name> <operator>=</operator> <operator>(</operator><name>OmniNotes</name><operator>)</operator> <name>app</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>appWidgetId</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>EXTRA_APPWIDGET_ID</name></name></expr></argument>, <argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>INVALID_APPWIDGET_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Created widget "</literal> <operator>+</operator> <name>appWidgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>condition</name> <init>= <expr><call><name><name>app</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(
                        <argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_WIDGET_PREFIX</name></name>
                                <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>appWidgetId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>notes</name> <operator>=</operator> <call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotes</name><argument_list>(<argument><expr><name>condition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDataSetChanged</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"onDataSetChanged widget "</literal> <operator>+</operator> <name>appWidgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>navigation</name> <operator>=</operator> <call><name><name>Navigation</name><operator>.</operator><name>getNavigation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>String</name></type> <name>condition</name> <init>= <expr><call><name><name>app</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(
                        <argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_WIDGET_PREFIX</name></name>
                                <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>appWidgetId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>notes</name> <operator>=</operator> <call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotes</name><argument_list>(<argument><expr><name>condition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_WIDGET_PREFIX</name></name>
                        <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>appWidgetId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>RemoteViews</name></type> <name>getViewAt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RemoteViews</name></type> <name>row</name> <init>= <expr><operator>new</operator> <call><name>RemoteViews</name><argument_list>(<argument><expr><call><name><name>app</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>note_layout_widget</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Spanned</name><index>[]</index></name></type> <name>titleAndContent</name> <init>= <expr><call><name><name>TextHelper</name><operator>.</operator><name>parseTitleAndContent</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setTextViewText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_title</name></name></expr></argument>, <argument><expr><name><name>titleAndContent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setTextViewText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_content</name></name></expr></argument>, <argument><expr><name><name>titleAndContent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>color</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>showThumbnails</name> <operator>&amp;&amp;</operator> <call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      			<decl_stmt><decl><type><name>Attachment</name></type> <name>mAttachment</name> <init>= <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      			<decl_stmt><decl><type><name>Bitmap</name></type> <name>bmp</name> <init>= <expr><call><name><name>BitmapHelper</name><operator>.</operator><name>getBitmapFromAttachment</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>mAttachment</name></expr></argument>, <argument><expr><name>WIDTH</name></expr></argument>, <argument><expr><name>HEIGHT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      			<expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setBitmap</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachmentThumbnail</name></name></expr></argument>, <argument><expr><literal type="string">"setImageBitmap"</literal></expr></argument>, <argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachmentThumbnail</name></name></expr></argument>, <argument><expr><literal type="string">"setVisibility"</literal></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachmentThumbnail</name></name></expr></argument>, <argument><expr><literal type="string">"setVisibility"</literal></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>showTimestamps</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setTextViewText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_date</name></name></expr></argument>, <argument><expr><call><name><name>TextHelper</name><operator>.</operator><name>getDateText</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setTextViewText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_date</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Next, set a fill-intent, which will be used to fill in the pending intent template</comment>
        <comment type="line">// that is set on the collection view in StackWidgetProvider.</comment>
        <decl_stmt><decl><type><name>Bundle</name></type> <name>extras</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>extras</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>fillInIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fillInIntent</name><operator>.</operator><name>putExtras</name></name><argument_list>(<argument><expr><name>extras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Make it possible to distinguish the individual on-click</comment>
        <comment type="line">// action of a given item</comment>
        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setOnClickFillInIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>root</name></name></expr></argument>, <argument><expr><name>fillInIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>row</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>RemoteViews</name></type> <name>getLoadingView</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getViewTypeCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>position</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>hasStableIds</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateConfiguration</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mAppWidgetId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sqlCondition</name></decl></parameter>,
                                           <parameter><decl><type><name>boolean</name></type> <name>thumbnails</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>timestamps</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Widget configuration updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mContext</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_WIDGET_PREFIX</name></name> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>mAppWidgetId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sqlCondition</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>showThumbnails</name> <operator>=</operator> <name>thumbnails</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>showTimestamps</name> <operator>=</operator> <name>timestamps</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>color</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>RemoteViews</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>colorsPref</name> <init>= <expr><call><name><name>app</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"settings_colors_widget"</literal></expr></argument>,
                        <argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_COLORS_APP_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Checking preference</comment>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>colorsPref</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"disabled"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

            <comment type="line">// Resetting transparent color to the view</comment>
            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tag_marker</name></name></expr></argument>, <argument><expr><literal type="string">"setBackgroundColor"</literal></expr></argument>, <argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#00000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If tag is set the color will be applied on the appropriate target</comment>
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>colorsPref</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>card_layout</name></name></expr></argument>, <argument><expr><literal type="string">"setBackgroundColor"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tag_marker</name></name></expr></argument>, <argument><expr><literal type="string">"setBackgroundColor"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tag_marker</name></name></expr></argument>, <argument><expr><literal type="string">"setBackgroundColor"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\AlphaManager.java" hash="45f41df1fed794e363ea944e6620a192fe6df817"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>


<class><specifier>public</specifier> class <name>AlphaManager</name> <block>{
    
    <constructor><specifier>private</specifier> <name>AlphaManager</name><parameter_list>()</parameter_list><block>{}</block></constructor>

    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setAlpha</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\widget\WidgetConfigurationActivity.java" hash="45f1a7c6dade39b3195297caeca2514f6c045c53"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>widget</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>appwidget</name><operator>.</operator><name>AppWidgetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RadioGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Spinner</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name><operator>.</operator><name>NavDrawerCategoryAdapter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>WidgetConfigurationActivity</name> <super><extends>extends <name>Activity</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Spinner</name></type> <name>categorySpinner</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mAppWidgetId</name> <init>= <expr><name><name>AppWidgetManager</name><operator>.</operator><name>INVALID_APPWIDGET_ID</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>sqlCondition</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>RadioGroup</name></type> <name>mRadioGroup</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_CANCELED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_widget_configuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mRadioGroup</name> <operator>=</operator> <operator>(</operator><name>RadioGroup</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_config_radiogroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mRadioGroup</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>group</name></decl></parameter>, <parameter><decl><name>checkedId</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <switch>switch <condition>(<expr><name>checkedId</name></expr>)</condition> <block>{
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_config_notes</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>categorySpinner</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                    <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_config_categories</name></name></expr>:</case>
                        <expr_stmt><expr><call><name><name>categorySpinner</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

					<default>default:</default>
						<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <name>checkedId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></switch>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>categorySpinner</name> <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_config_spinner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>categorySpinner</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DbHelper</name></type> <name>db</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categories</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getCategories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>categorySpinner</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NavDrawerCategoryAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>categories</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Button</name></type> <name>configOkButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_config_confirm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>configOkButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{

            <if>if <condition>(<expr><call><name><name>mRadioGroup</name><operator>.</operator><name>getCheckedRadioButtonId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_config_notes</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sqlCondition</name> <operator>=</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name><name>DbHelper</name><operator>.</operator><name>KEY_ARCHIVED</name></name> <operator>+</operator> <literal type="string">" IS NOT 1 AND "</literal> <operator>+</operator> <name><name>DbHelper</name><operator>.</operator><name>KEY_TRASHED</name></name> <operator>+</operator> <literal type="string">" IS"</literal> <operator>+</operator>
                        <literal type="string">" NOT 1 "</literal></expr>;</expr_stmt>

            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>Category</name></type> <name>tag</name> <init>= <expr><operator>(</operator><name>Category</name><operator>)</operator> <call><name><name>categorySpinner</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>sqlCondition</name> <operator>=</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name><name>DbHelper</name><operator>.</operator><name>TABLE_NOTES</name></name> <operator>+</operator> <literal type="string">"."</literal>
                        <operator>+</operator> <name><name>DbHelper</name><operator>.</operator><name>KEY_CATEGORY</name></name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <call><name><name>tag</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call>
                        <operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name><name>DbHelper</name><operator>.</operator><name>KEY_ARCHIVED</name></name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal>
                        <operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name><name>DbHelper</name><operator>.</operator><name>KEY_TRASHED</name></name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal></expr>;</expr_stmt>
            }</block></else></if>

            <decl_stmt><decl><type><name>CheckBox</name></type> <name>showThumbnailsCheckBox</name> <init>= <expr><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>show_thumbnails</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CheckBox</name></type> <name>showTimestampsCheckBox</name> <init>= <expr><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>show_timestamps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Updating the ListRemoteViewsFactory parameter to get the list</comment>
            <comment type="line">// of notes</comment>
            <expr_stmt><expr><call><name><name>ListRemoteViewsFactory</name><operator>.</operator><name>updateConfiguration</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mAppWidgetId</name></expr></argument>,
                    <argument><expr><name>sqlCondition</name></expr></argument>, <argument><expr><call><name><name>showThumbnailsCheckBox</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>showTimestampsCheckBox</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Intent</name></type> <name>resultValue</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>resultValue</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>EXTRA_APPWIDGET_ID</name></name></expr></argument>,
                    <argument><expr><name>mAppWidgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>resultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Checks if no tags are available and then disable that option</comment>
        <if>if <condition>(<expr><call><name><name>categories</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mRadioGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>categorySpinner</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Bundle</name></type> <name>extras</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>extras</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mAppWidgetId</name> <operator>=</operator> <call><name><name>extras</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>EXTRA_APPWIDGET_ID</name></name></expr></argument>,
                    <argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>INVALID_APPWIDGET_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// If they gave us an intent without the widget id, just bail.</comment>
        <if>if <condition>(<expr><name>mAppWidgetId</name> <operator>==</operator> <name><name>AppWidgetManager</name><operator>.</operator><name>INVALID_APPWIDGET_ID</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\AssetUtils.java" hash="ce93a9405a546182a275105703514f2f3864a377"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>AssetManager</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>


<class><specifier>public</specifier> class <name>AssetUtils</name> <block>{

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>,
								 <parameter><decl><type><name>AssetManager</name></type> <name>assetManager</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<for>for <control>(<init><decl><type><name>String</name></type> <name>currentFileName</name> <range>: <expr><call><name><name>assetManager</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>currentFileName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>list</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>AssetManager</name></type> <name>assetManager</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name> <init>= <expr><call><name><name>assetManager</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>files</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\widget\WidgetProvider.java" hash="b436e824ef01b94398488abdf0eeba077b987f16"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>widget</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>appwidget</name><operator>.</operator><name>AppWidgetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>appwidget</name><operator>.</operator><name>AppWidgetProvider</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>SparseArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RemoteViews</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>WidgetProvider</name> <super><extends>extends <name>AppWidgetProvider</name></extends></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_WORD</name> <init>= <expr><literal type="string">"it.feio.android.omninotes.widget.WORD"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TOAST_ACTION</name> <init>= <expr><literal type="string">"it.feio.android.omninotes.widget.NOTE"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_ITEM</name> <init>= <expr><literal type="string">"it.feio.android.omninotes.widget.EXTRA_FIELD"</literal></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onUpdate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AppWidgetManager</name></type> <name>appWidgetManager</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>appWidgetIds</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Get all ids</comment>
        <decl_stmt><decl><type><name>ComponentName</name></type> <name>thisWidget</name> <init>= <expr><operator>new</operator> <call><name>ComponentName</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>allWidgetIds</name> <init>= <expr><call><name><name>appWidgetManager</name><operator>.</operator><name>getAppWidgetIds</name></name><argument_list>(<argument><expr><name>thisWidget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>appWidgetId</name> <range>: <expr><name>allWidgetIds</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"WidgetProvider onUpdate() widget "</literal> <operator>+</operator> <name>appWidgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Get the layout for and attach an on-click listener to views</comment>
            <expr_stmt><expr><call><name>setLayout</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>appWidgetManager</name></expr></argument>, <argument><expr><name>appWidgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onUpdate</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>appWidgetManager</name></expr></argument>, <argument><expr><name>appWidgetIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAppWidgetOptionsChanged</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AppWidgetManager</name></type> <name>appWidgetManager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>appWidgetId</name></decl></parameter>,
                                          <parameter><decl><type><name>Bundle</name></type> <name>newOptions</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Widget size changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLayout</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>appWidgetManager</name></expr></argument>, <argument><expr><name>appWidgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>setLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AppWidgetManager</name></type> <name>appWidgetManager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>widgetId</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Create an Intent to launch DetailActivity</comment>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intentDetail</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intentDetail</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intentDetail</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_WIDGET</name></name></expr></argument>, <argument><expr><name>widgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PendingIntent</name></type> <name>pendingIntentDetail</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>widgetId</name></expr></argument>, <argument><expr><name>intentDetail</name></expr></argument>,
                <argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Create an Intent to launch ListActivity</comment>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intentList</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intentList</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET_SHOW_LIST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intentList</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_WIDGET</name></name></expr></argument>, <argument><expr><name>widgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PendingIntent</name></type> <name>pendingIntentList</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>widgetId</name></expr></argument>, <argument><expr><name>intentList</name></expr></argument>,
                <argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Create an Intent to launch DetailActivity to take a photo</comment>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intentDetailPhoto</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intentDetailPhoto</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET_TAKE_PHOTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intentDetailPhoto</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_WIDGET</name></name></expr></argument>, <argument><expr><name>widgetId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PendingIntent</name></type> <name>pendingIntentDetailPhoto</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>widgetId</name></expr></argument>, <argument><expr><name>intentDetailPhoto</name></expr></argument>,
                <argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check various dimensions aspect of widget to choose between layouts</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSmall</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSingleLine</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Bundle</name></type> <name>options</name> <init>= <expr><call><name><name>appWidgetManager</name><operator>.</operator><name>getAppWidgetOptions</name></name><argument_list>(<argument><expr><name>widgetId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Width check</comment>
		<expr_stmt><expr><name>isSmall</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>OPTION_APPWIDGET_MIN_WIDTH</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">110</literal></expr>;</expr_stmt>
		<comment type="line">// Height check</comment>
		<expr_stmt><expr><name>isSingleLine</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>OPTION_APPWIDGET_MIN_HEIGHT</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">110</literal></expr>;</expr_stmt>

        <comment type="line">// Creation of a map to associate PendingIntent(s) to views</comment>
        <decl_stmt><decl><type><name><name>SparseArray</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>SparseArray</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name>pendingIntentList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add</name></name></expr></argument>, <argument><expr><name>pendingIntentDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera</name></name></expr></argument>, <argument><expr><name>pendingIntentDetailPhoto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RemoteViews</name></type> <name>views</name> <init>= <expr><call><name>getRemoteViews</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>widgetId</name></expr></argument>, <argument><expr><name>isSmall</name></expr></argument>, <argument><expr><name>isSingleLine</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Tell the AppWidgetManager to perform an update on the current app widget</comment>
        <expr_stmt><expr><call><name><name>appWidgetManager</name><operator>.</operator><name>updateAppWidget</name></name><argument_list>(<argument><expr><name>widgetId</name></expr></argument>, <argument><expr><name>views</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function_decl><specifier>abstract</specifier> <specifier>protected</specifier> <type><name>RemoteViews</name></type> <name>getRemoteViews</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>widgetId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSmall</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSingleLine</name></decl></parameter>, <parameter><decl><type><name><name>SparseArray</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>pendingIntentsMap</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\DetailFragment.java" hash="0d091ac55077abcd5f831ff1925fef1fd05b0841"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>DatePickerDialog</name><operator>.</operator><name>OnDateSetListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>TimePickerDialog</name><operator>.</operator><name>OnTimeSetListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ActivityInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>Location</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>MediaPlayer</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>MediaRecorder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>ThumbnailUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentTransaction</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItemCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Selection</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnTouchListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name><operator>.</operator><name>AnimationListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>DialogAction</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>MaterialDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>GlideBitmapDrawable</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>neopixl</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>components</name><operator>.</operator><name>edittext</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>neopixl</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>components</name><operator>.</operator><name>textview</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>pushbullet</name><operator>.</operator><name>android</name><operator>.</operator><name>extension</name><operator>.</operator><name>MessagingExtension</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ViewNotSupportedException</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>CheckListChangedListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>models</name><operator>.</operator><name>CheckListView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>models</name><operator>.</operator><name>CheckListViewItem</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>models</name><operator>.</operator><name>ChecklistManager</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>AttachmentTask</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>NotesUpdatedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>PushbulletReplyEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>SwitchFragmentEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name><operator>.</operator><name>NoteProcessorDelete</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name><operator>.</operator><name>SaveNoteTask</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>AttachmentsHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PermissionsHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>date</name><operator>.</operator><name>DateHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name><operator>.</operator><name>AttachmentAdapter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name><operator>.</operator><name>NavDrawerCategoryAdapter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name><operator>.</operator><name>PlacesAutoCompleteAdapter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnAttachingFileListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnGeoUtilResultListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnNoteSaved</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnReminderPickedListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>ExpandableHeightGridView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Display</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>ReminderPickers</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>links</name><operator>.</operator><name>TextLinkClickListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>nineoldandroids</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPropertyAnimator</name><operator>.</operator><name>animate</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Integer</name><operator>.</operator><name>parseInt</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Long</name><operator>.</operator><name>parseLong</name></name>;</import>


<class><specifier>public</specifier> class <name>DetailFragment</name> <super><extends>extends <name>BaseFragment</name></extends> <implements>implements <name>OnReminderPickedListener</name>, <name>OnTouchListener</name>,
		<name>OnAttachingFileListener</name>, <name>TextWatcher</name>, <name>CheckListChangedListener</name>, <name>OnNoteSaved</name>,
		<name>OnGeoUtilResultListener</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TAKE_PHOTO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TAKE_VIDEO</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SET_PASSWORD</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SKETCH</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CATEGORY</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DETAIL</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FILES</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RC_READ_EXTERNAL_STORAGE_PERMISSION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>detail_root</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ViewGroup</name></type> <name>root</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>detail_title</name></name></expr></argument>)</argument_list></annotation>
	<type><name>EditText</name></type> <name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>detail_content</name></name></expr></argument>)</argument_list></annotation>
	<type><name>EditText</name></type> <name>content</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>detail_attachments_above</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ViewStub</name></type> <name>attachmentsAbove</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>detail_attachments_below</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ViewStub</name></type> <name>attachmentsBelow</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
	<annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gridview</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ExpandableHeightGridView</name></type> <name>mGridView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>locationTextView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>detail_timestamps</name></name></expr></argument>)</argument_list></annotation>
	<type><name>View</name></type> <name>timestampsView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>reminder_layout</name></name></expr></argument>)</argument_list></annotation>
	<type><name>LinearLayout</name></type> <name>reminder_layout</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>reminder_icon</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ImageView</name></type> <name>reminderIcon</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>datetime</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>datetime</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>detail_tile_card</name></name></expr></argument>)</argument_list></annotation>
	<type><name>View</name></type> <name>titleCardView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content_wrapper</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ScrollView</name></type> <name>scrollView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>creation</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>creationTextView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>last_modification</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>lastModificationTextView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>title_wrapper</name></name></expr></argument>)</argument_list></annotation>
	<type><name>View</name></type> <name>titleWrapperView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tag_marker</name></name></expr></argument>)</argument_list></annotation>
	<type><name>View</name></type> <name>tagMarkerView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>detail_wrapper</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ViewManager</name></type> <name>detailWrapperView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>snackbar_placeholder</name></name></expr></argument>)</argument_list></annotation>
	<type><name>View</name></type> <name>snackBarPlaceholder</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>public</specifier> <type><name>OnDateSetListener</name></type> <name>onDateSetListener</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>OnTimeSetListener</name></type> <name>onTimeSetListener</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>goBack</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>View</name></type> <name>toggleChecklistView</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Uri</name></type> <name>attachmentUri</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>AttachmentAdapter</name></type> <name>mAttachmentAdapter</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>MaterialDialog</name></type> <name>attachmentDialog</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Note</name></type> <name>note</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Note</name></type> <name>noteTmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Note</name></type> <name>noteOriginal</name></decl>;</decl_stmt>
	<comment type="line">// Audio recording</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>recordName</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>MediaRecorder</name></type> <name>mRecorder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>MediaPlayer</name></type> <name>mPlayer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isRecording</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>isPlayingView</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Bitmap</name></type> <name>recordingBitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>ChecklistManager</name></type> <name>mChecklistManager</name></decl>;</decl_stmt>
	<comment type="line">// Values to print result</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>exitMessage</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Style</name></type> <name>exitCroutonStyle</name> <init>= <expr><name><name>ONStyle</name><operator>.</operator><name>CONFIRM</name></name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Flag to check if after editing it will return to ListActivity or not</comment>
	<comment type="line">// and in the last case a Toast will be shown instead than Crouton</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>afterSavedReturnsToList</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>showKeyboard</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>swiping</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>startSwipeX</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>orientationChanged</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>audioRecordingTimeStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>audioRecordingTime</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>DetailFragment</name></type> <name>mFragment</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Attachment</name></type> <name>sketchEdited</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>contentLineCounter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>contentCursorPosition</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mergedNotesIds</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>MainActivity</name></type> <name>mainActivity</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>activityPausing</name></decl>;</decl_stmt>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mFragment</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SwitchFragmentEvent</name><argument_list>(<argument><expr><name><name>SwitchFragmentEvent</name><operator>.</operator><name>Direction</name><operator>.</operator><name>CHILDREN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unregister</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>GeocodeHelper</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>activityPausing</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_detail</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>view</name></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mainActivity</name> <operator>=</operator> <operator>(</operator><name>MainActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>prefs</name> <operator>=</operator> <name><name>mainActivity</name><operator>.</operator><name>prefs</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getSupportActionBar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayShowTitleEnabled</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getToolbar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setNavigationOnClickListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>navigateUp</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Force the navigation drawer to stay opened if tablet mode is on, otherwise has to stay closed</comment>
		<if>if <condition>(<expr><call><name><name>NavigationDrawerFragment</name><operator>.</operator><name>isDoublePanelActive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getDrawerLayout</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDrawerLockMode</name><argument_list>(<argument><expr><name><name>DrawerLayout</name><operator>.</operator><name>LOCK_MODE_LOCKED_OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getDrawerLayout</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDrawerLockMode</name><argument_list>(<argument><expr><name><name>DrawerLayout</name><operator>.</operator><name>LOCK_MODE_LOCKED_CLOSED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<comment type="line">// Restored temp note after orientation change</comment>
		<if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>noteTmp</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><literal type="string">"noteTmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>note</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><literal type="string">"note"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>noteOriginal</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><literal type="string">"noteOriginal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>attachmentUri</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><literal type="string">"attachmentUri"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>orientationChanged</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"orientationChanged"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// Added the sketched image if present returning from SketchFragment</comment>
		<if>if <condition>(<expr><name><name>mainActivity</name><operator>.</operator><name>sketchUri</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Attachment</name></type> <name>mAttachment</name> <init>= <expr><operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><name><name>mainActivity</name><operator>.</operator><name>sketchUri</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_SKETCH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>addAttachment</name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mainActivity</name><operator>.</operator><name>sketchUri</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<comment type="line">// Removes previous version of edited image</comment>
			<if>if <condition>(<expr><name>sketchEdited</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>sketchEdited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sketchEdited</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setRetainInstance</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>noteTmp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getNoteTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name>getNoteContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"noteTmp"</literal></expr></argument>, <argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"note"</literal></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"noteOriginal"</literal></expr></argument>, <argument><expr><name>noteOriginal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"attachmentUri"</literal></expr></argument>, <argument><expr><name>attachmentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><literal type="string">"orientationChanged"</literal></expr></argument>, <argument><expr><name>orientationChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>activityPausing</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

		<comment type="line">// Checks "goBack" value to avoid performing a double saving</comment>
		<if>if <condition>(<expr><operator>!</operator><name>goBack</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>saveNote</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><name>toggleChecklistView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>KeyboardUtils</name><operator>.</operator><name>hideKeyboard</name></name><argument_list>(<argument><expr><name>toggleChecklistView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onConfigurationChanged</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>newConfig</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onConfigurationChanged</name></name><argument_list>(<argument><expr><name>newConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>orientation</name> <operator>!=</operator> <name><name>newConfig</name><operator>.</operator><name>orientation</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>orientationChanged</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{

		<comment type="line">// Handling of Intent actions</comment>
		<expr_stmt><expr><call><name>handleIntents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>noteOriginal</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>noteOriginal</name> <operator>=</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><name>note</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>note</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>(<argument><expr><name>noteOriginal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><name>noteTmp</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>noteTmp</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isPasswordChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>checkNoteLock</name><argument_list>(<argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<expr_stmt><expr><call><name>initViews</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Checks note lock and password before showing note content
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>checkNoteLock</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// If note is locked security password will be requested</comment>
		<if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
				<operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_password_access"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
				<switch>switch <condition>(<expr><name>passwordConfirmed</name></expr>)</condition> <block>{
					<case>case <expr><name>SUCCEED</name></expr>:</case>
						<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setPasswordChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>FAIL</name></expr>:</case>
						<expr_stmt><expr><name>goBack</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>RESTORE</name></expr>:</case>
						<expr_stmt><expr><name>goBack</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>resetPassword</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				}</block></switch>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setPasswordChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>handleIntents</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>IntentChecker</name><operator>.</operator><name>checkAction</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_MERGE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>noteOriginal</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>note</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>(<argument><expr><name>noteOriginal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>noteTmp</name> <operator>=</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name><name>i</name><operator>.</operator><name>getStringArrayListExtra</name></name><argument_list>(<argument><expr><literal type="string">"merged_notes"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>mergedNotesIds</name> <operator>=</operator> <call><name><name>i</name><operator>.</operator><name>getStringArrayListExtra</name></name><argument_list>(<argument><expr><literal type="string">"merged_notes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<comment type="line">// Action called from home shortcut</comment>
		<if>if <condition>(<expr><call><name><name>IntentChecker</name><operator>.</operator><name>checkAction</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_SHORTCUT</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_NOTIFICATION_CLICK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>afterSavedReturnsToList</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>noteOriginal</name> <operator>=</operator> <call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNote</name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getLongExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_KEY</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Checks if the note pointed from the shortcut has been deleted</comment>
			<try>try <block>{
				<expr_stmt><expr><name>note</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>(<argument><expr><name>noteOriginal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>noteTmp</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>(<argument><expr><name>noteOriginal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showToast</name></name><argument_list>(<argument><expr><call><name>getText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>shortcut_note_deleted</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>

		<comment type="line">// Check if is launched from a widget</comment>
		<if>if <condition>(<expr><call><name><name>IntentChecker</name><operator>.</operator><name>checkAction</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET_TAKE_PHOTO</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

			<expr_stmt><expr><name>afterSavedReturnsToList</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>showKeyboard</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

			<comment type="line">//  with tags to set tag</comment>
			<if>if <condition>(<expr><call><name><name>i</name><operator>.</operator><name>hasExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_WIDGET</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>widgetId</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_WIDGET</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>widgetId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>String</name></type> <name>sqlCondition</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_WIDGET_PREFIX</name></name> <operator>+</operator> <name>widgetId</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>categoryId</name> <init>= <expr><call><name><name>TextHelper</name><operator>.</operator><name>checkIntentCategory</name></name><argument_list>(<argument><expr><name>sqlCondition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>categoryId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name>Category</name></type> <name>category</name></decl>;</decl_stmt>
						<try>try <block>{
							<expr_stmt><expr><name>category</name> <operator>=</operator> <call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCategory</name><argument_list>(<argument><expr><call><name>parseLong</name><argument_list>(<argument><expr><name>categoryId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>noteTmp</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
							<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Category with not-numeric value!"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
					}</block></then></if>
				}</block></then></if>
			}</block></then></if>

			<comment type="line">// Sub-action is to take a photo</comment>
			<if>if <condition>(<expr><call><name><name>IntentChecker</name><operator>.</operator><name>checkAction</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET_TAKE_PHOTO</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>takePhoto</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<if>if <condition>(<expr><call><name><name>IntentChecker</name><operator>.</operator><name>checkAction</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_FAB_TAKE_PHOTO</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>takePhoto</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">// Handles third party apps requests of sharing</comment>
		<if>if <condition>(<expr><call><name><name>IntentChecker</name><operator>.</operator><name>checkAction</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SEND</name></name></expr></argument>, <argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SEND_MULTIPLE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_GOOGLE_NOW</name></name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name><name>i</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

			<expr_stmt><expr><name>afterSavedReturnsToList</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

			<if>if <condition>(<expr><name>noteTmp</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>noteTmp</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

			<comment type="line">// Text title</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SUBJECT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>title</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<comment type="line">// Text content</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>content</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_TEXT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>content</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><call><name>importAttachments</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></then></if>

		<if>if <condition>(<expr><call><name><name>IntentChecker</name><operator>.</operator><name>checkAction</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_MAIN</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET_SHOW_LIST</name></name></expr></argument>, <argument><expr><name><name>Constants</name>
				<operator>.</operator><name>ACTION_SHORTCUT_WIDGET</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_WIDGET</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>showKeyboard</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>importAttachments</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><operator>!</operator><call><name><name>i</name><operator>.</operator><name>hasExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

		<if>if <condition>(<expr><call><name><name>i</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>Uri</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Google Now passes Intent as text but with audio recording attached the case must be handled like this</comment>
			<if>if <condition>(<expr><operator>!</operator><call><name><name>Constants</name><operator>.</operator><name>INTENT_GOOGLE_NOW</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>FileHelper</name><operator>.</operator><name>getNameFromUri</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><operator>new</operator> <call><name>AttachmentTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>uris</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getParcelableArrayListExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>Uri</name></type> <name>uriSingle</name> <range>:<expr><name>uris</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>FileHelper</name><operator>.</operator><name>getNameFromUri</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>uriSingle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><operator>new</operator> <call><name>AttachmentTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>uriSingle</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></function>

	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
	<specifier>private</specifier> <type><name>void</name></type> <name>initViews</name><parameter_list>()</parameter_list> <block>{

		<comment type="line">// Sets onTouchListener to the whole activity to swipe notes</comment>
		<expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setOnTouchListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Overrides font sizes with the one selected from user</comment>
		<expr_stmt><expr><call><name><name>Fonts</name><operator>.</operator><name>overrideTextSize</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>prefs</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Color of tag marker if note is tagged a function is active in preferences</comment>
		<expr_stmt><expr><call><name>setTagMarkerColor</name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initViewTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initViewContent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initViewLocation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initViewAttachments</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initViewReminder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initViewFooter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>initViewFooter</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// Footer dates of creation...</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>creation</name> <init>= <expr><call><name><name>DateHelper</name><operator>.</operator><name>getFormattedDate</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name>
				<operator>.</operator><name>PREF_PRETTIFIED_DATES</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>creationTextView</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>creation</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>creation</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>creation</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>creationTextView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>creationTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		<comment type="line">// ... and last modification</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>lastModification</name> <init>= <expr><call><name><name>DateHelper</name><operator>.</operator><name>getFormattedDate</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getLastModification</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name>
				<operator>.</operator><name>PREF_PRETTIFIED_DATES</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lastModificationTextView</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>lastModification</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>last_update</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
				<name>lastModification</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>lastModificationTextView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>lastModificationTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>initViewReminder</name><parameter_list>()</parameter_list> <block>{

		<comment type="line">// Preparation for reminder icon</comment>
		<expr_stmt><expr><call><name><name>reminder_layout</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>pickerType</name> <init>= <expr><ternary><condition><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_simple_calendar"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>ReminderPickers</name><operator>.</operator><name>TYPE_AOSP</name></name></expr> </then><else>:
					<expr><name><name>ReminderPickers</name><operator>.</operator><name>TYPE_GOOGLE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ReminderPickers</name></type> <name>reminderPicker</name> <init>= <expr><operator>new</operator> <call><name>ReminderPickers</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>mFragment</name></expr></argument>, <argument><expr><name>pickerType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>reminderPicker</name><operator>.</operator><name>pick</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>getPresetReminder</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>noteTmp</name>
					<operator>.</operator><name>getRecurrenceRule</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>onDateSetListener</name> <operator>=</operator> <name>reminderPicker</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>onTimeSetListener</name> <operator>=</operator> <name>reminderPicker</name></expr>;</expr_stmt>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>reminder_layout</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<decl_stmt><decl><type><name>MaterialDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>remove_reminder</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
						<function><annotation>@<name>Override</name></annotation>
						<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{
							<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>removeReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setAlarm</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>reminderIcon</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_alarm_black_18dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>datetime</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></function>
					}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Reminder</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>reminderString</name> <init>= <expr><call><name>initReminder</name><argument_list>(<argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>reminderString</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>reminderIcon</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_alarm_add_black_18dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>datetime</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>reminderString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>initViewLocation</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>DetailFragment</name></type> <name>detailFragment</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name>isNoteLocationValid</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<comment type="line">//FIXME: What's this "sasd"?</comment>
				<expr_stmt><expr><call><name><name>GeocodeHelper</name><operator>.</operator><name>getAddressFromCoordinates</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Location</name><argument_list>(<argument><expr><literal type="string">"sasd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>detailFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>

		<comment type="line">// Automatic location insertion</comment>
		<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_AUTO_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>noteTmp</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>getLocation</name><argument_list>(<argument><expr><name>detailFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>uriString</name> <init>= <expr><literal type="string">"geo:"</literal> <operator>+</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">','</literal> <operator>+</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call>
					<operator>+</operator> <literal type="string">"?q="</literal> <operator>+</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">','</literal> <operator>+</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Intent</name></type> <name>locationIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>uriString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><operator>!</operator><call><name><name>IntentChecker</name><operator>.</operator><name>isAvailable</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>locationIntent</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>uriString</name> <operator>=</operator> <literal type="string">"http://maps.google.com/maps?q="</literal> <operator>+</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">','</literal> <operator>+</operator> <call><name><name>noteTmp</name>
						<operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>locationIntent</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>uriString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>locationIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<decl_stmt><decl><type><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>content</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>remove_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>positiveText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>callback</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
				<function><annotation>@<name>Override</name></annotation>
				<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fade</name><argument_list>(<argument><expr><name>locationTextView</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>MaterialDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>getLocation</name><parameter_list>(<parameter><decl><type><name>OnGeoUtilResultListener</name></type> <name>onGeoUtilResultListener</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>PermissionsHelper</name><operator>.</operator><name>requestPermission</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>ACCESS_COARSE_LOCATION</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name>
				<operator>.</operator><name>permission_coarse_location</name></name></expr></argument>, <argument><expr><name>snackBarPlaceholder</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>GeocodeHelper</name><operator>.</operator><name>getLocation</name></name>
				<argument_list>(<argument><expr><name>onGeoUtilResultListener</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>initViewAttachments</name><parameter_list>()</parameter_list> <block>{

		<comment type="line">// Attachments position based on preferences</comment>
		<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_ATTANCHEMENTS_ON_BOTTOM</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>attachmentsBelow</name><operator>.</operator><name>inflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>attachmentsAbove</name><operator>.</operator><name>inflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>mGridView</name> <operator>=</operator> <operator>(</operator><name>ExpandableHeightGridView</name><operator>)</operator> <call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gridview</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Some fields can be filled by third party application and are always shown</comment>
		<expr_stmt><expr><name>mAttachmentAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>AttachmentAdapter</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mGridView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Initialzation of gridview for images</comment>
		<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>mAttachmentAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>autoresize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Click events for images in gridview (zooms image)</comment>
		<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>v</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{
			<decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><operator>(</operator><name>Attachment</name><operator>)</operator> <call><name><name>parent</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Intent</name></type> <name>attachmentIntent</name></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_FILES</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

				<expr_stmt><expr><name>attachmentIntent</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>attachmentIntent</name><operator>.</operator><name>setDataAndType</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name><name>StorageHelper</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>,
						<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>attachmentIntent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_READ_URI_PERMISSION</name></name> <operator>|</operator> <name><name>Intent</name>
						<operator>.</operator><name>FLAG_GRANT_WRITE_URI_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><call><name><name>IntentChecker</name><operator>.</operator><name>isAvailable</name></name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>attachmentIntent</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>attachmentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>feature_not_available_on_this_device</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

				<comment type="line">// Media files will be opened in internal gallery</comment>
			}</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_IMAGE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
					<operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_SKETCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
					<operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<comment type="line">// Title</comment>
				<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getNoteTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name>getNoteContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>title1</name> <init>= <expr><call><name><name>TextHelper</name><operator>.</operator><name>parseTitleAndContent</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>,
						<argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line">// Images</comment>
				<decl_stmt><decl><type><name>int</name></type> <name>clickedImage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>images</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>Attachment</name></type> <name>mAttachment</name> <range>: <expr><call><name><name>noteTmp</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
					<if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_IMAGE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
							<operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_SKETCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
							<operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>images</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if>if <condition>(<expr><call><name><name>mAttachment</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>clickedImage</name> <operator>=</operator> <call><name><name>images</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if>
				}</block></for>
				<comment type="line">// Intent</comment>
				<expr_stmt><expr><name>attachmentIntent</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>GalleryActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>attachmentIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>GALLERY_TITLE</name></name></expr></argument>, <argument><expr><name>title1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>attachmentIntent</name><operator>.</operator><name>putParcelableArrayListExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>GALLERY_IMAGES</name></name></expr></argument>, <argument><expr><name>images</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>attachmentIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>GALLERY_CLICKED_IMAGE</name></name></expr></argument>, <argument><expr><name>clickedImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>attachmentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>playback</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif></if>

		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>setOnItemLongClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>v</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{
			<comment type="line">// To avoid deleting audio attachment during playback</comment>
			<if>if <condition>(<expr><name>mPlayer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
			<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>attachments_actions</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><operator>!</operator><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_SKETCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMime_type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>items</name> <operator>=</operator> <call><name><name>items</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>items</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name><name>AttachmentsHelper</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>items</name><argument_list>(<argument><expr><call><name><name>items</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>items</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>itemsCallback</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>materialDialog</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>i</name></decl></parameter>, <parameter><decl><name>charSequence</name></decl></parameter>)</parameter_list> -&gt;
							<block type="pseudo"><expr><call><name>performAttachmentAction</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>build</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Performs an action when long-click option is selected
	 *
	 * @param attachmentPosition
	 * @param i                  item index
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>performAttachmentAction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attachmentPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
		<switch>switch <condition>(<expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>attachments_actions_values</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>)</condition> <block>{
			<case>case <expr><literal type="string">"share"</literal></expr>:</case>
				<decl_stmt><decl><type><name>Intent</name></type> <name>shareIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SEND</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>attachmentPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>StorageHelper</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>shareIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><call><name><name>IntentChecker</name><operator>.</operator><name>isAvailable</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>shareIntent</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>shareIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>feature_not_available_on_this_device</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<break>break;</break>
			<case>case <expr><literal type="string">"delete"</literal></expr>:</case>
				<expr_stmt><expr><call><name>removeAttachment</name><argument_list>(<argument><expr><name>attachmentPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>autoresize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="string">"delete all"</literal></expr>:</case>
				<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>delete_all_attachments</name></name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>onPositive</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>materialDialog</name></decl></parameter>, <parameter><decl><name>dialogAction</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>removeAllAttachments</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>build</name><argument_list>()</argument_list></call>
						<operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="string">"edit"</literal></expr>:</case>
				<expr_stmt><expr><call><name>takeSketch</name><argument_list>(<argument><expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>attachmentPosition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"No action available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></switch>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>initViewTitle</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>gatherLinksForText</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setOnTextLinkClickListener</name></name><argument_list>(<argument><expr><name>textLinkClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// To avoid dropping here the  dragged checklist items</comment>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setOnDragListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>v</name></decl></parameter>, <parameter><decl><name>event</name></decl></parameter>)</parameter_list> -&gt; <block>{
<comment type="line">//					((View)event.getLocalState()).setVisibility(View.VISIBLE);</comment>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//When editor action is pressed focus is moved to last character in content field</comment>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setOnEditorActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>v</name></decl></parameter>, <parameter><decl><name>actionId</name></decl></parameter>, <parameter><decl><name>event</name></decl></parameter>)</parameter_list> -&gt; <block>{
			<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>content</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>requestFocus</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>initViewContent</name><parameter_list>()</parameter_list> <block>{

		<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>gatherLinksForText</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>setOnTextLinkClickListener</name></name><argument_list>(<argument><expr><name>textLinkClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Avoids focused line goes under the keyboard</comment>
		<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Restore checklist</comment>
		<expr_stmt><expr><name>toggleChecklistView</name> <operator>=</operator> <name>content</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setChecklist</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>toggleChecklistView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>toggleChecklist2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Force focus and shows soft keyboard. Only happens if it's a new note, without shared content.
	 * {@link showKeyboard} is used to check if the note is created from shared content.
	 */</comment>
	<function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"JavadocReference"</literal></expr></argument>)</argument_list></annotation>
	<specifier>private</specifier> <type><name>void</name></type> <name>requestFocus</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>EditText</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isChanged</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>showKeyboard</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>KeyboardUtils</name><operator>.</operator><name>showKeyboard</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Colors tag marker in note's title and content elements
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>setTagMarkerColor</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>colorsPref</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_colors_app"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_COLORS_APP_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Checking preference</comment>
		<if>if <condition>(<expr><operator>!</operator><literal type="string">"disabled"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>colorsPref</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

			<comment type="line">// Choosing target view depending on another preference</comment>
			<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>View</name></argument>&gt;</argument_list></name></type> <name>target</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><literal type="string">"complete"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>colorsPref</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>target</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>titleWrapperView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>target</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>scrollView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>target</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tagMarkerView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>

			<comment type="line">// Coloring the target</comment>
			<if>if <condition>(<expr><name>tag</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>tag</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<for>for <control>(<init><decl><type><name>View</name></type> <name>view</name> <range>: <expr><name>target</name></expr></range></decl></init>)</control> <block>{
					<expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name>parseInt</name><argument_list>(<argument><expr><call><name><name>tag</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></then> <else>else <block>{
				<for>for <control>(<init><decl><type><name>View</name></type> <name>view</name> <range>: <expr><name>target</name></expr></range></decl></init>)</control> <block>{
					<expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#00000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></else></if>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>displayLocationDialog</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>getLocation</name><argument_list>(<argument><expr><operator>new</operator> <call><name>OnGeoUtilResultListenerImpl</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>mFragment</name></expr></argument>, <argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<class><specifier>private</specifier> <specifier>static</specifier> class <name>OnGeoUtilResultListenerImpl</name> <super><implements>implements <name>OnGeoUtilResultListener</name></implements></super> <block>{

		<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>MainActivity</name></argument>&gt;</argument_list></name></type> <name>mainActivityWeakReference</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>DetailFragment</name></argument>&gt;</argument_list></name></type> <name>detailFragmentWeakReference</name></decl>;</decl_stmt>
		<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>noteTmpWeakReference</name></decl>;</decl_stmt>

		<constructor><name>OnGeoUtilResultListenerImpl</name><parameter_list>(<parameter><decl><type><name>MainActivity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>DetailFragment</name></type> <name>mFragment</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>noteTmp</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>mainActivityWeakReference</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>detailFragmentWeakReference</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>mFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>noteTmpWeakReference</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <type><name>void</name></type> <name>onAddressResolved</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
		}</block></function>

		<function><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <type><name>void</name></type> <name>onCoordinatesResolved</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
		}</block></function>

		<function><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <type><name>void</name></type> <name>onLocationUnavailable</name><parameter_list>()</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>showMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>location_not_found</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <type><name>void</name></type> <name>onLocationRetrieved</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>location</name></decl></parameter>)</parameter_list> <block>{

			<if>if <condition>(<expr><operator>!</operator><call><name>checkWeakReferences</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<return>return;</return>
			}</block></then></if>

			<if>if <condition>(<expr><name>location</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<return>return;</return>
			}</block></then></if>
			<if>if <condition>(<expr><operator>!</operator><call><name><name>ConnectionManager</name><operator>.</operator><name>internetAvailable</name></name><argument_list>(<argument><expr><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>noteTmpWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLatitude</name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>noteTmpWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLongitude</name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>onAddressResolved</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
			<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLayoutInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>View</name></type> <name>v</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>dialog_location</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>AutoCompleteTextView</name></type> <name>autoCompView</name> <init>= <expr><operator>(</operator><name>AutoCompleteTextView</name><operator>)</operator> <call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name>
					<operator>.</operator><name>auto_complete_location</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>autoCompView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>search_location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>autoCompView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PlacesAutoCompleteAdapter</name><argument_list>(<argument><expr><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name>
					<operator>.</operator><name>simple_text_layout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>MaterialDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>customView</name><argument_list>(<argument><expr><name>autoCompView</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>use_current_location</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
						<function><annotation>@<name>Override</name></annotation>
						<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{
							<if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>autoCompView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
								<expr_stmt><expr><call><name><name>noteTmpWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLatitude</name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name>noteTmpWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLongitude</name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name>GeocodeHelper</name><operator>.</operator><name>getAddressFromCoordinates</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><call><name><name>detailFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then> <else>else <block>{
								<expr_stmt><expr><call><name><name>GeocodeHelper</name><operator>.</operator><name>getCoordinatesFromAddress</name></name><argument_list>(<argument><expr><call><name><name>autoCompView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
										<argument><expr><call><name><name>detailFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></else></if>
						}</block></function>
					}</block></class></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>autoCompView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>TextWatcher</name></super><argument_list>()</argument_list> <block>{
				<function><annotation>@<name>Override</name></annotation>
				<specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
				}</block></function>

				<function><annotation>@<name>Override</name></annotation>
				<specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
					<if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setActionButton</name></name><argument_list>(<argument><expr><name><name>DialogAction</name><operator>.</operator><name>POSITIVE</name></name></expr></argument>, <argument><expr><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name>
								<operator>.</operator><name>string</name><operator>.</operator><name>confirm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setActionButton</name></name><argument_list>(<argument><expr><name><name>DialogAction</name><operator>.</operator><name>POSITIVE</name></name></expr></argument>, <argument><expr><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name>
								<operator>.</operator><name>string</name>
								<operator>.</operator><name>use_current_location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></function>

				<function><annotation>@<name>Override</name></annotation>
				<specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
				}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><specifier>private</specifier> <type><name>boolean</name></type> <name>checkWeakReferences</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mainActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isFinishing</name><argument_list>()</argument_list></call>
					<operator>&amp;&amp;</operator> <call><name><name>detailFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>noteTmpWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
		}</block></function>
	}</block></class>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onLocationRetrieved</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>location</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>location</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>location_not_found</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>location</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>GeocodeHelper</name><operator>.</operator><name>getAddressFromCoordinates</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>mFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onLocationUnavailable</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>location_not_found</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onAddressResolved</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><operator>!</operator><call><name>isNoteLocationValid</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>location_not_found</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if>
			<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>GeocodeHelper</name><operator>.</operator><name>areCoordinates</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fade</name><argument_list>(<argument><expr><name>locationTextView</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onCoordinatesResolved</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>location</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>locationTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fade</name><argument_list>(<argument><expr><name>locationTextView</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>location_not_found</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>menu_detail</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{

		<comment type="line">// Closes search view if left open in List fragment</comment>
		<decl_stmt><decl><type><name>MenuItem</name></type> <name>searchMenuItem</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_search</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>searchMenuItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>MenuItemCompat</name><operator>.</operator><name>collapseActionView</name></name><argument_list>(<argument><expr><name>searchMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<decl_stmt><decl><type><name>boolean</name></type> <name>newNote</name> <init>= <expr><call><name><name>noteTmp</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_checklist_on</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_checklist_off</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_lock</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_unlock</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// If note is trashed only this options will be available from menu</comment>
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>isTrashed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_untrash</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_delete</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Otherwise all other actions will be available</comment>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_add_shortcut</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>newNote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_archive</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>newNote</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isArchived</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_unarchive</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>newNote</name> <operator>&amp;&amp;</operator> <call><name><name>noteTmp</name><operator>.</operator><name>isArchived</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_trash</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>newNote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
	<specifier>public</specifier> <type><name>boolean</name></type> <name>goHome</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>stopPlaying</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// The activity has managed a shared intent from third party app and</comment>
		<comment type="line">// performs a normal onBackPressed instead of returning back to ListActivity</comment>
		<if>if <condition>(<expr><operator>!</operator><name>afterSavedReturnsToList</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>exitMessage</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showToast</name></name><argument_list>(<argument><expr><name>exitMessage</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		}</block></then> <else>else <block>{

			<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>exitMessage</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>exitCroutonStyle</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name>exitMessage</name></expr></argument>, <argument><expr><name>exitCroutonStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<comment type="line">// Otherwise the result is passed to ListActivity</comment>
			<if>if <condition>(<expr><name>mainActivity</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mainActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>popBackStack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><call><name><name>mainActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBackStackEntryCount</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getSupportActionBar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayShowTitleEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if>if <condition>(<expr><call><name><name>mainActivity</name><operator>.</operator><name>getDrawerToggle</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getDrawerToggle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDrawerIndicatorEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SwitchFragmentEvent</name><argument_list>(<argument><expr><name><name>SwitchFragmentEvent</name><operator>.</operator><name>Direction</name><operator>.</operator><name>PARENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></else></if>

		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
		<switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_attachment</name></name></expr>:</case>
				<expr_stmt><expr><call><name>showAttachmentsPopup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_tag</name></name></expr>:</case>
				<expr_stmt><expr><call><name>addTags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_category</name></name></expr>:</case>
				<expr_stmt><expr><call><name>categorizeNote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_share</name></name></expr>:</case>
				<expr_stmt><expr><call><name>shareNote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_checklist_on</name></name></expr>:</case>
				<expr_stmt><expr><call><name>toggleChecklist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_checklist_off</name></name></expr>:</case>
				<expr_stmt><expr><call><name>toggleChecklist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_lock</name></name></expr>:</case>
				<expr_stmt><expr><call><name>lockNote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_unlock</name></name></expr>:</case>
				<expr_stmt><expr><call><name>lockNote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_add_shortcut</name></name></expr>:</case>
				<expr_stmt><expr><call><name>addShortcut</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_archive</name></name></expr>:</case>
				<expr_stmt><expr><call><name>archiveNote</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_unarchive</name></name></expr>:</case>
				<expr_stmt><expr><call><name>archiveNote</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_trash</name></name></expr>:</case>
				<expr_stmt><expr><call><name>trashNote</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_untrash</name></name></expr>:</case>
				<expr_stmt><expr><call><name>trashNote</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_discard_changes</name></name></expr>:</case>
				<expr_stmt><expr><call><name>discard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_delete</name></name></expr>:</case>
				<expr_stmt><expr><call><name>deleteNote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_note_info</name></name></expr>:</case>
				<expr_stmt><expr><call><name>showNoteInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid menu option selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></switch>

		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackActionFromResourceId</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>showNoteInfo</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getNoteTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name>getNoteContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>NoteInfosActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name><operator>)</operator> <name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>navigateUp</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>afterSavedReturnsToList</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>saveAndExit</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 *
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>toggleChecklist</name><parameter_list>()</parameter_list> <block>{

		<comment type="line">// In case checklist is active a prompt will ask about many options</comment>
		<comment type="line">// to decide hot to convert back to simple text</comment>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>toggleChecklist2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<comment type="line">// If checklist is active but no items are checked the conversion in done automatically</comment>
		<comment type="line">// without prompting user</comment>
		<if>if <condition>(<expr><call><name><name>mChecklistManager</name><operator>.</operator><name>getCheckedCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>toggleChecklist2</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<comment type="line">// Inflate the popup_layout.xml</comment>
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>mainActivity</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>layout</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>dialog_remove_checklist_layout</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>layout_root</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Retrieves options checkboxes and initialize their values</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name>CheckBox</name></type> <name>keepChecked</name> <init>= <expr><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>checklist_keep_checked</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>CheckBox</name></type> <name>keepCheckmarks</name> <init>= <expr><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>checklist_keep_checkmarks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>keepChecked</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_KEEP_CHECKED</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>keepCheckmarks</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_KEEP_CHECKMARKS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>customView</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
					<function><annotation>@<name>Override</name></annotation>
					<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call>
								<operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_KEEP_CHECKED</name></name></expr></argument>, <argument><expr><call><name><name>keepChecked</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
								<operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_KEEP_CHECKMARKS</name></name></expr></argument>, <argument><expr><call><name><name>keepCheckmarks</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
								<operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>toggleChecklist2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Toggles checklist view
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>toggleChecklist2</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>keepChecked</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_KEEP_CHECKED</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>showChecks</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_KEEP_CHECKMARKS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>toggleChecklist2</name><argument_list>(<argument><expr><name>keepChecked</name></expr></argument>, <argument><expr><name>showChecks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
	<specifier>private</specifier> <type><name>void</name></type> <name>toggleChecklist2</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>keepChecked</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showChecks</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Get instance and set options to convert EditText to CheckListView</comment>

		<expr_stmt><expr><name>mChecklistManager</name> <operator>=</operator> <ternary><condition><expr><name>mChecklistManager</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>ChecklistManager</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>mChecklistManager</name></expr></else></ternary></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>checkedItemsBehavior</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_checked_items_behavior"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name>
				<argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>Settings</name><operator>.</operator><name>CHECKED_HOLD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>mChecklistManager</name>
				<operator>.</operator><name>showCheckMarks</name></name><argument_list>(<argument><expr><name>showChecks</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>newEntryHint</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>checklist_item_hint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>keepChecked</name><argument_list>(<argument><expr><name>keepChecked</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>undoBarContainerView</name><argument_list>(<argument><expr><name>scrollView</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>moveCheckedOnBottom</name><argument_list>(<argument><expr><name>checkedItemsBehavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Links parsing options</comment>
		<expr_stmt><expr><call><name><name>mChecklistManager</name><operator>.</operator><name>setOnTextLinkClickListener</name></name><argument_list>(<argument><expr><name>textLinkClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mChecklistManager</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>mFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mChecklistManager</name><operator>.</operator><name>setCheckListChangedListener</name></name><argument_list>(<argument><expr><name>mFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Switches the views</comment>
		<decl_stmt><decl><type><name>View</name></type> <name>newView</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>newView</name> <operator>=</operator> <call><name><name>mChecklistManager</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>toggleChecklistView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ViewNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error switching checklist view"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<comment type="line">// Switches the views</comment>
		<if>if <condition>(<expr><name>newView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mChecklistManager</name><operator>.</operator><name>replaceViews</name></name><argument_list>(<argument><expr><name>toggleChecklistView</name></expr></argument>, <argument><expr><name>newView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>toggleChecklistView</name> <operator>=</operator> <name>newView</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>animate</name><argument_list>(<argument><expr><name>toggleChecklistView</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>alpha</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>scaleXBy</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>scaleX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>scaleYBy</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>scaleY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setChecklist</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Categorize note choosing from a list of previously created categories
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>categorizeNote</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// Retrieves all available categories</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categories</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCategories</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>currentCategory</name> <init>= <expr><ternary><condition><expr><call><name><name>noteTmp</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>final</specifier> <name>MaterialDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>categorize_as</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>adapter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NavDrawerCategoryAdapter</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>categories</name></expr></argument>, <argument><expr><name>currentCategory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>add_category</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>positiveColorRes</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>negativeText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>remove_category</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>negativeColorRes</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorAccent</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
					<function><annotation>@<name>Override</name></annotation>
					<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
						<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>CategoryActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"noHome"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>CATEGORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></function>

					<function><annotation>@<name>Override</name></annotation>
					<specifier>public</specifier> <type><name>void</name></type> <name>onNegative</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>setTagMarkerColor</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>getListView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnItemClickListener</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{
			<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setTagMarkerColor</name><argument_list>(<argument><expr><call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>showAttachmentsPopup</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getLayoutInflater</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>layout</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>attachment_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>attachmentDialog</name> <operator>=</operator> <operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>autoDismiss</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>customView</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>attachmentDialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Camera</comment>
		<decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>cameraSelection</name> <init>= <expr><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cameraSelection</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentOnClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Audio recording</comment>
		<decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>recordingSelection</name> <init>= <expr><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>recording</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>toggleAudioRecordingStop</name><argument_list>(<argument><expr><name>recordingSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>recordingSelection</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentOnClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Video recording</comment>
		<decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>videoSelection</name> <init>= <expr><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>videoSelection</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentOnClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Files</comment>
		<decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>filesSelection</name> <init>= <expr><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>files</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>filesSelection</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentOnClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Sketch</comment>
		<decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>sketchSelection</name> <init>= <expr><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sketch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>sketchSelection</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentOnClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Location</comment>
		<decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>locationSelection</name> <init>= <expr><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>locationSelection</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentOnClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Time</comment>
		<decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>timeStampSelection</name> <init>= <expr><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>timeStampSelection</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentOnClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Desktop note with PushBullet</comment>
		<decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>pushbulletSelection</name> <init>= <expr><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pushbullet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>pushbulletSelection</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pushbulletSelection</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentOnClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>takePhoto</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// Checks for camera app available</comment>
		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>ACTION_IMAGE_CAPTURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>IntentChecker</name><operator>.</operator><name>isAvailable</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name></expr></argument></argument_list></call></expr></condition><then><block>{<expr_stmt><expr><name><name>PackageManager</name><operator>.</operator><name>FEATURE_CAMERA</name></name></expr></expr_stmt>}</block></then></if>)</block></function>)</block> <block>{
			<constructor_decl><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><parameter_list>(<parameter><decl><type><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>feature_not_available_on_this_device</name></name></type></decl></parameter>, <parameter><decl><type><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>

			<return>return;</return>
		}</block></class>
		<comment type="line">// Checks for created file validity</comment>
		<decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>createNewAttachmentFile</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_IMAGE_EXT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<comment type="line">// Launches intent</comment>
		<expr_stmt><expr><name>attachmentUri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>EXTRA_OUTPUT</name></name></expr></argument>, <argument><expr><name>attachmentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>TAKE_PHOTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}

	private <function><type><name>void</name></type> <name>takeVideo</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Intent</name></type> <name>takeVideoIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>ACTION_VIDEO_CAPTURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>IntentChecker</name><operator>.</operator><name>isAvailable</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>takeVideoIntent</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name></expr></argument></argument_list></call></expr></condition><then><block>{<expr_stmt><expr><name><name>PackageManager</name><operator>.</operator><name>FEATURE_CAMERA</name></name></expr></expr_stmt>}</block></then></if>)</block></function>) <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>feature_not_available_on_this_device</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return;</return>
		}</block>
		<comment type="line">// File is stored in custom ON folder to speedup the attachment</comment>
		<decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>createNewAttachmentFile</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO_EXT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><name>attachmentUri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>takeVideoIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>EXTRA_OUTPUT</name></name></expr></argument>, <argument><expr><name>attachmentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>maxVideoSizeStr</name> <init>= <expr><ternary><condition><expr><literal type="string">""</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_max_video_size"</literal></expr></argument>,
				<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"0"</literal></expr> </then><else>: <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_max_video_size"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>maxVideoSize</name> <init>= <expr><call><name>parseLong</name><argument_list>(<argument><expr><name>maxVideoSizeStr</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1024L</literal> <operator>*</operator> <literal type="number">1024L</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>takeVideoIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>EXTRA_SIZE_LIMIT</name></name></expr></argument>, <argument><expr><name>maxVideoSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>takeVideoIntent</name></expr></argument>, <argument><expr><name>TAKE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}

	private <function><type><name>void</name></type> <name>takeSketch</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>createNewAttachmentFile</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_SKETCH_EXT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><name>attachmentUri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Forces portrait orientation to this fragment only</comment>
		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>setRequestedOrientation</name></name><argument_list>(<argument><expr><name><name>ActivityInfo</name><operator>.</operator><name>SCREEN_ORIENTATION_PORTRAIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Fragments replacing</comment>
		<decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>transaction</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>animateTransition</name></name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name><name>mainActivity</name><operator>.</operator><name>TRANSITION_HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SketchFragment</name></type> <name>mSketchFragment</name> <init>= <expr><operator>new</operator> <call><name>SketchFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Bundle</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>EXTRA_OUTPUT</name></name></expr></argument>, <argument><expr><name>attachmentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>attachment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"base"</literal></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>mSketchFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name>mSketchFragment</name></expr></argument>, <argument><expr><name><name>mainActivity</name><operator>.</operator><name>FRAGMENT_SKETCH_TAG</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>addToBackStack</name><argument_list>(<argument><expr><name><name>mainActivity</name><operator>.</operator><name>FRAGMENT_DETAIL_TAG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>addTimestamp</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Editable</name></type> <name>editable</name> <init>= <expr><call><name><name>content</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><call><name><name>content</name><operator>.</operator><name>getSelectionStart</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DateFormat</name></type> <name>dateFormat</name> <init>= <expr><call><name><name>DateFormat</name><operator>.</operator><name>getDateTimeInstance</name></name><argument_list>(<argument><expr><name><name>DateFormat</name><operator>.</operator><name>SHORT</name></name></expr></argument>, <argument><expr><name><name>DateFormat</name><operator>.</operator><name>SHORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>dateStamp</name> <init>= <expr><call><name><name>dateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>mChecklistManager</name><operator>.</operator><name>getFocusedItemView</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>editable</name> <operator>=</operator> <call><name><name>mChecklistManager</name><operator>.</operator><name>getFocusedItemView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEditText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEditableText</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name><name>mChecklistManager</name><operator>.</operator><name>getFocusedItemView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEditText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>CheckListView</name><operator>)</operator> <name>toggleChecklistView</name><operator>)</operator>
						<operator>.</operator><call><name>addItem</name><argument_list>(<argument><expr><name>dateStamp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mChecklistManager</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
		<decl_stmt><decl><type><name>String</name></type> <name>leadSpace</name> <init>= <expr><ternary><condition><expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>dateStamp</name> <operator>=</operator> <name>leadSpace</name> <operator>+</operator> <name>dateStamp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>editable</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>dateStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Selection</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>editable</name></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <call><name><name>dateStamp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
	<annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Fetch uri from activities, store into adapter and refresh adapter</comment>
		<decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
			<switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{
				<case>case <expr><name>TAKE_PHOTO</name></expr>:</case>
					<expr_stmt><expr><name>attachment</name> <operator>=</operator> <operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><name>attachmentUri</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_IMAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>addAttachment</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>autoresize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>TAKE_VIDEO</name></expr>:</case>
					<comment type="line">// Gingerbread doesn't allow custom folder so data are retrieved from intent</comment>
					<if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>GINGERBREAD_MR1</name></name></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>attachment</name> <operator>=</operator> <operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><name>attachmentUri</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><name>attachment</name> <operator>=</operator> <operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><call><name>addAttachment</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>autoresize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>FILES</name></expr>:</case>
					<expr_stmt><expr><call><name>onActivityResultManageReceivedFiles</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SET_PASSWORD</name></expr>:</case>
					<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setPasswordChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>lockUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SKETCH</name></expr>:</case>
					<expr_stmt><expr><name>attachment</name> <operator>=</operator> <operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><name>attachmentUri</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_SKETCH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>addAttachment</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>autoresize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>CATEGORY</name></expr>:</case>
					<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>category_saved</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>CONFIRM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>Category</name></type> <name>category</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><literal type="string">"category"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>setTagMarkerColor</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>DETAIL</name></expr>:</case>
					<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_updated</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>CONFIRM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></switch>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>onActivityResultManageReceivedFiles</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>uris</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <call><name><name>intent</name><operator>.</operator><name>getClipData</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>intent</name><operator>.</operator><name>getClipData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>uris</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getClipData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>uris</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<for>for <control>(<init><decl><type><name>Uri</name></type> <name>uri</name> <range>: <expr><name>uris</name></expr></range></decl></init>)</control> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>FileHelper</name><operator>.</operator><name>getNameFromUri</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>new</operator> <call><name>AttachmentTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Discards changes done to the note and eventually delete new attachments
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>discard</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// Checks if some new files have been attached and must be removed</comment>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<for>for <control>(<init><decl><type><name>Attachment</name></type> <name>newAttachment</name> <range>: <expr><call><name><name>noteTmp</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
				<if>if <condition>(<expr><operator>!</operator><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>newAttachment</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><call><name><name>newAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></then></if>

		<expr_stmt><expr><name>goBack</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

		<if>if <condition>(<expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>noteOriginal</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<comment type="line">// Restore original status of the note</comment>
			<if>if <condition>(<expr><call><name><name>noteOriginal</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>deleteNote</name></name><argument_list>(<argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><operator>new</operator> <call><name>SaveNoteTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><name>noteOriginal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name><name>MainActivity</name><operator>.</operator><name>notifyAppWidgets</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
	<specifier>private</specifier> <type><name>void</name></type> <name>archiveNote</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>archive</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Simply go back if is a new note</comment>
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setArchived</name></name><argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>goBack</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>exitMessage</name> <operator>=</operator> <ternary><condition><expr><name>archive</name></expr> ?</condition><then> <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_archived</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_unarchived</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>exitCroutonStyle</name> <operator>=</operator> <ternary><condition><expr><name>archive</name></expr> ?</condition><then> <expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr> </then><else>: <expr><name><name>ONStyle</name><operator>.</operator><name>INFO</name></name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>saveNote</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
	<specifier>private</specifier> <type><name>void</name></type> <name>trashNote</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>trash</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Simply go back if is a new note</comment>
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setTrashed</name></name><argument_list>(<argument><expr><name>trash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>goBack</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>exitMessage</name> <operator>=</operator> <ternary><condition><expr><name>trash</name></expr> ?</condition><then> <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_trashed</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_untrashed</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>exitCroutonStyle</name> <operator>=</operator> <ternary><condition><expr><name>trash</name></expr> ?</condition><then> <expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr> </then><else>: <expr><name><name>ONStyle</name><operator>.</operator><name>INFO</name></name></expr></else></ternary></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>trash</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>ShortcutHelper</name><operator>.</operator><name>removeshortCut</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>removeReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>addReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name>saveNote</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>deleteNote</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>delete_note_confirmation</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
					<function><annotation>@<name>Override</name></annotation>
					<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>deleteNote</name></name><argument_list>(<argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Deleted note with id '"</literal> <operator>+</operator> <call><name><name>noteTmp</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_deleted</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveAndExit</name><parameter_list>(<parameter><decl><type><name>OnNoteSaved</name></type> <name>mOnNoteSaved</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name>isAdded</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>exitMessage</name> <operator>=</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_updated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>exitCroutonStyle</name> <operator>=</operator> <name><name>ONStyle</name><operator>.</operator><name>CONFIRM</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>goBack</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>saveNote</name><argument_list>(<argument><expr><name>mOnNoteSaved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Save new notes, modify them or archive
	 */</comment>
	<function><type><name>void</name></type> <name>saveNote</name><parameter_list>(<parameter><decl><type><name>OnNoteSaved</name></type> <name>mOnNoteSaved</name></decl></parameter>)</parameter_list> <block>{

		<comment type="line">// Changed fields</comment>
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getNoteTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name>getNoteContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Check if some text or attachments of any type have been inserted or is an empty note</comment>
		<if>if <condition>(<expr><name>goBack</name> <operator>&amp;&amp;</operator> <call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Empty note not saved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>exitMessage</name> <operator>=</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>empty_note_not_saved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>exitCroutonStyle</name> <operator>=</operator> <name><name>ONStyle</name><operator>.</operator><name>INFO</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<if>if <condition>(<expr><call><name>saveNotNeeded</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>exitMessage</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>goBack</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return>return;</return>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setAttachmentsListOld</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>new</operator> <call><name>SaveNoteTask</name><argument_list>(<argument><expr><name>mOnNoteSaved</name></expr></argument>, <argument><expr><call><name>lastModificationUpdatedNeeded</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name>
				<operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Checks if nothing is changed to avoid committing if possible (check)
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>saveNotNeeded</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_AUTO_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isChanged</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name><name>noteTmp</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isPasswordChecked</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Checks if only tag, archive or trash status have been changed
	 * and then force to not update last modification date*
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>lastModificationUpdatedNeeded</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setArchived</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>isArchived</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setTrashed</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>isTrashed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLocked</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name><name>noteTmp</name><operator>.</operator><name>isChanged</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onNoteSaved</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>noteSaved</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>MainActivity</name><operator>.</operator><name>notifyAppWidgets</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>!</operator><name>activityPausing</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NotesUpdatedEvent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>deleteMergedNotes</name><argument_list>(<argument><expr><name>mergedNotesIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>showReminderMessage</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name>note</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>(<argument><expr><name>noteSaved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>goBack</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>goHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>deleteMergedNotes</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mergedNotesIds</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notesToDelete</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>mergedNotesIds</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<for>for <control>(<init><decl><type><name>String</name></type> <name>mergedNoteId</name> <range>: <expr><name>mergedNotesIds</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>set_id</name></name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>mergedNoteId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>notesToDelete</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><operator>new</operator> <call><name>NoteProcessorDelete</name><argument_list>(<argument><expr><name>notesToDelete</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>process</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>String</name></type> <name>getNoteTitle</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>title</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>title</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>title</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then> <else>else <block>{
			<return>return <expr><literal type="string">""</literal></expr>;</return>
		}</block></else></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>String</name></type> <name>getNoteContent</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>contentText</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<comment type="line">// Due to checklist library introduction the returned EditText class is no more a</comment>
			<comment type="line">// com.neopixl.pixlui.components.edittext.EditText but a standard android.widget.EditText</comment>
			<decl_stmt><decl><type><name>View</name></type> <name>contentView</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>detail_content</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>contentView</name> <operator>instanceof</operator> <name>EditText</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>contentText</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>EditText</name><operator>)</operator> <name>contentView</name><operator>)</operator><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><name>contentView</name> <operator>instanceof</operator> <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>contentText</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name><operator>)</operator> <name>contentView</name><operator>)</operator><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
		}</block></then> <else>else <block>{
			<if>if <condition>(<expr><name>mChecklistManager</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>mChecklistManager</name><operator>.</operator><name>keepChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>showCheckMarks</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>contentText</name> <operator>=</operator> <call><name><name>mChecklistManager</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
		<return>return <expr><name>contentText</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Updates share intent
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>shareNote</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Note</name></type> <name>sharedNote</name> <init>= <expr><operator>new</operator> <call><name>Note</name><argument_list>(<argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>sharedNote</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getNoteTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>sharedNote</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name>getNoteContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>shareNote</name></name><argument_list>(<argument><expr><name>sharedNote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Notes locking with security password to avoid viewing, editing or deleting from unauthorized
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>lockNote</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Locking or unlocking note "</literal> <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// If security password is not set yes will be set right now</comment>
		<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Intent</name></type> <name>passwordIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>PasswordActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>passwordIntent</name></expr></argument>, <argument><expr><name>SET_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<comment type="line">// If password has already been inserted will not be asked again</comment>
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>isPasswordChecked</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_password_access"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>lockUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<comment type="line">// Password will be requested here</comment>
		<expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>requestPassword</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>passwordConfirmed</name></decl></parameter></parameter_list> -&gt; <block>{
			<switch>switch <condition>(<expr><name>passwordConfirmed</name></expr>)</condition> <block>{
				<case>case <expr><name>SUCCEED</name></expr>:</case>
					<expr_stmt><expr><call><name>lockUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<break>break;</break>
			}</block></switch>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>lockUnlock</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// Empty password has been set</comment>
		<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>password_not_set</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>save_note_to_lock_it</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>supportInvalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setLocked</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setPasswordChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Used to set actual reminder state when initializing a note to be edited
	 */</comment>
	<function><specifier>private</specifier> <type><name>String</name></type> <name>initReminder</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>long</name></type> <name>reminder</name> <init>= <expr><call><name>parseLong</name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>rrule</name> <init>= <expr><call><name><name>note</name><operator>.</operator><name>getRecurrenceRule</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>rrule</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>DateHelper</name><operator>.</operator><name>getNoteRecurrentReminderText</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>, <argument><expr><name>rrule</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then> <else>else <block>{
			<return>return <expr><call><name><name>DateHelper</name><operator>.</operator><name>getNoteReminderText</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Audio recordings playback
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>playback</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Some recording is playing right now</comment>
		<if>if <condition>(<expr><name>mPlayer</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mPlayer</name><operator>.</operator><name>isPlaying</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>isPlayingView</name> <operator>!=</operator> <name>v</name></expr>)</condition><then> <block>{
				<comment type="line">// If the audio actually played is NOT the one from the click view the last one is played</comment>
				<expr_stmt><expr><call><name>stopPlaying</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>isPlayingView</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>startPlaying</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>replacePlayingAudioBitmap</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<comment type="line">// Otherwise just stops playing</comment>
				<expr_stmt><expr><call><name>stopPlaying</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<comment type="line">// If nothing is playing audio just plays</comment>
			<expr_stmt><expr><name>isPlayingView</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>startPlaying</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>replacePlayingAudioBitmap</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>replacePlayingAudioBitmap</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Drawable</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gridview_item_picture</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getDrawable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>BitmapDrawable</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>recordingBitmap</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>BitmapDrawable</name><operator>)</operator> <name>d</name><operator>)</operator><operator>.</operator><call><name>getBitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>recordingBitmap</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>GlideBitmapDrawable</name><operator>)</operator> <call><name><name>d</name><operator>.</operator><name>getCurrent</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getBitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gridview_item_picture</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setImageBitmap</name><argument_list>(<argument><expr><call><name><name>ThumbnailUtils</name>
				<operator>.</operator><name>extractThumbnail</name></name><argument_list>(<argument><expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>THUMBNAIL_SIZE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>THUMBNAIL_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>startPlaying</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>mPlayer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>mPlayer</name> <operator>=</operator> <operator>new</operator> <call><name>MediaPlayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<try>try <block>{
			<expr_stmt><expr><call><name><name>mPlayer</name><operator>.</operator><name>setDataSource</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mPlayer</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mPlayer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mPlayer</name><operator>.</operator><name>setOnCompletionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>mp</name></decl></parameter></parameter_list> -&gt; <block>{
				<expr_stmt><expr><name>mPlayer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>isPlayingView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>isPlayingView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gridview_item_picture</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setImageBitmap</name>
							<argument_list>(<argument><expr><name>recordingBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>recordingBitmap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>isPlayingView</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"prepare() failed"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>stopPlaying</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>mPlayer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>isPlayingView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>isPlayingView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gridview_item_picture</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setImageBitmap</name><argument_list>(<argument><expr><name>recordingBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>isPlayingView</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>recordingBitmap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mPlayer</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mPlayer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>startRecording</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>PermissionsHelper</name><operator>.</operator><name>requestPermission</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>RECORD_AUDIO</name></name></expr></argument>,
				<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>permission_audio_recording</name></name></expr></argument>, <argument><expr><name>snackBarPlaceholder</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{

					<expr_stmt><expr><name>isRecording</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>toggleAudioRecordingStop</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>createNewAttachmentFile</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO_EXT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return;</return>
					}</block></then></if>
					<if>if <condition>(<expr><name>mRecorder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>mRecorder</name> <operator>=</operator> <operator>new</operator> <call><name>MediaRecorder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>setAudioSource</name></name><argument_list>(<argument><expr><name><name>MediaRecorder</name><operator>.</operator><name>AudioSource</name><operator>.</operator><name>MIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>setOutputFormat</name></name><argument_list>(<argument><expr><name><name>MediaRecorder</name><operator>.</operator><name>OutputFormat</name><operator>.</operator><name>MPEG_4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>setAudioEncoder</name></name><argument_list>(<argument><expr><name><name>MediaRecorder</name><operator>.</operator><name>AudioEncoder</name><operator>.</operator><name>AAC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>setAudioEncodingBitRate</name></name><argument_list>(<argument><expr><literal type="number">96000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>setAudioSamplingRate</name></name><argument_list>(<argument><expr><literal type="number">44100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><name>recordName</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>setOutputFile</name></name><argument_list>(<argument><expr><name>recordName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<try>try <block>{
						<expr_stmt><expr><name>audioRecordingTimeStart</name> <operator>=</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> | <type><name>IllegalStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"prepare() failed"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
				}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>toggleAudioRecordingStop</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>isRecording</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><call><name>setTextColor</name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#ff0000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>stopRecording</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>isRecording</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>mRecorder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>audioRecordingTime</name> <operator>=</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call> <operator>-</operator> <name>audioRecordingTimeStart</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mRecorder</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mRecorder</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>fade</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>fadeIn</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>anim</name> <init>= <expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_out_support</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>visibilityTemp</name> <init>= <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>fadeIn</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>anim</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_in_support</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>visibilityTemp</name> <operator>=</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>;</expr_stmt>
		}</block></then></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>visibility</name> <init>= <expr><name>visibilityTemp</name></expr></init></decl>;</decl_stmt>

		<comment type="line">// Checks if user has left the app</comment>
		<if>if <condition>(<expr><name>mainActivity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Animation</name></type> <name>mAnimation</name> <init>= <expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>anim</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>mAnimation</name><operator>.</operator><name>setAnimationListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AnimationListener</name></super><argument_list>()</argument_list> <block>{
				<function><annotation>@<name>Override</name></annotation>
				<specifier>public</specifier> <type><name>void</name></type> <name>onAnimationStart</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
					<comment type="line">// Nothing to do</comment>
				}</block></function>

				<function><annotation>@<name>Override</name></annotation>
				<specifier>public</specifier> <type><name>void</name></type> <name>onAnimationRepeat</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
					<comment type="line">// Nothing to do</comment>
				}</block></function>

				<function><annotation>@<name>Override</name></annotation>
				<specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>mAnimation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Adding shortcut on Home screen
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addShortcut</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>ShortcutHelper</name><operator>.</operator><name>addShortcut</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noteTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>shortcut_added</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<decl_stmt><decl><type><name>TextLinkClickListener</name></type> <name>textLinkClickListener</name> <init>= <expr><operator>new</operator> <class><super><name>TextLinkClickListener</name></super><argument_list>()</argument_list> <block>{
		<function><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <type><name>void</name></type> <name>onTextLinkClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>clickedString</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name>clickedString</name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>negativeColorRes</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>open</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>negativeText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>copy</name></name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
						<function><annotation>@<name>Override</name></annotation>
						<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
							<decl_stmt><decl><type><name>boolean</name></type> <name>error</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
							<try>try <block>{
								<expr_stmt><expr><name>intent</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addCategory</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>CATEGORY_BROWSABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
								<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							}</block></catch></try>

							<if>if <condition>(<expr><name>intent</name> <operator>==</operator> <literal type="null">null</literal>
									<operator>||</operator> <name>error</name>
									<operator>||</operator> <operator>!</operator><call><name><name>IntentChecker</name>
									<operator>.</operator><name>isAvailable</name></name><argument_list>(
											<argument><expr><name>mainActivity</name></expr></argument>,
											<argument><expr><name>intent</name></expr></argument>,
											<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name></expr></argument></argument_list></call></expr></condition><then><block>{<expr_stmt><expr><name><name>PackageManager</name><operator>.</operator><name>FEATURE_CAMERA</name></name></expr></expr_stmt>}</block></then></if><expr_stmt><expr/></expr_stmt></block></function></block></class></expr></argument>)</argument_list></call></expr></expr_stmt>)</block> <block>{
								<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_application_can_perform_this_action</name></name></expr></argument>,
										<argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							}</block></function> <else>else <block>{
								<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></else>
						}</block></class>

						@<name>Override</name>
						<specifier>public</specifier> <name>void</name> <call><name>onNegative</name><argument_list>(<argument><expr><name>MaterialDialog</name> <name>dialog</name></expr></argument>)</argument_list></call> <block>{
							<expr><name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipboardManager</name></name> <name>clipboard</name> <operator>=</operator> <operator>(</operator><name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipboardManager</name></name><operator>)</operator>
									<call><name><name>mainActivity</name>
											<operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;
							<expr><name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipData</name></name> <name>clip</name> <operator>=</operator> <call><name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipData</name><operator>.</operator><name>newPlainText</name></name><argument_list>(<argument><expr><literal type="string">"text label"</literal></expr></argument>,
									<argument><expr><name>clickedString</name></expr></argument>)</argument_list></call></expr>;
							<expr><call><name><name>clipboard</name><operator>.</operator><name>setPrimaryClip</name></name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;
						}</block></expr></init></decl></decl_stmt>
					})<expr_stmt><expr><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>View</name></type> <name>clickedView</name> <init>= <expr><ternary><condition><expr><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>toggleChecklistView</name></expr> </then><else>: <expr><name>content</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>clickedView</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>KeyboardUtils</name><operator>.</operator><name>hideKeyboard</name></name><argument_list>(<argument><expr><name>clickedView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>View</name></type> <name>clickedView1</name> <init>= <expr><ternary><condition><expr><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>toggleChecklistView</name></expr> </then><else>: <expr><name>content</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>KeyboardUtils</name><operator>.</operator><name>hideKeyboard</name></name><argument_list>(<argument><expr><name>clickedView1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}
	}<empty_stmt>;</empty_stmt>

	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
	<annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>boolean</name></type> <name>onTouch</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

			<case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>:</case>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"MotionEvent.ACTION_DOWN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

				<decl_stmt><decl><type><name>Point</name></type> <name>displaySize</name> <init>= <expr><call><name><name>Display</name><operator>.</operator><name>getUsableSize</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>displaySize</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

				<if>if <condition>(<expr><name><name>x</name> <argument_list type="generic">&lt; <argument><name><name>Constants</name><operator>.</operator><name>SWIPE_MARGIN</name></name> <operator>||</operator> <name>x</name></argument> &gt;</argument_list></name> <name>w</name> <operator>-</operator> <name><name>Constants</name><operator>.</operator><name>SWIPE_MARGIN</name></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>swiping</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>startSwipeX</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
				}</block></then></if>

				<break>break;</break>

			<case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr>:</case>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"MotionEvent.ACTION_UP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>swiping</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>swiping</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
				<break>break;</break>

			<case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr>:</case>
				<if>if <condition>(<expr><name>swiping</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"MotionEvent.ACTION_MOVE at position "</literal> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>startSwipeX</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>SWIPE_OFFSET</name></name></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>swiping</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>transaction</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>animateTransition</name></name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name><name>mainActivity</name><operator>.</operator><name>TRANSITION_VERTICAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>DetailFragment</name></type> <name>mDetailFragment</name> <init>= <expr><operator>new</operator> <call><name>DetailFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>Bundle</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mDetailFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fragment_container</name></name></expr></argument>, <argument><expr><name>mDetailFragment</name></expr></argument>,
								<argument><expr><name><name>mainActivity</name><operator>.</operator><name>FRAGMENT_DETAIL_TAG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addToBackStack</name><argument_list>(<argument><expr><name><name>mainActivity</name>
								<operator>.</operator><name>FRAGMENT_DETAIL_TAG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></switch>

		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onAttachingFileErrorOccurred</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_saving_attachments</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>removeAttachment</name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>autoresize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>addAttachment</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>addAttachment</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>removeAttachment</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>removeAttachment</name></name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>removeAttachment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>removeAttachment</name></name><argument_list>(<argument><expr><call><name><name>noteTmp</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>removeAllAttachments</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setAttachmentsList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mAttachmentAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>AttachmentAdapter</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mGridView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>invalidateViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>mAttachmentAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onAttachingFileFinished</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>addAttachment</name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>autoresize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onReminderPicked</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setAlarm</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>mFragment</name><operator>.</operator><name>isAdded</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>reminderIcon</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_alarm_black_18dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>datetime</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>DateHelper</name><operator>.</operator><name>getNoteReminderText</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onRecurrenceReminderPicked</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>noteTmp</name><operator>.</operator><name>setRecurrenceRule</name></name><argument_list>(<argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Recurrent reminder set: "</literal> <operator>+</operator> <name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>datetime</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>DateHelper</name><operator>.</operator><name>getNoteRecurrentReminderText</name></name><argument_list>(<argument><expr><call><name>parseLong</name><argument_list>(<argument><expr><call><name><name>noteTmp</name>
					<operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>scrollContent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Nothing to do</comment>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Nothing to do</comment>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onCheckListChanged</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>scrollContent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>scrollContent</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>mChecklistManager</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>contentLineCounter</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>scrollView</name><operator>.</operator><name>scrollBy</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>contentLineCounter</name> <operator>=</operator> <call><name><name>mChecklistManager</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<if>if <condition>(<expr><call><name><name>content</name><operator>.</operator><name>getLineCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>contentLineCounter</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>scrollView</name><operator>.</operator><name>scrollBy</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>contentLineCounter</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>getLineCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Add previously created tags to content
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>addTags</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>contentCursorPosition</name> <operator>=</operator> <call><name>getCursorIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Retrieves all available categories</comment>
		<decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name> <init>= <expr><call><name><name>TagsHelper</name><operator>.</operator><name>getAllTags</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// If there is no tag a message will be shown</comment>
		<if>if <condition>(<expr><call><name><name>tags</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_tags_created</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>

		<decl_stmt><decl><type><specifier>final</specifier> <name>Note</name></type> <name>currentNote</name> <init>= <expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>currentNote</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getNoteTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentNote</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name>getNoteContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>preselectedTags</name> <init>= <expr><call><name><name>TagsHelper</name><operator>.</operator><name>getPreselectedTagsArray</name></name><argument_list>(<argument><expr><name>currentNote</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Dialog and events creation</comment>
		<decl_stmt><decl><type><name>MaterialDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>select_tags</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>items</name><argument_list>(<argument><expr><call><name><name>TagsHelper</name><operator>.</operator><name>getTagsArray</name></name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>itemsCallbackMultiChoice</name><argument_list>(<argument><expr><name>preselectedTags</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog1</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>, <parameter><decl><name>text</name></decl></parameter>)</parameter_list> -&gt; <block>{
					<expr_stmt><expr><call><name><name>dialog1</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>tagNote</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr><name>currentNote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>
				}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>tagNote</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>selectedTags</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>taggingResult</name> <init>= <expr><call><name><name>TagsHelper</name><operator>.</operator><name>addTagToNote</name></name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>selectedTags</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>CheckListViewItem</name></type> <name>mCheckListViewItem</name> <init>= <expr><call><name><name>mChecklistManager</name><operator>.</operator><name>getFocusedItemView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>mCheckListViewItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name><name>mCheckListViewItem</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>contentCursorPosition</name></expr></argument>, <argument><expr><literal type="string">" "</literal> <operator>+</operator> <name><name>taggingResult</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mCheckListViewItem</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mCheckListViewItem</name><operator>.</operator><name>getEditText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><name>contentCursorPosition</name> <operator>+</operator> <call><name><name>taggingResult</name><operator>.</operator><name>first</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call>
						<operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <name><name>taggingResult</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name>getNoteContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name><name>content</name><operator>.</operator><name>hasFocus</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>contentCursorPosition</name></expr></argument>, <argument><expr><literal type="string">" "</literal> <operator>+</operator> <name><name>taggingResult</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>contentCursorPosition</name> <operator>+</operator> <call><name><name>taggingResult</name><operator>.</operator><name>first</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<if>if <condition>(<expr><call><name>getNoteContent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>taggingResult</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>

		<comment type="line">// Removes unchecked tags</comment>
		<if>if <condition>(<expr><call><name><name>taggingResult</name><operator>.</operator><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>toggleChecklist2</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>titleAndContent</name> <init>= <expr><call><name><name>TagsHelper</name><operator>.</operator><name>removeTag</name></name><argument_list>(<argument><expr><call><name>getNoteTitle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getNoteContent</name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><name><name>taggingResult</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>toggleChecklist2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>int</name></type> <name>getCursorIndex</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name><name>noteTmp</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>content</name><operator>.</operator><name>getSelectionStart</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>CheckListViewItem</name></type> <name>mCheckListViewItem</name> <init>= <expr><call><name><name>mChecklistManager</name><operator>.</operator><name>getFocusedItemView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>mCheckListViewItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<return>return <expr><call><name><name>mCheckListViewItem</name><operator>.</operator><name>getEditText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionStart</name><argument_list>()</argument_list></call></expr>;</return>
			}</block></then> <else>else <block>{
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></else></if>
		}</block></else></if>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Used to check currently opened note from activity to avoid openind multiple times the same one
	 */</comment>
	<function><specifier>public</specifier> <type><name>Note</name></type> <name>getCurrentNote</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>note</name></expr>;</return>
	}</block></function>

	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>isNoteLocationValid</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>noteTmp</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
				<operator>&amp;&amp;</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
				<operator>&amp;&amp;</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
				<operator>&amp;&amp;</operator> <call><name><name>noteTmp</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Manages clicks on attachment dialog
	 */</comment>
	<class><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"InlinedApi"</literal></expr></argument>)</argument_list></annotation>
	<specifier>private</specifier> class <name>AttachmentOnClickListener</name> <super><implements>implements <name>OnClickListener</name></implements></super> <block>{

		<function><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{

			<switch>switch <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<comment type="line">// Photo from camera</comment>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera</name></name></expr>:</case>
					<expr_stmt><expr><call><name>takePhoto</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>recording</name></name></expr>:</case>
					<if>if <condition>(<expr><operator>!</operator><name>isRecording</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>startRecording</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><call><name>stopRecording</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>recordName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name>
								<operator>.</operator><name>MIME_TYPE_AUDIO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>attachment</name><operator>.</operator><name>setLength</name></name><argument_list>(<argument><expr><name>audioRecordingTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>addAttachment</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mAttachmentAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>mGridView</name><operator>.</operator><name>autoresize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>video</name></name></expr>:</case>
					<expr_stmt><expr><call><name>takeVideo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>files</name></name></expr>:</case>
					<if>if <condition>(<expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
							<name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>startGetContentAction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><call><name>askReadExternalStoragePermission</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sketch</name></name></expr>:</case>
					<expr_stmt><expr><call><name>takeSketch</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>location</name></name></expr>:</case>
					<expr_stmt><expr><call><name>displayLocationDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>timestamp</name></name></expr>:</case>
					<expr_stmt><expr><call><name>addTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pushbullet</name></name></expr>:</case>
					<expr_stmt><expr><call><name><name>MessagingExtension</name><operator>.</operator><name>mirrorMessage</name></name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>pushbullet</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>getNoteContent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>,
									<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_stat_literal_icon</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></switch>
			<if>if <condition>(<expr><operator>!</operator><name>isRecording</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>attachmentDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></function>
	}</block></class>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>startGetContentAction</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Intent</name></type> <name>filesIntent</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>filesIntent</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_GET_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filesIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_ALLOW_MULTIPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filesIntent</name><operator>.</operator><name>addCategory</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>CATEGORY_OPENABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filesIntent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"*/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>filesIntent</name></expr></argument>, <argument><expr><name>FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>askReadExternalStoragePermission</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>PermissionsHelper</name><operator>.</operator><name>requestPermission</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr></argument>,
				<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>permission_external_storage_detail_attachment</name></name></expr></argument>,
				<argument><expr><name>snackBarPlaceholder</name></expr></argument>, <argument><expr><name>this</name><operator>::</operator><name>startGetContentAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>onEventMainThread</name><parameter_list>(<parameter><decl><type><name>PushbulletReplyEvent</name></type> <name>pushbulletReplyEvent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name>getNoteContent</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pushbulletReplyEvent</name><operator>.</operator><name>message</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}



</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\ColorsUtil.java" hash="861e9ffbad9d522bb4a8f7528bdd6386784b9af3"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>


<class><specifier>public</specifier> class <name>ColorsUtil</name> <block>{

	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>COLOR_DARK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>COLOR_LIGHT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>double</name></type> <name>CONTRAST_THRESHOLD</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>double</name></type> <name>calculateColorLuminance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><literal type="number">0.2126</literal> <operator>*</operator> <call><name><name>Color</name><operator>.</operator><name>red</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.7152</literal> <operator>*</operator> <call><name><name>Color</name><operator>.</operator><name>green</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.0722</literal> <operator>*</operator> <call><name><name>Color</name><operator>.</operator><name>blue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getContrastedColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>luminance</name> <init>= <expr><call><name>calculateColorLuminance</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><ternary><condition><expr><name>luminance</name> <operator>&gt;</operator> <name>CONTRAST_THRESHOLD</name></expr> ?</condition><then> <expr><name>COLOR_DARK</name></expr> </then><else>: <expr><name>COLOR_LIGHT</name></expr></else></ternary></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\AnimationsHelper.java" hash="6e40a299e51cd28b33fa249de3bd01f43af6254f"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimatorListenerAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimatorSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>ObjectAnimator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AccelerateInterpolator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>DecelerateInterpolator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>TranslateAnimation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>AnimationsHelper</name> <block>{
    
    <constructor><specifier>private</specifier> <name>AnimationsHelper</name><parameter_list>()</parameter_list><block>{}</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>zoomListItem</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>ImageView</name></type> <name>expandedImageView</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>targetView</name></decl></parameter>,
                                    <parameter><decl><type><name>AnimatorListenerAdapter</name></type> <name>animatorListenerAdapter</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>animationDuration</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>zooming_view_anim_time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Calculate the starting and ending bounds for the zoomed-in image.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Rect</name></type> <name>startBounds</name> <init>= <expr><operator>new</operator> <call><name>Rect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Rect</name></type> <name>finalBounds</name> <init>= <expr><operator>new</operator> <call><name>Rect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Point</name></type> <name>globalOffset</name> <init>= <expr><operator>new</operator> <call><name>Point</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The start bounds are the global visible rectangle of the thumbnail,</comment>
        <comment type="line">// and the final bounds are the global visible rectangle of the container</comment>
        <comment type="line">// view. Also set the container view's offset as the origin for the</comment>
        <comment type="line">// bounds, since that's the origin for the positioning animation</comment>
        <comment type="line">// properties (X, Y).</comment>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>getGlobalVisibleRect</name></name><argument_list>(<argument><expr><name>startBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>targetView</name><operator>.</operator><name>getGlobalVisibleRect</name></name><argument_list>(<argument><expr><name>finalBounds</name></expr></argument>, <argument><expr><name>globalOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>startBounds</name><operator>.</operator><name>offset</name></name><argument_list>(<argument><expr><operator>-</operator><name><name>globalOffset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>globalOffset</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>finalBounds</name><operator>.</operator><name>offset</name></name><argument_list>(<argument><expr><operator>-</operator><name><name>globalOffset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>globalOffset</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Adjust the start bounds to be the same aspect ratio as the final</comment>
        <comment type="line">// bounds using the "center crop" technique. This prevents undesirable</comment>
        <comment type="line">// stretching during the animation. Also calculate the start scaling</comment>
        <comment type="line">// factor (the end scaling factor is always 1.0).</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>startScale</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>finalBounds</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>finalBounds</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call>
                <operator>&gt;</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>startBounds</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>startBounds</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Extend start bounds horizontally</comment>
            <expr_stmt><expr><name>startScale</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>startBounds</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>finalBounds</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>startWidth</name> <init>= <expr><name>startScale</name> <operator>*</operator> <call><name><name>finalBounds</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>deltaWidth</name> <init>= <expr><operator>(</operator><name>startWidth</name> <operator>-</operator> <call><name><name>startBounds</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>startBounds</name><operator>.</operator><name>left</name></name> <operator>-=</operator> <name>deltaWidth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>startBounds</name><operator>.</operator><name>right</name></name> <operator>+=</operator> <name>deltaWidth</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// Extend start bounds vertically</comment>
            <expr_stmt><expr><name>startScale</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>startBounds</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>finalBounds</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>startHeight</name> <init>= <expr><name>startScale</name> <operator>*</operator> <call><name><name>finalBounds</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>deltaHeight</name> <init>= <expr><operator>(</operator><name>startHeight</name> <operator>-</operator> <call><name><name>startBounds</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>startBounds</name><operator>.</operator><name>top</name></name> <operator>-=</operator> <name>deltaHeight</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>startBounds</name><operator>.</operator><name>bottom</name></name> <operator>+=</operator> <name>deltaHeight</name></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Hide the thumbnail and show the zoomed-in view. When the animation</comment>
        <comment type="line">// begins, it will position the zoomed-in view in the place of the</comment>
        <comment type="line">// thumbnail.</comment>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expandedImageView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Construct and run the parallel animation of the four translation and</comment>
        <comment type="line">// scale properties (X, Y, SCALE_X, and SCALE_Y).</comment>
        <decl_stmt><decl><type><name>AnimatorSet</name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name>AnimatorSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>play</name></name><argument_list>(<argument><expr><call><name><name>ObjectAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><name>expandedImageView</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name><name>startBounds</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>finalBounds</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>with</name><argument_list>(<argument><expr><call><name><name>ObjectAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><name>expandedImageView</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>Y</name></name></expr></argument>, <argument><expr><name><name>startBounds</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>finalBounds</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>with</name><argument_list>(<argument><expr><call><name><name>ObjectAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><name>expandedImageView</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>SCALE_X</name></name></expr></argument>, <argument><expr><name>startScale</name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>with</name><argument_list>(<argument><expr><call><name><name>ObjectAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><name>expandedImageView</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>SCALE_Y</name></name></expr></argument>, <argument><expr><name>startScale</name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>animationDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecelerateInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name>animatorListenerAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>expandOrCollapse</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expand</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TranslateAnimation</name></type> <name>anim</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>expand</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>anim</name> <operator>=</operator> <operator>new</operator> <call><name>TranslateAnimation</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>-</operator><call><name><name>v</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>anim</name> <operator>=</operator> <operator>new</operator> <call><name>TranslateAnimation</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>-</operator><call><name><name>v</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Animation</name><operator>.</operator><name>AnimationListener</name></name></type> <name>collapselistener</name> <init>= <expr><operator>new</operator> <class><super><name><name>Animation</name><operator>.</operator><name>AnimationListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationStart</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
                    <comment type="line">// Useless</comment>
                }</block></function>


                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationRepeat</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
                    <comment type="line">// Useless</comment>
                }</block></function>


                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>setAnimationListener</name></name><argument_list>(<argument><expr><name>collapselistener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AccelerateInterpolator</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\ConnectionManager.java" hash="a699c171d79b915869977f37282eb67278fc3066"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectivityManager</name></name>;</import>


<class><specifier>public</specifier> class <name>ConnectionManager</name> <block>{

    <comment type="block" format="javadoc">/**
     * Checks for available internet connection
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>internetAvailable</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ConnectivityManager</name></type> <name>conMgr</name> <init>= <expr><operator>(</operator><name>ConnectivityManager</name><operator>)</operator> <call><name><name>ctx</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CONNECTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>conMgr</name><operator>.</operator><name>getActiveNetworkInfo</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>conMgr</name><operator>.</operator><name>getActiveNetworkInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isConnected</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\BitmapHelper.java" hash="b84f40f2825dd5a0cb9859a3620dcb990cf6f691"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>ThumbnailUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name><operator>.</operator><name>Images</name><operator>.</operator><name>Thumbnails</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>simplegallery</name><operator>.</operator><name>util</name><operator>.</operator><name>BitmapUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FilenameUtils</name></name>;</import>


<class><specifier>public</specifier> class <name>BitmapHelper</name> <block>{

    <comment type="block" format="javadoc">/**
     * Retrieves a the bitmap relative to attachment based on mime type
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Bitmap</name></type> <name>getBitmapFromAttachment</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Bitmap</name></type> <name>bmp</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Video</comment>
        <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Tries to retrieve full path from ContentResolver if is a new video</comment>
            <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>StorageHelper</name><operator>.</operator><name>getRealPathFromURI</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// .. or directly from local directory otherwise</comment>
            <if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>FileHelper</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name><name>ThumbnailUtils</name><operator>.</operator><name>createVideoThumbnail</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>Thumbnails</name><operator>.</operator><name>MINI_KIND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>bmp</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name><name>BitmapUtils</name><operator>.</operator><name>createVideoThumbnail</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>bmp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

		<comment type="line">// Image</comment>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_IMAGE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_SKETCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name><name>BitmapUtils</name><operator>.</operator><name>getThumbnail</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name>bmp</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            }</block></catch></try>

		<comment type="line">// Audio</comment>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name><name>ThumbnailUtils</name><operator>.</operator><name>extractThumbnail</name></name><argument_list>(
                    <argument><expr><call><name><name>BitmapUtils</name><operator>.</operator><name>decodeSampledBitmapFromResourceMemOpt</name></name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openRawResource</name><argument_list>(<argument><expr><name><name>R</name>
									<operator>.</operator><name>raw</name><operator>.</operator><name>play</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// File</comment>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_FILES</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

			<comment type="line">// vCard</comment>
			<if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_CONTACT_EXT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FilenameUtils</name><operator>.</operator><name>getExtension</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name><name>ThumbnailUtils</name><operator>.</operator><name>extractThumbnail</name></name><argument_list>(
						<argument><expr><call><name><name>BitmapUtils</name><operator>.</operator><name>decodeSampledBitmapFromResourceMemOpt</name></name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openRawResource</name><argument_list>(<argument><expr><name><name>R</name>
										<operator>.</operator><name>raw</name><operator>.</operator><name>vcard</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name><name>ThumbnailUtils</name><operator>.</operator><name>extractThumbnail</name></name><argument_list>(
						<argument><expr><call><name><name>BitmapUtils</name><operator>.</operator><name>decodeSampledBitmapFromResourceMemOpt</name></name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openRawResource</name><argument_list>(<argument><expr><name><name>R</name>
										<operator>.</operator><name>raw</name><operator>.</operator><name>files</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if></elseif></if>

        <return>return <expr><name>bmp</name></expr>;</return>
    }</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Uri</name></type> <name>getThumbnailUri</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>mAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>mimeType</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>subtype</name> <init>= <expr><call><name><name>mimeType</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>
			<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
				<case>case <expr><literal type="string">"image"</literal></expr>:</case>
				<case>case <expr><literal type="string">"video"</literal></expr>:</case>
					<comment type="line">// Nothing to do, bitmap will be retrieved from this</comment>
					<break>break;</break>
				<case>case <expr><literal type="string">"audio"</literal></expr>:</case>
					<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"android.resource://"</literal> <operator>+</operator> <call><name><name>mContext</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>play</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<decl_stmt><decl><type><name>int</name></type> <name>drawable</name> <init>= <expr><ternary><condition><expr><literal type="string">"x-vcard"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>vcard</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>files</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"android.resource://"</literal> <operator>+</operator> <call><name><name>mContext</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			}</block></switch>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"android.resource://"</literal> <operator>+</operator> <call><name><name>mContext</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<return>return <expr><name>uri</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\ConstantsBase.java" hash="b23fcdb0ebcadd48b881ffec458bcbf1b78d92f2"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<interface><specifier>public</specifier> interface <name>ConstantsBase</name> <block>{

	<decl_stmt><decl><type><name>String</name></type> <name>DATABASE_NAME</name> <init>= <expr><literal type="string">"omni-notes"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>APP_STORAGE_DIRECTORY_SB_SYNC</name> <init>= <expr><literal type="string">"db_sync"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>String</name></type> <name>DEV_EMAIL</name> <init>= <expr><literal type="string">"omninotes@iosue.it"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>GOOGLE_PLUS_COMMUNITY</name> <init>= <expr><literal type="string">"https://plus.google.com/communities/112276053772152071903"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>FACEBOOK_COMMUNITY</name> <init>= <expr><literal type="string">"https://www.facebook.com/OmniNotes/"</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Used for updates retrieval</comment>
	<decl_stmt><decl><type><name>long</name></type> <name>UPDATE_MIN_FREQUENCY</name> <init>= <expr><literal type="number">24L</literal> <operator>*</operator> <literal type="number">60L</literal> <operator>*</operator> <literal type="number">60L</literal> <operator>*</operator> <literal type="number">1000L</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 1 day</comment>
	<decl_stmt><decl><type><name>String</name></type> <name>DRIVE_FOLDER_LAST_BUILD</name> <init>= <expr><literal type="string">"https://goo.gl/gB55RE"</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Notes swipe</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>SWIPE_MARGIN</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>SWIPE_OFFSET</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Floating action button</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>FAB_ANIMATION_TIME</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Notes content masking</comment>
	<decl_stmt><decl><type><name>String</name></type> <name>MASK_CHAR</name> <init>= <expr><literal type="string">"*"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>THUMBNAIL_SIZE</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>String</name></type> <name>DATE_FORMAT_SORTABLE</name> <init>= <expr><literal type="string">"yyyyMMdd_HHmmss_SSS"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>DATE_FORMAT_SORTABLE_OLD</name> <init>= <expr><literal type="string">"yyyyMMddHHmmss"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>DATE_FORMAT_EXPORT</name> <init>= <expr><literal type="string">"yyyy.MM.dd-HH.mm"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>String</name></type> <name>INTENT_KEY</name> <init>= <expr><literal type="string">"note_id"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>INTENT_NOTE</name> <init>= <expr><literal type="string">"note"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>GALLERY_TITLE</name> <init>= <expr><literal type="string">"gallery_title"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>GALLERY_CLICKED_IMAGE</name> <init>= <expr><literal type="string">"gallery_clicked_image"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>GALLERY_IMAGES</name> <init>= <expr><literal type="string">"gallery_images"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>INTENT_CATEGORY</name> <init>= <expr><literal type="string">"category"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>INTENT_GOOGLE_NOW</name> <init>= <expr><literal type="string">"com.google.android.gm.action.AUTO_SEND"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>INTENT_WIDGET</name> <init>= <expr><literal type="string">"widget_id"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>INTENT_UPDATE_DASHCLOCK</name> <init>= <expr><literal type="string">"update_dashclock"</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Custom intent actions</comment>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_START_APP</name> <init>= <expr><literal type="string">"action_start_app"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_RESTART_APP</name> <init>= <expr><literal type="string">"action_restart_app"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_DISMISS</name> <init>= <expr><literal type="string">"action_dismiss"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_SNOOZE</name> <init>= <expr><literal type="string">"action_snooze"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_POSTPONE</name> <init>= <expr><literal type="string">"action_postpone"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_SHORTCUT</name> <init>= <expr><literal type="string">"action_shortcut"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_WIDGET</name> <init>= <expr><literal type="string">"action_widget"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_WIDGET_TAKE_PHOTO</name> <init>= <expr><literal type="string">"action_widget_take_photo"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_WIDGET_SHOW_LIST</name> <init>= <expr><literal type="string">"action_widget_show_list"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_SHORTCUT_WIDGET</name> <init>= <expr><literal type="string">"action_shortcut_widget"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_NOTIFICATION_CLICK</name> <init>= <expr><literal type="string">"action_notification_click"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_MERGE</name> <init>= <expr><literal type="string">"action_merge"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_FAB_TAKE_PHOTO</name> <init>= <expr><literal type="string">"action_fab_take_photo"</literal></expr></init></decl>;</decl_stmt>
	<comment type="block" format="javadoc">/**
	 * Used to quickly add a note, save, and perform backPress (eg. Tasker+Pushbullet) *
	 */</comment>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_SEND_AND_EXIT</name> <init>= <expr><literal type="string">"action_send_and_exit"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>ACTION_SEARCH_UNCOMPLETE_CHECKLISTS</name> <init>= <expr><literal type="string">"action_search_uncomplete_checklists"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>String</name></type> <name>PREF_LANG</name> <init>= <expr><literal type="string">"settings_language"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_LAST_UPDATE_CHECK</name> <init>= <expr><literal type="string">"last_update_check"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_NAVIGATION</name> <init>= <expr><literal type="string">"navigation"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_SORTING_COLUMN</name> <init>= <expr><literal type="string">"sorting_column"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_PASSWORD</name> <init>= <expr><literal type="string">"password"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_PASSWORD_QUESTION</name> <init>= <expr><literal type="string">"password_question"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_PASSWORD_ANSWER</name> <init>= <expr><literal type="string">"password_answer"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_KEEP_CHECKED</name> <init>= <expr><literal type="string">"keep_checked"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_KEEP_CHECKMARKS</name> <init>= <expr><literal type="string">"show_checkmarks"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_EXPANDED_VIEW</name> <init>= <expr><literal type="string">"expanded_view"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_COLORS_APP_DEFAULT</name> <init>= <expr><literal type="string">"strip"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_WIDGET_PREFIX</name> <init>= <expr><literal type="string">"widget_"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_SHOW_UNCATEGORIZED</name> <init>= <expr><literal type="string">"settings_show_uncategorized"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_AUTO_LOCATION</name> <init>= <expr><literal type="string">"settings_auto_location"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_FILTER_PAST_REMINDERS</name> <init>= <expr><literal type="string">"settings_filter_past_reminders"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_FILTER_ARCHIVED_IN_CATEGORIES</name> <init>= <expr><literal type="string">"settings_filter_archived_in_categories"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_DYNAMIC_MENU</name> <init>= <expr><literal type="string">"settings_dynamic_menu"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_CURRENT_APP_VERSION</name> <init>= <expr><literal type="string">"settings_current_app_version"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_FAB_EXPANSION_BEHAVIOR</name> <init>= <expr><literal type="string">"settings_fab_expansion_behavior"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_ATTANCHEMENTS_ON_BOTTOM</name> <init>= <expr><literal type="string">"settings_attachments_on_bottom"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_SNOOZE_DEFAULT</name> <init>= <expr><literal type="string">"10"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_TOUR_COMPLETE</name> <init>= <expr><literal type="string">"pref_tour_complete"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_ENABLE_SWIPE</name> <init>= <expr><literal type="string">"settings_enable_swipe"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_SEND_ANALYTICS</name> <init>= <expr><literal type="string">"settings_send_analytics"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PREF_PRETTIFIED_DATES</name> <init>= <expr><literal type="string">"settings_prettified_dates"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_IMAGE</name> <init>= <expr><literal type="string">"image/jpeg"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_AUDIO</name> <init>= <expr><literal type="string">"audio/amr"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_VIDEO</name> <init>= <expr><literal type="string">"video/mp4"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_SKETCH</name> <init>= <expr><literal type="string">"image/png"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_FILES</name> <init>= <expr><literal type="string">"file/*"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_IMAGE_EXT</name> <init>= <expr><literal type="string">".jpeg"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_AUDIO_EXT</name> <init>= <expr><literal type="string">".amr"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_VIDEO_EXT</name> <init>= <expr><literal type="string">".mp4"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_SKETCH_EXT</name> <init>= <expr><literal type="string">".png"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>MIME_TYPE_CONTACT_EXT</name> <init>= <expr><literal type="string">".vcf"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>String</name></type> <name>TIMESTAMP_UNIX_EPOCH</name> <init>= <expr><literal type="string">"0"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>TIMESTAMP_UNIX_EPOCH_FAR</name> <init>= <expr><literal type="string">"18464193800000"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>MENU_SORT_GROUP_ID</name> <init>= <expr><literal type="number">11998811</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>String</name></type> <name>MERGED_NOTES_SEPARATOR</name> <init>= <expr><literal type="string">"----------------------"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>PROPERTIES_PARAMS_SEPARATOR</name> <init>= <expr><literal type="string">","</literal></expr></init></decl>;</decl_stmt>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\Display.java" hash="5d7efccbc23b2678c29a7730ff387c458e99f1a8"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>


<class><specifier>public</specifier> class <name>Display</name> <block>{


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>View</name></type> <name>getRootView</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>mActivity</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>mActivity</name><operator>.</operator><name>getWindow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDecorView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>Point</name></type> <name>getUsableSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Point</name></type> <name>displaySize</name> <init>= <expr><operator>new</operator> <call><name>Point</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>WindowManager</name></type> <name>manager</name> <init>= <expr><operator>(</operator><name>WindowManager</name><operator>)</operator> <call><name><name>mContext</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>WINDOW_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>manager</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Display</name></name></type> <name>display</name> <init>= <expr><call><name><name>manager</name><operator>.</operator><name>getDefaultDisplay</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>display</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>display</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>displaySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
            }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument> , <argument><expr><literal type="string">"Error checking display sizes"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>displaySize</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Point</name></type> <name>getVisibleSize</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Point</name></type> <name>displaySize</name> <init>= <expr><operator>new</operator> <call><name>Point</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rect</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Rect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>getWindow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDecorView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindowVisibleDisplayFrame</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>displaySize</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>displaySize</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
        <return>return <expr><name>displaySize</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Point</name></type> <name>getFullSize</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Point</name></type> <name>displaySize</name> <init>= <expr><operator>new</operator> <call><name>Point</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>displaySize</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>getRootView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>displaySize</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>getRootView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>displaySize</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getStatusBarHeight</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>resourceId</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentifier</name><argument_list>(<argument><expr><literal type="string">"status_bar_height"</literal></expr></argument>, <argument><expr><literal type="string">"dimen"</literal></expr></argument>, <argument><expr><literal type="string">"android"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>resourceId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name>resourceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNavigationBarHeightStandard</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>resourceId</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentifier</name><argument_list>(<argument><expr><literal type="string">"navigation_bar_height"</literal></expr></argument>, <argument><expr><literal type="string">"dimen"</literal></expr></argument>, <argument><expr><literal type="string">"android"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>resourceId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name>resourceId</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNavigationBarHeight</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>(</operator><call><name>getFullSize</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call><operator>.</operator><name>y</name> <operator>-</operator> <call><name>getUsableSize</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>y</name><operator>)</operator></expr>;</return>
    }</block></function>


    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getActionbarHeight</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>mObject</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>ActionBarActivity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>mObject</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ActionBarActivity</name><operator>)</operator> <name>mObject</name><operator>)</operator><operator>.</operator><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>Activity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>mObject</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Activity</name><operator>)</operator> <name>mObject</name><operator>)</operator><operator>.</operator><call><name>getActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

<comment type="line">//	public static int getActionBarHeight(Activity mActivity) {</comment>
<comment type="line">//		Rect r = new Rect();</comment>
<comment type="line">//		Window window = mActivity.getWindow();</comment>
<comment type="line">//		window.getDecorView().getWindowVisibleDisplayFrame(r);</comment>
<comment type="line">//		int StatusBarHeight = r.top;</comment>
<comment type="line">//		int contentViewTop = window.findViewById(Window.ID_ANDROID_CONTENT).getTop();</comment>
<comment type="line">//		int actionBarHeight = contentViewTop - StatusBarHeight;</comment>
<comment type="line">//		return actionBarHeight;</comment>
<comment type="line">//	}</comment>


    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR1</name></name></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>Point</name></type> <name>getScreenDimensions</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>WindowManager</name></type> <name>wm</name> <init>= <expr><operator>(</operator><name>WindowManager</name><operator>)</operator> <call><name><name>mContext</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>WINDOW_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Display</name></name></type> <name>display</name> <init>= <expr><call><name><name>wm</name><operator>.</operator><name>getDefaultDisplay</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point</name></type> <name>size</name> <init>= <expr><operator>new</operator> <call><name>Point</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>metrics</name> <init>= <expr><operator>new</operator> <call><name>DisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>display</name><operator>.</operator><name>getRealMetrics</name></name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>size</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>metrics</name><operator>.</operator><name>widthPixels</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>size</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>metrics</name><operator>.</operator><name>heightPixels</name></name></expr>;</expr_stmt>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR1</name></name></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNavigationBarHeightKitkat</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>getScreenDimensions</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call><operator>.</operator><name>y</name> <operator>-</operator> <call><name>getUsableSize</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call><operator>.</operator><name>y</name></expr>;</return>
    }</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>orientationLandscape</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>orientation</name> <operator>==</operator> <name><name>Configuration</name><operator>.</operator><name>ORIENTATION_LANDSCAPE</name></name></expr>;</return>
	}</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getSoftButtonsBarHeight</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// getRealMetrics is only available with API 17 and +</comment>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR1</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>metrics</name> <init>= <expr><operator>new</operator> <call><name>DisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>getWindowManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMetrics</name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>usableHeight</name> <init>= <expr><name><name>metrics</name><operator>.</operator><name>heightPixels</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>getWindowManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRealMetrics</name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>realHeight</name> <init>= <expr><name><name>metrics</name><operator>.</operator><name>heightPixels</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>realHeight</name> <operator>&gt;</operator> <name>usableHeight</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>realHeight</name> <operator>-</operator> <name>usableHeight</name></expr>;</return></block></then>
            <else>else
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
        }</block></then></if>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\Fonts.java" hash="db34daac2542eab304c50b0f380af577fecb67a4"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>utils</name><operator>.</operator><name>DensityUtil</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>


<class><specifier>public</specifier> class <name>Fonts</name> <block>{

    <comment type="block" format="javadoc">/**
     * Overrides all the fonts set to TextView class descendants found in the
     * view passed as parameter
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>overrideTextSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>SharedPreferences</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Context</name></type> <name>privateContext</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>ViewGroup</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ViewGroup</name></type> <name>vg</name> <init>= <expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vg</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                    <decl_stmt><decl><type><name>View</name></type> <name>child</name> <init>= <expr><call><name><name>vg</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>overrideTextSize</name><argument_list>(<argument><expr><name>privateContext</name></expr></argument>, <argument><expr><name>prefs</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>TextView</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>currentSize</name> <init>= <expr><call><name><name>DensityUtil</name><operator>.</operator><name>pxToDp</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><call><name>getTextSize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>privateContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>Arrays</name>
                        <operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>privateContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(
                                <argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>text_size_values</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>indexOf</name><argument_list>(
                                <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_text_size"</literal></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>offset</name> <init>= <expr><call><name><name>privateContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntArray</name><argument_list>(
                        <argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>text_size_offset</name></name></expr></argument>)</argument_list></call><index>[<expr><ternary><condition><expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>index</name></expr></else></ternary></expr>]</index></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><call><name>setTextSize</name><argument_list>(<argument><expr><name>currentSize</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error setting font size"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\IntentChecker.java" hash="32aa8a2395cd110534ec38d3108484ea5e3ead5d"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ResolveInfo</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>IntentChecker</name> <block>{

	<comment type="block" format="javadoc">/**
	 * Retrieves
	 * @param ctx
	 * @param intent
	 * @return
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>resolveActivityPackage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ComponentName</name></type> <name>activity</name><init>= <expr><call><name><name>intent</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><ternary><condition><expr><name>activity</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>activity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Checks intent and features availability
	 *
	 * @param features
	 * @param ctx
	 * @param intent
	 * @return
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isAvailable</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>features</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><call><name>getCompatiblePackages</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>features</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<for>for <control>(<init><decl><type><name>String</name></type> <name>feature</name> <range>: <expr><name>features</name></expr></range></decl></init>)</control> <block>{
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>&amp;&amp;</operator> <call><name><name>ctx</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasSystemFeature</name><argument_list>(<argument><expr><name>feature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
		<return>return <expr><name>res</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Checks Intent's action
	 *
	 * @param i      Intent to ckeck
	 * @param action Action to compare with
	 * @return
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkAction</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>action</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * Checks Intent's actions
	 *
	 * @param i      Intent to ckeck
	 * @param actions Multiple actions to compare with
	 * @return
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkAction</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>actions</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>String</name></type> <name>action</name> <range>: <expr><name>actions</name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><call><name>checkAction</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
		}</block></for>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ResolveInfo</name></argument>&gt;</argument_list></name></type> <name>getCompatiblePackages</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>mgr</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>mgr</name><operator>.</operator><name>queryIntentActivities</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>PackageManager</name><operator>.</operator><name>MATCH_DEFAULT_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\FileHelper.java" hash="aa5ebe2f3ce1591371ebd988178497e096331067"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentUris</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>DocumentsContract</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>factory</name><operator>.</operator><name>MediaStoreFactory</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Long</name><operator>.</operator><name>parseLong</name></name>;</import>


<class><specifier>public</specifier> class <name>FileHelper</name> <block>{

    <comment type="block" format="javadoc">/**
     * Get a file path from a Uri. This will get the the path for Storage Access
     * Framework Documents, as well as the _data field for the MediaStore and
     * other file-based ContentProviders.
     *
     * @param context The context.
     * @param uri     The Uri to query.
     */</comment>
    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getPath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isKitKat</name> <init>= <expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// DocumentProvider</comment>
        <if>if <condition>(<expr><name>isKitKat</name> <operator>&amp;&amp;</operator> <call><name><name>DocumentsContract</name><operator>.</operator><name>isDocumentUri</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// ExternalStorageProvider</comment>
            <if>if <condition>(<expr><call><name>isExternalStorageDocument</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>docId</name> <init>= <expr><call><name><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>split</name> <init>= <expr><call><name><name>docId</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>type</name> <init>= <expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><literal type="string">"primary"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStorageDirectory</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
                }</block></then></if>

                <comment type="line">// TODO handle non-primary volumes</comment>
            }</block></then>
            <comment type="line">// DownloadsProvider</comment>
            <elseif>else <if>if <condition>(<expr><call><name>isDownloadsDocument</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>contentUri</name> <init>= <expr><call><name><name>ContentUris</name><operator>.</operator><name>withAppendedId</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"content://downloads/public_downloads"</literal></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>parseLong</name><argument_list>(<argument><expr><call><name><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name>getDataColumn</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>contentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if></elseif>
            <comment type="line">// MediaProvider</comment>
            <elseif>else <if>if <condition>(<expr><call><name>isMediaDocument</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>docId</name> <init>= <expr><call><name><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>split</name> <init>= <expr><call><name><name>docId</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>type</name> <init>= <expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>MediaStoreFactory</name></type> <name>mediaStoreFactory</name> <init>= <expr><operator>new</operator> <call><name>MediaStoreFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Uri</name></type> <name>contentUri</name> <init>= <expr><call><name><name>mediaStoreFactory</name><operator>.</operator><name>createURI</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>selection</name> <init>= <expr><literal type="string">"_id=?"</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>

                <return>return <expr><call><name>getDataColumn</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>contentUri</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>selectionArgs</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if></elseif></if>
        }</block></then>
        <comment type="line">// MediaStore (and general)</comment>
        <elseif>else <if>if <condition>(<expr><literal type="string">"content"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getDataColumn</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif>
        <comment type="line">// File</comment>
        <elseif>else <if>if <condition>(<expr><literal type="string">"file"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if></elseif></if>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Get the value of the data column for this Uri. This is useful for
     * MediaStore Uris, and other file-based ContentProviders.
     *
     * @param context       The context.
     * @param uri           The Uri to query.
     * @param selection     (Optional) Filter used in the query.
     * @param selectionArgs (Optional) Selection arguments used in the query.
     * @return The value of the _data column, which is typically a file path.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getDataColumn</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>,
                                       <parameter><decl><type><name>String</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>column</name> <init>= <expr><literal type="string">"_data"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><block>{<expr><name>column</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>selectionArgs</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>column_index</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>column_index</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error retrieving uri path"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is ExternalStorageProvider.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isExternalStorageDocument</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="string">"com.android.externalstorage.documents"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is DownloadsProvider.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDownloadsDocument</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="string">"com.android.providers.downloads.documents"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is MediaProvider.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isMediaDocument</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="string">"com.android.providers.media.documents"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>InputStream</name></type> <name>getInputStream</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>mUri</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>inputStream</name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openInputStream</name><argument_list>(<argument><expr><name>mUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>inputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>inputStream</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Trying to retrieve file name from content resolver
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getNameFromUri</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"_display_name"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <try>try <block>{
                    <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>fileName</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error managing diskk cache"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>fileName</name> <operator>=</operator> <call><name><name>uri</name><operator>.</operator><name>getLastPathSegment</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>fileName</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getFilePrefix</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>getFilePrefix</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getFilePrefix</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><name>fileName</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>fileName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name><name>fileName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>prefix</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getFileExtension</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>getFileExtension</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getFileExtension</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">""</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>extension</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>fileName</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>extension</name> <operator>=</operator> <call><name><name>fileName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>fileName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>extension</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\KeyboardUtils.java" hash="610dba0adcf8c4d57f0cab6842218e5166750aba"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>InputMethodManager</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>


<class><specifier>public</specifier> class <name>KeyboardUtils</name> <block>{

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showKeyboard</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>inputManager</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(
                <argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inputManager</name><operator>.</operator><name>showSoftInput</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name><name>InputMethodManager</name><operator>.</operator><name>SHOW_IMPLICIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>showSoftInput</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name>isKeyboardShowed</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>inputManager</name><operator>.</operator><name>toggleSoftInput</name></name><argument_list>(<argument><expr><name><name>InputMethodManager</name><operator>.</operator><name>SHOW_FORCED</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isKeyboardShowed</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>inputManager</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(
                <argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>inputManager</name><operator>.</operator><name>isActive</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>hideKeyboard</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>imm</name><operator>.</operator><name>isActive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//		if (!isKeyboardShowed(view)) {</comment>
<comment type="line">//			imm.toggleSoftInput(InputMethodManager.HIDE_NOT_ALWAYS, InputMethodManager.RESULT_HIDDEN);</comment>
<comment type="line">//		}</comment>

    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>hideKeyboard</name><parameter_list>(<parameter><decl><type><name>MainActivity</name></type> <name>mActivity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>getWindow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSoftInputMode</name><argument_list>(
                <argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>SOFT_INPUT_STATE_ALWAYS_HIDDEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\LoadingDialog.java" hash="f8505b64a8360964cdb75d8111389b8ce53aeafe"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ProgressDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>


<class><specifier>public</specifier> class <name>LoadingDialog</name> <super><extends>extends <name>ProgressDialog</name></extends></super> <block>{

    <decl_stmt><decl><type><name>Context</name></type> <name>context</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>LoadingDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\ParcelableUtil.java" hash="be965f24250c4ead5d622d50a181ab39d692fa9b"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>


<class><specifier>public</specifier> class <name>ParcelableUtil</name> <block>{

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>marshall</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>parceable</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Parcel</name></type> <name>parcel</name> <init>= <expr><call><name><name>Parcel</name><operator>.</operator><name>obtain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>parceable</name><operator>.</operator><name>writeToParcel</name></name><argument_list>(<argument><expr><name>parcel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>parcel</name><operator>.</operator><name>marshall</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>bytes</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Parcel</name></type> <name>unmarshall</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Parcel</name></type> <name>parcel</name> <init>= <expr><call><name><name>Parcel</name><operator>.</operator><name>obtain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>unmarshall</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>setDataPosition</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// This is extremely important!</comment>
		<return>return <expr><name>parcel</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>unmarshall</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>creator</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Parcel</name></type> <name>parcel</name> <init>= <expr><call><name>unmarshall</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>T</name></type> <name>result</name> <init>= <expr><call><name><name>creator</name><operator>.</operator><name>createFromParcel</name></name><argument_list>(<argument><expr><name>parcel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>



}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\GeocodeHelper.java" hash="0d8d83da8bff7904f5803b602fb7d3c0337bf8ad"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>nlopez</name><operator>.</operator><name>smartlocation</name><operator>.</operator><name>SmartLocation</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>nlopez</name><operator>.</operator><name>smartlocation</name><operator>.</operator><name>location</name><operator>.</operator><name>config</name><operator>.</operator><name>LocationParams</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>nlopez</name><operator>.</operator><name>smartlocation</name><operator>.</operator><name>rx</name><operator>.</operator><name>ObservableFactory</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>GeoCodeProviderFactory</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnGeoUtilResultListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Subscriber</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLEncoder</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>


<class><specifier>public</specifier> class <name>GeocodeHelper</name> <super><implements>implements <name>LocationListener</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG_TAG</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PLACES_API_BASE</name> <init>= <expr><literal type="string">"https://maps.googleapis.com/maps/api/place"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TYPE_AUTOCOMPLETE</name> <init>= <expr><literal type="string">"/autocomplete"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>OUT_JSON</name> <init>= <expr><literal type="string">"/json"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>GeocodeHelper</name></type> <name>instance</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>LocationManager</name></type> <name>locationManager</name></decl>;</decl_stmt>


	<constructor><specifier>private</specifier> <name>GeocodeHelper</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>instance</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>locationManager</name> <operator>=</operator> <operator>(</operator><name>LocationManager</name><operator>)</operator> <call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LOCATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onLocationChanged</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>newLocation</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onStatusChanged</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>extras</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onProviderEnabled</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>provider</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onProviderDisabled</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>provider</name></decl></parameter>)</parameter_list> <block>{
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>getLocation</name><parameter_list>(<parameter><decl><type><name>OnGeoUtilResultListener</name></type> <name>onGeoUtilResultListener</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>SmartLocation</name><operator>.</operator><name>LocationControl</name></name></type> <name>bod</name> <init>= <expr><call><name><name>SmartLocation</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>location</name><argument_list>(<argument><expr><call><name><name>GeoCodeProviderFactory</name><operator>.</operator><name>getProvider</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>config</name><argument_list>(<argument><expr><name><name>LocationParams</name><operator>.</operator><name>NAVIGATION</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>oneFix</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Location</name></argument>&gt;</argument_list></name></type> <name>locations</name> <init>= <expr><call><name><name>ObservableFactory</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>bod</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>timeout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>locations</name><operator>.</operator><name>subscribe</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Subscriber</name><argument_list type="generic">&lt;<argument><name>Location</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
			<function><annotation>@<name>Override</name></annotation>
			<specifier>public</specifier> <type><name>void</name></type> <name>onNext</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>location</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>onGeoUtilResultListener</name><operator>.</operator><name>onLocationRetrieved</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>unsubscribe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>

			<function><annotation>@<name>Override</name></annotation>
			<specifier>public</specifier> <type><name>void</name></type> <name>onCompleted</name><parameter_list>()</parameter_list> <block>{
			}</block></function>

			<function><annotation>@<name>Override</name></annotation>
			<specifier>public</specifier> <type><name>void</name></type> <name>onError</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>onGeoUtilResultListener</name><operator>.</operator><name>onLocationUnavailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>unsubscribe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>SmartLocation</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>location</name><argument_list>()</argument_list></call><operator>.</operator><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>Geocoder</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>SmartLocation</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>geocoding</name><argument_list>()</argument_list></call><operator>.</operator><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>


	<function><specifier>static</specifier> <type><name>String</name></type> <name>getAddressFromCoordinates</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>,
												   <parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>addressString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Geocoder</name></type> <name>geocoder</name> <init>= <expr><operator>new</operator> <call><name>Geocoder</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>addresses</name> <init>= <expr><call><name><name>geocoder</name><operator>.</operator><name>getFromLocation</name></name><argument_list>(<argument><expr><name>latitude</name></expr></argument>, <argument><expr><name>longitude</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>addresses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>addresses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>addressString</name> <operator>=</operator> <call><name><name>address</name><operator>.</operator><name>getThoroughfare</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name><name>address</name><operator>.</operator><name>getLocality</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<return>return <expr><name>addressString</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>getAddressFromCoordinates</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>location</name></decl></parameter>,
												 <parameter><decl><type><specifier>final</specifier> <name>OnGeoUtilResultListener</name></type> <name>onGeoUtilResultListener</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name><name>Geocoder</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>onGeoUtilResultListener</name><operator>.</operator><name>onAddressResolved</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>SmartLocation</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>geocoding</name><argument_list>()</argument_list></call><operator>.</operator><call><name>reverse</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>location1</name></decl></parameter>, <parameter><decl><name>list</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><ternary><condition><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAddressLine</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>onGeoUtilResultListener</name><operator>.</operator><name>onAddressResolved</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>double</name><index>[]</index></name></type> <name>getCoordinatesFromAddress</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Geocoder</name></type> <name>geocoder</name> <init>= <expr><operator>new</operator> <call><name>Geocoder</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>addresses</name> <init>= <expr><call><name><name>geocoder</name><operator>.</operator><name>getFromLocationName</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>addresses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>latitude</name> <init>= <expr><call><name><name>addresses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLatitude</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>double</name></type> <name>longitude</name> <init>= <expr><call><name><name>addresses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLongitude</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>latitude</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>longitude</name></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>getCoordinatesFromAddress</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>OnGeoUtilResultListener</name></type>
			<name>listener</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>SmartLocation</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>geocoding</name><argument_list>()</argument_list></call><operator>.</operator><call><name>direct</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>name</name></decl></parameter>, <parameter><decl><name>results</name></decl></parameter>)</parameter_list> -&gt; <block>{
			<if>if <condition>(<expr><call><name><name>results</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onCoordinatesResolved</name></name><argument_list>(<argument><expr><call><name><name>results</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>autocomplete</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>MAPS_API_KEY</name> <init>= <expr><name><name>BuildConfig</name><operator>.</operator><name>MAPS_API_KEY</name></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>MAPS_API_KEY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>resultList</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>conn</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>InputStreamReader</name></type> <name>in</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StringBuilder</name></type> <name>jsonResults</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>PLACES_API_BASE</name> <operator>+</operator> <name>TYPE_AUTOCOMPLETE</name> <operator>+</operator> <name>OUT_JSON</name> <operator>+</operator> <literal type="string">"?key="</literal> <operator>+</operator> <name>MAPS_API_KEY</name> <operator>+</operator> <literal type="string">"&amp;input="</literal> <operator>+</operator>
					<call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Load the results into a StringBuilder</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>buff</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><operator>(</operator><name>read</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
				<expr_stmt><expr><call><name><name>jsonResults</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error processing Places API URL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error connecting to Places API"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></catch> <finally>finally <block>{
			<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name>in</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<try>try <block>{
					<expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error closing address autocompletion InputStream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></then></if>
		}</block></finally></try>

		<try>try <block>{
			<comment type="line">// Create a JSON object hierarchy from the results</comment>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>jsonObj</name> <init>= <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>jsonResults</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONArray</name></type> <name>predsJsonArray</name> <init>= <expr><call><name><name>jsonObj</name><operator>.</operator><name>getJSONArray</name></name><argument_list>(<argument><expr><literal type="string">"predictions"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Extract the Place descriptions from the results</comment>
			<expr_stmt><expr><name>resultList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>predsJsonArray</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>predsJsonArray</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>resultList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>predsJsonArray</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"description"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot process JSON results"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <finally>finally <block>{
			<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name>SystemHelper</name><operator>.</operator><name>closeCloseable</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></finally></try>
		<return>return <expr><name>resultList</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>areCoordinates</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Pattern</name></type> <name>p</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|"</literal> <operator>+</operator>
				<literal type="string">"([1-9]?\\d))(\\.\\d+)?)$"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Matcher</name></type> <name>m</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>m</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\Navigation.java" hash="932eb0faf08220231fc2ab7143020c4e174a28c9"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>


<class><specifier>public</specifier> class <name>Navigation</name> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NOTES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ARCHIVE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REMINDERS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TRASH</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNCATEGORIZED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CATEGORY</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Returns actual navigation status
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNavigation</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>navigationListCodes</name> <init>= <expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list_codes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>navigation</name> <init>= <expr><call><name>getNavigationText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>navigationListCodes</name><index>[<expr><name>NOTES</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>NOTES</name></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>navigationListCodes</name><index>[<expr><name>ARCHIVE</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>ARCHIVE</name></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>navigationListCodes</name><index>[<expr><name>REMINDERS</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>REMINDERS</name></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>navigationListCodes</name><index>[<expr><name>TRASH</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>TRASH</name></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>navigationListCodes</name><index>[<expr><name>UNCATEGORIZED</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>UNCATEGORIZED</name></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><name>CATEGORY</name></expr>;</return>
        }</block></else></if>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getNavigationText</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Context</name></type> <name>mContext</name> <init>= <expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>navigationListCodes</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list_codes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"static-access"</literal></expr></argument>)</argument_list></annotation>
        <type><name>String</name></type> <name>navigation</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>,
                <argument><expr><name><name>mContext</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>, <argument><expr><name><name>navigationListCodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>navigation</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves category currently shown
     *
     * @return id of category or null if current navigation is not a category
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Long</name></type> <name>getCategory</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getNavigation</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CATEGORY</name></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name>
					<operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then> <else>else <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Checks if passed parameters is the actual navigation status
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkNavigation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>navigationToCheck</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>checkNavigation</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Integer</name><index>[]</index></name><block>{<expr><name>navigationToCheck</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkNavigation</name><parameter_list>(<parameter><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>navigationsToCheck</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>navigation</name> <init>= <expr><call><name>getNavigation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>navigationToCheck</name> <range>: <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>navigationsToCheck</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><name>navigation</name> <operator>==</operator> <name>navigationToCheck</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Checks if passed parameters is the category user is actually navigating in
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkNavigationCategory</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>categoryToCheck</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Context</name></type> <name>mContext</name> <init>= <expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>navigationListCodes</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list_codes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>navigation</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>, <argument><expr><name><name>navigationListCodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>categoryToCheck</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>navigation</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>categoryToCheck</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\ResourcesUtils.java" hash="337ff841d3a77191d52390660c809482acc65126"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>


<class><specifier>public</specifier> class <name>ResourcesUtils</name> <block>{

	<enum><specifier>public</specifier> enum <name>ResourceIdentifiers</name> <block>{<decl><name>xml</name></decl>, <decl><name>id</name></decl>, <decl><name>array</name></decl>}</block></enum>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getXmlId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>ResourceIdentifiers</name></type> <name>resourceIdentifier</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>resourceName</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentifier</name><argument_list>(<argument><expr><name>resourceName</name></expr></argument>, <argument><expr><call><name><name>resourceIdentifier</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\NotificationsHelper.java" hash="2db2c7e86434aaf3bb390f28841ed2571ae009db"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Notification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>NotificationsHelper</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Builder</name></type> <name>mBuilder</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>NotificationManager</name></type> <name>mNotificationManager</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>NotificationsHelper</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mContext</name></name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="block" format="javadoc">/**
     * Creation of notification on operations completed
     */</comment>
    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>createNotification</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>smallIcon</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>PendingIntent</name></type> <name>notifyIntent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mBuilder</name> <operator>=</operator> <operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setSmallIcon</name><argument_list>(<argument><expr><name>smallIcon</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setContentTitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setAutoCancel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setColor</name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorAccent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><name>notifyIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setLargeIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>logo_notification_lollipop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>setLargeIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>mipmap</name><operator>.</operator><name>ic_launcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>getBuilder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mBuilder</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setLargeIcon</name><parameter_list>(<parameter><decl><type><name>Bitmap</name></type> <name>largeIconBitmap</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setLargeIcon</name></name><argument_list>(<argument><expr><name>largeIconBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setLargeIcon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>largeIconResource</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Bitmap</name></type> <name>largeIconBitmap</name> <init>= <expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>largeIconResource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>setLargeIcon</name><argument_list>(<argument><expr><name>largeIconBitmap</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setRingtone</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ringtone</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Ringtone options</comment>
        <if>if <condition>(<expr><name>ringtone</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setSound</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>ringtone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setVibration</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>setVibration</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setVibration</name><parameter_list>(<parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>pattern</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pattern</name> <operator>=</operator> <operator>new</operator> <name><name>long</name><index>[]</index></name><block>{<expr><literal type="number">500</literal></expr>, <expr><literal type="number">500</literal></expr>}</block></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setVibrate</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setLedActive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setLights</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLUE</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setIcon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setSmallIcon</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setIndeterminate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>setOngoing</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setOngoing</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>show</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>NotificationsHelper</name></type> <name>show</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mNotificationManager</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mNotificationManager</name> <operator>=</operator> <operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name><name>mContext</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Notification</name></type> <name>mNotification</name> <init>= <expr><call><name><name>mBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>mNotification</name><operator>.</operator><name>contentIntent</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <comment type="line">// Creates a dummy PendingIntent</comment>
            <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// Builds an anonymous Notification object from the builder, and passes it to the NotificationManager</comment>
        <expr_stmt><expr><call><name><name>mNotificationManager</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>mBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\ReminderHelper.java" hash="affea044609e8f8e0ff64e077135dc8f06243fed"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlarmManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>date</name><operator>.</operator><name>DateHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>receiver</name><operator>.</operator><name>AlarmReceiver</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>DateUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>


<class><specifier>public</specifier> class <name>ReminderHelper</name> <block>{

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addReminder</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>addReminder</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addReminder</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>DateUtils</name><operator>.</operator><name>isFuture</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>AlarmReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>, <argument><expr><call><name><name>ParcelableUtil</name><operator>.</operator><name>marshall</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>PendingIntent</name></type> <name>sender</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>getRequestCode</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>intent</name></expr></argument>,
					<argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_CANCEL_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AlarmManager</name></type> <name>am</name> <init>= <expr><operator>(</operator><name>AlarmManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ALARM_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>am</name><operator>.</operator><name>setExact</name></name><argument_list>(<argument><expr><name><name>AlarmManager</name><operator>.</operator><name>RTC_WAKEUP</name></name></expr></argument>, <argument><expr><name>reminder</name></expr></argument>, <argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>am</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>AlarmManager</name><operator>.</operator><name>RTC_WAKEUP</name></name></expr></argument>, <argument><expr><name>reminder</name></expr></argument>, <argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * Checks if exists any reminder for given note
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkReminder</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>getRequestCode</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>AlarmReceiver</name>
				<operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_NO_CREATE</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
	}</block></function>


	<function><specifier>static</specifier> <type><name>int</name></type> <name>getRequestCode</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Long</name></type> <name>longCode</name> <init>= <expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>longCode</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>removeReminder</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>AlarmManager</name></type> <name>am</name> <init>= <expr><operator>(</operator><name>AlarmManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ALARM_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>AlarmReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PendingIntent</name></type> <name>p</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>getRequestCode</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>am</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showReminderMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>reminderString</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>reminderString</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>long</name></type> <name>reminder</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>reminderString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>reminder</name> <operator>&gt;</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMainLooper</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name>
								<operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>alarm_set_on</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DateHelper</name><operator>.</operator><name>getDateTimeShort</name></name>
								<argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\Security.java" hash="95ad7223826c5eacd58748754c1d1041da7c89b4"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>DESKeySpec</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>spec</name><operator>.</operator><name>InvalidKeySpecException</name></name>;</import>


<class><specifier>public</specifier> class <name>Security</name> <block>{


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>md5</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <comment type="line">// Create MD5 Hash</comment>
            <decl_stmt><decl><type><name>MessageDigest</name></type> <name>digest</name> <init>= <expr><call><name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"MD5"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>digest</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>byte</name></type> <name><name>messageDigest</name><index>[]</index></name> <init>= <expr><call><name><name>digest</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Create Hex String</comment>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>hexString</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>messageDigest</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name><name>hexString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toHexString</name></name><argument_list>(<argument><expr><literal type="number">0xFF</literal> <operator>&amp;</operator> <name><name>messageDigest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
            <return>return <expr><call><name><name>hexString</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>

        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Something is gone wrong calculating MD5"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><literal type="string">""</literal></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encrypt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>encrypedValue</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>DESKeySpec</name></type> <name>keySpec</name> <init>= <expr><operator>new</operator> <call><name>DESKeySpec</name><argument_list>(<argument><expr><call><name><name>password</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SecretKeyFactory</name></type> <name>keyFactory</name> <init>= <expr><call><name><name>SecretKeyFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"DES"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SecretKey</name></type> <name>key</name> <init>= <expr><call><name><name>keyFactory</name><operator>.</operator><name>generateSecret</name></name><argument_list>(<argument><expr><name>keySpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>clearText</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Cipher is not thread safe</comment>
            <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"DES"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>encrypedValue</name> <operator>=</operator> <call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>clearText</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>encrypedValue</name></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> | <type><name>NoSuchPaddingException</name></type> | <type><name>InvalidKeySpecException</name></type> | <type><name>BadPaddingException</name></type> |
				<type><name>IllegalBlockSizeException</name></type> | <type><name>NoSuchAlgorithmException</name></type> | <type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Something is gone wrong encrypting"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>encrypedValue</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>decrypt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>decryptedValue</name></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>DESKeySpec</name></type> <name>keySpec</name> <init>= <expr><operator>new</operator> <call><name>DESKeySpec</name><argument_list>(<argument><expr><call><name><name>password</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SecretKeyFactory</name></type> <name>keyFactory</name> <init>= <expr><call><name><name>SecretKeyFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"DES"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SecretKey</name></type> <name>key</name> <init>= <expr><call><name><name>keyFactory</name><operator>.</operator><name>generateSecret</name></name><argument_list>(<argument><expr><name>keySpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encrypedPwdBytes</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// cipher is not thread safe</comment>
            <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"DES"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>decrypedValueBytes</name> <init>= <expr><operator>(</operator><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>encrypedPwdBytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>decryptedValue</name> <operator>=</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>decrypedValueBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> | <type><name>UnsupportedEncodingException</name></type> | <type><name>InvalidKeySpecException</name></type> |
				<type><name>NoSuchAlgorithmException</name></type> | <type><name>BadPaddingException</name></type> | <type><name>NoSuchPaddingException</name></type> | <type><name>IllegalBlockSizeException</name></type>
				<name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error decrypting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>value</name></expr>;</return>
            <comment type="line">// try-catch ensure compatibility with old masked (without encryption) values</comment>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error decrypting: old notes were not encrypted but just masked to users"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>value</name></expr>;</return>
        }</block></catch></try>
        <return>return <expr><name>decryptedValue</name></expr>;</return>
    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\ShortcutHelper.java" hash="b3b1a167a118e3f448d2df4aa96e5d8af2450d49"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>date</name><operator>.</operator><name>DateHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>DateUtils</name></name>;</import>


<class><specifier>public</specifier> class <name>ShortcutHelper</name> <block>{


    <comment type="block" format="javadoc">/**
     * Adding shortcut on Home screen
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addShortcut</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>shortcutIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>shortcutIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_KEY</name></name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shortcutIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_SHORTCUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Intent</name></type> <name>addIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>addIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SHORTCUT_INTENT</name></name></expr></argument>, <argument><expr><name>shortcutIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>shortcutTitle</name> <init>= <expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>DateHelper</name><operator>.</operator><name>getFormattedDate</name></name><argument_list>(<argument><expr><call><name><name>note</name>
				<operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>Constants</name>
				<operator>.</operator><name>PREF_PRETTIFIED_DATES</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>addIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SHORTCUT_NAME</name></name></expr></argument>, <argument><expr><name>shortcutTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SHORTCUT_ICON_RESOURCE</name></name></expr></argument>,
                <argument><expr><call><name><name>Intent</name><operator>.</operator><name>ShortcutIconResource</name><operator>.</operator><name>fromContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_shortcut</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><literal type="string">"com.android.launcher.action.INSTALL_SHORTCUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>sendBroadcast</name></name><argument_list>(<argument><expr><name>addIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Removes note shortcut from home launcher
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>removeshortCut</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>shortcutIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>shortcutIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_KEY</name></name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shortcutIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_SHORTCUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Intent</name></type> <name>addIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>addIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SHORTCUT_INTENT</name></name></expr></argument>, <argument><expr><name>shortcutIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>shortcutTitle</name> <init>= <expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>DateHelper</name><operator>.</operator><name>getFormattedDate</name></name><argument_list>(<argument><expr><call><name><name>note</name>
				<operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>Constants</name>
				<operator>.</operator><name>PREF_PRETTIFIED_DATES</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>addIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SHORTCUT_NAME</name></name></expr></argument>, <argument><expr><name>shortcutTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>addIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><literal type="string">"com.android.launcher.action.UNINSTALL_SHORTCUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>sendBroadcast</name></name><argument_list>(<argument><expr><name>addIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\PasswordHelper.java" hash="fc88b89b9b39cd1d3abba58d7bcc2048344b4712"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>EditorInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>DialogAction</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>MaterialDialog</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>PasswordRemovedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>PasswordValidator</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>android</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>AndroidSchedulers</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>


<class><specifier>public</specifier> class <name>PasswordHelper</name> <block>{


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>requestPassword</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>mActivity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>PasswordValidator</name></type> <name>mPasswordValidator</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getLayoutInflater</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>password_request_dialog_layout</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>EditText</name></type> <name>passwordEditText</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password_request</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>MaterialDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>autoDismiss</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>insert_security_password</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>customView</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveColorRes</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>onPositive</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog12</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block>{
                    <comment type="line">// When positive button is pressed password correctness is checked</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>oldPassword</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name>
                            <operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>password</name> <init>= <expr><call><name><name>passwordEditText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// The check is done on password's hash stored in preferences</comment>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><call><name><name>Security</name><operator>.</operator><name>md5</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>oldPassword</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// In case password is ok dialog is dismissed and result sent to callback</comment>
                    <if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>KeyboardUtils</name><operator>.</operator><name>hideKeyboard</name></name><argument_list>(<argument><expr><name>passwordEditText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>dialog12</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>mPasswordValidator</name><operator>.</operator><name>onPasswordValidated</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>SUCCEED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// If password is wrong the auth flow is not interrupted and simply a message is shown</comment>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>passwordEditText</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wrong_password</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>neutralText</name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>password_forgot</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>onNeutral</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog13</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name><name>PasswordHelper</name><operator>.</operator><name>resetPassword</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mPasswordValidator</name><operator>.</operator><name>onPasswordValidated</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>RESTORE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dialog13</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOnCancelListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>dialog1</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name><name>KeyboardUtils</name><operator>.</operator><name>hideKeyboard</name></name><argument_list>(<argument><expr><name>passwordEditText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog1</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mPasswordValidator</name><operator>.</operator><name>onPasswordValidated</name></name><argument_list>(<argument><expr><name><name>PasswordValidator</name><operator>.</operator><name>Result</name><operator>.</operator><name>FAIL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>passwordEditText</name><operator>.</operator><name>setOnEditorActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>textView</name></decl></parameter>, <parameter><decl><name>actionId</name></decl></parameter>, <parameter><decl><name>keyEvent</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><name>actionId</name> <operator>==</operator> <name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_DONE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>getActionButton</name></name><argument_list>(<argument><expr><name><name>DialogAction</name><operator>.</operator><name>POSITIVE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>callOnClick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>postDelayed</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>KeyboardUtils</name><operator>.</operator><name>showKeyboard</name></name><argument_list>(<argument><expr><name>passwordEditText</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>resetPassword</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>mActivity</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>layout</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getLayoutInflater</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>password_reset_dialog_layout</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>EditText</name></type> <name>answerEditText</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>layout</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>reset_password_answer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>MaterialDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>title</name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD_QUESTION</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>customView</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>autoDismiss</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>contentColorRes</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>text_color</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>onPositive</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>dialogElement</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block>{
                    <comment type="line">// When positive button is pressed answer correctness is checked</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>oldAnswer</name> <init>= <expr><call><name><name>OmniNotes</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD_ANSWER</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>answer1</name> <init>= <expr><call><name><name>answerEditText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// The check is done on password's hash stored in preferences</comment>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><call><name><name>Security</name><operator>.</operator><name>md5</name></name><argument_list>(<argument><expr><name>answer1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>oldAnswer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>dialogElement</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>removePassword</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>answerEditText</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wrong_answer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>answerEditText</name><operator>.</operator><name>setOnEditorActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>textView</name></decl></parameter>, <parameter><decl><name>actionId</name></decl></parameter>, <parameter><decl><name>keyEvent</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><name>actionId</name> <operator>==</operator> <name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_DONE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>getActionButton</name></name><argument_list>(<argument><expr><name><name>DialogAction</name><operator>.</operator><name>POSITIVE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>callOnClick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>postDelayed</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>KeyboardUtils</name><operator>.</operator><name>showKeyboard</name></name><argument_list>(<argument><expr><name>answerEditText</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>removePassword</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Observable</name>
                <operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotesWithLock</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>newThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>doOnNext</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>note</name></decl></parameter></parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLocked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>doOnCompleted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PasswordRemovedEvent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD_QUESTION</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD_ANSWER</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><literal type="string">"settings_password_access"</literal></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\SystemHelper.java" hash="51e298670641d7672b519a6607d71eb1a75638a9"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Various utility methods
 */</comment>
<class><specifier>public</specifier> class <name>SystemHelper</name> <block>{

	<comment type="block" format="javadoc">/**
	 * Performs a full app restart
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>restartApp</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Class</name></type> <name>activityClass</name></decl></parameter>)</parameter_list> <block>{
<comment type="line">//		Intent intent = new Intent(mContext, activityClass);</comment>
<comment type="line">//		intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</comment>
<comment type="line">//		intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</comment>
<comment type="line">//		int mPendingIntentId = Long.valueOf(Calendar.getInstance().getTimeInMillis()).intValue();</comment>
<comment type="line">//		PendingIntent mPendingIntent = PendingIntent.getActivity(mContext, mPendingIntentId, intent,</comment>
<comment type="line">//				PendingIntent.FLAG_CANCEL_CURRENT);</comment>
<comment type="line">//		AlarmManager mgr = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);</comment>
<comment type="line">//		mgr.set(AlarmManager.RTC, System.currentTimeMillis() + 100, mPendingIntent);</comment>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * Performs closure of multiple closeables objects
	 *
	 * @param closeables Objects to close
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>closeCloseable</name><parameter_list>(<parameter><decl><type><name>Closeable</name><modifier>...</modifier></type> <name>closeables</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>Closeable</name></type> <name>closeable</name> <range>: <expr><name>closeables</name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><name>closeable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<try>try <block>{
					<expr_stmt><expr><call><name><name>closeable</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Can't close "</literal> <operator>+</operator> <name>closeable</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></then></if>
		}</block></for>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\date\DatePickerDialogFragment.java" hash="a3d99da37bbc10abe8f10ce7a3c29d084b0fa237"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>DatePickerDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>DatePickerDialog</name><operator>.</operator><name>OnDateSetListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>DatePicker</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>


<comment type="block" format="javadoc">/**
 * &lt;p&gt;This class provides a usable {@link android.app.DatePickerDialog} wrapped as a {@link android.support.v4.app
 * * .DialogFragment},
 * using the compatibility package v4. Its main advantage is handling Issue 34833
 * automatically for you.&lt;/p&gt;
 * &lt;p/&gt;
 * &lt;p&gt;Current implementation (because I wanted that way =) ):&lt;/p&gt;
 * &lt;p/&gt;
 * &lt;ul&gt;
 * &lt;li&gt;Only two buttons, a {@code BUTTON_POSITIVE} and a {@code BUTTON_NEGATIVE}.
 * &lt;li&gt;Buttons labeled from {@code android.R.string.ok} and {@code android.R.string.cancel}.
 * &lt;/ul&gt;
 * &lt;p/&gt;
 * &lt;p&gt;&lt;strong&gt;Usage sample:&lt;/strong&gt;&lt;/p&gt;
 * &lt;p/&gt;
 * &lt;pre&gt;class YourActivity extends Activity implements OnDateSetListener
 * &lt;p/&gt;
 * // ...
 * &lt;p/&gt;
 * Bundle b = new Bundle();
 * b.putInt(DatePickerDialogFragment.YEAR, 2012);
 * b.putInt(DatePickerDialogFragment.MONTH, 6);
 * b.putInt(DatePickerDialogFragment.DATE, 17);
 * DialogFragment picker = new DatePickerDialogFragment();
 * picker.setArguments(b);
 * picker.show(getActivity().getSupportFragmentManager(), "fragment_date_picker");&lt;/pre&gt;
 *
 * @author davidcesarino@gmail.com
 * @version 2012.0828
 * @see &lt;a href="http://code.google.com/p/android/issues/detail?id=34833"&gt;Android Issue 34833&lt;/a&gt;
 * @see &lt;a href="http://stackoverflow.com/q/11444238/489607"
 * &gt;Jelly Bean DatePickerDialog â is there a way to cancel?&lt;/a&gt;
 */</comment>
<class><specifier>public</specifier> class <name>DatePickerDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DEFAULT_DATE</name> <init>= <expr><literal type="string">"default_date"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>OnDateSetListener</name></type> <name>mListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Long</name></type> <name>defaultDate</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>DEFAULT_DATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultDate</name></name> <operator>=</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLong</name><argument_list>(<argument><expr><name>DEFAULT_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <try>try <block>{
            <expr_stmt><expr><name>mListener</name> <operator>=</operator> <operator>(</operator><name>OnDateSetListener</name><operator>)</operator> <name>activity</name></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>ClassCastException</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call>
                    <operator>+</operator> <literal type="string">" must implement OnDateSetListener"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDetach</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mListener</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDetach</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Use the current date as the default date in the picker</comment>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>DateUtils</name><operator>.</operator><name>getCalendar</name></name><argument_list>(<argument><expr><name>defaultDate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Jelly Bean introduced a bug in DatePickerDialog (and possibly </comment>
        <comment type="line">// TimePickerDialog as well), and one of the possible solutions is </comment>
        <comment type="line">// to postpone the creation of both the listener and the BUTTON_* .</comment>
        <comment type="line">// </comment>
        <comment type="line">// Passing a null here won't harm because DatePickerDialog checks for a null</comment>
        <comment type="line">// whenever it reads the listener that was passed here. &gt;&gt;&gt; This seems to be </comment>
        <comment type="line">// true down to 1.5 / API 3, up to 4.1.1 / API 16. &lt;&lt;&lt; No worries. For now.</comment>
        <comment type="line">//</comment>
        <comment type="line">// See my own question and answer, and details I included for the issue:</comment>
        <comment type="line">//</comment>
        <comment type="line">// http://stackoverflow.com/a/11493752/489607</comment>
        <comment type="line">// http://code.google.com/p/android/issues/detail?id=34833</comment>
        <comment type="line">//</comment>
        <comment type="line">// Of course, suggestions welcome.</comment>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DatePickerDialog</name></type> <name>picker</name> <init>= <expr><operator>new</operator> <call><name>DatePickerDialog</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DatePickerDialog</name><operator>.</operator><name>THEME_HOLO_LIGHT</name></name></expr></argument>,
                <argument><expr><name>mListener</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>picker</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>picker</name><operator>.</operator><name>setButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>,
				<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block>{
					<decl_stmt><decl><type><name>DatePicker</name></type> <name>dp</name> <init>= <expr><call><name><name>picker</name><operator>.</operator><name>getDatePicker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>mListener</name><operator>.</operator><name>onDateSet</name></name><argument_list>(<argument><expr><name>dp</name></expr></argument>,
							<argument><expr><call><name><name>dp</name><operator>.</operator><name>getYear</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dp</name><operator>.</operator><name>getMonth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dp</name><operator>.</operator><name>getDayOfMonth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>picker</name><operator>.</operator><name>setButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_NEGATIVE</name></name></expr></argument>,
				<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block>{}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>picker</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\TagsHelper.java" hash="8e8ff2eba99df17106fc8ed0d0bf72924741264e"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Tag</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>links</name><operator>.</operator><name>RegexPatternsConstants</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>


<class><specifier>public</specifier> class <name>TagsHelper</name> <block>{


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>getAllTags</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTags</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>retrieveTags</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tagsMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>String</name></type> <name>token</name> <range>: <expr><operator>(</operator><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>RegexPatternsConstants</name><operator>.</operator><name>HASH_TAG</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><call><name><name>tagsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>tagsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>tagsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>++</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<return>return <expr><name>tagsMap</name></expr>;</return>
	}</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>addTagToNote</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name><name>Integer</name><index>[]</index></name></type> <name>selectedTags</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sbTags</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tagsToRemove</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tagsMap</name> <init>= <expr><call><name>retrieveTags</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>selectedTagsList</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>selectedTags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tags</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><call><name>mapContainsTag</name><argument_list>(<argument><expr><name>tagsMap</name></expr></argument>, <argument><expr><call><name><name>tags</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name><name>selectedTagsList</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tagsToRemove</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tags</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><call><name><name>selectedTagsList</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>sbTags</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>sbTags</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>sbTags</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>tags</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
        <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>sbTags</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tagsToRemove</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>mapContainsTag</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tagsMap</name></decl></parameter>, <parameter><decl><type><name>Tag</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>String</name></type> <name>tagsMapItem</name> <range>: <expr><call><name><name>tagsMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>tagsMapItem</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>tag</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>removeTag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>noteTitle</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>noteContent</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tagsToRemove</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><name>noteTitle</name></expr></init></decl>, <decl><type ref="prev"/><name>content</name> <init>= <expr><name>noteContent</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Tag</name></type> <name>tagToRemove</name> <range>: <expr><name>tagsToRemove</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><name>title</name> <operator>=</operator> <call><name><name>title</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><call><name><name>tagToRemove</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><call><name><name>tagToRemove</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>getTagsArray</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>tagsArray</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>tags</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tags</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>tagsArray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>tags</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name><name>tags</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCount</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>tagsArray</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Integer</name><index>[]</index></name></type> <name>getPreselectedTagsArray</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>notes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getPreselectedTagsArray</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Integer</name><index>[]</index></name></type> <name>getPreselectedTagsArray</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Integer</name><index>[]</index></name></type> <name>preSelectedTags</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>noteTag</name> <range>: <expr><call><name><name>TagsHelper</name><operator>.</operator><name>retrieveTags</name></name><argument_list>(<argument><expr><call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <for>for <control>(<init><decl><type><name>Tag</name></type> <name>tag</name> <range>: <expr><name>tags</name></expr></range></decl></init>)</control> <block>{
                    <if>if <condition>(<expr><call><name><name>tag</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>noteTag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tags</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>preSelectedTags</name> <operator>=</operator> <call><name><name>t</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Integer</name><index>[<expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>preSelectedTags</name> <operator>=</operator> <operator>new</operator> <name><name>Integer</name><index>[]</index></name><block>{}</block></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>preSelectedTags</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\TextHelper.java" hash="8f9c473864aad3742ffa7759679caf7b574f3d20"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannedString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>date</name><operator>.</operator><name>DateHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>


<class><specifier>public</specifier> class <name>TextHelper</name> <block>{

    <comment type="block" format="javadoc">/**
     * @param note
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Spanned</name><index>[]</index></name></type> <name>parseTitleAndContent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>CONTENT_SUBSTRING_LENGTH</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>titleText</name> <init>= <expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>contentText</name> <init>= <expr><call><name>limit</name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CONTENT_SUBSTRING_LENGTH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Masking title and content string if note is locked</comment>
        <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mContext</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(
                <argument><expr><literal type="string">"settings_password_access"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// This checks if a part of content is used as title and should be partially masked</comment>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>titleText</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>titleText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>titleText</name> <operator>=</operator> <call><name>limit</name><argument_list>(<argument><expr><name>titleText</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>contentText</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Replacing checkmarks symbols with html entities</comment>
        <decl_stmt><decl><type><name>Spanned</name></type> <name>contentSpanned</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>contentText</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>contentSpanned</name> <operator>=</operator> <call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>contentText</name>
                    <operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>CHECKED_SYM</name></name></expr></argument>,
							<argument><expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>CHECKED_ENTITY</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>UNCHECKED_SYM</name></name></expr></argument>,
							<argument><expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>UNCHECKED_ENTITY</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"&lt;br/&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>contentSpanned</name> <operator>=</operator> <operator>new</operator> <call><name>SpannedString</name><argument_list>(<argument><expr><name>contentText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><operator>new</operator> <name><name>Spanned</name><index>[]</index></name><block>{<expr><operator>new</operator> <call><name>SpannedString</name><argument_list>(<argument><expr><name>titleText</name></expr></argument>)</argument_list></call></expr>, <expr><name>contentSpanned</name></expr>}</block></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>limit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>singleLine</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>elipsize</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buf</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>indexNewLine</name> <init>= <expr><call><name><name>buf</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> <init>= <expr><ternary><condition><expr><name>singleLine</name> <operator>&amp;&amp;</operator> <name>indexNewLine</name> <operator>&lt;</operator> <name>length</name></expr> ?</condition><then> <expr><name>indexNewLine</name></expr> </then><else>: <expr><ternary><condition><expr><name>length</name> <operator>&lt;</operator> <call><name><name>buf</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>length</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>endIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>setLength</name></name><argument_list>(<argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>elipsize</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><call><name><name>buf</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>capitalize</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>string</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>(<argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>string</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><call><name><name>string</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>(<argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Checks if a query conditions searches for category
     * @param sqlCondition query "where" condition
     * @return Category id
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>checkIntentCategory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlCondition</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>pattern</name> <init>= <expr><name><name>DbHelper</name><operator>.</operator><name>KEY_CATEGORY</name></name> <operator>+</operator> <literal type="string">"\\s*=\\s*([\\d]+)"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Pattern</name></type> <name>p</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>sqlCondition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>matcher</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Choosing which date must be shown depending on sorting criteria
     * @return String ith formatted date
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getDateText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>navigation</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>dateText</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sort_column</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Reminder screen forces sorting</comment>
        <if>if <condition>(<expr><name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name> <operator>==</operator> <name>navigation</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sort_column</name> <operator>=</operator> <name><name>DbHelper</name><operator>.</operator><name>KEY_REMINDER</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>sort_column</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_SORTING_COLUMN</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <switch>switch <condition>(<expr><name>sort_column</name></expr>)</condition> <block>{
            <case>case <expr><name><name>DbHelper</name><operator>.</operator><name>KEY_CREATION</name></name></expr>:</case>
				<expr_stmt><expr><name>dateText</name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>creation</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DateHelper</name><operator>.</operator><name>getFormattedDate</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name>
						<argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PRETTIFIED_DATES</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
            <case>case <expr><name><name>DbHelper</name><operator>.</operator><name>KEY_REMINDER</name></name></expr>:</case>
				<decl_stmt><decl><type><name>String</name></type> <name>noteReminder</name> <init>= <expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>noteReminder</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>dateText</name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_reminder_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><name>dateText</name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>alarm_set_on</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DateHelper</name><operator>.</operator><name>getDateTimeShort</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>,
							<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>noteReminder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<break>break;</break>
            <default>default:</default>
				<expr_stmt><expr><name>dateText</name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>last_update</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DateHelper</name><operator>.</operator><name>getFormattedDate</name></name><argument_list>(<argument><expr><call><name><name>note</name>
						<operator>.</operator><name>getLastModification</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PRETTIFIED_DATES</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
        }</block></switch>
        <return>return <expr><name>dateText</name></expr>;</return>
    }</block></function>


	<comment type="block" format="javadoc">/**
	 * Gets an alternative title if empty
	 * @param context
	 * @param note
	 * @param spanned
	 * @return
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getAlternativeTitle</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>Spanned</name></type> <name>spanned</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>spanned</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>spanned</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then></if>
		<return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>creation</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DateHelper</name>
				<operator>.</operator><name>getDateTimeShort</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\date\TimePickerFragment.java" hash="6fa4eb38976026d51a535a6adde9ecae49f677e2"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>TimePickerDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>TimePickerDialog</name><operator>.</operator><name>OnTimeSetListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>


<class><specifier>public</specifier> class <name>TimePickerFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DEFAULT_TIME</name> <init>= <expr><literal type="string">"default_time"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TextView</name></type> <name>timer_label</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>OnTimeSetListener</name></type> <name>mListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Long</name></type> <name>defaultTime</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mActivity</name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>DEFAULT_TIME</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultTime</name></name> <operator>=</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLong</name><argument_list>(<argument><expr><name>DEFAULT_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <try>try <block>{
            <expr_stmt><expr><name>mListener</name> <operator>=</operator> <operator>(</operator><name>OnTimeSetListener</name><operator>)</operator> <name>mActivity</name></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>ClassCastException</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call>
                    <operator>+</operator> <literal type="string">" must implement OnTimeSetListener"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>DateUtils</name><operator>.</operator><name>getCalendar</name></name><argument_list>(<argument><expr><name>defaultTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Create a new instance of TimePickerDialog and return it</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>is24HourMode</name> <init>= <expr><call><name><name>DateUtils</name><operator>.</operator><name>is24HourMode</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimePickerDialog</name></type> <name>tpd</name> <init>= <expr><operator>new</operator> <call><name>TimePickerDialog</name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>Theme_AppCompat_Dialog_NoBackgroundOrDim</name></name></expr></argument>, <argument><expr><name>mListener</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>is24HourMode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tpd</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tpd</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\date\DateUtils.java" hash="7cf94feaa8768b35ef8ce65e1277f922aac6af9b"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>ocpsoft</name><operator>.</operator><name>prettytime</name><operator>.</operator><name>PrettyTime</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Helper per la generazione di date nel formato specificato nelle costanti
 */</comment>
<class><specifier>public</specifier> class <name>DateUtils</name> <block>{

	<constructor><specifier>private</specifier> <name>DateUtils</name><parameter_list>()</parameter_list> <block>{
		<throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Utility class"</literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Date</name></type> <name>d</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>sdf</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Calendar</name></type> <name>getDateFromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><call><name><name>sdf</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Malformed datetime string"</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Date or time not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>cal</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Calendar</name></type> <name>getLongFromDateTime</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dateFormat</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>timeFormat</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cDate</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cTime</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdfDate</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>dateFormat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdfTime</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>timeFormat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>cDate</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><call><name><name>sdfDate</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cTime</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><call><name><name>sdfTime</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Date or time parsing error: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><call><name><name>cDate</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><call><name><name>cDate</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>, <argument><expr><call><name><name>cDate</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>, <argument><expr><call><name><name>cTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><call><name><name>cTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cal</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Calendar</name></type> <name>getCalendar</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>dateTime</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dateTime</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>dateTime</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>cal</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getLocalizedDateTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>,
                                              <parameter><decl><type><name>String</name></type> <name>dateString</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>date</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>date</name> <operator>=</operator> <call><name><name>sdf</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>dateString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>sdf</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DATE_FORMAT_SORTABLE_OLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>date</name> <operator>=</operator> <call><name><name>sdf</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>dateString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"String is not formattable into date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></catch></try>

        <if>if <condition>(<expr><name>date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>dateFormatted</name> <init>= <expr><call><name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name><operator>.</operator><name>formatDateTime</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>date</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name>
					<operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name><operator>.</operator><name>FORMAT_ABBREV_MONTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>timeFormatted</name> <init>= <expr><call><name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name><operator>.</operator><name>formatDateTime</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>date</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name>
					<operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name><operator>.</operator><name>FORMAT_SHOW_TIME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>dateFormatted</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>timeFormatted</name></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>is24HourMode</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>c</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>timeFormatted</name> <init>= <expr><call><name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name><operator>.</operator><name>formatDateTime</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name>
				<operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name><operator>.</operator><name>FORMAT_SHOW_TIME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>!</operator><call><name><name>timeFormatted</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"am"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>timeFormatted</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"pm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isSameDay</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>date1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>date2</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal1</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal2</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cal1</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal2</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>cal1</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal2</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>cal1</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_YEAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal2</name><operator>.</operator><name>get</name></name>
                <argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_YEAR</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getNextMinute</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</return>
    }</block></function>

	<comment type="block" format="javadoc">/**
	 * Returns actually set reminder if that is on the future, next-minute-reminder otherwise
	 * @param currentReminder
	 * @return
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getPresetReminder</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>currentReminder</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><ternary><condition><expr><name>now</name> <operator>&gt;</operator> <name>currentReminder</name></expr> ?</condition><then> <expr><call><name>getNextMinute</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>currentReminder</name></expr></else></ternary></expr>;</return>
	}</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Long</name></type> <name>getPresetReminder</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>alarm</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>alarmChecked</name> <init>= <expr><ternary><condition><expr><name>alarm</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>alarm</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getPresetReminder</name><argument_list>(<argument><expr><name>alarmChecked</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if a epoch-date timestamp is in the future
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isFuture</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isFuture</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if a epoch-date timestamp is in the future
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isFuture</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><name>timestamp</name> <operator>&gt;</operator>  <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>prettyTime</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>timeInMillisec</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>timeInMillisec</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">""</literal></expr>;</return>
		}</block></then></if>
		<return>return <expr><call><name>prettyTime</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>timeInMillisec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>prettyTime</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timeInMillisec</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>prettyTime</name><argument_list>(<argument><expr><name>timeInMillisec</name></expr></argument>, <argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>prettyTime</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timeInMillisec</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>timeInMillisec</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">""</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>Date</name></type> <name>d</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>timeInMillisec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PrettyTime</name></type> <name>pt</name> <init>= <expr><operator>new</operator> <call><name>PrettyTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>locale</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setLocale</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><call><name><name>pt</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\services\NotificationListener.java" hash="d4bc1d9a7d2eefccaccf9c4b5807e3b5ce6a9853"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>services</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Settings</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>service</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationListenerService</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>service</name><operator>.</operator><name>notification</name><operator>.</operator><name>StatusBarNotification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>NotificationRemovedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>DateUtils</name></name>;</import>


<class><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR2</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>NotificationListener</name> <super><extends>extends <name>NotificationListenerService</name></extends></super> <block>{


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unregister</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onNotificationPosted</name><parameter_list>(<parameter><decl><type><name>StatusBarNotification</name></type> <name>sbn</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Notification posted for note: "</literal> <operator>+</operator> <call><name><name>sbn</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onNotificationRemoved</name><parameter_list>(<parameter><decl><type><name>StatusBarNotification</name></type> <name>sbn</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>sbn</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getPackageName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NotificationRemovedEvent</name><argument_list>(<argument><expr><name>sbn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Notification removed for note: "</literal> <operator>+</operator> <call><name><name>sbn</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>onEventAsync</name><parameter_list>(<parameter><decl><type><name>NotificationRemovedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Long</name></type> <name>nodeId</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>statusBarNotification</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNote</name><argument_list>(<argument><expr><name>nodeId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>DateUtils</name><operator>.</operator><name>isFuture</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setReminderFired</name><argument_list>(<argument><expr><name>nodeId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isRunning</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>ContentResolver</name></type> <name>contentResolver</name> <init>= <expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContentResolver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>enabledNotificationListeners</name> <init>= <expr><call><name><name>Settings</name><operator>.</operator><name>Secure</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>contentResolver</name></expr></argument>,
				<argument><expr><literal type="string">"enabled_notification_listeners"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>enabledNotificationListeners</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>enabledNotificationListeners</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>NotificationListener</name>
				<operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\date\ReminderPickers.java" hash="3fcec611391ebc59499f828d1ac9916561dfd852"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>DatePickerDialog</name><operator>.</operator><name>OnDateSetListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>TimePickerDialog</name><operator>.</operator><name>OnTimeSetListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>DatePicker</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fourmob</name><operator>.</operator><name>datetimepicker</name><operator>.</operator><name>date</name><operator>.</operator><name>DatePickerDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>sleepbot</name><operator>.</operator><name>datetimepicker</name><operator>.</operator><name>time</name><operator>.</operator><name>TimePickerDialog</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>

<import>import <name><name>be</name><operator>.</operator><name>billington</name><operator>.</operator><name>calendar</name><operator>.</operator><name>recurrencepicker</name><operator>.</operator><name>RecurrencePickerDialog</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnReminderPickedListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>ReminderPickers</name> <super><implements>implements <name>OnDateSetListener</name>, <name>OnTimeSetListener</name>, <name><name>RecurrencePickerDialog</name><operator>.</operator><name>OnRecurrenceSetListener</name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE_GOOGLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE_AOSP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>FragmentActivity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>OnReminderPickedListener</name></type> <name>mOnReminderPickedListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>pickerType</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>reminderYear</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>reminderMonth</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>reminderDay</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>hourOfDay</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>minutes</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>timePickerCalledAlready</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>recurrencePickerCalledAlready</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>presetDateTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>recurrenceRule</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>ReminderPickers</name><parameter_list>(<parameter><decl><type><name>FragmentActivity</name></type> <name>mActivity</name></decl></parameter>,
                           <parameter><decl><type><name>OnReminderPickedListener</name></type> <name>mOnReminderPickedListener</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pickerType</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mActivity</name></name> <operator>=</operator> <name>mActivity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mOnReminderPickedListener</name></name> <operator>=</operator> <name>mOnReminderPickedListener</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pickerType</name></name> <operator>=</operator> <name>pickerType</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>pick</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>pick</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>pick</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>presetDateTime</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>pick</name><argument_list>(<argument><expr><name>presetDateTime</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>pick</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>presetDateTime</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>presetDateTime</name></name> <operator>=</operator> <call><name><name>DateUtils</name><operator>.</operator><name>getCalendar</name></name><argument_list>(<argument><expr><name>presetDateTime</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recurrenceRule</name></name> <operator>=</operator> <name>recurrenceRule</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>pickerType</name> <operator>==</operator> <name>TYPE_AOSP</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>timePickerCalledAlready</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <comment type="line">// Timepicker will be automatically called after date is inserted by user</comment>
            <expr_stmt><expr><call><name>showDatePickerDialog</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>presetDateTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>showDateTimeSelectors</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>presetDateTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Show date and time pickers
     */</comment>
    <function><specifier>protected</specifier> <type><name>void</name></type> <name>showDateTimeSelectors</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Sets actual time or previously saved in note</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Calendar</name></type> <name>now</name> <init>= <expr><call><name><name>DateUtils</name><operator>.</operator><name>getCalendar</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DatePickerDialog</name></type> <name>mCalendarDatePickerDialog</name> <init>= <expr><call><name><name>DatePickerDialog</name><operator>.</operator><name>newInstance</name></name><argument_list>(
                <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>year</name></decl></parameter>, <parameter><decl><name>monthOfYear</name></decl></parameter>, <parameter><decl><name>dayOfMonth</name></decl></parameter>)</parameter_list> -&gt; <block>{
					<expr_stmt><expr><name>reminderYear</name> <operator>=</operator> <name>year</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>reminderMonth</name> <operator>=</operator> <name>monthOfYear</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>reminderDay</name> <operator>=</operator> <name>dayOfMonth</name></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>TimePickerDialog</name></type> <name>mRadialTimePickerDialog</name> <init>= <expr><call><name><name>TimePickerDialog</name><operator>.</operator><name>newInstance</name></name><argument_list>(
                            <argument><expr><lambda><parameter_list>(<parameter><decl><name>radialPickerLayout</name></decl></parameter>, <parameter><decl><name>hour</name></decl></parameter>, <parameter><decl><name>minute</name></decl></parameter>)</parameter_list> -&gt; <block>{
								<expr_stmt><expr><name>hourOfDay</name> <operator>=</operator> <name>hour</name></expr>;</expr_stmt>
								<expr_stmt><expr><name>minutes</name> <operator>=</operator> <name>minute</name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>showRecurrencePickerDialog</name><argument_list>(<argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></lambda></expr></argument>, <argument><expr><call><name><name>now</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>now</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>is24HourMode</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>mRadialTimePickerDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></lambda></expr></argument>, <argument><expr><call><name><name>now</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>now</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>now</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mCalendarDatePickerDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Shows fallback date and time pickers for smaller screens
     */</comment>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>showDatePickerDialog</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>presetDateTime</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Bundle</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name><name>DatePickerDialogFragment</name><operator>.</operator><name>DEFAULT_DATE</name></name></expr></argument>, <argument><expr><name>presetDateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DialogFragment</name></type> <name>picker</name> <init>= <expr><operator>new</operator> <call><name>DatePickerDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>picker</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>picker</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>showTimePickerDialog</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>presetDateTime</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimePickerFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>TimePickerFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name><name>TimePickerFragment</name><operator>.</operator><name>DEFAULT_TIME</name></name></expr></argument>, <argument><expr><name>presetDateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>showRecurrencePickerDialog</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RecurrencePickerDialog</name></type> <name>recurrencePickerDialog</name> <init>= <expr><operator>new</operator> <call><name>RecurrencePickerDialog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>recurrenceRule</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>recurrenceRule</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>RecurrencePickerDialog</name><operator>.</operator><name>BUNDLE_RRULE</name></name></expr></argument>, <argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>recurrencePickerDialog</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>recurrencePickerDialog</name><operator>.</operator><name>setOnRecurrenceSetListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recurrencePickerDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSupportFragmentManager</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"recurrencePicker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDateSet</name><parameter_list>(<parameter><decl><type><name>DatePicker</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>monthOfYear</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dayOfMonth</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>reminderYear</name> <operator>=</operator> <name>year</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>reminderMonth</name> <operator>=</operator> <name>monthOfYear</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>reminderDay</name> <operator>=</operator> <name>dayOfMonth</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>timePickerCalledAlready</name></expr>)</condition><then> <block>{    <comment type="line">// Used to avoid native bug that calls onPositiveButtonPressed in the onClose()</comment>
            <expr_stmt><expr><name>timePickerCalledAlready</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>showTimePickerDialog</name><argument_list>(<argument><expr><name>presetDateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTimeSet</name><parameter_list>(<parameter><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TimePicker</name></name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hourOfDay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minute</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hourOfDay</name></name> <operator>=</operator> <name>hourOfDay</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>minutes</name></name> <operator>=</operator> <name>minute</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>recurrencePickerCalledAlready</name></expr>)</condition><then> <block>{    <comment type="line">// Used to avoid native bug that calls onPositiveButtonPressed in the onClose()</comment>
            <expr_stmt><expr><name>recurrencePickerCalledAlready</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>showRecurrencePickerDialog</name><argument_list>(<argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRecurrenceSet</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>rrule</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>c</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>reminderYear</name></expr></argument>, <argument><expr><name>reminderMonth</name></expr></argument>, <argument><expr><name>reminderDay</name></expr></argument>, <argument><expr><name>hourOfDay</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mOnReminderPickedListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mOnReminderPickedListener</name><operator>.</operator><name>onReminderPicked</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mOnReminderPickedListener</name><operator>.</operator><name>onRecurrenceReminderPicked</name></name><argument_list>(<argument><expr><name>rrule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\receiver\BootCompleteReceiver.java" hash="7ace772f335fc01c6adc65f96854133aef30ef0d"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>receiver</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>AlarmRestoreOnRebootService</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>BootCompleteReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"System rebooted: refreshing reminders"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"android.intent.action.BOOT_COMPLETED"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>service</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>AlarmRestoreOnRebootService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>startService</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\utils\StorageHelper.java" hash="ca75022a0710a26d01067170e526ccee1376ae13"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>StatFs</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>webkit</name><operator>.</operator><name>MimeTypeMap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>


<class><specifier>public</specifier> class <name>StorageHelper</name> <block>{

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkStorage</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>mExternalStorageAvailable</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>mExternalStorageWriteable</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>state</name> <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStorageState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
            <case>case <expr><name><name>Environment</name><operator>.</operator><name>MEDIA_MOUNTED</name></name></expr>:</case>
                <comment type="line">// We can read and write the media</comment>
                <expr_stmt><expr><name>mExternalStorageAvailable</name> <operator>=</operator> <name>mExternalStorageWriteable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>Environment</name><operator>.</operator><name>MEDIA_MOUNTED_READ_ONLY</name></name></expr>:</case>
                <comment type="line">// We can only read the media</comment>
                <expr_stmt><expr><name>mExternalStorageAvailable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>mExternalStorageWriteable</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <comment type="line">// Something else is wrong. It may be one of many other states, but</comment>
                <comment type="line">// all we need</comment>
                <comment type="line">// to know is we can neither read nor write</comment>
                <expr_stmt><expr><name>mExternalStorageAvailable</name> <operator>=</operator> <name>mExternalStorageWriteable</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <break>break;</break>
        }</block></switch>
        <return>return <expr><name>mExternalStorageAvailable</name> <operator>&amp;&amp;</operator> <name>mExternalStorageWriteable</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getStorageDir</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// return Environment.getExternalStorageDirectory() + File.separator +</comment>
        <comment type="line">// Constants.TAG + File.separator;</comment>
        <return>return <expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStoragePublicDirectory</name></name><argument_list>(<argument><expr><name><name>Environment</name><operator>.</operator><name>DIRECTORY_DOWNLOADS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getAttachmentDir</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>mContext</name><operator>.</operator><name>getExternalFilesDir</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves the folderwhere to store data to sync notes
     *
     * @param mContext
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getDbSyncDir</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>extFilesDir</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getExternalFilesDir</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dbSyncDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>extFilesDir</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>APP_STORAGE_DIRECTORY_SB_SYNC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dbSyncDir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>dbSyncDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dbSyncDir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>dbSyncDir</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Create a path where we will place our private file on external
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>createExternalStoragePrivateFile</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>extension</name></decl></parameter>)</parameter_list> <block>{

        <if>if <condition>(<expr><operator>!</operator><call><name>checkStorage</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>mContext</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>storage_not_available</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name>createNewAttachmentFile</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>InputStream</name></type> <name>contentResolverInputStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>contentResolverOutputStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>contentResolverInputStream</name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openInputStream</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>contentResolverOutputStream</name> <operator>=</operator> <operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>copyFile</name><argument_list>(<argument><expr><name>contentResolverInputStream</name></expr></argument>, <argument><expr><name>contentResolverOutputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <try>try <block>{
            	<expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>FileHelper</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// It's a path!!</comment>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{
                <try>try <block>{
					<expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error writing "</literal> <operator>+</operator> <name>file</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error writing "</literal> <operator>+</operator> <name>file</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			}</block></catch></try>
        }</block></catch> <finally>finally <block>{
			<try>try <block>{
				<if>if <condition>(<expr><name>contentResolverInputStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>contentResolverInputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<if>if <condition>(<expr><name>contentResolverOutputStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>contentResolverOutputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error closing streams"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></finally></try>
		<return>return <expr><name>file</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>copyFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>destination</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>FileInputStream</name></type> <name>is</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FileOutputStream</name></type> <name>os</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
			<expr_stmt><expr><name>is</name> <operator>=</operator> <operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>os</name> <operator>=</operator> <operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>copyFile</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error copying file"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch> <finally>finally <block>{
			<try>try <block>{
				<if>if <condition>(<expr><name>is</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<if>if <condition>(<expr><name>os</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error closing streams"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></finally></try>
	}</block></function>


    <comment type="block" format="javadoc">/**
     * Generic file copy method
     *
     * @param is Input
     * @param os Output
     * @return True if copy is done, false otherwise
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>copyFile</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
        <try>try <block>{
            <while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error copying file"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>deleteExternalStoragePrivateFile</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Checks for external storage availability</comment>
        <if>if <condition>(<expr><operator>!</operator><call><name>checkStorage</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>mContext</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>storage_not_available</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getExternalFilesDir</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Checks for external storage availability</comment>
        <if>if <condition>(<expr><operator>!</operator><call><name>checkStorage</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>mContext</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>storage_not_available</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>files</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>file2</name> <range>: <expr><name>files</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>delete</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>file2</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>

        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getRealPathFromURI</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>contentUri</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>proj</name> <init>= <expr><block>{<expr><name><name>MediaStore</name><operator>.</operator><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATA</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>contentUri</name></expr></argument>, <argument><expr><name>proj</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>column_index</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>column_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>path</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>createNewAttachmentFile</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>extension</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>checkStorage</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getExternalFilesDir</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>createNewAttachmentName</name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>f</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <type><name>String</name></type> <name>createNewAttachmentName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>extension</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>now</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DATE_FORMAT_SORTABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>sdf</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>name</name> <operator>+=</operator> <ternary><condition><expr><name>extension</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>extension</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>createNewAttachmentFile</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>createNewAttachmentFile</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Create a path where we will place our private file on external
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>copyToBackupDir</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>checkStorage</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>backupDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>backupDir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>destination</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>copyFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>destination</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getCacheDir</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getExternalCacheDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>dir</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getExternalStoragePublicDir</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStorageDirectory</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>EXTERNAL_STORAGE_FOLDER</name></name> <operator>+</operator> <name><name>File</name>
                <operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>dir</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getBackupDir</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>backupName</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>backupDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getExternalStoragePublicDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>backupName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>backupDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>backupDir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>backupDir</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getSharedPreferencesFile</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>appData</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParentFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>packageName</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>appData</name>
                <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"file.separator"</literal></expr></argument>)</argument_list></call>
                <operator>+</operator> <literal type="string">"shared_prefs"</literal>
                <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"file.separator"</literal></expr></argument>)</argument_list></call>
                <operator>+</operator> <name>packageName</name>
                <operator>+</operator> <literal type="string">"_preferences.xml"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Returns a directory size in bytes
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getSize</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StatFs</name></type> <name>statFs</name> <init>= <expr><operator>new</operator> <call><name>StatFs</name><argument_list>(<argument><expr><call><name><name>directory</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>blockSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR2</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>blockSize</name> <operator>=</operator> <call><name><name>statFs</name><operator>.</operator><name>getBlockSizeLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>blockSize</name> <operator>=</operator> <call><name><name>statFs</name><operator>.</operator><name>getBlockSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <comment type="line">// Can't understand why on some devices this fails</comment>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Mysterious error"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><call><name>getSize</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getSize</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>)</parameter_list> <block>{
    	<if>if <condition>(<expr><name>blockSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    		<throw>throw <expr><operator>new</operator> <call><name>InvalidParameterException</name><argument_list>(<argument><expr><literal type="string">"Blocksize can't be 0"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then></if>
        <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>files</name> <init>= <expr><call><name><name>directory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>files</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

            <comment type="line">// space used by directory itself </comment>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>directory</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>File</name></type> <name>file</name> <range>: <expr><name>files</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// space used by subdirectory</comment>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getSize</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// file size need to rounded up to full block sizes</comment>
                    <comment type="line">// (not a perfect function, it adds additional block to 0 sized files</comment>
                    <comment type="line">// and file who perfectly fill their blocks) </comment>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>blockSize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>blockSize</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <return>return <expr><name>size</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></else></if>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>copyDirectory</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>sourceLocation</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>targetLocation</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// If target is a directory the method will be iterated</comment>
        <if>if <condition>(<expr><call><name><name>sourceLocation</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name><name>targetLocation</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>targetLocation</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>children</name> <init>= <expr><call><name><name>sourceLocation</name><operator>.</operator><name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>sourceLocation</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>&amp;&amp;</operator> <call><name>copyDirectory</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>sourceLocation</name></expr></argument>, <argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>targetLocation</name></expr></argument>, 
                        <argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <comment type="line">// Otherwise a file copy will be performed</comment>
        }</block></then> <else>else <block>{
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>copyFile</name><argument_list>(<argument><expr><name>sourceLocation</name></expr></argument>, <argument><expr><name>targetLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves uri mime-type using ContentResolver
     *
     * @param mContext
     * @param uri
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMimeType</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ContentResolver</name></type> <name>cR</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>cR</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mimeType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mimeType</name> <operator>=</operator> <call><name>getMimeType</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>mimeType</name></expr>;</return>
    }</block></function>



    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMimeType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>extension</name> <init>= <expr><call><name><name>MimeTypeMap</name><operator>.</operator><name>getFileExtensionFromUrl</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>extension</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>MimeTypeMap</name></type> <name>mime</name> <init>= <expr><call><name><name>MimeTypeMap</name><operator>.</operator><name>getSingleton</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>mime</name><operator>.</operator><name>getMimeTypeFromExtension</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>type</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves uri mime-type between the ones managed by application
     *
     * @param mContext
     * @param uri
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMimeTypeInternal</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>mimeType</name> <init>= <expr><call><name>getMimeType</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mimeType</name> <operator>=</operator> <call><name>getMimeTypeInternal</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>mimeType</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves mime-type between the ones managed by application from given string
     *
     * @param mContext
     * @param mimeType
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMimeTypeInternal</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mimeType</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mimeType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>mimeType</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"image/"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mimeType</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MIME_TYPE_IMAGE</name></name></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>mimeType</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"audio/"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mimeType</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO</name></name></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>mimeType</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"video/"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mimeType</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name></name></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><name>mimeType</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MIME_TYPE_FILES</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><name>mimeType</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Creates a new attachment file copying data from source file
     *
     * @param mContext
     * @param uri
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Attachment</name></type> <name>createAttachmentFromUri</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>createAttachmentFromUri</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Creates a fiile to be used as attachment.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Attachment</name></type> <name>createAttachmentFromUri</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>moveSource</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>FileHelper</name><operator>.</operator><name>getNameFromUri</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>extension</name> <init>= <expr><call><name><name>FileHelper</name><operator>.</operator><name>getFileExtension</name></name><argument_list>(<argument><expr><call><name><name>FileHelper</name><operator>.</operator><name>getNameFromUri</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>(
                <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>moveSource</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>createNewAttachmentFile</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>moveFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Can't move file "</literal> <operator>+</operator> <call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name><name>StorageHelper</name><operator>.</operator><name>createExternalStoragePrivateFile</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>Attachment</name></type> <name>mAttachment</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mAttachment</name> <operator>=</operator> <operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>StorageHelper</name><operator>.</operator><name>getMimeTypeInternal</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mAttachment</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mAttachment</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>mAttachment</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Creates new attachment from web content
     *
     * @param mContext
     * @param url
     * @return
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>createNewAttachmentFileFromHttp</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>getFromHttp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>createNewAttachmentFile</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>FileHelper</name><operator>.</operator><name>getFileExtension</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves a file from its web url
     *
     * @param url
     * @return
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getFromHttp</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>URL</name></type> <name>imageUrl</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// HttpURLConnection conn = (HttpURLConnection)imageUrl.openConnection();</comment>
        <comment type="line">// conn.setConnectTimeout(30000);</comment>
        <comment type="line">// conn.setReadTimeout(30000);</comment>
        <comment type="line">// conn.setInstanceFollowRedirects(true);</comment>
        <comment type="line">// InputStream is=conn.getInputStream();</comment>
        <comment type="line">// OutputStream os = new FileOutputStream(f);</comment>
        <comment type="line">// Utils.CopyStream(is, os);</comment>

        <comment type="line">// File file = File.createTempFile("img", ".jpg");</comment>

        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyURLToFile</name></name><argument_list>(<argument><expr><name>imageUrl</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// os.close();</comment>
        <return>return <expr><name>file</name></expr>;</return>
    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\Category.java" hash="26b0c35729445c4d4306fed4981e64a89e9a2121"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>commons</name><operator>.</operator><name>models</name><operator>.</operator><name>BaseCategory</name></name>;</import>


<class><specifier>public</specifier> class <name>Category</name> <super><extends>extends <name>BaseCategory</name></extends> <implements>implements <name>Parcelable</name></implements></super> <block>{

    <constructor><specifier>private</specifier> <name>Category</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setId</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setName</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDescription</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setColor</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>Category</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>Category</name><parameter_list>(<parameter><decl><type><name>BaseCategory</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>category</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>category</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>Category</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>Category</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>parcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getDescription</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block">/*
     * Parcelable interface must also have a static field called CREATOR, which is an object implementing the
     * Parcelable.Creator interface. Used to un-marshal or de-serialize object from Parcel.
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{

        <function><specifier>public</specifier> <type><name>Category</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>Category</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><specifier>public</specifier> <type><name><name>Category</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>Category</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\NavigationItem.java" hash="3ffb606624c20acb58e2bd231272099f4e346029"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<class><specifier>public</specifier> class <name>NavigationItem</name> <block>{


    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>arrayIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>icon</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>iconSelected</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>NavigationItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arrayIndex</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>icon</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iconSelected</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>arrayIndex</name></name> <operator>=</operator> <name>arrayIndex</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <name>icon</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iconSelected</name></name> <operator>=</operator> <name>iconSelected</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getArrayIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>arrayIndex</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setArrayIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arrayIndex</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>arrayIndex</name></name> <operator>=</operator> <name>arrayIndex</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>String</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>text</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getIcon</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>icon</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setIcon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <name>icon</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getIconSelected</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>iconSelected</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setIconSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iconSelected</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iconSelected</name></name> <operator>=</operator> <name>iconSelected</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\Attachment.java" hash="6356f9d2bb14593ce8a86cc2d307a157c587d094"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>commons</name><operator>.</operator><name>models</name><operator>.</operator><name>BaseAttachment</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>


<class><specifier>public</specifier> class <name>Attachment</name> <super><extends>extends <name>BaseAttachment</name></extends> <implements>implements <name>Parcelable</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Uri</name></type> <name>uri</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>Attachment</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mime_type</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<constructor><specifier>public</specifier> <name>Attachment</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mime_type</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><ternary><condition><expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<constructor><specifier>public</specifier> <name>Attachment</name><parameter_list>(<parameter><decl><type><name>BaseAttachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUriPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attachment</name>
				<operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUriPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<constructor><specifier>private</specifier> <name>Attachment</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>setId</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setUri</name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setMime_type</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<function><specifier>public</specifier> <type><name>Uri</name></type> <name>getUri</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>uri</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>setUri</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setUriPath</name><argument_list>(<argument><expr><ternary><condition><expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>parcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getMime_type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<comment type="block">/*
	 * Parcelable interface must also have a static field called CREATOR, which is an object implementing the
	 * Parcelable.Creator interface. Used to un-marshal or de-serialize object from Parcel.
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{

		<function><specifier>public</specifier> <type><name>Attachment</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>


		<function><specifier>public</specifier> <type><name><name>Attachment</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><operator>new</operator> <name><name>Attachment</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
		}</block></function>
	}</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\PasswordValidator.java" hash="d34d2bf1771e44bb8dbdaeceb6bc65e2b00c4a08"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<interface><specifier>public</specifier> interface <name>PasswordValidator</name> <block>{

    <enum>enum <name>Result</name> <block>{
        <decl><name>SUCCEED</name></decl>, <decl><name>FAIL</name></decl>, <decl><name>RESTORE</name></decl>
    }</block></enum>

    <function_decl><type><name>void</name></type> <name>onPasswordValidated</name><parameter_list>(<parameter><decl><type><name>Result</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\receiver\AlarmReceiver.java" hash="d16788a29ca333716c1c0301a2750d928752cb22"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>receiver</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>SnoozeActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>services</name><operator>.</operator><name>NotificationListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>


<class><specifier>public</specifier> class <name>AlarmReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
		<try>try <block>{
			<decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><call><name><name>ParcelableUtil</name><operator>.</operator><name>unmarshall</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getByteArray</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Note</name>
					<operator>.</operator><name>CREATOR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>createNotification</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>SnoozeActivity</name><operator>.</operator><name>setNextRecurrentReminder</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">18</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>NotificationListener</name><operator>.</operator><name>isRunning</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setReminderFired</name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error on receiving reminder"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>createNotification</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{

		<comment type="line">// Retrieving preferences</comment>
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Prepare text contents</comment>
		<decl_stmt><decl><type><name><name>Spanned</name><index>[]</index></name></type> <name>titleAndContent</name> <init>= <expr><call><name><name>TextHelper</name><operator>.</operator><name>parseTitleAndContent</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>TextHelper</name><operator>.</operator><name>getAlternativeTitle</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><name><name>titleAndContent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><name><name>titleAndContent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Intent</name></type> <name>snoozeIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>SnoozeActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>snoozeIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_SNOOZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>snoozeIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name><operator>)</operator> <name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>PendingIntent</name></type> <name>piSnooze</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name>getUniqueRequestCode</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>snoozeIntent</name></expr></argument>,
				<argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Intent</name></type> <name>postponeIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>SnoozeActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>postponeIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_POSTPONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>postponeIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name><operator>)</operator> <name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>PendingIntent</name></type> <name>piPostpone</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name>getUniqueRequestCode</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>postponeIntent</name></expr></argument>,
				<argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>snoozeDelay</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>,
				<argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"settings_notification_snooze_delay"</literal></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Next create the bundle and initialize it</comment>
		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>SnoozeActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_NOTE</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtras</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Sets the Activity to start in a new, empty task</comment>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Workaround to fix problems with multiple notifications</comment>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_NOTIFICATION_CLICK</name></name> <operator>+</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Creates the PendingIntent</comment>
		<decl_stmt><decl><type><name>PendingIntent</name></type> <name>notifyIntent</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name>getUniqueRequestCode</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>intent</name></expr></argument>,
				<argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>NotificationsHelper</name></type> <name>notificationsHelper</name> <init>= <expr><operator>new</operator> <call><name>NotificationsHelper</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>notificationsHelper</name><operator>.</operator><name>createNotification</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_stat_notification</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>notifyIntent</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setLedActive</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>setMessage</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMime_type</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Constants</name>
				<operator>.</operator><name>MIME_TYPE_FILES</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>notificationsHelper</name><operator>.</operator><name>setLargeIcon</name></name><argument_list>(<argument><expr><call><name><name>BitmapHelper</name><operator>.</operator><name>getBitmapFromAttachment</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name><name>notificationsHelper</name><operator>.</operator><name>getBuilder</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>addAction</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_material_reminder_time_light</name></name></expr></argument>, <argument><expr><call><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>TextHelper</name>
						<operator>.</operator><name>capitalize</name></name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>snooze</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>snoozeDelay</name></expr></argument>, <argument><expr><name>piSnooze</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>addAction</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_remind_later_light</name></name></expr></argument>,
						<argument><expr><call><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>TextHelper</name><operator>.</operator><name>capitalize</name></name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name>
								<operator>.</operator><name>add_reminder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>piPostpone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setRingtone</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>, <argument><expr><name>notificationsHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setVibrate</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>, <argument><expr><name>notificationsHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>notificationsHelper</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>setRingtone</name><parameter_list>(<parameter><decl><type><name>SharedPreferences</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>NotificationsHelper</name></type> <name>notificationsHelper</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>ringtone</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_notification_ringtone"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>ringtone</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>notificationsHelper</name><operator>.</operator><name>setRingtone</name></name><argument_list>(<argument><expr><name>ringtone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>setVibrate</name><parameter_list>(<parameter><decl><type><name>SharedPreferences</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>NotificationsHelper</name></type> <name>notificationsHelper</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_notification_vibration"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>notificationsHelper</name><operator>.</operator><name>setVibration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></function>


	<function><specifier>private</specifier> <type><name>int</name></type> <name>getUniqueRequestCode</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\PushBulletMessage.java" hash="31dc70cc1620aba633e02df1cb2995a6258cf5ae"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<class><specifier>public</specifier> class <name>PushBulletMessage</name> <block>{

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>PushBulletMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\ONStyle.java" hash="fa8b952a9139d98f489b72f3a0e1f1d4ff19c351"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name><operator>.</operator><name>LayoutParams</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>keyboardsurfer</name><operator>.</operator><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>crouton</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>ONStyle</name> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DURATION_INFINITE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DURATION_SHORT</name> <init>= <expr><literal type="number">950</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DURATION_MEDIUM</name> <init>= <expr><literal type="number">1650</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DURATION_LONG</name> <init>= <expr><literal type="number">2300</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Configuration</name></type> <name>CONFIGURATION</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Style</name></type> <name>ALERT</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Style</name></type> <name>WARN</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Style</name></type> <name>CONFIRM</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Style</name></type> <name>INFO</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ALERT_COLOR</name> <init>= <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>alert</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WARN_COLOR</name> <init>= <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>warning</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONFIRM_COLOR</name> <init>= <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>confirm</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INFO_COLOR</name> <init>= <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>info</name></name></expr></init></decl>;</decl_stmt>


    <static>static <block>{
        <expr_stmt><expr><name>CONFIGURATION</name> <operator>=</operator> <operator>new</operator> <call><name><name>Configuration</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>setDuration</name><argument_list>(<argument><expr><name>DURATION_SHORT</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setInAnimation</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_in_support</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setOutAnimation</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_out_support</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ALERT</name> <operator>=</operator> <operator>new</operator> <call><name><name>Style</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>setBackgroundColor</name><argument_list>(<argument><expr><name>ALERT_COLOR</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setHeight</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setGravity</name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setTextAppearance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>crouton_text</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setConfiguration</name><argument_list>(<argument><expr><name>CONFIGURATION</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>WARN</name> <operator>=</operator> <operator>new</operator> <call><name><name>Style</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>setBackgroundColor</name><argument_list>(<argument><expr><name>WARN_COLOR</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setHeight</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setGravity</name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setTextAppearance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>crouton_text</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setConfiguration</name><argument_list>(<argument><expr><name>CONFIGURATION</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>CONFIRM</name> <operator>=</operator> <operator>new</operator> <call><name><name>Style</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>setBackgroundColor</name><argument_list>(<argument><expr><name>CONFIRM_COLOR</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setHeight</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setGravity</name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setTextAppearance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>crouton_text</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setConfiguration</name><argument_list>(<argument><expr><name>CONFIGURATION</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>INFO</name> <operator>=</operator> <operator>new</operator> <call><name><name>Style</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>setBackgroundColor</name><argument_list>(<argument><expr><name>INFO_COLOR</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setHeight</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setGravity</name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setTextAppearance</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>crouton_text</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setConfiguration</name><argument_list>(<argument><expr><name>CONFIGURATION</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\Tag.java" hash="fe504ac1f88280d8e014dd828af9d1aa9f9f00d4"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>commons</name><operator>.</operator><name>models</name><operator>.</operator><name>BaseTag</name></name>;</import>


<class><specifier>public</specifier> class <name>Tag</name> <super><extends>extends <name>BaseTag</name></extends> <implements>implements <name>Parcelable</name></implements></super> <block>{

    <constructor><specifier>private</specifier> <name>Tag</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setCount</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>Tag</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>Tag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>parcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name>getCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getText</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block">/*
     * Parcelable interface must also have a static field called CREATOR, which is an object implementing the
     * Parcelable.Creator interface. Used to un-marshal or de-serialize object from Parcel.
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{

        <function><specifier>public</specifier> <type><name>Tag</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>Tag</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><specifier>public</specifier> <type><name><name>Tag</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>Tag</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\StatsSingleNote.java" hash="fc0c763a63b6f747235feeb2c9e69f6fc9f01999">
<comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<class><specifier>public</specifier> class <name>StatsSingleNote</name> <block>{

	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>tags</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>attachments</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>images</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>videos</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>audioRecordings</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>sketches</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>files</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>categoryName</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>words</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>chars</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>checklistItemsNumber</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>checklistCompletedItemsNumber</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getTags</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>tags</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tags</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>tags</name></name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getWords</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>words</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setWords</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>words</name></name> <operator>=</operator> <name>words</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getChars</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>chars</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setChars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chars</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <name>chars</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getAttachments</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>attachments</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setAttachments</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attachments</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>attachments</name></name> <operator>=</operator> <name>attachments</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getImages</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>images</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setImages</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>images</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>images</name></name> <operator>=</operator> <name>images</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getVideos</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>videos</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setVideos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>videos</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>videos</name></name> <operator>=</operator> <name>videos</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getAudioRecordings</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>audioRecordings</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setAudioRecordings</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>audioRecordings</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>audioRecordings</name></name> <operator>=</operator> <name>audioRecordings</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getSketches</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>sketches</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setSketches</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>sketches</name></name> <operator>=</operator> <name>sketches</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getFiles</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>files</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setFiles</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>files</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>files</name></name> <operator>=</operator> <name>files</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getCategoryName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>categoryName</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setCategoryName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>categoryName</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>categoryName</name></name> <operator>=</operator> <name>categoryName</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getChecklistItemsNumber</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>checklistItemsNumber</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setChecklistItemsNumber</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>checklistItemsNumber</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>checklistItemsNumber</name></name> <operator>=</operator> <name>checklistItemsNumber</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getChecklistCompletedItemsNumber</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>checklistCompletedItemsNumber</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setChecklistCompletedItemsNumber</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>checklistCompletedItemsNumber</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>checklistCompletedItemsNumber</name></name> <operator>=</operator> <name>checklistCompletedItemsNumber</name></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\Note.java" hash="8d20cb103fca275a19a0e87ea02974c4a9a4397f"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>commons</name><operator>.</operator><name>models</name><operator>.</operator><name>BaseCategory</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>commons</name><operator>.</operator><name>models</name><operator>.</operator><name>BaseNote</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>Note</name> <super><extends>extends <name>BaseNote</name></extends> <implements>implements <name>Parcelable</name></implements></super> <block>{

    <comment type="line">// Not saved in DB</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>passwordChecked</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>Note</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>Note</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>creation</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>lastModification</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>content</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>archived</name></decl></parameter>,
				<parameter><decl><type><name>Integer</name></type> <name>trashed</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>alarm</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>reminderFired</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>longitude</name></decl></parameter>, <parameter><decl><type><name>Category</name></type>
                        <name>category</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>locked</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>checklist</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>creation</name></expr></argument>, <argument><expr><name>lastModification</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>archived</name></expr></argument>, <argument><expr><name>trashed</name></expr></argument>, <argument><expr><name>alarm</name></expr></argument>, <argument><expr><name>reminderFired</name></expr></argument>, <argument><expr><name>recurrenceRule</name></expr></argument>,
				<argument><expr><name>latitude</name></expr></argument>,
				<argument><expr><name>longitude</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>locked</name></expr></argument>, <argument><expr><name>checklist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>Note</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPasswordChecked</name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>isPasswordChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>private</specifier> <name>Note</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setCreation</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLastModification</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContent</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setArchived</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTrashed</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setAlarm</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setReminderFired</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRecurrenceRule</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLatitude</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLongitude</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAddress</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readParcelable</name></name><argument_list>(<argument><expr><call><name><name>Category</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLocked</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setChecklist</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readList</name></name><argument_list>(<argument><expr><call><name>getAttachmentsList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Attachment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>getAttachmentsList</name><parameter_list>()</parameter_list> <block>{
<comment type="line">//		List&lt;Attachment&gt; list = new ArrayList&lt;&gt;();</comment>
<comment type="line">//		for (it.feio.android.omninotes.commons.models.Attachment attachment : super.getAttachmentsList()) {</comment>
<comment type="line">//			if (attachment.getClass().equals(Attachment.class)) {</comment>
<comment type="line">//				list.add((Attachment) attachment);</comment>
<comment type="line">//			} else {</comment>
<comment type="line">//				list.add(new Attachment(attachment));</comment>
<comment type="line">//			}</comment>
<comment type="line">//		}</comment>
<comment type="line">//		return list;</comment>
        <comment type="line">// FIXME This fixes https://github.com/federicoiosue/Omni-Notes/issues/199 but could introduce other issues</comment>
        <return>return <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAttachmentsList</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachmentsList</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setAttachmentsList</name></name><argument_list>(<argument><expr><name>attachmentsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>addAttachment</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachmentsList</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>attachmentsList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setAttachmentsList</name><argument_list>(<argument><expr><name>attachmentsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeAttachment</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachmentsList</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>attachmentsList</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setAttachmentsList</name><argument_list>(<argument><expr><name>attachmentsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>getAttachmentsListOld</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>getAttachmentsListOld</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAttachmentsListOld</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachmentsListOld</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setAttachmentsListOld</name></name><argument_list>(<argument><expr><name>attachmentsListOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPasswordChecked</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>passwordChecked</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setPasswordChecked</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>passwordChecked</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>passwordChecked</name></name> <operator>=</operator> <name>passwordChecked</name></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Category</name></type> <name>getCategory</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<return>return <expr><operator>(</operator><name>Category</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><operator>new</operator> <call><name>Category</name><argument_list>(<argument><expr><call><name><name>super</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></catch></try>
    }</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>setCategory</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>category</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>category</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>BaseCategory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setCategory</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Category</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>parcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getCreation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getLastModification</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isArchived</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isTrashed</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getAlarm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isReminderFired</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getRecurrenceRule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getLatitude</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getLongitude</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeParcelable</name></name><argument_list>(<argument><expr><call><name>getCategory</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isLocked</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isChecklist</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeList</name></name><argument_list>(<argument><expr><call><name>getAttachmentsList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block">/*
     * Parcelable interface must also have a static field called CREATOR, which is an object implementing the
     * Parcelable.Creator interface. Used to un-marshal or de-serialize object from Parcel.
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{

        <function><specifier>public</specifier> <type><name>Note</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>Note</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><specifier>public</specifier> <type><name><name>Note</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>Note</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\Stats.java" hash="1980cb15130acb2d2ae48757459ce8b650b0f331"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<class><specifier>public</specifier> class <name>Stats</name> <super><extends>extends <name>StatsSingleNote</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>notesActive</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>notesArchived</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>notesTrashed</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>reminders</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>remindersFutures</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>notesChecklist</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>notesMasked</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>categories</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>location</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>wordsMax</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>wordsAvg</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>charsMax</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>charsAvg</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>usageTime</name></decl>;</decl_stmt>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getNotesTotalNumber</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>notesActive</name> <operator>+</operator> <name>notesArchived</name> <operator>+</operator> <name>notesTrashed</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getNotesActive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>notesActive</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNotesActive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>notesActive</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notesActive</name></name> <operator>=</operator> <name>notesActive</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getNotesArchived</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>notesArchived</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNotesArchived</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>notesArchived</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notesArchived</name></name> <operator>=</operator> <name>notesArchived</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getNotesTrashed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>notesTrashed</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNotesTrashed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>notesTrashed</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notesTrashed</name></name> <operator>=</operator> <name>notesTrashed</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getReminders</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>reminders</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setReminders</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reminders</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reminders</name></name> <operator>=</operator> <name>reminders</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getRemindersFutures</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>remindersFutures</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setRemindersFutures</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>remindersFutures</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remindersFutures</name></name> <operator>=</operator> <name>remindersFutures</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getNotesChecklist</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>notesChecklist</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNotesChecklist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>notesChecklist</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notesChecklist</name></name> <operator>=</operator> <name>notesChecklist</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getNotesMasked</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>notesMasked</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNotesMasked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>notesMasked</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notesMasked</name></name> <operator>=</operator> <name>notesMasked</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getCategories</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>categories</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCategories</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>categories</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>categories</name></name> <operator>=</operator> <name>categories</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getTags</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tags</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tags</name></name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getWords</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>words</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setWords</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>words</name></name> <operator>=</operator> <name>words</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getChars</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>chars</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setChars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chars</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <name>chars</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getWordsMax</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>wordsMax</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setWordsMax</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wordsMax</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wordsMax</name></name> <operator>=</operator> <name>wordsMax</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getWordsAvg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>wordsAvg</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setWordsAvg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wordsAvg</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wordsAvg</name></name> <operator>=</operator> <name>wordsAvg</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getCharsMax</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>charsMax</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCharsMax</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>charsMax</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>charsMax</name></name> <operator>=</operator> <name>charsMax</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getCharsAvg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>charsAvg</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCharsAvg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>charsAvg</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>charsAvg</name></name> <operator>=</operator> <name>charsAvg</name></expr>;</expr_stmt>
    }</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getLocation</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>location</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>setLocation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>long</name></type> <name>getUsageTime</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>usageTime</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setUsageTime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>usageTime</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>usageTime</name></name> <operator>=</operator> <name>usageTime</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\ThumbnailLruCache.java" hash="64a3e0cc1270f79861df5035222b420bc51ab5ee"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>util</name><operator>.</operator><name>LruCache</name></name>;</import>


<class><specifier>public</specifier> class <name>ThumbnailLruCache</name> <super><extends>extends <name><name>LruCache</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Bitmap</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <comment type="line">// Calculates available device memory</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>maxMemory</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Use 1/8th of the available memory for this memory cache.</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>cacheSize</name> <init>= <expr><name>maxMemory</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>ThumbnailLruCache</name></type> <name>instance</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>LruCache</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>mMemoryCache</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>ThumbnailLruCache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxSize</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>maxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <type><name>ThumbnailLruCache</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>ThumbnailLruCache</name><argument_list>(<argument><expr><name>cacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>mMemoryCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>LruCache</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>cacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>instance</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>addBitmap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getBitmap</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mMemoryCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>Bitmap</name></type> <name>getBitmap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>mMemoryCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\views\ExpandableHeightGridView.java" hash="dfca02ce40d8ffadb4b8df77c3ce866ab2242625"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>GridView</name></name>;</import>


<class><specifier>public</specifier> class <name>ExpandableHeightGridView</name> <super><extends>extends <name>GridView</name></extends></super> <block>{

    <comment type="line">//	private boolean expanded = false;</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>itemHeight</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>ExpandableHeightGridView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>ExpandableHeightGridView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>ExpandableHeightGridView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>,
                                    <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
<comment type="line">//</comment>
<comment type="line">//	public boolean isExpanded() {</comment>
<comment type="line">//		return expanded;</comment>
<comment type="line">//	}</comment>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
<comment type="line">//		if (isExpanded()) {</comment>
        <comment type="line">// Calculate entire height by providing a very large height hint.</comment>
        <comment type="line">// View.MEASURED_SIZE_MASK represents the largest height possible.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>expandSpec</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>MEASURED_SIZE_MASK</name></expr></argument>,
                <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>AT_MOST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>, <argument><expr><name>expandSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><call><name>getLayoutParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>params</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>getMeasuredHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//		} else {</comment>
<comment type="line">//			super.onMeasure(widthMeasureSpec, heightMeasureSpec);</comment>
<comment type="line">//		}</comment>
    }</block></function>


<comment type="line">//	public void setExpanded(boolean expanded) {</comment>
<comment type="line">//		this.expanded = expanded;</comment>
<comment type="line">//	}</comment>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>autoresize</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Set gridview height</comment>
<comment type="line">//	    ViewGroup.LayoutParams layoutParams = getLayoutParams();</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>items</name> <init>= <expr><call><name>getAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columns</name> <init>= <expr><ternary><condition><expr><name>items</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>setNumColumns</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    	itemHeight = Constants.THUMBNAIL_SIZE * 2 / columns;</comment>
<comment type="line">//    	layoutParams.height = ( (items / columns) + (items % columns) ) * itemHeight; //this is in pixels</comment>
<comment type="line">//	    </comment>
<comment type="line">//	    setLayoutParams(layoutParams);</comment>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getItemHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>itemHeight</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\views\InterceptorFrameLayout.java" hash="e1151bc04963c31910d52e89cca3f6025aaa0b7f"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnViewTouchedListener</name></name>;</import>


<class><specifier>public</specifier> class <name>InterceptorFrameLayout</name> <super><extends>extends <name>FrameLayout</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>OnViewTouchedListener</name></type> <name>mOnViewTouchedListener</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>InterceptorFrameLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>InterceptorFrameLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onInterceptTouchEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mOnViewTouchedListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mOnViewTouchedListener</name><operator>.</operator><name>onViewTouchOccurred</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onInterceptTouchEvent</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnViewTouchedListener</name><parameter_list>(<parameter><decl><type><name>OnViewTouchedListener</name></type> <name>mOnViewTouchedListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mOnViewTouchedListener</name></name> <operator>=</operator> <name>mOnViewTouchedListener</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\views\InterceptorLinearLayout.java" hash="a20998d100cc6870cfabd9154271c440f00aa8fe"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnViewTouchedListener</name></name>;</import>


<class><specifier>public</specifier> class <name>InterceptorLinearLayout</name> <super><extends>extends <name>LinearLayout</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>OnViewTouchedListener</name></type> <name>mOnViewTouchedListener</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>InterceptorLinearLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>InterceptorLinearLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onInterceptTouchEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mOnViewTouchedListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mOnViewTouchedListener</name><operator>.</operator><name>onViewTouchOccurred</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onInterceptTouchEvent</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnViewTouchedListener</name><parameter_list>(<parameter><decl><type><name>OnViewTouchedListener</name></type> <name>mOnViewTouchedListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mOnViewTouchedListener</name></name> <operator>=</operator> <name>mOnViewTouchedListener</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\UndoBarController.java" hash="d6eaa17db8c174b7f2f9ec0b4de4d24d1216adde"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nineoldandroids</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nineoldandroids</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimatorListenerAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nineoldandroids</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPropertyAnimator</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>utils</name><operator>.</operator><name>AlphaManager</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>nineoldandroids</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPropertyAnimator</name><operator>.</operator><name>animate</name></name>;</import>


<class><specifier>public</specifier> class <name>UndoBarController</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>mBarView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>mMessageView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewPropertyAnimator</name></type> <name>mBarAnimator</name></decl>;</decl_stmt>
<comment type="line">//    private Handler mHideHandler = new Handler();</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><name>UndoListener</name></type> <name>mUndoListener</name></decl>;</decl_stmt>

    <comment type="line">// State objects</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Parcelable</name></type> <name>mUndoToken</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CharSequence</name></type> <name>mUndoMessage</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>mButtonView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isVisible</name></decl>;</decl_stmt>


    <interface><specifier>public</specifier> interface <name>UndoListener</name> <block>{

        <function_decl><type><name>void</name></type> <name>onUndo</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>token</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>


    <constructor><specifier>public</specifier> <name>UndoBarController</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>undoBarView</name></decl></parameter>, <parameter><decl><type><name>UndoListener</name></type> <name>undoListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mBarView</name> <operator>=</operator> <name>undoBarView</name></expr>;</expr_stmt>
<comment type="line">//        mBarAnimator = mBarView.animate();</comment>
        <expr_stmt><expr><name>mBarAnimator</name> <operator>=</operator> <call><name>animate</name><argument_list>(<argument><expr><name>mBarView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mUndoListener</name> <operator>=</operator> <name>undoListener</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>mMessageView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>mBarView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>undobar_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mButtonView</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>mBarView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>undobar_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mButtonView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>mButtonView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>(<argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mButtonView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>hideUndoBar</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mUndoListener</name><operator>.</operator><name>onUndo</name></name><argument_list>(<argument><expr><name>mUndoToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hideUndoBar</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>showUndoBar</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>immediate</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Parcelable</name></type> <name>undoToken</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mUndoToken</name> <operator>=</operator> <name>undoToken</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mUndoMessage</name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMessageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>mUndoMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//        mHideHandler.removeCallbacks(mHideRunnable);</comment>
<comment type="line">//        mHideHandler.postDelayed(mHideRunnable,</comment>
<comment type="line">//                mBarView.getResources().getInteger(R.integer.undobar_hide_delay));</comment>

        <expr_stmt><expr><call><name><name>mBarView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>immediate</name></expr>)</condition><then> <block>{
<comment type="line">//            mBarView.setAlpha(1);</comment>
            <expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>mBarView</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>mBarAnimator</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mBarAnimator</name>
                    <operator>.</operator><name>alpha</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setDuration</name><argument_list>(
                            <argument><expr><call><name><name>mBarView</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>config_shortAnimTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setListener</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>isVisible</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>hideUndoBar</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>immediate</name></decl></parameter>)</parameter_list> <block>{
<comment type="line">//        mHideHandler.removeCallbacks(mHideRunnable);</comment>
        <if>if <condition>(<expr><name>immediate</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mBarView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>AlphaManager</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>mBarView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mUndoMessage</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>mUndoToken</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>mBarAnimator</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mBarAnimator</name>
                    <operator>.</operator><name>alpha</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setDuration</name><argument_list>(<argument><expr><call><name><name>mBarView</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>config_shortAnimTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AnimatorListenerAdapter</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>Animator</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>mBarView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>mUndoMessage</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>mUndoToken</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>isVisible</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putCharSequence</name></name><argument_list>(<argument><expr><literal type="string">"undo_message"</literal></expr></argument>, <argument><expr><name>mUndoMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"undo_token"</literal></expr></argument>, <argument><expr><name>mUndoToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onRestoreInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mUndoMessage</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getCharSequence</name></name><argument_list>(<argument><expr><literal type="string">"undo_message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mUndoToken</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><literal type="string">"undo_token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>mUndoToken</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>mUndoMessage</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>showUndoBar</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>mUndoMessage</name></expr></argument>, <argument><expr><name>mUndoToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>isVisible</name></expr>;</return>
    }</block></function>

<comment type="line">//    private Runnable mHideRunnable = new Runnable() {</comment>
<comment type="line">//        @Override</comment>
<comment type="line">//        public void run() {</comment>
<comment type="line">//            hideUndoBar(false);</comment>
<comment type="line">//        }</comment>
<comment type="line">//    };</comment>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\views\NonScrollableListView.java" hash="ccef02e6649b37ae62bf6c26cd8e83064b319a05"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>


<class><specifier>public</specifier> class <name>NonScrollableListView</name> <super><extends>extends <name>ListView</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>NonScrollableListView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>NonScrollableListView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>NonScrollableListView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>justifyListViewHeightBasedOnChildren</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>ListAdapter</name></type> <name>adapter</name> <init>= <expr><call><name>getAdapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>adapter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ViewGroup</name></type> <name>vg</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>totalHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>adapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>listItem</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getView</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>vg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>listItem</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>totalHeight</name> <operator>+=</operator> <call><name><name>listItem</name><operator>.</operator><name>getMeasuredHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>par</name> <init>= <expr><call><name>getLayoutParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>par</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>totalHeight</name> <operator>+</operator> <operator>(</operator><call><name>getDividerHeight</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><call><name><name>adapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLayoutParams</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>requestLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\views\Fab.java" hash="4f399ff9c30705e731982ac386ba9af6163d3949"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPropertyAnimatorListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AccelerateDecelerateInterpolator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>getbase</name><operator>.</operator><name>floatingactionbutton</name><operator>.</operator><name>AddFloatingActionButton</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>getbase</name><operator>.</operator><name>floatingactionbutton</name><operator>.</operator><name>FloatingActionsMenu</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>AbsListViewScrollDetector</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnFabItemClickedListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import static <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewCompat</name><operator>.</operator><name>animate</name></name>;</import>

<class><specifier>public</specifier> class <name>Fab</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>FloatingActionsMenu</name></type> <name>fab</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>fabAllowed</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>fabHidden</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>fabExpanded</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ListView</name></type> <name>listView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>expandOnLongClick</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>overlay</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>OnFabItemClickedListener</name></type> <name>onFabItemClickedListener</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>Fab</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>fabView</name></decl></parameter>, <parameter><decl><type><name>ListView</name></type> <name>listView</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expandOnLongClick</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fab</name></name> <operator>=</operator> <operator>(</operator><name>FloatingActionsMenu</name><operator>)</operator> <name>fabView</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listView</name></name> <operator>=</operator> <name>listView</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expandOnLongClick</name></name> <operator>=</operator> <name>expandOnLongClick</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fabHidden</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fabExpanded</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AddFloatingActionButton</name></type> <name>fabAddButton</name> <init>= <expr><operator>(</operator><name>AddFloatingActionButton</name><operator>)</operator> <call><name><name>fab</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab_expand_menu_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fabAddButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<if>if <condition>(<expr><operator>!</operator><call><name>isExpanded</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>expandOnLongClick</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>performAction</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name>performToggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fabAddButton</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<if>if <condition>(<expr><operator>!</operator><name>expandOnLongClick</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>performAction</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name>performToggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setOnScrollListener</name></name><argument_list>(
                <argument><expr><operator>new</operator> <class><super><name>AbsListViewScrollDetector</name></super><argument_list>()</argument_list> <block>{
                    <function><specifier>public</specifier> <type><name>void</name></type> <name>onScrollUp</name><parameter_list>()</parameter_list> <block>{
                        <if>if <condition>(<expr><name>fab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>collapse</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>hideFab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></function>

                    <function><specifier>public</specifier> <type><name>void</name></type> <name>onScrollDown</name><parameter_list>()</parameter_list> <block>{
                        <if>if <condition>(<expr><name>fab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>collapse</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>showFab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab_checklist</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOnClickListener</name><argument_list>(<argument><expr><name>onClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab_camera</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOnClickListener</name><argument_list>(<argument><expr><name>onClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><operator>!</operator><name>expandOnLongClick</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>noteBtn</name> <init>= <expr><call><name><name>fab</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab_note</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>noteBtn</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>noteBtn</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>onClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>


    <decl_stmt><decl><specifier>private</specifier> <type><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></type> <name>onClickListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>onFabItemClickedListener</name><operator>.</operator><name>onFabItemClick</name></name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>performToggle</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>fabExpanded</name> <operator>=</operator> <operator>!</operator><name>fabExpanded</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>toggle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>toggleOverlay</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>overlay</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>fabExpanded</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>overlay</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>overlay</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>performAction</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>fabExpanded</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>toggle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fabExpanded</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>onFabItemClickedListener</name><operator>.</operator><name>onFabItemClick</name></name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>showFab</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>fab</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>fabAllowed</name> <operator>&amp;&amp;</operator> <name>fabHidden</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>animateFab</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fabHidden</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>hideFab</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>fab</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>fabHidden</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>collapse</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>animateFab</name><argument_list>(<argument><expr><call><name><name>fab</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getMarginBottom</name><argument_list>(<argument><expr><name>fab</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fabHidden</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>fabExpanded</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>animateFab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>translationY</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>visibilityBefore</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>visibilityAfter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>animate</name><argument_list>(<argument><expr><name>fab</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setInterpolator</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AccelerateDecelerateInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setDuration</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>FAB_ANIMATION_TIME</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>translationY</name><argument_list>(<argument><expr><name>translationY</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ViewPropertyAnimatorListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationStart</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibilityBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibilityAfter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationCancel</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAllowed</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>allowed</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>fabAllowed</name> <operator>=</operator> <name>allowed</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>int</name></type> <name>getMarginBottom</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>marginBottom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>layoutParams</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layoutParams</name> <operator>instanceof</operator> <name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>marginBottom</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator> <name>layoutParams</name><operator>)</operator><operator>.</operator><name>bottomMargin</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>marginBottom</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnFabItemClickedListener</name><parameter_list>(<parameter><decl><type><name>OnFabItemClickedListener</name></type> <name>onFabItemClickedListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onFabItemClickedListener</name></name> <operator>=</operator> <name>onFabItemClickedListener</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOverlay</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>overlay</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>overlay</name></name> <operator>=</operator> <name>overlay</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>overlay</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>performToggle</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOverlay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>colorResurce</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>overlayView</name> <init>= <expr><operator>new</operator> <call><name>View</name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>overlayView</name><operator>.</operator><name>setBackgroundResource</name></name><argument_list>(<argument><expr><name>colorResurce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name>
                <operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>overlayView</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>overlayView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>overlayView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>performToggle</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ViewGroup</name></type> <name>parent</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name><name>fab</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>overlayView</name></expr></argument>, <argument><expr><call><name><name>parent</name><operator>.</operator><name>indexOfChild</name></name><argument_list>(<argument><expr><name>fab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>overlay</name></name> <operator>=</operator> <name>overlayView</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isExpanded</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>fabExpanded</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\views\SquareImageView.java" hash="20a4c70627a51eef9770af2e4792ae5799fad90d"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>


<class><specifier>public</specifier> class <name>SquareImageView</name> <super><extends>extends <name>ImageView</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>mAsyncTaskReference</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>SquareImageView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setScaleType</name><argument_list>(<argument><expr><name><name>ScaleType</name><operator>.</operator><name>CENTER_CROP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>SquareImageView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>SquareImageView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>, <argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><call><name>getMeasuredWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getMeasuredWidth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAsyncTask</name><parameter_list>(<parameter><decl><type><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>mAsyncTask</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mAsyncTaskReference</name></name> <operator>=</operator> <ternary><condition><expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mAsyncTask</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getAsyncTask</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mAsyncTaskReference</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>mAsyncTaskReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\views\VerticalSeekBar.java" hash="f7c8e2cde8c5ac250c260bd595831d4ec86c0584"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>SeekBar</name></name>;</import>


<class><specifier>public</specifier> class <name>VerticalSeekBar</name> <super><extends>extends <name>SeekBar</name></extends></super> <block>{

    <decl_stmt><decl><specifier>protected</specifier> <type><name>OnSeekBarChangeListener</name></type> <name>changeListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>VerticalSeekBar</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>VerticalSeekBar</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>VerticalSeekBar</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>onSizeChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldh</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSizeChanged</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>oldh</name></expr></argument>, <argument><expr><name>oldw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>oldw</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>oldh</name></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><name>heightMeasureSpec</name></expr></argument>, <argument><expr><name>widthMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><call><name>getMeasuredHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getMeasuredWidth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>rotate</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><operator>-</operator><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onTouchEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>

        <switch>switch <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>:</case>
                <expr_stmt><expr><call><name>setSelected</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setPressed</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>changeListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>changeListener</name><operator>.</operator><name>onStartTrackingTouch</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <break>break;</break>
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr>:</case>
                <expr_stmt><expr><call><name>setSelected</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setPressed</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>changeListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>changeListener</name><operator>.</operator><name>onStopTrackingTouch</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <break>break;</break>
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr>:</case>
                <decl_stmt><decl><type><name>int</name></type> <name>progress</name> <init>= <expr><call><name>getMax</name><argument_list>()</argument_list></call>
                        <operator>-</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><call><name>getMax</name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setProgress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>onSizeChanged</name><argument_list>(<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>changeListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>changeListener</name><operator>.</operator><name>onProgressChanged</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <break>break;</break>

            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_CANCEL</name></name></expr>:</case>
                <break>break;</break>
        }</block></switch>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>setOnSeekBarChangeListener</name><parameter_list>(
            <parameter><decl><type><name>OnSeekBarChangeListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>changeListener</name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>setProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>progress</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>

        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><call><name>onSizeChanged</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>changeListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>changeListener</name><operator>.</operator><name>onProgressChanged</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\misc\PlayStoreMetadataFetcherResult.java" hash="0909ebf5588891adb64395c4a3b8e54afa70b619"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>misc</name></name>;</package>

<class><specifier>public</specifier> class <name>PlayStoreMetadataFetcherResult</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>datePublished</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>fileSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>numDownloads</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>softwareVersion</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>operatingSystems</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>contentRating</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getDatePublished</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>datePublished</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setDatePublished</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>datePublished</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>datePublished</name></name> <operator>=</operator> <name>datePublished</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getFileSize</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>fileSize</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setFileSize</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileSize</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileSize</name></name> <operator>=</operator> <name>fileSize</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getNumDownloads</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>numDownloads</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setNumDownloads</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>numDownloads</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>numDownloads</name></name> <operator>=</operator> <name>numDownloads</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getSoftwareVersion</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>softwareVersion</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setSoftwareVersion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>softwareVersion</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>softwareVersion</name></name> <operator>=</operator> <name>softwareVersion</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getOperatingSystems</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>operatingSystems</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setOperatingSystems</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>operatingSystems</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>operatingSystems</name></name> <operator>=</operator> <name>operatingSystems</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getContentRating</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>contentRating</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setContentRating</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentRating</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>contentRating</name></name> <operator>=</operator> <name>contentRating</name></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\misc\DynamicNavigationLookupTable.java" hash="f41d83873cd13d52fbc98a7f2131aeb7e3f1d23f"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>misc</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>DynamicNavigationReadyEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>NotesUpdatedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>DynamicNavigationLookupTable</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>DynamicNavigationLookupTable</name></type> <name>instance</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>archived</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>trashed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>uncategorized</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>reminders</name></decl>;</decl_stmt>


	<constructor><specifier>private</specifier> <name>DynamicNavigationLookupTable</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>DynamicNavigationLookupTable</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>DynamicNavigationLookupTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>instance</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>update</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><operator>(</operator><call>(<name>Runnable</name>) <argument_list>()</argument_list></call> <operator>-&gt;</operator> <block>{
			<expr><name>archived</name> <operator>=</operator> <name>trashed</name> <operator>=</operator> <name>uncategorized</name> <operator>=</operator> <name>reminders</name> <operator>=</operator> <literal type="number">0</literal></expr>;
			<expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name> <name>notes</name> <operator>=</operator> <call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllNotes</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isTrashed</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>trashed</name><operator>++</operator></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isArchived</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>archived</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
				<elseif>else <if>if <condition>(<expr><call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAlarm</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>reminders</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif></if>
				<if>if <condition>(<expr><call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCategory</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCategory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>uncategorized</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt/></block></then></if></block></for>}</block></expr></expr_stmt>
			}</block></function>
			<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DynamicNavigationReadyEvent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Dynamic menu finished counting items"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></class>)<expr_stmt><expr><operator>.</operator><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}


	public <function><type><name>void</name></type> <name>onEventAsync</name><parameter_list>(<parameter><decl><type><name>NotesUpdatedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getArchived</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>archived</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getTrashed</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>trashed</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getReminders</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>reminders</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getUncategorized</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>uncategorized</name></expr>;</return>
	}</block></function>

}
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\OnAttachingFileListener.java" hash="2dbf6e80d3ba4f07ccf7ea61153434a7825e13cc"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>


<interface><specifier>public</specifier> interface <name>OnAttachingFileListener</name> <block>{

    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onAttachingFileErrorOccurred</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onAttachingFileFinished</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\OnCABItemClickedListener.java" hash="b9e6c79672473bbf2ab8eb8f23889baab5ebb540"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>


<interface><specifier>public</specifier> interface <name>OnCABItemClickedListener</name> <block>{

    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onCABItemClicked</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\OnDrawChangedListener.java" hash="f061f0ee44e24dc211f9cd9c0f005c08c0e8826a"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>

<interface><specifier>public</specifier> interface <name>OnDrawChangedListener</name> <block>{

    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onDrawChanged</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\views\SketchView.java" hash="8fc7e909e114f4b2c8fe2739e0f899b84a93795f"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnTouchListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnDrawChangedListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>


<class><specifier>public</specifier> class <name>SketchView</name> <super><extends>extends <name>View</name></extends> <implements>implements <name>OnTouchListener</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>TOUCH_TOLERANCE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STROKE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ERASER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_STROKE_SIZE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_ERASER_SIZE</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>strokeSize</name> <init>= <expr><name>DEFAULT_STROKE_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>strokeColor</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>eraserSize</name> <init>= <expr><name>DEFAULT_ERASER_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>backgroundColor</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Path</name></type> <name>m_Path</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type> <name>m_Paint</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mX</name></decl>, <decl><type ref="prev"/><name>mY</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>Paint</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>paths</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>Paint</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>undonePaths</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Bitmap</name></type> <name>bitmap</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mode</name> <init>= <expr><name>STROKE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>OnDrawChangedListener</name></type> <name>onDrawChangedListener</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>SketchView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mContext</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setFocusable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setFocusableInTouchMode</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBackgroundColor</name><argument_list>(<argument><expr><name>backgroundColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setOnTouchListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>m_Paint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setDither</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>strokeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setStrokeJoin</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Join</name><operator>.</operator><name>ROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setStrokeCap</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Cap</name><operator>.</operator><name>ROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name>strokeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_Path</name> <operator>=</operator> <operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>STROKE</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>ERASER</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt></block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getMode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>mode</name></name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Change canvass background and force redraw
     *
     * @param bitmap saved sketch
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setBackgroundBitmap</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>mActivity</name></decl></parameter>, <parameter><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>bitmap</name><operator>.</operator><name>isMutable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name><operator>.</operator><name>Config</name></name></type> <name>bitmapConfig</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getConfig</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// set default bitmap config if none</comment>
            <if>if <condition>(<expr><name>bitmapConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>bitmapConfig</name> <operator>=</operator> <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>ARGB_8888</name></name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name><name>bitmap</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>bitmapConfig</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
<comment type="line">//		this.bitmap = getScaledBitmap(mActivity, bitmap);</comment>
<comment type="line">//		mCanvas = new Canvas(bitmap);</comment>
    }</block></function>


<comment type="line">//	private Bitmap getScaledBitmap(Activity mActivity, Bitmap bitmap) {</comment>
<comment type="line">//		DisplayMetrics display = new DisplayMetrics();</comment>
<comment type="line">//		mActivity.getWindowManager().getDefaultDisplay().getMetrics(display);</comment>
<comment type="line">//		int screenWidth = display.widthPixels;</comment>
<comment type="line">//		int screenHeight = display.heightPixels;</comment>
<comment type="line">//		float scale = bitmap.getWidth() / screenWidth &gt; bitmap.getHeight() / screenHeight ? bitmap.getWidth() / </comment>
<comment type="line">// screenWidth : bitmap.getHeight() / screenHeight;</comment>
<comment type="line">//		int scaledWidth = (int) (bitmap.getWidth() / scale);</comment>
<comment type="line">//		int scaledHeight = (int) (bitmap.getHeight() / scale);</comment>
<comment type="line">//		return Bitmap.createScaledBitmap(bitmap, scaledWidth, scaledHeight, true);</comment>
<comment type="line">//	}</comment>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>width</name> <operator>=</operator> <call><name><name>View</name><operator>.</operator><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>View</name><operator>.</operator><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>onTouch</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>:</case>
                <expr_stmt><expr><call><name>touch_start</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr>:</case>
                <expr_stmt><expr><call><name>touch_move</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr>:</case>
                <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></switch>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bitmap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawBitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>Paint</name></argument>&gt;</argument_list></name></type> <name>p</name> <range>: <expr><name>paths</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>onDrawChangedListener</name><operator>.</operator><name>onDrawChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>touch_start</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Clearing undone list</comment>
        <expr_stmt><expr><call><name><name>undonePaths</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>ERASER</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>backgroundColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name>eraserSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>strokeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m_Paint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name>strokeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Avoids that a sketch with just erasures is saved</comment>
        <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>paths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>==</operator> <name>ERASER</name> <operator>&amp;&amp;</operator> <name>bitmap</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>m_Path</name><operator>=</operator><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>paths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>m_Path</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Paint</name><argument_list>(<argument><expr><name>m_Paint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>m_Path</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_Path</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><operator>++</operator><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// for draw a one touch path</comment>
        <expr_stmt><expr><name>mX</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mY</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>touch_move</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>m_Path</name><operator>.</operator><name>quadTo</name></name><argument_list>(<argument><expr><name>mX</name></expr></argument>, <argument><expr><name>mY</name></expr></argument>, <argument><expr><operator>(</operator><name>x</name> <operator>+</operator> <name>mX</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>mY</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mX</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mY</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Returns a new bitmap associated with a drawn canvas
     *
     * @return background bitmap with a paths drawn on it
     */</comment>
    <function><specifier>public</specifier> <type><name>Bitmap</name></type> <name>getBitmap</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>paths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

        <if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name><name>Bitmap</name><operator>.</operator><name>createBitmap</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>ARGB_8888</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>eraseColor</name></name><argument_list>(<argument><expr><name>backgroundColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Canvas</name></type> <name>canvas</name> <init>= <expr><operator>new</operator> <call><name>Canvas</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>Paint</name></argument>&gt;</argument_list></name></type> <name>p</name> <range>: <expr><name>paths</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>bitmap</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>undo</name><parameter_list>()</parameter_list> <block>{
         <if>if <condition>(<expr><operator>!</operator><call><name><name>paths</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>undonePaths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>paths</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>paths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>redo</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>undonePaths</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>paths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>undonePaths</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>undonePaths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getUndoneCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>undonePaths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>Paint</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPaths</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>paths</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setPaths</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>Paint</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>paths</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paths</name></name> <operator>=</operator> <name>paths</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>Paint</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getUndonePaths</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>undonePaths</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setUndonePaths</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>Paint</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>undonePaths</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>undonePaths</name></name> <operator>=</operator> <name>undonePaths</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getStrokeSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>strokeSize</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eraserOrStroke</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>eraserOrStroke</name></expr>)</condition> <block>{
            <case>case <expr><name>STROKE</name></expr>:</case>
                <expr_stmt><expr><name>strokeSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>ERASER</name></expr>:</case>
                <expr_stmt><expr><name>eraserSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
                <break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <name>eraserOrStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></switch>

    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getStrokeColor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>strokeColor</name></name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setStrokeColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>strokeColor</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>erase</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>paths</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>undonePaths</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnDrawChangedListener</name><parameter_list>(<parameter><decl><type><name>OnDrawChangedListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onDrawChangedListener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\AbsListViewScrollDetector.java" hash="854c2d54942e3ea9e97de4f0bd2cbe689a810ae8"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AbsListView</name></name>;</import>


<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbsListViewScrollDetector</name> <super><implements>implements <name><name>AbsListView</name><operator>.</operator><name>OnScrollListener</name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mLastScrollY</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mPreviousFirstVisibleItem</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AbsListView</name></type> <name>mListView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mScrollThreshold</name></decl>;</decl_stmt>


    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onScrollUp</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onScrollDown</name><parameter_list>()</parameter_list>;</function_decl>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onScrollStateChanged</name><parameter_list>(<parameter><decl><type><name>AbsListView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scrollState</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onScroll</name><parameter_list>(<parameter><decl><type><name>AbsListView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstVisibleItem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>visibleItemCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>totalItemCount</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isSameRow</name><argument_list>(<argument><expr><name>firstVisibleItem</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>newScrollY</name> <init>= <expr><call><name>getTopItemScrollY</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isSignificantDelta</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>mLastScrollY</name> <operator>-</operator> <name>newScrollY</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>mScrollThreshold</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>isSignificantDelta</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>mLastScrollY</name> <operator>&gt;</operator> <name>newScrollY</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>onScrollUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>onScrollDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><name>mLastScrollY</name> <operator>=</operator> <name>newScrollY</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>firstVisibleItem</name> <operator>&gt;</operator> <name>mPreviousFirstVisibleItem</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>onScrollUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>onScrollDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>mLastScrollY</name> <operator>=</operator> <call><name>getTopItemScrollY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mPreviousFirstVisibleItem</name> <operator>=</operator> <name>firstVisibleItem</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setScrollThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scrollThreshold</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mScrollThreshold</name> <operator>=</operator> <name>scrollThreshold</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setListView</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AbsListView</name></type> <name>listView</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mListView</name> <operator>=</operator> <name>listView</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isSameRow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>firstVisibleItem</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>firstVisibleItem</name> <operator>==</operator> <name>mPreviousFirstVisibleItem</name></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>int</name></type> <name>getTopItemScrollY</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mListView</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>mListView</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>View</name></type> <name>topChild</name> <init>= <expr><call><name><name>mListView</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>topChild</name><operator>.</operator><name>getTop</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\OnFabItemClickedListener.java" hash="7af777304b549942c5e74b443b473a0df4e50191"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>

<interface><specifier>public</specifier> interface <name>OnFabItemClickedListener</name> <block>{

    <function_decl><type><name>void</name></type> <name>onFabItemClick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\OnGeoUtilResultListener.java" hash="175cd2ad7b101a408abe48c91ad15f7a1c64a20d"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>Location</name></name>;</import>


<interface><specifier>public</specifier> interface <name>OnGeoUtilResultListener</name> <block>{

	<function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onAddressResolved</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onCoordinatesResolved</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onLocationRetrieved</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onLocationUnavailable</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\OnNoteSaved.java" hash="b3ad114f65ea4764c24fab7b2774e5e216883f58"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>


<interface><specifier>public</specifier> interface <name>OnNoteSaved</name> <block>{

    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onNoteSaved</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>noteSaved</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\OnPermissionRequestedListener.java" hash="bf2c35c1c6c0d124da2ad278ff41e7adf148d8bd"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>

<interface><specifier>public</specifier> interface <name>OnPermissionRequestedListener</name> <block>{

    <function_decl><type><name>void</name></type> <name>onPermissionGranted</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\OnReminderPickedListener.java" hash="77d76003a2236f5220ba12322ae3fc78d853bbf9"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>


<interface><specifier>public</specifier> interface <name>OnReminderPickedListener</name> <block>{

    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onReminderPicked</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onRecurrenceReminderPicked</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\listeners\OnViewTouchedListener.java" hash="613c285f67033ac311b9e39f9a1693b3cb12a2c9"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>


<interface><specifier>public</specifier> interface <name>OnViewTouchedListener</name> <block>{

    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onViewTouchOccurred</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>ev</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\holders\ImageAndTextItem.java" hash="8840860855456ac748b92eaa80a87e0974c177ab"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>holders</name></name>;</package>

<class><specifier>public</specifier> class <name>ImageAndTextItem</name> <block>{

    <constructor><specifier>public</specifier> <name>ImageAndTextItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>image</name></name> <operator>=</operator> <name>image</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
    }</block></constructor>


    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>image</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>text</name></decl>;</decl_stmt>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getImage</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>image</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setImage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>image</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>image</name></name> <operator>=</operator> <name>image</name></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>String</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>text</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\holders\NoteViewHolder.java" hash="54b5cee791333c20e37e90b7e5168b8e876908d9"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>holders</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>neopixl</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>components</name><operator>.</operator><name>textview</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>SquareImageView</name></name>;</import>


<class><specifier>public</specifier> class <name>NoteViewHolder</name> <block>{

	<constructor><specifier>public</specifier> <name>NoteViewHolder</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>View</name></type> <name>root</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>card_layout</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>View</name></type> <name>cardLayout</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>category_marker</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>View</name></type> <name>categoryMarker</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_title</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>TextView</name></type> <name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_content</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>TextView</name></type> <name>content</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>note_date</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>TextView</name></type> <name>date</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>archivedIcon</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>ImageView</name></type> <name>archiveIcon</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>locationIcon</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>ImageView</name></type> <name>locationIcon</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>alarmIcon</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>ImageView</name></type> <name>alarmIcon</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lockedIcon</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>ImageView</name></type> <name>lockedIcon</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachmentIcon</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>ImageView</name></type> <name>attachmentIcon</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachmentThumbnail</name></name></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>SquareImageView</name></type> <name>attachmentThumbnail</name></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\adapters\ImageAndTextAdapter.java" hash="d411ad8b34171c266bcbb5becd099d1ff2e0a3f3"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>neopixl</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>components</name><operator>.</operator><name>textview</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>holders</name><operator>.</operator><name>ImageAndTextItem</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fonts</name></name>;</import>


<class><specifier>public</specifier> class <name>ImageAndTextAdapter</name> <super><extends>extends <name>BaseAdapter</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ImageAndTextItem</name></argument>&gt;</argument_list></name></type> <name>items</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>ImageAndTextAdapter</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>mActivity</name></decl></parameter>,
                               <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ImageAndTextItem</name></argument>&gt;</argument_list></name></type> <name>items</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mActivity</name></name> <operator>=</operator> <name>mActivity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>inflater</name> <operator>=</operator> <operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>mActivity</name>
                <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>items</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Object</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>position</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ImageAndTextViewHolder</name></type> <name>holder</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>convertView</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>image_and_text_item</name></name></expr></argument>,
                    <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Overrides font sizes with the one selected from user</comment>
            <expr_stmt><expr><call><name><name>Fonts</name><operator>.</operator><name>overrideTextSize</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(
                            <argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>new</operator> <call><name>ImageAndTextViewHolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>image</name></name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>text</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>(</operator><name>ImageAndTextViewHolder</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Set the results into TextViews</comment>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>text</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set the results into ImageView checking if an icon is present before</comment>
        <if>if <condition>(<expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getImage</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>image</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getImage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>convertView</name></expr>;</return>
    }</block></function>

}</block></class>


<comment type="block" format="javadoc">/**
 * Holder object
 *
 * @author fede
 */</comment>
<class>class <name>ImageAndTextViewHolder</name> <block>{

    <decl_stmt><decl><type><name>ImageView</name></type> <name>image</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TextView</name></type> <name>text</name></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\adapters\AttachmentAdapter.java" hash="dde6965296ead39f48aceba0f4e8ae3e0b9ce917"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>Glide</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>date</name><operator>.</operator><name>DateHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>ExpandableHeightGridView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>SquareImageView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>BitmapHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fonts</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>DateUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>AttachmentAdapter</name> <super><extends>extends <name>BaseAdapter</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachmentsList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>AttachmentAdapter</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>mActivity</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachmentsList</name></decl></parameter>, <parameter><decl><type><name>ExpandableHeightGridView</name></type> <name>mGridView</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mActivity</name></name> <operator>=</operator> <name>mActivity</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>attachmentsList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>attachmentsList</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>attachmentsList</name></name> <operator>=</operator> <name>attachmentsList</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inflater</name></name> <operator>=</operator> <operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>mActivity</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>attachmentsList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>Attachment</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>attachmentsList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"GridView called for position "</literal> <operator>+</operator> <name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Attachment</name></type> <name>mAttachment</name> <init>= <expr><call><name><name>attachmentsList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>AttachmentHolder</name></type> <name>holder</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>convertView</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>gridview_item</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Overrides font sizes with the one selected from user</comment>
            <expr_stmt><expr><call><name><name>Fonts</name><operator>.</operator><name>overrideTextSize</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, 
                    <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>new</operator> <call><name>AttachmentHolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>image</name></name> <operator>=</operator> <operator>(</operator><name>SquareImageView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gridview_item_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>text</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gridview_item_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>(</operator><name>AttachmentHolder</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Draw name in case the type is an audio recording</comment>
        <if>if <condition>(<expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>text</name></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>mAttachment</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <comment type="line">// Recording duration</comment>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>DateHelper</name><operator>.</operator><name>formatShortTime</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// Recording date otherwise</comment>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>DateUtils</name><operator>.</operator><name>getLocalizedDateTime</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><call><name><name>mAttachment</name>
								<operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLastPathSegment</name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>,
						<argument><expr><name><name>Constants</name><operator>.</operator><name>DATE_FORMAT_SORTABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>mActivity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>attachment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>text</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>text</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>text</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Draw name in case the type is an audio recording (or file in the future)</comment>
        <if>if <condition>(<expr><call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mAttachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_FILES</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>text</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>text</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Starts the AsyncTask to draw bitmap into ImageView</comment>
        <decl_stmt><decl><type><name>Uri</name></type> <name>thumbnailUri</name> <init>= <expr><call><name><name>BitmapHelper</name><operator>.</operator><name>getThumbnailUri</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Glide</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><name>thumbnailUri</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>centerCrop</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>crossFade</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>into</name><argument_list>(<argument><expr><name><name>holder</name><operator>.</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>convertView</name></expr>;</return>
    }</block></function>


	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>getAttachmentsList</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>attachmentsList</name></name></expr>;</return>
	}</block></function>




    <class><specifier>public</specifier> class <name>AttachmentHolder</name> <block>{

        <decl_stmt><decl><type><name>TextView</name></type> <name>text</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SquareImageView</name></type> <name>image</name></decl>;</decl_stmt>
    }</block></class>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\adapters\NavDrawerAdapter.java" hash="35746d40edc567c0dc7b96790cd4eb5a5cda0925"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>neopixl</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>components</name><operator>.</operator><name>textview</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>NavigationItem</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fonts</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>NavDrawerAdapter</name> <super><extends>extends <name>BaseAdapter</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NavigationItem</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>NavDrawerAdapter</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>mActivity</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NavigationItem</name></argument>&gt;</argument_list></name></type> <name>items</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mActivity</name></name> <operator>=</operator> <name>mActivity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>inflater</name> <operator>=</operator> <operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>mActivity</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>items</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Object</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>position</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>NoteDrawerAdapterViewHolder</name></type> <name>holder</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>convertView</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>drawer_list_item</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Overrides font sizes with the one selected from user</comment>
            <expr_stmt><expr><call><name><name>Fonts</name><operator>.</operator><name>overrideTextSize</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>,
                    <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>new</operator> <call><name>NoteDrawerAdapterViewHolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>imgIcon</name></name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>txtTitle</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>(</operator><name>NoteDrawerAdapterViewHolder</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Set the results into TextViews	</comment>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isSelected</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getIconSelected</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimaryDark</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>getDrawable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mutate</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColorFilter</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>SRC_ATOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getIcon</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Typeface</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>drawer_text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>convertView</name></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Getting actual navigation selection</comment>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>navigationListCodes</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list_codes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Managing temporary navigation indicator when coming from a widget</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>navigationTmp</name> <init>= <expr><ternary><condition><expr><call><name><name>MainActivity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>MainActivity</name><operator>)</operator> <name>mActivity</name><operator>)</operator>
                <operator>.</operator><call><name>getNavigationTmp</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>navigation</name> <init>= <expr><ternary><condition><expr><name>navigationTmp</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>navigationTmp</name></expr>
                </then><else>: <expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Activity</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>, <argument><expr><name><name>navigationListCodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="line">// Finding selected item from standard navigation items or tags</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>navigationListCodes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>navigationLocalized</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list</name></name></expr></argument>)</argument_list></call><index>[<expr><name>index</name></expr>]</index></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>navigationLocalized</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>


<comment type="block" format="javadoc">/**
 * Holder object
 *
 * @author fede
 */</comment>
<class>class <name>NoteDrawerAdapterViewHolder</name> <block>{

    <decl_stmt><decl><type><name>ImageView</name></type> <name>imgIcon</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TextView</name></type> <name>txtTitle</name></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\adapters\PlacesAutoCompleteAdapter.java" hash="8f7ce8907cd534ca9098c6f1c0e565a272d19ac4"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Filter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Filterable</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>GeocodeHelper</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>PlacesAutoCompleteAdapter</name> <super><extends>extends <name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Filterable</name></implements></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MIN_CHARS</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>resultList</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>PlacesAutoCompleteAdapter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textViewResourceId</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>textViewResourceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>resultList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>String</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>resultList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>Filter</name></type> <name>getFilter</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
			<function><annotation>@<name>Override</name></annotation>
			<specifier>protected</specifier> <type><name>FilterResults</name></type> <name>performFiltering</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>FilterResults</name></type> <name>filterResults</name> <init>= <expr><operator>new</operator> <call><name>FilterResults</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>constraint</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>constraint</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MIN_CHARS</name></expr>)</condition><then> <block>{
					<comment type="line">// Retrieve the autocomplete results.</comment>
					<expr_stmt><expr><name>resultList</name> <operator>=</operator> <call><name><name>GeocodeHelper</name><operator>.</operator><name>autocomplete</name></name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line">// Assign the data to the FilterResults</comment>
					<expr_stmt><expr><name><name>filterResults</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>resultList</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>filterResults</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name><name>resultList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<return>return <expr><name>filterResults</name></expr>;</return>
			}</block></function>


			<function><annotation>@<name>Override</name></annotation>
			<specifier>protected</specifier> <type><name>void</name></type> <name>publishResults</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>constraint</name></decl></parameter>, <parameter><decl><type><name>FilterResults</name></type> <name>results</name></decl></parameter>)</parameter_list> <block>{
				<if>if <condition>(<expr><name>results</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>results</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name>notifyDataSetInvalidated</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></function>
		}</block></class></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\adapters\NavDrawerCategoryAdapter.java" hash="f6d0f7c1dbdd35af7a0396f7140a7401048cf394"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>ColorFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>LightingColorFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>neopixl</name><operator>.</operator><name>pixlui</name><operator>.</operator><name>components</name><operator>.</operator><name>textview</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fonts</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>NavDrawerCategoryAdapter</name> <super><extends>extends <name>BaseAdapter</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>layout</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categories</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>navigationTmp</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>NavDrawerCategoryAdapter</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>mActivity</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categories</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name>categories</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>NavDrawerCategoryAdapter</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>mActivity</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categories</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>navigationTmp</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mActivity</name></name> <operator>=</operator> <name>mActivity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>layout</name></name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>drawer_list_item</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>categories</name></name> <operator>=</operator> <name>categories</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>navigationTmp</name></name> <operator>=</operator> <name>navigationTmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>inflater</name> <operator>=</operator> <operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>mActivity</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>categories</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Object</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>position</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Finds elements</comment>
        <decl_stmt><decl><type><name>Category</name></type> <name>category</name> <init>= <expr><call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>NoteDrawerCategoryAdapterViewHolder</name></type> <name>holder</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>convertView</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Overrides font sizes with the one selected from user</comment>
            <expr_stmt><expr><call><name><name>Fonts</name><operator>.</operator><name>overrideTextSize</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>,
                    <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>new</operator> <call><name>NoteDrawerCategoryAdapterViewHolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>imgIcon</name></name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>txtTitle</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>count</name></name> <operator>=</operator> <operator>(</operator><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>(</operator><name>NoteDrawerCategoryAdapterViewHolder</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Set the results into TextViews	</comment>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isSelected</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Typeface</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtTitle</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>drawer_text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Set the results into ImageView checking if an icon is present before</comment>
        <if>if <condition>(<expr><call><name><name>category</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>category</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Drawable</name></type> <name>img</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_folder_special_black_24dp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ColorFilter</name></type> <name>cf</name> <init>= <expr><operator>new</operator> <call><name>LightingColorFilter</name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Before API 16 the object is mutable yet</comment>
            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>img</name><operator>.</operator><name>mutate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColorFilter</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>img</name><operator>.</operator><name>setColorFilter</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><name>padding</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Sets category count if set in preferences</comment>
        <if>if <condition>(<expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBoolean</name>
                <argument_list>(<argument><expr><literal type="string">"settings_show_category_count"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>count</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>count</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>convertView</name></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Getting actual navigation selection</comment>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>navigationListCodes</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(
                <argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list_codes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Managing temporary navigation indicator when coming from a widget</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>navigationTmpLocal</name> <init>= <expr><ternary><condition><expr><call><name><name>MainActivity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>MainActivity</name><operator>)</operator>
                <name>mActivity</name><operator>)</operator><operator>.</operator><call><name>getNavigationTmp</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>navigationTmpLocal</name> <operator>=</operator> <ternary><condition><expr><name><name>this</name><operator>.</operator><name>navigationTmp</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>this</name><operator>.</operator><name>navigationTmp</name></name></expr> </then><else>: <expr><name>navigationTmpLocal</name></expr></else></ternary></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>navigation</name> <init>= <expr><ternary><condition><expr><name>navigationTmp</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>navigationTmpLocal</name></expr>
                </then><else>: <expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_NAVIGATION</name></name></expr></argument>,
                        <argument><expr><name><name>navigationListCodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>navigation</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>


<comment type="block" format="javadoc">/**
 * Holder object
 *
 * @author fede
 */</comment>
<class>class <name>NoteDrawerCategoryAdapterViewHolder</name> <block>{

    <decl_stmt><decl><type><name>ImageView</name></type> <name>imgIcon</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TextView</name></type> <name>txtTitle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name></type> <name>count</name></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\intro\IntroFragment.java" hash="74f2e4af0bc724f37c37ac2f4944af60e0cfe9e4"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>intro</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>IntroFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_background</name></name></expr></argument>)</argument_list></annotation>
	<type><name>View</name></type> <name>background</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_title</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>title</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_image</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ImageView</name></type> <name>image</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_image_small</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ImageView</name></type> <name>image_small</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_description</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>description</name></decl>;</decl_stmt>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>View</name></type> <name>v</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>intro_slide</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>v</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\intro\IntroActivity.java" hash="da5c8da6e31086a933093b9bcc14bcd6ac990d9f"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>intro</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>paolorotolo</name><operator>.</operator><name>appintro</name><operator>.</operator><name>AppIntro2</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>IntroActivity</name> <super><extends>extends <name>AppIntro2</name></extends></super> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>addSlide</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IntroSlide1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addSlide</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IntroSlide2</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addSlide</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IntroSlide3</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addSlide</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IntroSlide4</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addSlide</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IntroSlide5</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addSlide</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IntroSlide6</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onDonePressed</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_TOUR_COMPLETE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>mustRun</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>!</operator><call><name><name>OmniNotes</name><operator>.</operator><name>isDebugBuild</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>,
				<argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_TOUR_COMPLETE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// Does nothing, you HAVE TO SEE THE INTRO!</comment>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\intro\IntroSlide1.java" hash="b2bb58523bff40d3f3dbaff96ee17d2945e90885"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>intro</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>IntroSlide1</name> <super><extends>extends <name>IntroFragment</name></extends></super> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>background</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#222222"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_listactivity_intro_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>image</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>image_small</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>logo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>image_small</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_listactivity_final_detail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\intro\IntroSlide2.java" hash="bcaaf4f77065fe786a6722a60f8859bb3c547b31"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>intro</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>IntroSlide2</name> <super><extends>extends <name>IntroFragment</name></extends></super> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>background</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#f44336"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_listactivity_home_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>image</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>slide2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_listactivity_home_detail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\intro\IntroSlide3.java" hash="f55ac428da1c74594302f4901a1bfa0d6a1241ea"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>intro</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>IntroSlide3</name> <super><extends>extends <name>IntroFragment</name></extends></super> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>background</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#8bc34a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>categories</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>image</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>slide3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_listactivity_tag_detail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\intro\IntroSlide4.java" hash="633faae975a9590017bdecab8e615c2d00f6437a"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>intro</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>IntroSlide4</name> <super><extends>extends <name>IntroFragment</name></extends></super> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>background</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#2196f3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_detailactivity_attachment_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>image</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>slide4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_detailactivity_attachment_detail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\intro\IntroSlide5.java" hash="efc9e498f833662b01bfbadd7ac49f1268bee33c"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>intro</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>IntroSlide5</name> <super><extends>extends <name>IntroFragment</name></extends></super> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>background</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#9c27b0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_detailactivity_links_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>image</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>slide5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_detailactivity_links_detail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\helpers\AttachmentsHelper.java" hash="776033ad24a40055393d2203312f4de70c2a517a"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name></name>;</package>


<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>


<class><specifier>public</specifier> class <name>AttachmentsHelper</name> <block>{

	<comment type="block" format="javadoc">/**
	 * Retrieves attachment file size
	 *
	 * @param attachment Attachment to evaluate
	 * @return Human readable file size string
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getSize</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>long</name></type> <name>sizeInKb</name> <init>= <expr><call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>sizeInKb</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><call><name><name>FileUtils</name><operator>.</operator><name>byteCountToDisplaySize</name></name><argument_list>(<argument><expr><name>sizeInKb</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\helpers\AppVersionHelper.java" hash="7c0b196bda089268356bb2ba4c5ae5288f18901e"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Class used to manage application version code and name
 */</comment>
<class><specifier>public</specifier> class <name>AppVersionHelper</name> <block>{

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isAppUpdated</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>currentAppVersion</name> <init>= <expr><call><name>getCurrentAppVersion</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>savedAppVersion</name> <init>= <expr><call><name>getAppVersionFromPreferences</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>currentAppVersion</name> <operator>&gt;</operator> <name>savedAppVersion</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getAppVersionFromPreferences</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name></expr></argument></throws> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>,
                    <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_CURRENT_APP_VERSION</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name>getCurrentAppVersion</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateAppVersionInPreferences</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>,
                <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_CURRENT_APP_VERSION</name></name></expr></argument>,
                <argument><expr><call><name>getCurrentAppVersion</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getCurrentAppVersion</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>versionCode</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getCurrentAppVersionName</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>PackageInfo</name></type> <name>pInfo</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>pInfo</name><operator>.</operator><name>versionName</name></name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\models\adapters\NoteAdapter.java" hash="749eda39a38e7e72b715d3ebeac47446a46e4228"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>SparseBooleanArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>Glide</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nhaarman</name><operator>.</operator><name>listviewanimations</name><operator>.</operator><name>util</name><operator>.</operator><name>Insertable</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>TextWorkerTask</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>holders</name><operator>.</operator><name>NoteViewHolder</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>RejectedExecutionException</name></name>;</import>


<class><specifier>public</specifier> class <name>NoteAdapter</name> <super><extends>extends <name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Insertable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>navigation</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SparseBooleanArray</name></type> <name>selectedItems</name> <init>= <expr><operator>new</operator> <call><name>SparseBooleanArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>expandedView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>layout</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>closestNoteReminder</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TIMESTAMP_UNIX_EPOCH_FAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>closestNotePosition</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>NoteAdapter</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>note_layout_expanded</name></name></expr></argument>, <argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mActivity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notes</name></name> <operator>=</operator> <name>notes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>layout</name></name> <operator>=</operator> <name>layout</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>expandedView</name> <operator>=</operator> <name>layout</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>note_layout_expanded</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>inflater</name> <operator>=</operator> <operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>mActivity</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>navigation</name> <operator>=</operator> <call><name><name>Navigation</name><operator>.</operator><name>getNavigation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manageCloserNote</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NoteViewHolder</name></type> <name>holder</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>convertView</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <call><name>buildHolder</name><argument_list>(<argument><expr><name>convertView</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>(</operator><name>NoteViewHolder</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>initText</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initIcons</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initDates</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initThumbnail</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manageSelectionColor</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>convertView</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Highlighted if is part of multiselection of notes. Remember to search for child with card ui
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>manageSelectionColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>NoteViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>selectedItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>cardLayout</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(
                    <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>list_bg_selected</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>restoreDrawable</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name><name>holder</name><operator>.</operator><name>cardLayout</name></name></expr></argument>, <argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>initThumbnail</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>NoteViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Attachment thumbnail</comment>
        <if>if <condition>(<expr><name>expandedView</name></expr>)</condition><then> <block>{
            <comment type="line">// If note is locked or without attachments nothing is shown</comment>
            <if>if <condition>(<expr><operator>(</operator><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>,
                    <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><literal type="string">"settings_password_access"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>||</operator> <call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>attachmentThumbnail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <comment type="line">// Otherwise...</comment>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>attachmentThumbnail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Attachment</name></type> <name>mAttachment</name> <init>= <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Uri</name></type> <name>thumbnailUri</name> <init>= <expr><call><name><name>BitmapHelper</name><operator>.</operator><name>getThumbnailUri</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Glide</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><name>thumbnailUri</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>centerCrop</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>crossFade</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>into</name><argument_list>(<argument><expr><name><name>holder</name><operator>.</operator><name>attachmentThumbnail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotes</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>notes</name></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>initDates</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>NoteViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>dateText</name> <init>= <expr><call><name><name>TextHelper</name><operator>.</operator><name>getDateText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>date</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>dateText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>initIcons</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>NoteViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Evaluates the archived state...</comment>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>archiveIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>isArchived</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ...the location</comment>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>locationIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>note</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>:
                <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ...the presence of an alarm</comment>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>alarmIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ...the locked with password state</comment>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>lockedIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ...the attachment icon for contracted view</comment>
        <if>if <condition>(<expr><operator>!</operator><name>expandedView</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>attachmentIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>initText</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>NoteViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TextWorkerTask</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>TextWorkerTask</name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>holder</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>holder</name><operator>.</operator><name>content</name></name></expr></argument>, <argument><expr><name>expandedView</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>executeOnExecutor</name></name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name><name>Spanned</name><index>[]</index></name></type> <name>titleAndContent</name> <init>= <expr><call><name><name>TextHelper</name><operator>.</operator><name>parseTitleAndContent</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>content</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>titleAndContent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>content</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>content</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>content</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RejectedExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Oversized tasks pool to load texts!"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Saves the position of the closest note to align list scrolling with it on start
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>manageCloserNote</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>navigation</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>reminder</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAlarm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>now</name> <operator>&lt;</operator> <name>reminder</name> <operator>&amp;&amp;</operator> <name>reminder</name> <operator>&lt;</operator> <name>closestNoteReminder</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>closestNotePosition</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>closestNoteReminder</name> <operator>=</operator> <name>reminder</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></then></if>

    }</block></function>


    <comment type="block" format="javadoc">/**
     * Returns the note with the nearest reminder in the future
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getClosestNotePosition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>closestNotePosition</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>SparseBooleanArray</name></type> <name>getSelectedItems</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>selectedItems</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>addSelectedItem</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>selectedItem</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>selectedItems</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>selectedItem</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>removeSelectedItem</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>selectedItem</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>selectedItems</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>selectedItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>clearSelectedItems</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>selectedItems</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>restoreDrawable</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>restoreDrawable</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>restoreDrawable</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>NoteViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>paddingBottom</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>paddingLeft</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>paddingRight</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>paddingTop</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getPaddingTop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><name>paddingLeft</name></expr></argument>, <argument><expr><name>paddingTop</name></expr></argument>, <argument><expr><name>paddingRight</name></expr></argument>, <argument><expr><name>paddingBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colorNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>void</name></type> <name>colorNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>colorNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Color of category marker if note is categorized a function is active in preferences
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>colorNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>NoteViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>colorsPref</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"settings_colors_app"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_COLORS_APP_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Checking preference</comment>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>colorsPref</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"disabled"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

            <comment type="line">// Resetting transparent color to the view</comment>
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#00000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If category is set the color will be applied on the appropriate target</comment>
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>colorsPref</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"complete"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>colorsPref</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><name>holder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>categoryMarker</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>category_marker</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setBackgroundColor</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>category_marker</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setBackgroundColor</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Replaces notes
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>notes</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>notes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>notes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><operator>(</operator><name>Note</name><operator>)</operator> <name>o</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><name>notes</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>


    <function><specifier>private</specifier> <type><name>NoteViewHolder</name></type> <name>buildHolder</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Overrides font sizes with the one selected from user</comment>
        <expr_stmt><expr><call><name><name>Fonts</name><operator>.</operator><name>overrideTextSize</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>,
                <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>NoteViewHolder</name><argument_list>(<argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>



</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\intro\IntroSlide6.java" hash="bb033e7caebce40168d1fcd364403a28d7a19ed9"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>intro</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>IntroSlide6</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_background</name></name></expr></argument>)</argument_list></annotation>
	<type><name>View</name></type> <name>background</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_title</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>title</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_image_community_googleplus</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ImageView</name></type> <name>image_gplus</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_image_community_facebook</name></name></expr></argument>)</argument_list></annotation>
	<type><name>ImageView</name></type> <name>image_facebook</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>intro_description</name></name></expr></argument>)</argument_list></annotation>
	<type><name>TextView</name></type> <name>description</name></decl>;</decl_stmt>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>View</name></type> <name>v</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>intro_slide_communities</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>v</name></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>background</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#222222"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_listactivity_final_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>image_gplus</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>GOOGLE_PLUS_COMMUNITY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>image_facebook</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>FACEBOOK_COMMUNITY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tour_community</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\helpers\PermissionsHelper.java" hash="5e6640a9933ea5268dd7e69ad6b1537169dd15c7"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>Snackbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>tbruyelle</name><operator>.</operator><name>rxpermissions</name><operator>.</operator><name>RxPermissions</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnPermissionRequestedListener</name></name>;</import>


<class><specifier>public</specifier> class <name>PermissionsHelper</name> <block>{


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>requestPermission</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>permission</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rationaleDescription</name></decl></parameter>, <parameter><decl><type><name>View</name></type>
			<name>messageView</name></decl></parameter>, <parameter><decl><type><name>OnPermissionRequestedListener</name></type> <name>onPermissionRequestedListener</name></decl></parameter>)</parameter_list> <block>{

		<if>if <condition>(<expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{

			<if>if <condition>(<expr><call><name><name>ActivityCompat</name><operator>.</operator><name>shouldShowRequestPermissionRationale</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>Snackbar</name><operator>.</operator><name>make</name></name><argument_list>(<argument><expr><name>messageView</name></expr></argument>, <argument><expr><name>rationaleDescription</name></expr></argument>, <argument><expr><name><name>Snackbar</name><operator>.</operator><name>LENGTH_INDEFINITE</name></name></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>setAction</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt; <block>{
							<expr_stmt><expr><call><name>requestPermissionExecute</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><name>onPermissionRequestedListener</name></expr></argument>, <argument><expr><name>messageView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></lambda></expr></argument>)</argument_list></call>
						<operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name>requestPermissionExecute</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><name>onPermissionRequestedListener</name></expr></argument>, <argument><expr><name>messageView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>onPermissionRequestedListener</name><operator>.</operator><name>onPermissionGranted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>


	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>requestPermissionExecute</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>permission</name></decl></parameter>, <parameter><decl><type><name>OnPermissionRequestedListener</name></type>
			<name>onPermissionRequestedListener</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>messageView</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>RxPermissions</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>request</name><argument_list>(<argument><expr><name>permission</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>granted</name></decl></parameter></parameter_list> -&gt; <block>{
					<if>if <condition>(<expr><name>granted</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>onPermissionRequestedListener</name><operator>.</operator><name>onPermissionGranted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>permission_not_granted</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>permission</name></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>Snackbar</name><operator>.</operator><name>make</name></name><argument_list>(<argument><expr><name>messageView</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Snackbar</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\helpers\LanguageHelper.java" hash="22715d3b1a526a46a1c0f91642e6e1bf8029f034"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import static <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name>;</import>


<class><specifier>public</specifier> class <name>LanguageHelper</name> <block>{

	<comment type="block" format="javadoc">/**
	 * Updates default language with forced one
	 */</comment>
	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"ApplySharedPref"</literal></expr></argument>)</argument_list></annotation>
	<specifier>public</specifier> <specifier>static</specifier> <type><name>Context</name></type> <name>updateLanguage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>lang</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name>MODE_MULTI_PROCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>language</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_LANG</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Locale</name></type> <name>locale</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>lang</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>locale</name> <operator>=</operator> <call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_LANG</name></name></expr></argument>, <argument><expr><call><name><name>locale</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><name>lang</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>locale</name> <operator>=</operator> <call><name>getLocale</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_LANG</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>locale</name> <operator>=</operator> <call><name>getLocale</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>

		<return>return <expr><call><name>setLocale</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>Context</name></type> <name>setLocale</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Configuration</name></type> <name>configuration</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR1</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>setLocale</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>createConfigurationContext</name></name><argument_list>(<argument><expr><name>configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></then> <else>else <block>{
			<expr_stmt><expr><name><name>configuration</name><operator>.</operator><name>locale</name></name> <operator>=</operator> <name>locale</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateConfiguration</name><argument_list>(<argument><expr><name>configuration</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<return>return <expr><name>context</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Checks country AND region
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Locale</name></type> <name>getLocale</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>lang</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>lang</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<return>return <expr><operator>new</operator> <call><name>Locale</name><argument_list>(<argument><expr><call><name><name>lang</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><call><name><name>lang</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then> <else>else <block>{
			<return>return <expr><operator>new</operator> <call><name>Locale</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block></function>

	<function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR1</name></name></expr></argument>)</argument_list></annotation>
	<annotation>@<name>NonNull</name></annotation>
	<specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getLocalizedString</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>desiredLocale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resourceId</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>setLocale</name></name><argument_list>(<argument><expr><call><name>getLocale</name><argument_list>(<argument><expr><name>desiredLocale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Context</name></type> <name>localizedContext</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>createConfigurationContext</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>localizedContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>resourceId</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\factory\MediaStoreFactory.java" hash="eab2f89d2db02bab293dc4bfc27bb3da7fb9c56d"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>factory</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by Relf on 11/24/2015.
 */</comment>
<class><specifier>public</specifier> class <name>MediaStoreFactory</name> <block>{
    <function><specifier>public</specifier> <type><name>Uri</name></type> <name>createURI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list><block>{
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
            <case>case <expr><literal type="string">"image"</literal></expr>:</case>
                <return>return <expr><name><name>MediaStore</name><operator>.</operator><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>EXTERNAL_CONTENT_URI</name></name></expr>;</return>
            <case>case <expr><literal type="string">"video"</literal></expr>:</case>
                <return>return  <expr><name><name>MediaStore</name><operator>.</operator><name>Video</name><operator>.</operator><name>Media</name><operator>.</operator><name>EXTERNAL_CONTENT_URI</name></name></expr>;</return>
            <case>case <expr><literal type="string">"audio"</literal></expr>:</case>
                <return>return  <expr><name><name>MediaStore</name><operator>.</operator><name>Audio</name><operator>.</operator><name>Media</name><operator>.</operator><name>EXTERNAL_CONTENT_URI</name></name></expr>;</return>
        }</block></switch>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\extensions\PushBulletExtension.java" hash="a5b5f102cdc78f0b14f57e1c29e3441b489a996b"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>extensions</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>pushbullet</name><operator>.</operator><name>android</name><operator>.</operator><name>extension</name><operator>.</operator><name>MessagingExtension</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>PushbulletReplyEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>PushBulletExtension</name> <super><extends>extends <name>MessagingExtension</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"PushBulletExtension"</literal></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onMessageReceived</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>conversationIden</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Pushbullet MessagingExtension: onMessageReceived("</literal> <operator>+</operator> <name>conversationIden</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>message</name>
                <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PushbulletReplyEvent</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        MainActivity runningMainActivity = MainActivity.getInstance();</comment>
<comment type="line">//        if (runningMainActivity != null &amp;&amp; !runningMainActivity.isFinishing()) {</comment>
<comment type="line">//            runningMainActivity.onPushBulletReply(message);</comment>
<comment type="line">//        }</comment>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onConversationDismissed</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>conversationIden</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Pushbullet MessagingExtension: onConversationDismissed("</literal> <operator>+</operator> <name>conversationIden</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\exceptions\NotesLoadingException.java" hash="fbb74c4eb0051123fb01ea91ab41cbd8240c8ff2"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>exceptions</name></name>;</package>

<class><specifier>public</specifier> class <name>NotesLoadingException</name> <super><extends>extends <name>RuntimeException</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1288015037660807104L</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>NotesLoadingException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\helpers\date\DateHelper.java" hash="7ece5cf27227e9b2a9b8e3c9d24663e0e4406c8a"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>date</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>Time</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>be</name><operator>.</operator><name>billington</name><operator>.</operator><name>calendar</name><operator>.</operator><name>recurrencepicker</name><operator>.</operator><name>EventRecurrence</name></name>;</import>
<import>import <name><name>be</name><operator>.</operator><name>billington</name><operator>.</operator><name>calendar</name><operator>.</operator><name>recurrencepicker</name><operator>.</operator><name>EventRecurrenceFormatter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>ical4j</name><operator>.</operator><name>model</name><operator>.</operator><name>property</name><operator>.</operator><name>RRule</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Helper per la generazione di date nel formato specificato nelle costanti
 *
 * @author 17000026
 */</comment>
<class><specifier>public</specifier> class <name>DateHelper</name> <block>{

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getSortableDate</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DATE_FORMAT_SORTABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>sdf</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Build a formatted date string starting from values obtained by a DatePicker
     *
     * @param year
     * @param month
     * @param day
     * @param format
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>onDateSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sdf</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Build a formatted time string starting from values obtained by a TimePicker
     *
     * @param hour
     * @param minute
     * @param format
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>onTimeSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hour</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sdf</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param mContext
     * @param date
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getDateTimeShort</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name><name>DateUtils</name><operator>.</operator><name>FORMAT_ABBREV_WEEKDAY</name></name> <operator>|</operator> <name><name>DateUtils</name><operator>.</operator><name>FORMAT_SHOW_WEEKDAY</name></name>
                <operator>|</operator> <name><name>DateUtils</name><operator>.</operator><name>FORMAT_ABBREV_MONTH</name></name> <operator>|</operator> <name><name>DateUtils</name><operator>.</operator><name>FORMAT_SHOW_DATE</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>date</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateTime</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call>
                <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DateUtils</name><operator>.</operator><name>formatDateTime</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>DateUtils</name><operator>.</operator><name>FORMAT_SHOW_TIME</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * @param mContext
     * @param date
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getTimeShort</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>time</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">""</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>c</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateTime</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>DateUtils</name><operator>.</operator><name>FORMAT_SHOW_TIME</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * @param mContext
     * @param hourOfDay
     * @param minute
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getTimeShort</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hourOfDay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minute</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>c</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>, <argument><expr><name>hourOfDay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateTime</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DateUtils</name><operator>.</operator><name>FORMAT_SHOW_TIME</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Formats a short time period (minutes)
     *
     * @param time
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>formatShortTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>m</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>time</name> <operator>/</operator> <literal type="number">1000</literal> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>time</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>m</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name>s</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>formatRecurrence</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EventRecurrence</name></type> <name>recurrenceEvent</name> <init>= <expr><operator>new</operator> <call><name>EventRecurrence</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>recurrenceEvent</name><operator>.</operator><name>setStartDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Time</name><argument_list>(<argument><expr><literal type="string">""</literal> <operator>+</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>recurrenceEvent</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>EventRecurrenceFormatter</name><operator>.</operator><name>getRepeatString</name></name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>recurrenceEvent</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        }</block></else></if>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Long</name></type> <name>nextReminderFromRecurrenceRule</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>nextReminderFromRecurrenceRule</name><argument_list>(<argument><expr><name>reminder</name></expr></argument>, <argument><expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Long</name></type> <name>nextReminderFromRecurrenceRule</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>currentTime</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>recurrenceRule</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RRule</name></type> <name>rule</name> <init>= <expr><operator>new</operator> <call><name>RRule</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>rule</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>recurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>net</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>ical4j</name><operator>.</operator><name>model</name><operator>.</operator><name>DateTime</name></name></type> <name>seed</name> <init>= <expr><operator>new</operator> <call><name><name>net</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>ical4j</name><operator>.</operator><name>model</name><operator>.</operator><name>DateTime</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>startTimestamp</name> <init>= <expr><name>reminder</name> <operator>+</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>startTimestamp</name> <operator>&lt;</operator> <name>currentTime</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>startTimestamp</name> <operator>=</operator> <name>currentTime</name></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name><name>net</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>ical4j</name><operator>.</operator><name>model</name><operator>.</operator><name>DateTime</name></name></type> <name>start</name> <init>= <expr><operator>new</operator> <call><name><name>net</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>ical4j</name><operator>.</operator><name>model</name><operator>.</operator><name>DateTime</name></name><argument_list>(<argument><expr><name>startTimestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Date</name></type> <name>nextDate</name> <init>= <expr><call><name><name>rule</name><operator>.</operator><name>getRecur</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNextDate</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>nextDate</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0L</literal></expr> </then><else>: <expr><call><name><name>nextDate</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error parsing rrule"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><literal type="number">0L</literal></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getNoteReminderText</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>alarm_set_on</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getDateTimeShort</name><argument_list>(<argument><expr><call><name><name>OmniNotes</name>
				<operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getNoteRecurrentReminderText</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>reminder</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rrule</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>DateHelper</name><operator>.</operator><name>formatRecurrence</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rrule</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name>
                <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>starting_from</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DateHelper</name><operator>.</operator><name>getDateTimeShort</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getFormattedDate</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>prettified</name></decl></parameter>)</parameter_list> <block>{
		<if>if<condition>(<expr><name>prettified</name></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>DateUtils</name><operator>.</operator><name>prettyTime</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then> <else>else <block>{
			<return>return <expr><call><name><name>DateHelper</name><operator>.</operator><name>getDateTimeShort</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\extensions\ONDashClockExtension.java" hash="a9be1d3f2657af1103e692d1de38c3f6ab817ee3"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>extensions</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>LocalBroadcastManager</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>apps</name><operator>.</operator><name>dashclock</name><operator>.</operator><name>api</name><operator>.</operator><name>DashClockExtension</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>apps</name><operator>.</operator><name>dashclock</name><operator>.</operator><name>api</name><operator>.</operator><name>ExtensionData</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>TextHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>DateUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>


<class><specifier>public</specifier> class <name>ONDashClockExtension</name> <super><extends>extends <name>DashClockExtension</name></extends></super> <block>{

    <enum><specifier>private</specifier> enum <name>Counters</name> <block>{<decl><name>ACTIVE</name></decl>, <decl><name>REMINDERS</name></decl>, <decl><name>TODAY</name></decl>, <decl><name>TOMORROW</name></decl>}</block></enum>


    <decl_stmt><decl><specifier>private</specifier> <type><name>DashClockUpdateReceiver</name></type> <name>mDashClockReceiver</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onInitialize</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isReconnect</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onInitialize</name></name><argument_list>(<argument><expr><name>isReconnect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LocalBroadcastManager</name></type> <name>broadcastMgr</name> <init>= <expr><call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mDashClockReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>broadcastMgr</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>mDashClockReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>mDashClockReceiver</name> <operator>=</operator> <operator>new</operator> <call><name>DashClockUpdateReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>broadcastMgr</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>mDashClockReceiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>INTENT_UPDATE_DASHCLOCK</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"DefaultLocale"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onUpdateData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reason</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Counters</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>notesCounters</name> <init>= <expr><call><name>getNotesCounters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>reminders</name> <init>= <expr><call><name><name>notesCounters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>REMINDERS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>expandedTitle</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>expandedTitle</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>notesCounters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>ACTIVE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notes</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>reminders</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>expandedTitle</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>reminders</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>reminders</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>expandedBody</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>notesCounters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>TODAY</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>expandedBody</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>notesCounters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>TODAY</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>today</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>Note</name></type> <name>todayReminder</name> <range>: <expr><call><name><name>notesCounters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>TODAY</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
				<expr_stmt><expr><call><name><name>expandedBody</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"â "</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getNoteTitle</name><argument_list>(<argument><expr><name>this</name></expr></argument>,
						<argument><expr><name>todayReminder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name><name>expandedBody</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><call><name><name>notesCounters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>TOMORROW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>expandedBody</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>notesCounters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>TOMORROW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tomorrow</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>Note</name></type> <name>tomorrowReminder</name> <range>: <expr><call><name><name>notesCounters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>TOMORROW</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
				<expr_stmt><expr><call><name><name>expandedBody</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"â "</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getNoteTitle</name><argument_list>(<argument><expr><name>this</name></expr></argument>,
						<argument><expr><name>tomorrowReminder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>

        <comment type="line">// Publish the extension data update.</comment>
		<decl_stmt><decl><type><name>Intent</name></type> <name>launchIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>launchIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_MAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>publishUpdate</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExtensionData</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>visible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>icon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_stat_literal_icon</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>status</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>notesCounters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>ACTIVE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>expandedTitle</name><argument_list>(<argument><expr><call><name><name>expandedTitle</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>expandedBody</name><argument_list>(<argument><expr><call><name><name>expandedBody</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>clickIntent</name><argument_list>(<argument><expr><name>launchIntent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


	<function><specifier>private</specifier> <type><name>String</name></type> <name>getNoteTitle</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>TextHelper</name><operator>.</operator><name>getAlternativeTitle</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><call><name><name>TextHelper</name><operator>.</operator><name>parseTitleAndContent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Counters</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getNotesCounters</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>noteCounters</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>activeNotes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>reminders</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>today</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>tomorrow</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotesActive</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>activeNotes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>note</name><operator>.</operator><name>isReminderFired</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>reminders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>DateUtils</name><operator>.</operator><name>isSameDay</name></name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>today</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator>
						<literal type="number">60</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>tomorrow</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></elseif></if>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>noteCounters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>ACTIVE</name></name></expr></argument>, <argument><expr><name>activeNotes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>noteCounters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>REMINDERS</name></name></expr></argument>, <argument><expr><name>reminders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>noteCounters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>TODAY</name></name></expr></argument>, <argument><expr><name>today</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>noteCounters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Counters</name><operator>.</operator><name>TOMORROW</name></name></expr></argument>, <argument><expr><name>tomorrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>noteCounters</name></expr>;</return>
    }</block></function>


    <class><specifier>public</specifier> class <name>DashClockUpdateReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>onUpdateData</name><argument_list>(<argument><expr><name>UPDATE_REASON_MANUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\helpers\NotesHelper.java" hash="244b44ff6f1eeb8d35665c5fc9f07bc1e6b7fc9d"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>StatsSingleNote</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>StorageHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>TagsHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>ObjectUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>


<class><specifier>public</specifier> class <name>NotesHelper</name> <block>{

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>haveSameId</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>currentNote</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><name>currentNote</name> <operator>!=</operator> <literal type="null">null</literal>
            <operator>&amp;&amp;</operator> <call><name><name>currentNote</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
            <operator>&amp;&amp;</operator> <call><name><name>currentNote</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>StringBuilder</name></type> <name>appendContent</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>content</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeTitle</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>content</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal>
                <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MERGED_NOTES_SEPARATOR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>includeTitle</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>content</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>addAttachments</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>keepMergedNotes</name></decl></parameter>, <parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>keepMergedNotes</name></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>attachments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>StorageHelper</name><operator>.</operator><name>createAttachmentFromUri</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name>
                        <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>attachments</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Note</name></type> <name>mergeNotes</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>keepMergedNotes</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>locked</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Category</name></type> <name>category</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>reminder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>reminderRecurrenceRule</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Double</name></type> <name>latitude</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>longitude</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Note</name></type> <name>mergedNote</name> <init>= <expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>mergedNote</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>StringBuilder</name></type> <name>content</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Just first note title must not be included into the content</comment>
		<decl_stmt><decl><type><name>boolean</name></type> <name>includeTitle</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><name>notes</name></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><call><name>appendContent</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>includeTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>locked</name> <operator>=</operator> <name>locked</name> <operator>||</operator> <call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>category</name> <operator>=</operator> <operator>(</operator><name>Category</name><operator>)</operator> <call><name><name>ObjectUtils</name><operator>.</operator><name>defaultIfNull</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>currentReminder</name> <init>= <expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>currentReminder</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>reminder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>reminder</name> <operator>=</operator> <name>currentReminder</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>reminderRecurrenceRule</name> <operator>=</operator> <call><name><name>note</name><operator>.</operator><name>getRecurrenceRule</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>latitude</name> <operator>=</operator> <operator>(</operator><name>Double</name><operator>)</operator> <call><name><name>ObjectUtils</name><operator>.</operator><name>defaultIfNull</name></name><argument_list>(<argument><expr><name>latitude</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>longitude</name> <operator>=</operator> <operator>(</operator><name>Double</name><operator>)</operator> <call><name><name>ObjectUtils</name><operator>.</operator><name>defaultIfNull</name></name><argument_list>(<argument><expr><name>longitude</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>addAttachments</name><argument_list>(<argument><expr><name>keepMergedNotes</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>includeTitle</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></for>

        <expr_stmt><expr><call><name><name>mergedNote</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name><name>content</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mergedNote</name><operator>.</operator><name>setLocked</name></name><argument_list>(<argument><expr><name>locked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mergedNote</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mergedNote</name><operator>.</operator><name>setAlarm</name></name><argument_list>(<argument><expr><name>reminder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mergedNote</name><operator>.</operator><name>setRecurrenceRule</name></name><argument_list>(<argument><expr><name>reminderRecurrenceRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mergedNote</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><name>latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mergedNote</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><name>longitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mergedNote</name><operator>.</operator><name>setAttachmentsList</name></name><argument_list>(<argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>mergedNote</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Retrieves statistics data for a single note
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>StatsSingleNote</name></type> <name>getNoteInfos</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>StatsSingleNote</name></type> <name>infos</name> <init>= <expr><operator>new</operator> <call><name>StatsSingleNote</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>words</name></decl>, <decl><type ref="prev"/><name>chars</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setChecklistCompletedItemsNumber</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>countMatches</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name>
					<operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>CHECKED_SYM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setChecklistItemsNumber</name></name><argument_list>(<argument><expr><call><name><name>infos</name><operator>.</operator><name>getChecklistCompletedItemsNumber</name></name><argument_list>()</argument_list></call> <operator>+</operator>
					<call><name><name>StringUtils</name><operator>.</operator><name>countMatches</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>UNCHECKED_SYM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setTags</name></name><argument_list>(<argument><expr><call><name><name>TagsHelper</name><operator>.</operator><name>retrieveTags</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>words</name> <operator>=</operator> <call><name>getWords</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>chars</name> <operator>=</operator> <call><name>getChars</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setWords</name></name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setChars</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>attachmentsAll</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>images</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>videos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>audioRecordings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sketches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>files</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_IMAGE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>images</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>videos</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>audioRecordings</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_SKETCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>sketches</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_FILES</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>files</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
		}</block></for>
		<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setAttachments</name></name><argument_list>(<argument><expr><name>attachmentsAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setImages</name></name><argument_list>(<argument><expr><name>images</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setVideos</name></name><argument_list>(<argument><expr><name>videos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setAudioRecordings</name></name><argument_list>(<argument><expr><name>audioRecordings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setSketches</name></name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>setCategoryName</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<return>return <expr><name>infos</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Counts words in a note
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getWords</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><block>{<expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>String</name></type> <name>field</name> <range>: <expr><name>fields</name></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>sanitizeTextForWordsAndCharsCount</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>boolean</name></type> <name>word</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>endOfLine</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>field</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<comment type="line">// if the char is a letter, word = true.</comment>
				<if>if <condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isLetter</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>endOfLine</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>word</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<comment type="line">// if char isn't a letter and there have been letters before,</comment>
					<comment type="line">// counter goes up.</comment>
				}</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>Character</name><operator>.</operator><name>isLetter</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>word</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>word</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<comment type="line">// last word of String; if it doesn't end with a non letter, it</comment>
					<comment type="line">// wouldn't count without this.</comment>
				}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isLetter</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>endOfLine</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
				}</block></then></if></elseif></if>
			}</block></for>
		}</block></for>
		<return>return <expr><name>count</name></expr>;</return>
	}</block></function>

	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>sanitizeTextForWordsAndCharsCount</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>regex</name> <init>= <expr><literal type="string">"("</literal> <operator>+</operator> <call><name><name>Pattern</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>CHECKED_SYM</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"|"</literal>
					<operator>+</operator> <call><name><name>Pattern</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>UNCHECKED_SYM</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><name>regex</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>field</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Counts chars in a note
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getChars</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>sanitizeTextForWordsAndCharsCount</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>sanitizeTextForWordsAndCharsCount</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>count</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\AlarmRestoreOnRebootService.java" hash="e4c6bba01edc2fdf1524474842ef9cda0e7b99c2"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>IntentService</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>BaseActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>ReminderHelper</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>AlarmRestoreOnRebootService</name> <super><extends>extends <name>IntentService</name></extends></super> <block>{

	<constructor><specifier>public</specifier> <name>AlarmRestoreOnRebootService</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"AlarmRestoreOnRebootService"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onHandleIntent</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"System rebooted: service refreshing reminders"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Context</name></type> <name>mContext</name> <init>= <expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>BaseActivity</name><operator>.</operator><name>notifyAppWidgets</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotesWithReminderNotFired</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Found "</literal> <operator>+</operator> <call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" reminders"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><name>notes</name></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>addReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\db\SqlParser.java" hash="f9846686116a4afa9939dacf0f5f7bde1758822d"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>AssetManager</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>SqlParser</name> <block>{

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parseSqlFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>,
                                            <parameter><decl><type><name>AssetManager</name></type> <name>assetManager</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sqlIns</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>assetManager</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>sqlIns</name> <operator>=</operator> <call><name>parseSqlFile</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><name>sqlIns</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parseSqlFile</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>script</name> <init>= <expr><call><name>removeComments</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>splitSqlScript</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>removeComments</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sql</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isReader</name> <init>= <expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>buffReader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><name>isReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>multiLineComment</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>buffReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
                    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><name>multiLineComment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/*"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><operator>!</operator><call><name><name>line</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>multiLineComment</name> <operator>=</operator> <literal type="string">"/*"</literal></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><operator>!</operator><call><name><name>line</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>multiLineComment</name> <operator>=</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>line</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>sql</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if></elseif></if>
                    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>multiLineComment</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"/*"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"*/"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>multiLineComment</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>multiLineComment</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>multiLineComment</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if></elseif></if>

                }</block></while>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>buffReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>

        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>isReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <return>return <expr><call><name><name>sql</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>splitSqlScript</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>statements</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>inLiteral</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>content</name> <init>= <expr><call><name><name>script</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>script</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>content</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>inLiteral</name> <operator>=</operator> <operator>!</operator><name>inLiteral</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>content</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>delim</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>inLiteral</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>sb</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>statements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>content</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <if>if <condition>(<expr><call><name><name>sb</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>statements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>statements</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\AttachmentTask.java" hash="0a39186daf4bc5e90f74a341206cd8bf3dbe4280"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnAttachingFileListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>StorageHelper</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>


<class><specifier>public</specifier> class <name>AttachmentTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Attachment</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name></type> <name>mFragmentWeakReference</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>OnAttachingFileListener</name></type> <name>mOnAttachingFileListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Uri</name></type> <name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>fileName</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>AttachmentTask</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>mFragment</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>OnAttachingFileListener</name></type> <name>mOnAttachingFileListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>mFragment</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>mOnAttachingFileListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>AttachmentTask</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>mFragment</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>,
                          <parameter><decl><type><name>OnAttachingFileListener</name></type> <name>mOnAttachingFileListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mFragmentWeakReference</name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>mFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileName</name></name> <operator>=</operator> <ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>fileName</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mOnAttachingFileListener</name></name> <operator>=</operator> <name>mOnAttachingFileListener</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>Attachment</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>StorageHelper</name><operator>.</operator><name>createAttachmentFromUri</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isAlive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>mAttachment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mOnAttachingFileListener</name><operator>.</operator><name>onAttachingFileFinished</name></name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>mOnAttachingFileListener</name><operator>.</operator><name>onAttachingFileErrorOccurred</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>mAttachment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isAlive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mFragmentWeakReference</name> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdded</name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isFinishing</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\CategoryMenuTask.java" hash="3cd5dd7323e919ca1417cb1430436dd93f92efc8"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>SettingsActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>NavigationUpdatedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>ONStyle</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name><operator>.</operator><name>NavDrawerCategoryAdapter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>NonScrollableListView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>CategoryMenuTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name></type> <name>mFragmentWeakReference</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MainActivity</name></type> <name>mainActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>NonScrollableListView</name></type> <name>mDrawerCategoriesList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>settingsView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>settingsViewCat</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>NonScrollableListView</name></type> <name>mDrawerList</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>CategoryMenuTask</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>mFragment</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mFragmentWeakReference</name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>mFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mainActivity</name></name> <operator>=</operator> <operator>(</operator><name>MainActivity</name><operator>)</operator> <call><name><name>mFragment</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPreExecute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mDrawerList</name> <operator>=</operator> <operator>(</operator><name>NonScrollableListView</name><operator>)</operator> <call><name><name>mainActivity</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawer_nav_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>mainActivity</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>settingsView</name> <operator>=</operator> <call><name><name>mainActivity</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>settings_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Settings view when categories are available</comment>
        <expr_stmt><expr><name>mDrawerCategoriesList</name> <operator>=</operator> <operator>(</operator><name>NonScrollableListView</name><operator>)</operator> <call><name><name>mainActivity</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawer_tag_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>getFooterViewsCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>settingsViewCat</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>drawer_category_list_footer</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>addFooterView</name></name><argument_list>(<argument><expr><name>settingsViewCat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>settingsViewCat</name> <operator>=</operator> <call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isAlive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>buildCategoryMenu</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>cancel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categories</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isAlive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NavDrawerCategoryAdapter</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>categories</name></expr></argument>,
                    <argument><expr><call><name><name>mainActivity</name><operator>.</operator><name>getNavigationTmp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>categories</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setWidgetVisibility</name><argument_list>(<argument><expr><name>settingsViewCat</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setWidgetVisibility</name><argument_list>(<argument><expr><name>settingsView</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>setWidgetVisibility</name><argument_list>(<argument><expr><name>settingsViewCat</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setWidgetVisibility</name><argument_list>(<argument><expr><name>settingsView</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>justifyListViewHeightBasedOnChildren</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>setWidgetVisibility</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>visible</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>view</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>visible</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isAlive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdded</name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isFinishing</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>buildCategoryMenu</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Retrieves data to fill tags list</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categories</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCategories</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>View</name></type> <name>settings</name> <init>= <expr><ternary><condition><expr><call><name><name>categories</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>settingsView</name></expr> </then><else>: <expr><name>settingsViewCat</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>settings</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>categories</name></expr>;</return></block></then></if>
<comment type="line">//        Fonts.overrideTextSize(mainActivity,</comment>
<comment type="line">//                mainActivity.getSharedPreferences(Constants.PREFS_NAME, Context.MODE_MULTI_PROCESS),</comment>
<comment type="line">//                settings);</comment>
        <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
			<decl_stmt><decl><type><name>Intent</name></type> <name>settingsIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name><name>SettingsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>settingsIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Sets click events</comment>
        <expr_stmt><expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>arg0</name></decl></parameter>, <parameter><decl><name>arg1</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>arg3</name></decl></parameter>)</parameter_list> -&gt; <block>{

			<decl_stmt><decl><type><name>Object</name></type> <name>item</name> <init>= <expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>mainActivity</name><operator>.</operator><name>updateNavigation</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Category</name><operator>)</operator> <name>item</name><operator>)</operator><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>setItemChecked</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Forces redraw</comment>
                <if>if <condition>(<expr><name>mDrawerList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>mDrawerList</name><operator>.</operator><name>setItemChecked</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NavigationUpdatedEvent</name><argument_list>(<argument><expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>getItemAtPosition</name></name>
                            <argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
			}</block></then></if>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Sets long click events</comment>
        <expr_stmt><expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>setOnItemLongClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>arg0</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>arg3</name></decl></parameter>)</parameter_list> -&gt; <block>{
			<if>if <condition>(<expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>Object</name></type> <name>item</name> <init>= <expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line">// Ensuring that clicked item is not the ListView header</comment>
				<if>if <condition>(<expr><name>item</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>editTag</name></name><argument_list>(<argument><expr><operator>(</operator><name>Category</name><operator>)</operator> <name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>category_deleted</name></name></expr></argument>, <argument><expr><name><name>ONStyle</name><operator>.</operator><name>ALERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>categories</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\MainMenuTask.java" hash="47bb4ddb44884b534eaf58b5bd3103309d53ec24"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>NavigationUpdatedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>NavigationItem</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>adapters</name><operator>.</operator><name>NavDrawerAdapter</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>misc</name><operator>.</operator><name>DynamicNavigationLookupTable</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>views</name><operator>.</operator><name>NonScrollableListView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Navigation</name></name>;</import>


<class><specifier>public</specifier> class <name>MainMenuTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>NavigationItem</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name></type> <name>mFragmentWeakReference</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MainActivity</name></type> <name>mainActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawer_nav_list</name></name></expr></argument>)</argument_list></annotation> <type><name>NonScrollableListView</name></type> <name>mDrawerList</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawer_tag_list</name></name></expr></argument>)</argument_list></annotation> <type><name>NonScrollableListView</name></type> <name>mDrawerCategoriesList</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>MainMenuTask</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>mFragment</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mFragmentWeakReference</name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>mFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mainActivity</name></name> <operator>=</operator> <operator>(</operator><name>MainActivity</name><operator>)</operator> <call><name><name>mFragment</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>mFragment</name><operator>.</operator><name>getView</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NavigationItem</name></argument>&gt;</argument_list></name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>buildMainMenu</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>NavigationItem</name></argument>&gt;</argument_list></name></type> <name>items</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isAlive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mDrawerList</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NavDrawerAdapter</name><argument_list>(<argument><expr><name>mainActivity</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDrawerList</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>arg0</name></decl></parameter>, <parameter><decl><name>arg1</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>arg3</name></decl></parameter>)</parameter_list> -&gt; <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>navigation</name> <init>= <expr><call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name>
						<operator>.</operator><name>navigation_list_codes</name></name></expr></argument>)</argument_list></call><index>[<expr><call><name><name>items</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getArrayIndex</name><argument_list>()</argument_list></call></expr>]</index></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>mainActivity</name><operator>.</operator><name>updateNavigation</name></name><argument_list>(<argument><expr><name>navigation</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>mDrawerList</name><operator>.</operator><name>setItemChecked</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if>if <condition>(<expr><name>mDrawerCategoriesList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><call><name><name>mDrawerCategoriesList</name><operator>.</operator><name>setItemChecked</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <comment type="line">// Called to force redraw</comment>
					<expr_stmt><expr><call><name><name>mainActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAction</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_MAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NavigationUpdatedEvent</name><argument_list>(<argument><expr><call><name><name>mDrawerList</name><operator>.</operator><name>getItemAtPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDrawerList</name><operator>.</operator><name>justifyListViewHeightBasedOnChildren</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isAlive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdded</name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mFragmentWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isFinishing</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NavigationItem</name></argument>&gt;</argument_list></name></type> <name>buildMainMenu</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>isAlive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>mNavigationArray</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TypedArray</name></type> <name>mNavigationIconsArray</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainTypedArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>navigation_list_icons</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TypedArray</name></type> <name>mNavigationIconsSelectedArray</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainTypedArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name>
                <operator>.</operator><name>navigation_list_icons_selected</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>NavigationItem</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mNavigationArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name>checkSkippableItem</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>NavigationItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>NavigationItem</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>mNavigationArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>mNavigationIconsArray</name><operator>.</operator><name>getResourceId</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>mNavigationIconsSelectedArray</name><operator>.</operator><name>getResourceId</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>items</name></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>checkSkippableItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>skippable</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>mainActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>dynamicMenu</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_DYNAMIC_MENU</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DynamicNavigationLookupTable</name></type> <name>dynamicNavigationLookupTable</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dynamicMenu</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dynamicNavigationLookupTable</name> <operator>=</operator> <call><name><name>DynamicNavigationLookupTable</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{
            <case>case <expr><name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name></expr>:</case>
                <if>if <condition>(<expr><name>dynamicMenu</name> <operator>&amp;&amp;</operator> <call><name><name>dynamicNavigationLookupTable</name><operator>.</operator><name>getReminders</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>skippable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
                <break>break;</break>
            <case>case <expr><name><name>Navigation</name><operator>.</operator><name>UNCATEGORIZED</name></name></expr>:</case>
                <decl_stmt><decl><type><name>boolean</name></type> <name>showUncategorized</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_SHOW_UNCATEGORIZED</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>showUncategorized</name> <operator>||</operator> <operator>(</operator><name>dynamicMenu</name> <operator>&amp;&amp;</operator> <call><name><name>dynamicNavigationLookupTable</name><operator>.</operator><name>getUncategorized</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>skippable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
                <break>break;</break>
            <case>case <expr><name><name>Navigation</name><operator>.</operator><name>ARCHIVE</name></name></expr>:</case>
                <if>if <condition>(<expr><name>dynamicMenu</name> <operator>&amp;&amp;</operator> <call><name><name>dynamicNavigationLookupTable</name><operator>.</operator><name>getArchived</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>skippable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
                <break>break;</break>
            <case>case <expr><name><name>Navigation</name><operator>.</operator><name>TRASH</name></name></expr>:</case>
                <if>if <condition>(<expr><name>dynamicMenu</name> <operator>&amp;&amp;</operator> <call><name><name>dynamicNavigationLookupTable</name><operator>.</operator><name>getTrashed</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>skippable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
                <break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Wrong element choosen: "</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></switch>
        <return>return <expr><name>skippable</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\TextWorkerTask.java" hash="1aec857dbeecd0df19cf07737a462457277d86f2"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>TextHelper</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>


<class><specifier>public</specifier> class <name>TextWorkerTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>, <argument><name>Void</name></argument>, <argument><name><name>Spanned</name><index>[]</index></name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>mActivityWeakReference</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>titleTextView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>contentTextView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>expandedView</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>TextWorkerTask</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>TextView</name></type> <name>titleTextView</name></decl></parameter>,
                          <parameter><decl><type><name>TextView</name></type> <name>contentTextView</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expandedView</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mActivityWeakReference</name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mActivity</name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>titleTextView</name></name> <operator>=</operator> <name>titleTextView</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contentTextView</name></name> <operator>=</operator> <name>contentTextView</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expandedView</name></name> <operator>=</operator> <name>expandedView</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name><name>Spanned</name><index>[]</index></name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Note</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>TextHelper</name><operator>.</operator><name>parseTitleAndContent</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name><name>Spanned</name><index>[]</index></name></type> <name>titleAndContent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isAlive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>titleTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>titleAndContent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>contentTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>titleAndContent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>contentTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>expandedView</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>contentTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>contentTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Cheks if activity is still alive and not finishing
     *
     * @param weakDetailFragmentReference
     * @return True or false
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isAlive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mActivityWeakReference</name> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <call><name><name>mActivityWeakReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>

    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\UpdateWidgetsTask.java" hash="2a4f65e7d758368ccd9b113bada3af92d96e475c"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>BaseActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>NotesUpdatedEvent</name></name>;</import>

<class><specifier>public</specifier> class <name>UpdateWidgetsTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>UpdateWidgetsTask</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>WidgetUpdateSubscriber</name></type> <name>widgetUpdateSubscriber</name> <init>= <expr><operator>new</operator> <call><name>WidgetUpdateSubscriber</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <class>class <name>WidgetUpdateSubscriber</name> <block>{

        <constructor><name>WidgetUpdateSubscriber</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><name>NotesUpdatedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>BaseActivity</name><operator>.</operator><name>notifyAppWidgets</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unregister</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\upgrade\UpgradeProcessor.java" hash="9029570644c4073e32232814b4c1a70d8a3006a4"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>upgrade</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>ReminderHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>StorageHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FilenameUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Processor used to perform asynchronous tasks on database upgrade.
 * It's not intended to be used to perform actions strictly related to DB (for this
 * {@link it.feio.android.omninotes.db.DbHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)}
 * DbHelper.onUpgrade()} is used
 */</comment>
<class><specifier>public</specifier> class <name>UpgradeProcessor</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>METHODS_PREFIX</name> <init>= <expr><literal type="string">"onUpgradeTo"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>UpgradeProcessor</name></type> <name>instance</name></decl>;</decl_stmt>


    <constructor><specifier>private</specifier> <name>UpgradeProcessor</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>


    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>UpgradeProcessor</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>UpgradeProcessor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>instance</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbOldVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbNewVersion</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Method</name></argument>&gt;</argument_list></name></type> <name>methodsToLaunch</name> <init>= <expr><call><name>getInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMethodsToLaunch</name><argument_list>(<argument><expr><name>dbOldVersion</name></expr></argument>, <argument><expr><name>dbNewVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Method</name></type> <name>methodToLaunch</name> <range>: <expr><name>methodsToLaunch</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>methodToLaunch</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><call><name>getInstance</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> | <type><name>IllegalAccessException</name></type> | <type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Explosion processing upgrade!"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>


    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Method</name></argument>&gt;</argument_list></name></type> <name>getMethodsToLaunch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbOldVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbNewVersion</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Method</name></argument>&gt;</argument_list></name></type> <name>methodsToLaunch</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Method</name><index>[]</index></name></type> <name>declaredMethods</name> <init>= <expr><call><name>getInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaredMethods</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Method</name></type> <name>declaredMethod</name> <range>: <expr><name>declaredMethods</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>declaredMethod</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>METHODS_PREFIX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>methodVersionPostfix</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>declaredMethod</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>METHODS_PREFIX</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>dbOldVersion</name> <operator>&lt;=</operator> <name>methodVersionPostfix</name> <operator>&amp;&amp;</operator> <name>methodVersionPostfix</name> <operator>&lt;=</operator> <name>dbNewVersion</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>methodsToLaunch</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>declaredMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>methodsToLaunch</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Adjustment of all the old attachments without mimetype field set into DB
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>onUpgradeTo476</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>DbHelper</name></type> <name>dbHelper</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><call><name><name>dbHelper</name><operator>.</operator><name>getAllAttachments</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>mimeType</name><operator>.</operator><name>replaceFirst</name></name><argument_list>(<argument><expr><literal type="string">"/.*"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
						<case>case <expr><literal type="string">"image"</literal></expr>:</case>
							<expr_stmt><expr><call><name><name>attachment</name><operator>.</operator><name>setMime_type</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_IMAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><literal type="string">"video"</literal></expr>:</case>
							<expr_stmt><expr><call><name><name>attachment</name><operator>.</operator><name>setMime_type</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><literal type="string">"audio"</literal></expr>:</case>
							<expr_stmt><expr><call><name><name>attachment</name><operator>.</operator><name>setMime_type</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>
							<expr_stmt><expr><call><name><name>attachment</name><operator>.</operator><name>setMime_type</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_FILES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
					}</block></switch>
					<expr_stmt><expr><call><name><name>dbHelper</name><operator>.</operator><name>updateAttachment</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name><name>attachment</name><operator>.</operator><name>setMime_type</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_FILES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></for>
    }</block></function>


	<comment type="block" format="javadoc">/**
	 * Upgrades all the old audio attachments to the new format 3gpp to avoid to exchange them for videos
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>onUpgradeTo480</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>DbHelper</name></type> <name>dbHelper</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><call><name><name>dbHelper</name><operator>.</operator><name>getAllAttachments</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><literal type="string">"audio/3gp"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"audio/3gpp"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name>
					<argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

				<comment type="line">// File renaming</comment>
				<decl_stmt><decl><type><name>File</name></type> <name>from</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUriPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>FilenameUtils</name><operator>.</operator><name>getExtension</name></name><argument_list>(<argument><expr><call><name><name>from</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>File</name></type> <name>to</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>from</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>from</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><call><name><name>FilenameUtils</name><operator>.</operator><name>getExtension</name></name><argument_list>(<argument><expr><call><name><name>from</name>
						<operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO_EXT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>from</name><operator>.</operator><name>renameTo</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Note's attachment update</comment>
				<expr_stmt><expr><call><name><name>attachment</name><operator>.</operator><name>setUri</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>attachment</name><operator>.</operator><name>setMime_type</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>dbHelper</name><operator>.</operator><name>updateAttachment</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * Reschedule reminders after upgrade
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>onUpgradeTo482</name><parameter_list>()</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotesWithReminderNotFired</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>addReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * Ensures that no duplicates will be found during the creation-to-id transition
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>onUpgradeTo501</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>creations</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllNotes</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>creations</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

				<decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DbHelper</name><operator>.</operator><name>KEY_CREATION</name></name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call>(<name>long</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatabase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name><name>DbHelper</name><operator>.</operator><name>TABLE_NOTES</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name><name>DbHelper</name><operator>.</operator><name>KEY_TITLE</name></name> <operator>+</operator>
						<literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>DbHelper</name><operator>.</operator><name>KEY_CREATION</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>DbHelper</name><operator>.</operator><name>KEY_CONTENT</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>note</name>
						<operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name>creations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\UpdaterTask.java" hash="547901087343297a1c2a19e838ca1a0f1650de3c"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>MaterialDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>analitica</name><operator>.</operator><name>AnalyticsHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>AppVersionHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>misc</name><operator>.</operator><name>PlayStoreMetadataFetcherResult</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>ConnectionManager</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>SystemHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLConnection</name></name>;</import>



<class><specifier>public</specifier> class <name>UpdaterTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BETA</name> <init>= <expr><literal type="string">" Beta "</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>mActivityReference</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>promptUpdate</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>now</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>UpdaterTask</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>mActivity</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>mActivityReference</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>mActivity</name></name> <operator>=</operator> <name>mActivity</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefs</name></name> <operator>=</operator> <call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name><name>OmniNotes</name><operator>.</operator><name>isDebugBuild</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>ConnectionManager</name><operator>.</operator><name>internetAvailable</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>now</name> <operator>&lt;</operator> <call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name><name>Constants</name>
				<operator>.</operator><name>PREF_LAST_UPDATE_CHECK</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>UPDATE_MIN_FREQUENCY</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>cancel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPreExecute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name>isCancelled</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<try>try <block>{
				<expr_stmt><expr><name>promptUpdate</name> <operator>=</operator> <call><name>isVersionUpdated</name><argument_list>(<argument><expr><call><name>getAppData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>promptUpdate</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_LAST_UPDATE_CHECK</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error fetching app metadata"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>


	<function><specifier>private</specifier> <type><name>void</name></type> <name>promptUpdate</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name><name>mActivityReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>new_update_available</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>update</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>negativeText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>not_now</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>negativeColorRes</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MaterialDialog</name><operator>.</operator><name>ButtonCallback</name></name></super><argument_list>()</argument_list> <block>{
					<function><annotation>@<name>Override</name></annotation>
					<specifier>public</specifier> <type><name>void</name></type> <name>onPositive</name><parameter_list>(<parameter><decl><type><name>MaterialDialog</name></type> <name>materialDialog</name></decl></parameter>)</parameter_list> <block>{
						<if>if <condition>(<expr><call><name>isGooglePlayAvailable</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name><name>mActivity</name><operator>.</operator><name>getApplication</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackEvent</name><argument_list>(<argument><expr><name><name>AnalyticsHelper</name><operator>.</operator><name>CATEGORIES</name><operator>.</operator><name>UPDATE</name></name></expr></argument>, <argument><expr><literal type="string">"Play Store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>mActivityReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name>
									<argument_list>(<argument><expr><literal type="string">"market://details?id="</literal> <operator>+</operator> <call><name><name>mActivity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else>else <block>{
							<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OmniNotes</name><operator>)</operator><call><name><name>mActivity</name><operator>.</operator><name>getApplication</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAnalyticsHelper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trackEvent</name><argument_list>(<argument><expr><name><name>AnalyticsHelper</name><operator>.</operator><name>CATEGORIES</name><operator>.</operator><name>UPDATE</name></name></expr></argument>, <argument><expr><literal type="string">"Drive Repository"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>mActivityReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>Constants</name>
									<operator>.</operator><name>DRIVE_FOLDER_LAST_BUILD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></function>
				}</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Void</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name>isAlive</name><argument_list>(<argument><expr><name>mActivityReference</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>promptUpdate</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>promptUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<try>try <block>{
					<decl_stmt><decl><type><name>boolean</name></type> <name>appVersionUpdated</name> <init>= <expr><call><name><name>AppVersionHelper</name><operator>.</operator><name>isAppUpdated</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>appVersionUpdated</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>showChangelog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>restoreReminders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>AppVersionHelper</name><operator>.</operator><name>updateAppVersionInPreferences</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NameNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error retrieving app version"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></else></if>
		}</block></then></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>restoreReminders</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Intent</name></type> <name>service</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>AlarmRestoreOnRebootService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>startService</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>showChangelog</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>customView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_changelog</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>isAlive</name><parameter_list>(<parameter><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>weakActivityReference</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>!</operator><operator>(</operator><call><name><name>weakActivityReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>weakActivityReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isFinishing</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * Fetches application data from internet
	 */</comment>
	<function><specifier>private</specifier> <type><name>PlayStoreMetadataFetcherResult</name></type> <name>getAppData</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JSONException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>InputStreamReader</name></type> <name>inputStreamReader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>URLConnection</name></type> <name>conn</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name><name>BuildConfig</name><operator>.</operator><name>VERSION_CHECK_URL</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>openConnection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>is</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inputStreamReader</name> <operator>=</operator> <operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>BufferedReader</name></type> <name>br</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><name>inputStreamReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>inputLine</name></decl>;</decl_stmt>
			<while>while <condition>(<expr><operator>(</operator><name>inputLine</name> <operator>=</operator> <call><name><name>br</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
				<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>inputLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>

			<return>return <expr><operator>new</operator> <call><name>Gson</name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromJson</name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PlayStoreMetadataFetcherResult</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block> <finally>finally <block>{
			<expr_stmt><expr><call><name><name>SystemHelper</name><operator>.</operator><name>closeCloseable</name></name><argument_list>(<argument><expr><name>inputStreamReader</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></finally></try>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * Checks parsing "android:versionName" if app has been updated
	 */</comment>
	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>isVersionUpdated</name><parameter_list>(<parameter><decl><type><name>PlayStoreMetadataFetcherResult</name></type> <name>playStoreMetadataFetcherResult</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>NameNotFoundException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>playStoreVersion</name> <init>= <expr><call><name><name>playStoreMetadataFetcherResult</name><operator>.</operator><name>getSoftwareVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Retrieval of installed app version</comment>
		<decl_stmt><decl><type><name>PackageInfo</name></type> <name>pInfo</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(
				<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>installedVersion</name> <init>= <expr><name><name>pInfo</name><operator>.</operator><name>versionName</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// Parsing version string to obtain major.minor.point (excluding eventually beta)</comment>
		<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>playStoreVersionArray</name> <init>= <expr><call><name><name>playStoreVersion</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>BETA</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>installedVersionArray</name> <init>= <expr><call><name><name>installedVersion</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>BETA</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Versions strings are converted into integer</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>playStoreVersionString</name> <init>= <expr><name><name>playStoreVersionArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>installedVersionString</name> <init>= <expr><name><name>installedVersionArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>playStoreVersionArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>playStoreVersionString</name> <operator>+=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>playStoreVersionArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>installedVersionString</name> <operator>+=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>installedVersionArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<decl_stmt><decl><type><name>boolean</name></type> <name>playStoreHasMoreRecentVersion</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>playStoreVersionString</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>installedVersionString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>outOfBeta</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>playStoreVersionString</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>installedVersionString</name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name><name>playStoreVersion</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>installedVersion</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

		<return>return <expr><name>playStoreHasMoreRecentVersion</name> <operator>||</operator> <name>outOfBeta</name></expr>;</return>
	}</block></function>


	<function><specifier>private</specifier> <type><name>boolean</name></type> <name>isGooglePlayAvailable</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>available</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><literal type="string">"com.android.vending"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NameNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Google Play app not available on device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>available</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><name>available</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\notes\NoteLoaderTask.java" hash="90c246cdd8cb1b2f9d81fe915d1272b44c21b523"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>NotesLoadedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>NotesLoadingException</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>


<class><specifier>public</specifier> class <name>NoteLoaderTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>Void</name></argument>, <argument><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>NoteLoaderTask</name></type> <name>instance</name></decl>;</decl_stmt>

	<constructor><specifier>private</specifier> <name>NoteLoaderTask</name><parameter_list>()</parameter_list> <block>{}</block></constructor>


	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>NoteLoaderTask</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{

		<if>if <condition>(<expr><name>instance</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name><name>instance</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Status</name><operator>.</operator><name>RUNNING</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>instance</name><operator>.</operator><name>isCancelled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>instance</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>instance</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Status</name><operator>.</operator><name>PENDING</name></name></expr>)</condition><then> <block>{
				<return>return <expr><name>instance</name></expr>;</return>
			}</block></then></if></elseif></if>
		}</block></then></if>

		<expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>NoteLoaderTask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>instance</name></expr>;</return>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>methodName</name> <init>= <expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DbHelper</name></type> <name>db</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<try>try <block>{
				<decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaredMethod</name><argument_list>(<argument><expr><name>methodName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>notes</name> <operator>=</operator> <operator>(</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name><operator>)</operator><call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><name>notes</name></expr>;</return>
			}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<throw>throw <expr><operator>new</operator> <call><name>NotesLoadingException</name><argument_list>(<argument><expr><literal type="string">"Error retrieving notes"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<throw>throw <expr><operator>new</operator> <call><name>NotesLoadingException</name><argument_list>(<argument><expr><literal type="string">"Error retrieving notes"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></catch></try>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>Object</name></type> <name>methodArgs</name> <init>= <expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Class</name><index>[]</index></name></type> <name>paramClass</name> <init>= <expr><operator>new</operator> <name><name>Class</name><index>[]</index></name><block>{<expr><call><name><name>methodArgs</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaredMethod</name><argument_list>(<argument><expr><name>methodName</name></expr></argument>, <argument><expr><name>paramClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>notes</name> <operator>=</operator> <operator>(</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>paramClass</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>cast</name><argument_list>(<argument><expr><name>methodArgs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<throw>throw <expr><operator>new</operator> <call><name>NotesLoadingException</name><argument_list>(<argument><expr><literal type="string">"Error retrieving notes"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></catch></try>
		}</block></else></if>

		<return>return <expr><name>notes</name></expr>;</return>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>)</parameter_list> <block>{

		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPostExecute</name></name><argument_list>(<argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NotesLoadedEvent</name><argument_list>(<argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\notes\NoteProcessor.java" hash="1be45f895cf42dc60ce11a7181fbfc8ec575a295"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>event</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name><operator>.</operator><name>NotesUpdatedEvent</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>NoteProcessor</name> <block>{

	<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl>;</decl_stmt>


	<constructor><specifier>protected</specifier> <name>NoteProcessor</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>notes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>process</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>NotesProcessorTask</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>NotesProcessorTask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>executeOnExecutor</name></name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>processNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list>;</function_decl>


	<class>class <name>NotesProcessorTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></extends></super> <block>{

		<function><annotation>@<name>Override</name></annotation>
		<specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name> <init>= <expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><name>notes</name></expr></range></decl></init>)</control> <block>{
				<expr_stmt><expr><call><name>processNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		}</block></function>


		<function><annotation>@<name>Override</name></annotation>
		<specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Void</name></type> <name>aVoid</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NotesUpdatedEvent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\notes\NoteProcessorArchive.java" hash="8da13cc026ceeb2279fe48b887b14209ae675717"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>


<class><specifier>public</specifier> class <name>NoteProcessorArchive</name> <super><extends>extends <name>NoteProcessor</name></extends></super> <block>{

    <decl_stmt><decl><type><name>boolean</name></type> <name>archive</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>NoteProcessorArchive</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>archive</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>archive</name></name> <operator>=</operator> <name>archive</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>processNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>archiveNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\notes\NoteProcessorCategorize.java" hash="ffb2dea1ed16d4cfe427d497e93db5b26d34ff93"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>


<class><specifier>public</specifier> class <name>NoteProcessorCategorize</name> <super><extends>extends <name>NoteProcessor</name></extends></super> <block>{

    <decl_stmt><decl><type><name>Category</name></type> <name>category</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>NoteProcessorCategorize</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>category</name></name> <operator>=</operator> <name>category</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>processNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\notes\NoteProcessorDelete.java" hash="2952912cecd537b90e20737f54192774488dfa77"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name></name>;</package>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>StorageHelper</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>NoteProcessorDelete</name> <super><extends>extends <name>NoteProcessor</name></extends></super> <block>{


	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>keepAttachments</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>NoteProcessorDelete</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>


	<constructor><specifier>public</specifier> <name>NoteProcessorDelete</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>keepAttachments</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>keepAttachments</name></name> <operator>=</operator> <name>keepAttachments</name></expr>;</expr_stmt>
	}</block></constructor>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>processNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>DbHelper</name></type> <name>db</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>deleteNote</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>keepAttachments</name></expr>)</condition><then> <block>{
			<for>for <control>(<init><decl><type><name>Attachment</name></type> <name>mAttachment</name> <range>: <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
				<expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>deleteExternalStoragePrivateFile</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call>
						<operator>.</operator><call><name>getLastPathSegment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\DataBackupIntentService.java" hash="41b66a232ca28a2fc7d2d67954ef7285f24eff4f"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>IntentService</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>
<import>import <name><name>exceptions</name><operator>.</operator><name>ImportException</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnAttachingFileListener</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>springpadimporter</name><operator>.</operator><name>Importer</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>springpadimporter</name><operator>.</operator><name>models</name><operator>.</operator><name>SpringpadAttachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>springpadimporter</name><operator>.</operator><name>models</name><operator>.</operator><name>SpringpadComment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>springpadimporter</name><operator>.</operator><name>models</name><operator>.</operator><name>SpringpadElement</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>springpadimporter</name><operator>.</operator><name>models</name><operator>.</operator><name>SpringpadItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>filefilter</name><operator>.</operator><name>FileFilterUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>filefilter</name><operator>.</operator><name>RegexFileFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>filefilter</name><operator>.</operator><name>TrueFileFilter</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>


<class><specifier>public</specifier> class <name>DataBackupIntentService</name> <super><extends>extends <name>IntentService</name></extends> <implements>implements <name>OnAttachingFileListener</name></implements></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>INTENT_BACKUP_NAME</name> <init>= <expr><literal type="string">"backup_name"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>INTENT_BACKUP_INCLUDE_SETTINGS</name> <init>= <expr><literal type="string">"backup_include_settings"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>ACTION_DATA_EXPORT</name> <init>= <expr><literal type="string">"action_data_export"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>ACTION_DATA_IMPORT</name> <init>= <expr><literal type="string">"action_data_import"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>ACTION_DATA_IMPORT_SPRINGPAD</name> <init>= <expr><literal type="string">"action_data_import_springpad"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>ACTION_DATA_DELETE</name> <init>= <expr><literal type="string">"action_data_delete"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>EXTRA_SPRINGPAD_BACKUP</name> <init>= <expr><literal type="string">"extra_springpad_backup"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>NotificationsHelper</name></type> <name>mNotificationsHelper</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>importedSpringpadNotes</name></decl>, <decl><type ref="prev"/><name>importedSpringpadNotebooks</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>DataBackupIntentService</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"DataBackupIntentService"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onHandleIntent</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>prefs</name> <operator>=</operator> <call><name>getSharedPreferences</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name>MODE_MULTI_PROCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Creates an indeterminate processing notification until the work is complete</comment>
        <expr_stmt><expr><name>mNotificationsHelper</name> <operator>=</operator> <operator>new</operator> <call><name>NotificationsHelper</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>createNotification</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_content_save_white_24dp</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>working</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setIndeterminate</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOngoing</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If an alarm has been fired a notification must be generated</comment>
        <if>if <condition>(<expr><call><name><name>ACTION_DATA_EXPORT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>exportData</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>ACTION_DATA_IMPORT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>importData</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>ACTION_DATA_IMPORT_SPRINGPAD</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>importDataFromSpringpad</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>ACTION_DATA_DELETE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>deleteData</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></function>


    <function><specifier>synchronized</specifier> <specifier>private</specifier> <type><name>void</name></type> <name>exportData</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Gets backup folder</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>backupName</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>INTENT_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>backupDir</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getBackupDir</name></name><argument_list>(<argument><expr><name>backupName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Directory clean in case of previously used backup name</comment>
        <expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>backupDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Directory is re-created in case of previously used backup name (removed above)</comment>
        <expr_stmt><expr><name>backupDir</name> <operator>=</operator> <call><name><name>StorageHelper</name><operator>.</operator><name>getBackupDir</name></name><argument_list>(<argument><expr><name>backupName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Database backup</comment>
        <expr_stmt><expr><call><name>exportDB</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//		exportNotes(backupDir);</comment>

        <comment type="line">// Attachments backup</comment>
        <expr_stmt><expr><call><name>exportAttachments</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Settings</comment>
        <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>INTENT_BACKUP_INCLUDE_SETTINGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>exportSettings</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Notification of operation ended</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>data_export_completed</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>backupDir</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>createNotification</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>backupDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>synchronized</specifier> <specifier>private</specifier> <type><name>void</name></type> <name>importData</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Gets backup folder</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>backupName</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>INTENT_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>backupDir</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getBackupDir</name></name><argument_list>(<argument><expr><name>backupName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Database backup</comment>
        <expr_stmt><expr><call><name>importDB</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        importNotes(backupDir);</comment>

        <comment type="line">// Attachments backup</comment>
        <expr_stmt><expr><call><name>importAttachments</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Settings restore</comment>
		<expr_stmt><expr><call><name>importSettings</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Reminders restore</comment>
		<expr_stmt><expr><call><name>resetReminders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>data_import_completed</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>click_to_refresh_application</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>createNotification</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>backupDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


	<comment type="block" format="javadoc">/**
     * Imports notes and notebooks from Springpad exported archive
     *
     * @param intent
     */</comment>
    <function><specifier>synchronized</specifier> <specifier>private</specifier> <type><name>void</name></type> <name>importDataFromSpringpad</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>backupPath</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>EXTRA_SPRINGPAD_BACKUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Importer</name></type> <name>importer</name> <init>= <expr><operator>new</operator> <call><name>Importer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>importer</name><operator>.</operator><name>setZipProgressesListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>percentage</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>mNotificationsHelper</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>extracted</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>percentage</name> <operator>+</operator> <literal type="string">"%"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>importer</name><operator>.</operator><name>doImport</name></name><argument_list>(<argument><expr><name>backupPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Updating notification</comment>
            <expr_stmt><expr><call><name>updateImportNotification</name><argument_list>(<argument><expr><name>importer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ImportException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><operator>new</operator> <call><name>NotificationsHelper</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>createNotification</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_emoticon_sad_white_24dp</name></name></expr></argument>,
                            <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_fail</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setLedActive</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></catch></try>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SpringpadElement</name></argument>&gt;</argument_list></name></type> <name>elements</name> <init>= <expr><call><name><name>importer</name><operator>.</operator><name>getSpringpadNotes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If nothing is retrieved it will exit</comment>
        <if>if <condition>(<expr><name>elements</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>elements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// These maps are used to associate with post processing notes to categories (notebooks)</comment>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categoriesWithUuid</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Adds all the notebooks (categories)</comment>
        <for>for <control>(<init><decl><type><name>SpringpadElement</name></type> <name>springpadElement</name> <range>: <expr><call><name><name>importer</name><operator>.</operator><name>getNotebooks</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>Category</name></type> <name>cat</name> <init>= <expr><operator>new</operator> <call><name>Category</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cat</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cat</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#F9EA1B"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateCategory</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>categoriesWithUuid</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getUuid</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Updating notification</comment>
            <expr_stmt><expr><name>importedSpringpadNotebooks</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateImportNotification</name><argument_list>(<argument><expr><name>importer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">// And creates a default one for notes without notebook </comment>
        <decl_stmt><decl><type><name>Category</name></type> <name>defaulCategory</name> <init>= <expr><operator>new</operator> <call><name>Category</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>defaulCategory</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"Springpad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>defaulCategory</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#F9EA1B"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateCategory</name><argument_list>(<argument><expr><name>defaulCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// And then notes are created</comment>
        <decl_stmt><decl><type><name>Note</name></type> <name>note</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Attachment</name></type> <name>mAttachment</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SpringpadElement</name></type> <name>springpadElement</name> <range>: <expr><call><name><name>importer</name><operator>.</operator><name>getNotes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><name>note</name> <operator>=</operator> <operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Title</comment>
            <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Content dependent from type of Springpad note</comment>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>content</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name>
                    <operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>springpadElement</name>
                    <operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Some notes could have been exported wrongly</comment>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_VIDEO</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getVideos</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IndexOutOfBoundsException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_TVSHOW</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(
                        <argument><expr><call><name><name>TextUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getCast</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_BOOK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Author: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Publication date: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getPublicationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_RECIPE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Ingredients: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getIngredients</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Directions: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getDirections</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_BOOKMARK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_BUSINESS</name></name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>springpadElement</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Phone number: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPhone</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_PRODUCT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Category: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Manufacturer: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getManufacturer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Price: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getPrice</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_WINE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Wine type: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getWine_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Varietal: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getVarietal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Price: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getPrice</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_ALBUM</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Artist: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getArtist</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <for>for <control>(<init><decl><type><name>SpringpadComment</name></type> <name>springpadComment</name> <range>: <expr><call><name><name>springpadElement</name><operator>.</operator><name>getComments</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadComment</name><operator>.</operator><name>getCommenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" commented at 0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadComment</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getArtist</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name><name>content</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Checklists</comment>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SpringpadElement</name><operator>.</operator><name>TYPE_CHECKLIST</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>checkmark</name></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SpringpadItem</name></type> <name>mSpringpadItem</name> <range>: <expr><call><name><name>springpadElement</name><operator>.</operator><name>getItems</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                    <expr_stmt><expr><name>checkmark</name> <operator>=</operator> <ternary><condition><expr><call><name><name>mSpringpadItem</name><operator>.</operator><name>getComplete</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name>
                            <operator>.</operator><name>CHECKED_SYM</name></name></expr>
                            </then><else>: <expr><name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>UNCHECKED_SYM</name></name></expr></else></ternary></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>checkmark</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>mSpringpadItem</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setChecklist</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// Tags</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>tags</name> <init>= <expr><ternary><condition><expr><call><name><name>springpadElement</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"#"</literal>
                    <operator>+</operator> <call><name><name>TextUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">" #"</literal></expr></argument>, <argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// Address</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><ternary><condition><expr><call><name><name>springpadElement</name><operator>.</operator><name>getAddresses</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>springpadElement</name><operator>.</operator><name>getAddresses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr>
                    </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>coords</name> <init>= <expr><call><name><name>GeocodeHelper</name><operator>.</operator><name>getCoordinatesFromAddress</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><name><name>coords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><name><name>coords</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"An error occurred trying to resolve address to coords during Springpad import"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// Reminder</comment>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setAlarm</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// Creation, modification, category</comment>
            <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCreation</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getCreated</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLastModification</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getModified</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Image</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>image</name> <init>= <expr><call><name><name>springpadElement</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>createNewAttachmentFileFromHttp</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>mAttachment</name> <operator>=</operator> <operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>importer</name><operator>.</operator><name>getWorkingPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mAttachment</name> <operator>=</operator> <call><name><name>StorageHelper</name><operator>.</operator><name>createAttachmentFromUri</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error retrieving Springpad online image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
                <if>if <condition>(<expr><name>mAttachment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>addAttachment</name></name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>mAttachment</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// Other attachments</comment>
            <for>for <control>(<init><decl><type><name>SpringpadAttachment</name></type> <name>springpadAttachment</name> <range>: <expr><call><name><name>springpadElement</name><operator>.</operator><name>getAttachments</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <comment type="line">// The attachment could be the image itself so it's jumped</comment>
                <if>if <condition>(<expr><name>image</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>image</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>springpadAttachment</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

                <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>springpadAttachment</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>

                <comment type="line">// Tries first with online images</comment>
                <try>try <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>createNewAttachmentFileFromHttp</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>springpadAttachment</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>mAttachment</name> <operator>=</operator> <operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>importer</name><operator>.</operator><name>getWorkingPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>springpadAttachment</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mAttachment</name> <operator>=</operator> <call><name><name>StorageHelper</name><operator>.</operator><name>createAttachmentFromUri</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error retrieving Springpad online image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
                <if>if <condition>(<expr><name>mAttachment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>addAttachment</name></name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>mAttachment</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            }</block></for>

            <comment type="line">// If the note has a category is added to the map to be post-processed</comment>
            <if>if <condition>(<expr><call><name><name>springpadElement</name><operator>.</operator><name>getNotebooks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><call><name><name>categoriesWithUuid</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>springpadElement</name><operator>.</operator><name>getNotebooks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><name>defaulCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// The note is saved</comment>
            <expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>addReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Updating notification</comment>
            <expr_stmt><expr><name>importedSpringpadNotes</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateImportNotification</name><argument_list>(<argument><expr><name>importer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// Delete temp data</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>importer</name><operator>.</operator><name>clean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Springpad import temp files not deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>data_import_completed</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>click_to_refresh_application</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>createNotification</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateImportNotification</name><parameter_list>(<parameter><decl><type><name>Importer</name></type> <name>importer</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mNotificationsHelper</name><operator>.</operator><name>setMessage</name></name><argument_list>(
                <argument><expr><call><name><name>importer</name><operator>.</operator><name>getNotebooksCount</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>categories</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" ("</literal>
                        <operator>+</operator> <name>importedSpringpadNotebooks</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>imported</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"), "</literal>
                        <operator>+</operator> <operator>+</operator><call><name><name>importer</name><operator>.</operator><name>getNotesCount</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notes</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" ("</literal>
                        <operator>+</operator> <name>importedSpringpadNotes</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>imported</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>synchronized</specifier> <specifier>private</specifier> <type><name>void</name></type> <name>deleteData</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// Gets backup folder</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>backupName</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>INTENT_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>backupDir</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getBackupDir</name></name><argument_list>(<argument><expr><name>backupName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Backup directory removal</comment>
        <expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>backupDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>data_deletion_completed</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><name>backupName</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>deleted</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>createNotification</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>backupDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Creation of notification on operations completed
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>createNotification</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>)</parameter_list> <block>{

        <comment type="line">// The behavior differs depending on intent action</comment>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intentLaunch</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>DataBackupIntentService</name><operator>.</operator><name>ACTION_DATA_IMPORT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>DataBackupIntentService</name><operator>.</operator><name>ACTION_DATA_IMPORT_SPRINGPAD</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>intentLaunch</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>intentLaunch</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ACTION_RESTART_APP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>intentLaunch</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line">// Add this bundle to the intent</comment>
        <expr_stmt><expr><call><name><name>intentLaunch</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_CLEAR_TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intentLaunch</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Creates the PendingIntent</comment>
        <decl_stmt><decl><type><name>PendingIntent</name></type> <name>notifyIntent</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>intentLaunch</name></expr></argument>,
                <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>NotificationsHelper</name></type> <name>mNotificationsHelper</name> <init>= <expr><operator>new</operator> <call><name>NotificationsHelper</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mNotificationsHelper</name><operator>.</operator><name>createNotification</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_content_save_white_24dp</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>notifyIntent</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setMessage</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setRingtone</name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"settings_notification_ringtone"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setLedActive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"settings_notification_vibration"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mNotificationsHelper</name><operator>.</operator><name>setVibration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>mNotificationsHelper</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Export database to backup folder
     *
     * @return True if success, false otherwise
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>exportDB</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>database</name> <init>= <expr><call><name>getDatabasePath</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DATABASE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><call><name><name>StorageHelper</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>DATABASE_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>exportNotes</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllNotes</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
			<decl_stmt><decl><type><name>File</name></type> <name>noteFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>noteFile</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>toJSON</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error backupping note: "</literal> <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></for>
	}</block></function>


    <comment type="block" format="javadoc">/**
     * Export attachments to backup folder
     *
     * @return True if success, false otherwise
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>exportAttachments</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>attachmentsDir</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getAttachmentDir</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>destinationattachmentsDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><call><name><name>attachmentsDir</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DbHelper</name></type> <name>db</name> <init>= <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getAllAttachments</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>exported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>copyToBackupDir</name></name><argument_list>(<argument><expr><name>destinationattachmentsDir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mNotificationsHelper</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>TextHelper</name><operator>.</operator><name>capitalize</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>attachment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>exported</name><operator>++</operator> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Exports settings if required
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>exportSettings</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>preferences</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getSharedPreferencesFile</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><call><name><name>StorageHelper</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><name>preferences</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><call><name><name>preferences</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Imports settings
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>importSettings</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>preferences</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getSharedPreferencesFile</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>preferenceBackup</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><call><name><name>preferences</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><call><name><name>StorageHelper</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><name>preferenceBackup</name></expr></argument>, <argument><expr><name>preferences</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>


	<comment type="block" format="javadoc">/**
	 * Schedules reminders
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>resetReminders</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Resettings reminders"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotesWithReminderNotFired</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>addReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>


    <comment type="block" format="javadoc">/**
     * Import database from backup folder
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>importDB</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>database</name> <init>= <expr><call><name>getDatabasePath</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DATABASE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><operator>(</operator><call><name><name>StorageHelper</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>DATABASE_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>importNotes</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>File</name></type> <name>file</name> <range>: <expr><call><name><name>FileUtils</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RegexFileFilter</name><argument_list>(<argument><expr><literal type="string">"\\d{13}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>TrueFileFilter</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
			<try>try <block>{
				<decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>buildFromJson</name></name><argument_list>(<argument><expr><call><name><name>FileUtils</name><operator>.</operator><name>readFileToString</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateCategory</name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
					<expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateAttachment</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error parsing note json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></for>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Import attachments from backup folder
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>importAttachments</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backupDir</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>attachmentsDir</name> <init>= <expr><call><name><name>StorageHelper</name><operator>.</operator><name>getAttachmentDir</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>backupAttachmentsDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>backupDir</name></expr></argument>, <argument><expr><call><name><name>attachmentsDir</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>backupAttachmentsDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<return>return;</return>
		}</block></then></if>
        <decl_stmt><decl><type><name>Collection</name></type> <name>list</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><name>backupAttachmentsDir</name></expr></argument>, <argument><expr><call><name><name>FileFilterUtils</name><operator>.</operator><name>trueFileFilter</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>TrueFileFilter</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>i</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>imported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>File</name><operator>)</operator> <call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFileToDirectory</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>attachmentsDir</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mNotificationsHelper</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>TextHelper</name><operator>.</operator><name>capitalize</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>attachment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>imported</name><operator>++</operator> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error importing the attachment "</literal> <operator>+</operator> <call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></while>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttachingFileErrorOccurred</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// TODO Auto-generated method stub</comment>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttachingFileFinished</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// TODO Auto-generated method stub</comment>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\notes\NoteProcessorTrash.java" hash="09d344c5151a87340b051c76c00e1f37131714bd"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>ReminderHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>ShortcutHelper</name></name>;</import>


<class><specifier>public</specifier> class <name>NoteProcessorTrash</name> <super><extends>extends <name>NoteProcessor</name></extends></super> <block>{

    <decl_stmt><decl><type><name>boolean</name></type> <name>trash</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>NoteProcessorTrash</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trash</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trash</name></name> <operator>=</operator> <name>trash</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>processNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>trash</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ShortcutHelper</name><operator>.</operator><name>removeshortCut</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>removeReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>addReminder</name></name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trashNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>trash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\CategoriesUpdatedEvent.java" hash="ddfba620b18cb3ad993fb3188266be587515f552"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Created by fede on 18/04/15.
 */</comment>
<class><specifier>public</specifier> class <name>CategoriesUpdatedEvent</name> <block>{

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\DynamicNavigationReadyEvent.java" hash="bd2b75e587f925af91f1bef3c402430c417ec423"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Created by fede on 18/04/15.
 */</comment>
<class><specifier>public</specifier> class <name>DynamicNavigationReadyEvent</name> <block>{

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\NavigationUpdatedEvent.java" hash="a7428aa9ebd31a6a2bb98fe294392850ac2b950b"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Created by fede on 18/04/15.
 */</comment>
<class><specifier>public</specifier> class <name>NavigationUpdatedEvent</name> <block>{

	<decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>navigationItem</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>NavigationUpdatedEvent</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>navigationItem</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>navigationItem</name></name> <operator>=</operator> <name>navigationItem</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\NavigationUpdatedNavDrawerClosedEvent.java" hash="5a51eb4a45f93030e4de59c50f10f5309f59a85b"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>NavigationUpdatedNavDrawerClosedEvent</name> <block>{

	<decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>navigationItem</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>NavigationUpdatedNavDrawerClosedEvent</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>navigationItem</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>navigationItem</name></name> <operator>=</operator> <name>navigationItem</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\NotesLoadedEvent.java" hash="8f61e2cc84a47f1644499c31a707c45fd083ad32"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>


<class><specifier>public</specifier> class <name>NotesLoadedEvent</name> <block>{

	<decl_stmt><decl><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>NotesLoadedEvent</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>notes</name></name> <operator>=</operator> <name>notes</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\NotesMergeEvent.java" hash="88d6ca7a41ce8e8cf4068165701b840c986ac2fd"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>NotesMergeEvent</name> <block>{

	<decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>keepMergedNotes</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>NotesMergeEvent</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>keepMergedNotes</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>keepMergedNotes</name></name> <operator>=</operator> <name>keepMergedNotes</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\NotesUpdatedEvent.java" hash="753ca33b650bbb07d36e8775c56a86b07e45e211"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Created by fede on 18/04/15.
 */</comment>
<class><specifier>public</specifier> class <name>NotesUpdatedEvent</name> <block>{

	<constructor><specifier>public</specifier> <name>NotesUpdatedEvent</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\notes\SaveNoteTask.java" hash="5df0e7bf3c1c8e7dbd7353d918bb27403e041503"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>notes</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name><operator>.</operator><name>DbHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>Note</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OnNoteSaved</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>ReminderHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>StorageHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>date</name><operator>.</operator><name>DateUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>SaveNoteTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>, <argument><name>Void</name></argument>, <argument><name>Note</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>updateLastModification</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>OnNoteSaved</name></type> <name>mOnNoteSaved</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>SaveNoteTask</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>updateLastModification</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>updateLastModification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <constructor><specifier>public</specifier> <name>SaveNoteTask</name><parameter_list>(<parameter><decl><type><name>OnNoteSaved</name></type> <name>mOnNoteSaved</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateLastModification</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mOnNoteSaved</name></name> <operator>=</operator> <name>mOnNoteSaved</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>updateLastModification</name></name> <operator>=</operator> <name>updateLastModification</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>Note</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Note</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>purgeRemovedAttachments</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>reminderMustBeSet</name> <init>= <expr><call><name><name>DateUtils</name><operator>.</operator><name>isFuture</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>reminderMustBeSet</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setReminderFired</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>note</name> <operator>=</operator> <call><name><name>DbHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><name>updateLastModification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>reminderMustBeSet</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>ReminderHelper</name><operator>.</operator><name>addReminder</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
        <return>return <expr><name>note</name></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <type><name>void</name></type> <name>purgeRemovedAttachments</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>deletedAttachments</name> <init>= <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsListOld</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>attachment</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <comment type="line">// Workaround to prevent deleting attachments if instance is changed (app restart)</comment>
                <if>if <condition>(<expr><call><name><name>deletedAttachments</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>attachment</name> <operator>=</operator> <call><name>getFixedAttachmentInstance</name><argument_list>(<argument><expr><name>deletedAttachments</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>deletedAttachments</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <comment type="line">// Remove from database deleted attachments</comment>
        <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>deletedAttachment</name> <range>: <expr><name>deletedAttachments</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>StorageHelper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>deletedAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Removed attachment "</literal> <operator>+</operator> <call><name><name>deletedAttachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>


    <function><specifier>private</specifier> <type><name>Attachment</name></type> <name>getFixedAttachmentInstance</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>deletedAttachments</name></decl></parameter>, <parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>deletedAttachment</name> <range>: <expr><name>deletedAttachments</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>deletedAttachment</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><name>deletedAttachment</name></expr>;</return>
			}</block></then></if>
        }</block></for>
        <return>return <expr><name>attachment</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPostExecute</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>mOnNoteSaved</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mOnNoteSaved</name><operator>.</operator><name>onNoteSaved</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\NotificationRemovedEvent.java" hash="839fc74ec9c42505f061587dd159c26c3c53775e"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>service</name><operator>.</operator><name>notification</name><operator>.</operator><name>StatusBarNotification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>NotificationRemovedEvent</name> <block>{

	<decl_stmt><decl><specifier>public</specifier> <type><name>StatusBarNotification</name></type> <name>statusBarNotification</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>NotificationRemovedEvent</name><parameter_list>(<parameter><decl><type><name>StatusBarNotification</name></type> <name>statusBarNotification</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>statusBarNotification</name></name> <operator>=</operator> <name>statusBarNotification</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\PasswordRemovedEvent.java" hash="89b491f134e0b6f74d056d4a5a687973b4b4a0b0"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>PasswordRemovedEvent</name> <block>{

	<constructor><specifier>public</specifier> <name>PasswordRemovedEvent</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\PushbulletReplyEvent.java" hash="6d20a03742e2e3608017371e7783f132182e44ed"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>PushbulletReplyEvent</name> <block>{

	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>message</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>PushbulletReplyEvent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\async\bus\SwitchFragmentEvent.java" hash="5a801b9b2b20f37cfabaee07bbd8d27c61be55f6"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>bus</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>Constants</name></name>;</import>


<class><specifier>public</specifier> class <name>SwitchFragmentEvent</name> <block>{

	<enum><specifier>public</specifier> enum <name>Direction</name> <block>{
		<decl><name>CHILDREN</name></decl>, <decl><name>PARENT</name></decl>
	}</block></enum>


	<decl_stmt><decl><specifier>public</specifier> <type><name>Direction</name></type> <name>direction</name></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>SwitchFragmentEvent</name><parameter_list>(<parameter><decl><type><name>Direction</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>direction</name></name> <operator>=</operator> <name>direction</name></expr>;</expr_stmt>
	}</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="repos\Omni-Notes\omniNotes\src\main\java\it\feio\android\omninotes\db\DbHelper.java" hash="907b4253f7916dd07971dd7429678ffc9b1fbadf"><comment type="block">/*
 * Copyright (C) 2018 Federico Iosue (federico.iosue@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteOpenHelper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>OmniNotes</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>async</name><operator>.</operator><name>upgrade</name><operator>.</operator><name>UpgradeProcessor</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>helpers</name><operator>.</operator><name>NotesHelper</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>models</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name><operator>.</operator><name>omninotes</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringEscapeUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>


<class><specifier>public</specifier> class <name>DbHelper</name> <super><extends>extends <name>SQLiteOpenHelper</name></extends></super> <block>{

    <comment type="line">// Database name</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATABASE_NAME</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>DATABASE_NAME</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// Database version aligned if possible to software version</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DATABASE_VERSION</name> <init>= <expr><literal type="number">501</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// Sql query file directory</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SQL_DIR</name> <init>= <expr><literal type="string">"sql"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Notes table name</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TABLE_NOTES</name> <init>= <expr><literal type="string">"notes"</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// Notes table columns</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ID</name> <init>= <expr><literal type="string">"creation"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CREATION</name> <init>= <expr><literal type="string">"creation"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_LAST_MODIFICATION</name> <init>= <expr><literal type="string">"last_modification"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TITLE</name> <init>= <expr><literal type="string">"title"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CONTENT</name> <init>= <expr><literal type="string">"content"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ARCHIVED</name> <init>= <expr><literal type="string">"archived"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TRASHED</name> <init>= <expr><literal type="string">"trashed"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_REMINDER</name> <init>= <expr><literal type="string">"alarm"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_REMINDER_FIRED</name> <init>= <expr><literal type="string">"reminder_fired"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_RECURRENCE_RULE</name> <init>= <expr><literal type="string">"recurrence_rule"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_LATITUDE</name> <init>= <expr><literal type="string">"latitude"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_LONGITUDE</name> <init>= <expr><literal type="string">"longitude"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ADDRESS</name> <init>= <expr><literal type="string">"address"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CATEGORY</name> <init>= <expr><literal type="string">"category_id"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_LOCKED</name> <init>= <expr><literal type="string">"locked"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CHECKLIST</name> <init>= <expr><literal type="string">"checklist"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Attachments table name</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TABLE_ATTACHMENTS</name> <init>= <expr><literal type="string">"attachments"</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// Attachments table columns</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ATTACHMENT_ID</name> <init>= <expr><literal type="string">"attachment_id"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ATTACHMENT_URI</name> <init>= <expr><literal type="string">"uri"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ATTACHMENT_NAME</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ATTACHMENT_SIZE</name> <init>= <expr><literal type="string">"size"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ATTACHMENT_LENGTH</name> <init>= <expr><literal type="string">"length"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ATTACHMENT_MIME_TYPE</name> <init>= <expr><literal type="string">"mime_type"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ATTACHMENT_NOTE_ID</name> <init>= <expr><literal type="string">"note_id"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Categories table name</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TABLE_CATEGORY</name> <init>= <expr><literal type="string">"categories"</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// Categories table columns</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CATEGORY_ID</name> <init>= <expr><literal type="string">"category_id"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CATEGORY_NAME</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CATEGORY_DESCRIPTION</name> <init>= <expr><literal type="string">"description"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CATEGORY_COLOR</name> <init>= <expr><literal type="string">"color"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Queries</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CREATE_QUERY</name> <init>= <expr><literal type="string">"create.sql"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UPGRADE_QUERY_PREFIX</name> <init>= <expr><literal type="string">"upgrade-"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UPGRADE_QUERY_SUFFIX</name> <init>= <expr><literal type="string">".sql"</literal></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>DbHelper</name></type> <name>instance</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>SQLiteDatabase</name></type> <name>db</name></decl>;</decl_stmt>


	<function><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <type><name>DbHelper</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>getInstance</name><argument_list>(<argument><expr><call><name><name>OmniNotes</name><operator>.</operator><name>getAppContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <type><name>DbHelper</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>DbHelper</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>instance</name></expr>;</return>
    }</block></function>


    <constructor><specifier>private</specifier> <name>DbHelper</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>DATABASE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DATABASE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mContext</name></name> <operator>=</operator> <name>mContext</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefs</name></name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREFS_NAME</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_MULTI_PROCESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name>String</name></type> <name>getDatabaseName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>DATABASE_NAME</name></expr>;</return>
    }</block></function>

	<function><specifier>public</specifier> <type><name>SQLiteDatabase</name></type> <name>getDatabase</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>getDatabase</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>SQLiteDatabase</name></type> <name>getDatabase</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>forceWritable</name></decl></parameter>)</parameter_list> <block>{
		<try>try <block>{
			<decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name>getReadableDatabase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>forceWritable</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>getWritableDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return>return <expr><name>db</name></expr>;</return>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><name><name>this</name><operator>.</operator><name>db</name></name></expr>;</return>
		}</block></catch></try>
	}</block></function>


    <comment type="line">// Creating Tables</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Database creation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>execSqlFile</name><argument_list>(<argument><expr><name>CREATE_QUERY</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Database creation failed"</literal></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onUpgrade</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newVersion</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Upgrading database version from "</literal> <operator>+</operator> <name>oldVersion</name> <operator>+</operator> <literal type="string">" to "</literal> <operator>+</operator> <name>newVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>UpgradeProcessor</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>oldVersion</name></expr></argument>, <argument><expr><name>newVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <for>for <control>(<init><decl><type><name>String</name></type> <name>sqlFile</name> <range>: <expr><call><name><name>AssetUtils</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><name>SQL_DIR</name></expr></argument>, <argument><expr><call><name><name>mContext</name><operator>.</operator><name>getAssets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>sqlFile</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>UPGRADE_QUERY_PREFIX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>fileVersion</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>sqlFile</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>UPGRADE_QUERY_PREFIX</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>sqlFile</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>UPGRADE_QUERY_SUFFIX</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>fileVersion</name> <operator>&gt;</operator> <name>oldVersion</name> <operator>&amp;&amp;</operator> <name>fileVersion</name> <operator>&lt;=</operator> <name>newVersion</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>execSqlFile</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Database upgrade successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Database upgrade failed"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <comment type="line">// Inserting or updating single note</comment>
    <function><specifier>public</specifier> <type><name>Note</name></type> <name>updateNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateLastModification</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name>getDatabase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>content</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>Security</name><operator>.</operator><name>encrypt</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// To ensure note and attachments insertions are atomical and boost performances transaction are used</comment>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_TITLE</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CONTENT</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CREATION</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_LAST_MODIFICATION</name></expr></argument>, <argument><expr><ternary><condition><expr><name>updateLastModification</name></expr> ?</condition><then> <expr><call><name><name>Calendar</name>
                <operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getLastModification</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>getLastModification</name></name><argument_list>()</argument_list></call></expr> </then><else>:
                <expr><call><name><name>Calendar</name>
                        <operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ARCHIVED</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>isArchived</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_TRASHED</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>isTrashed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_REMINDER</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_REMINDER_FIRED</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>isReminderFired</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_RECURRENCE_RULE</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getRecurrenceRule</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_LATITUDE</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_LONGITUDE</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ADDRESS</name></expr></argument>, <argument><expr><call><name><name>note</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CATEGORY</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>locked</name> <init>= <expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_LOCKED</name></expr></argument>, <argument><expr><name>locked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>checklist</name> <init>= <expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CHECKLIST</name></expr></argument>, <argument><expr><name>checklist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>insertWithOnConflict</name></name><argument_list>(<argument><expr><name>TABLE_NOTES</name></expr></argument>, <argument><expr><name>KEY_ID</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name><name>SQLiteDatabase</name><operator>.</operator><name>CONFLICT_REPLACE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Updated note titled '"</literal> <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Updating attachments</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>deletedAttachments</name> <init>= <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsListOld</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><call><name>updateAttachment</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>values</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><name>KEY_CREATION</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>attachment</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>deletedAttachments</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">// Remove from database deleted attachments</comment>
        <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachmentDeleted</name> <range>: <expr><name>deletedAttachments</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_ATTACHMENTS</name></expr></argument>, <argument><expr><name>KEY_ATTACHMENT_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                    <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>attachmentDeleted</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Fill the note with correct data before returning it</comment>
        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCreation</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>note</name><operator>.</operator><name>getCreation</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>values</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><name>KEY_CREATION</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLastModification</name></name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><name>KEY_LAST_MODIFICATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>note</name></expr>;</return>
    }</block></function>


    <function><specifier>protected</specifier> <type><name>void</name></type> <name>execSqlFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"  exec sql file: {}"</literal> <operator>+</operator> <name>sqlFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>sqlInstruction</name> <range>: <expr><call><name><name>SqlParser</name><operator>.</operator><name>parseSqlFile</name></name><argument_list>(<argument><expr><name>SQL_DIR</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>sqlFile</name></expr></argument>, <argument><expr><call><name><name>mContext</name><operator>.</operator><name>getAssets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"    sql: {}"</literal> <operator>+</operator> <name>sqlInstruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>sqlInstruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error executing command: "</literal> <operator>+</operator> <name>sqlInstruction</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Attachments update
     * */</comment>
    <function><specifier>public</specifier> <type><name>Attachment</name></type> <name>updateAttachment</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>updateAttachment</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>attachment</name></expr></argument>, <argument><expr><call><name>getDatabase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * New attachment insertion
     * */</comment>
    <function><specifier>public</specifier> <type><name>Attachment</name></type> <name>updateAttachment</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>noteId</name></decl></parameter>, <parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>valuesAttachments</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>valuesAttachments</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ATTACHMENT_ID</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>attachment</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>attachment</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Calendar</name>
				<operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>valuesAttachments</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ATTACHMENT_NOTE_ID</name></expr></argument>, <argument><expr><name>noteId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>valuesAttachments</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ATTACHMENT_URI</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>valuesAttachments</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ATTACHMENT_MIME_TYPE</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>valuesAttachments</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ATTACHMENT_NAME</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>valuesAttachments</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ATTACHMENT_SIZE</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>valuesAttachments</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ATTACHMENT_LENGTH</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>insertWithOnConflict</name></name><argument_list>(<argument><expr><name>TABLE_ATTACHMENTS</name></expr></argument>, <argument><expr><name>KEY_ATTACHMENT_ID</name></expr></argument>, <argument><expr><name>valuesAttachments</name></expr></argument>, <argument><expr><name><name>SQLiteDatabase</name><operator>.</operator><name>CONFLICT_REPLACE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>attachment</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Getting single note
     */</comment>
    <function><specifier>public</specifier> <type><name>Note</name></type> <name>getNote</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal>
                <operator>+</operator> <name>KEY_ID</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name>id</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name> <init>= <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Note</name></type> <name>note</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>note</name> <operator>=</operator> <call><name><name>notes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>note</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>note</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Getting All notes
     *
     * @param checkNavigation Tells if navigation status (notes, archived) must be kept in
     *                        consideration or if all notes have to be retrieved
     * @return Notes list
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getAllNotes</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>checkNavigation</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>checkNavigation</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>navigation</name> <init>= <expr><call><name><name>Navigation</name><operator>.</operator><name>getNavigation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>navigation</name></expr>)</condition> <block>{
                <case>case <expr><name><name>Navigation</name><operator>.</operator><name>NOTES</name></name></expr>:</case>
                    <return>return <expr><call><name>getNotesActive</name><argument_list>()</argument_list></call></expr>;</return>
                <case>case <expr><name><name>Navigation</name><operator>.</operator><name>ARCHIVE</name></name></expr>:</case>
                    <return>return <expr><call><name>getNotesArchived</name><argument_list>()</argument_list></call></expr>;</return>
                <case>case <expr><name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name></expr>:</case>
                    <return>return <expr><call><name>getNotesWithReminder</name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_FILTER_PAST_REMINDERS</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name><name>Navigation</name><operator>.</operator><name>TRASH</name></name></expr>:</case>
                    <return>return <expr><call><name>getNotesTrashed</name><argument_list>()</argument_list></call></expr>;</return>
                <case>case <expr><name><name>Navigation</name><operator>.</operator><name>UNCATEGORIZED</name></name></expr>:</case>
                    <return>return <expr><call><name>getNotesUncategorized</name><argument_list>()</argument_list></call></expr>;</return>
                <case>case <expr><name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr>:</case>
                    <return>return <expr><call><name>getNotesByCategory</name><argument_list>(<argument><expr><call><name><name>Navigation</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                <default>default:</default>
                    <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></switch>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>

    }</block></function>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesActive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_ARCHIVED</name> <operator>+</operator> <literal type="string">" IS NOT 1 AND "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS NOT 1 "</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesArchived</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_ARCHIVED</name> <operator>+</operator> <literal type="string">" = 1 AND "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS NOT 1 "</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesTrashed</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" = 1 "</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesUncategorized</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal>
                <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <name>KEY_CATEGORY_ID</name> <operator>+</operator> <literal type="string">" IS NULL OR "</literal> <operator>+</operator> <name>KEY_CATEGORY_ID</name> <operator>+</operator> <literal type="string">" == 0) "</literal>
                <operator>+</operator> <literal type="string">"AND "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesWithLocation</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_LONGITUDE</name> <operator>+</operator> <literal type="string">" IS NOT NULL "</literal>
                <operator>+</operator> <literal type="string">"AND "</literal> <operator>+</operator> <name>KEY_LONGITUDE</name> <operator>+</operator> <literal type="string">" != 0 "</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Common method for notes retrieval. It accepts a query to perform and returns matching records.
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>whereCondition</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>noteList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>sort_column</name></decl>, <decl><type ref="prev"/><name>sort_order</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Getting sorting criteria from preferences. Reminder screen forces sorting.</comment>
        <if>if <condition>(<expr><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sort_column</name> <operator>=</operator> <name>KEY_REMINDER</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>sort_column</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_SORTING_COLUMN</name></name></expr></argument>, <argument><expr><name>KEY_TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>order</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sort_order</name> <operator>=</operator> <ternary><condition><expr><call><name><name>KEY_TITLE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sort_column</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>KEY_REMINDER</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sort_column</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">" ASC "</literal></expr> </then><else>: <expr><literal type="string">" DESC "</literal></expr></else></ternary></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// In case of title sorting criteria it must be handled empty title by concatenating content</comment>
        <expr_stmt><expr><name>sort_column</name> <operator>=</operator> <ternary><condition><expr><call><name><name>KEY_TITLE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sort_column</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>KEY_TITLE</name> <operator>+</operator> <literal type="string">"||"</literal> <operator>+</operator> <name>KEY_CONTENT</name></expr> </then><else>: <expr><name>sort_column</name></expr></else></ternary></expr>;</expr_stmt>

        <comment type="line">// In case of reminder sorting criteria the empty reminder notes must be moved on bottom of results</comment>
        <expr_stmt><expr><name>sort_column</name> <operator>=</operator> <ternary><condition><expr><call><name><name>KEY_REMINDER</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sort_column</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"IFNULL("</literal> <operator>+</operator> <name>KEY_REMINDER</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                <literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>TIMESTAMP_UNIX_EPOCH</name></name> <operator>+</operator> <literal type="string">")"</literal></expr> </then><else>: <expr><name>sort_column</name></expr></else></ternary></expr>;</expr_stmt>

        <comment type="line">// Generic query to be specialized with conditions passed as parameter</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><literal type="string">"SELECT "</literal>
                <operator>+</operator> <name>KEY_CREATION</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_LAST_MODIFICATION</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_TITLE</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CONTENT</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_ARCHIVED</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_REMINDER</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_REMINDER_FIRED</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_RECURRENCE_RULE</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_LATITUDE</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_LONGITUDE</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_ADDRESS</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_LOCKED</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CHECKLIST</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_NAME</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_DESCRIPTION</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_COLOR</name>
                <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TABLE_NOTES</name>
                <operator>+</operator> <literal type="string">" LEFT JOIN "</literal> <operator>+</operator> <name>TABLE_CATEGORY</name> <operator>+</operator> <literal type="string">" USING( "</literal> <operator>+</operator> <name>KEY_CATEGORY</name> <operator>+</operator> <literal type="string">") "</literal>
                <operator>+</operator> <name>whereCondition</name>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>order</name></expr> ?</condition><then> <expr><literal type="string">" ORDER BY "</literal> <operator>+</operator> <name>sort_column</name> <operator>+</operator> <literal type="string">" COLLATE NOCASE "</literal> <operator>+</operator> <name>sort_order</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Query: "</literal> <operator>+</operator> <name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>getDatabase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>rawQuery</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Looping through all rows and adding to list</comment>
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <do>do <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Note</name></type> <name>note</name> <init>= <expr><operator>new</operator> <call><name>Note</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCreation</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLastModification</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setArchived</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setTrashed</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setAlarm</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setReminderFired</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setRecurrenceRule</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setAddress</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setLocked</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setChecklist</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Eventual decryption of content</comment>
                    <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><call><name><name>Security</name><operator>.</operator><name>decrypt</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PASSWORD</name></name></expr></argument>,
                                <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <comment type="line">// Set category</comment>
					<decl_stmt><decl><type><name>long</name></type> <name>categoryId</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>categoryId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name>Category</name></type> <name>category</name> <init>= <expr><operator>new</operator> <call><name>Category</name><argument_list>(<argument><expr><name>categoryId</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>

                    <comment type="line">// Add eventual attachments uri</comment>
                    <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setAttachmentsList</name></name><argument_list>(<argument><expr><call><name>getNoteAttachments</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Adding note to list</comment>
                    <expr_stmt><expr><call><name><name>noteList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                }</block> while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            }</block></then></if>

        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Query: Retrieval finished!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>noteList</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Archives/restore single note
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>archiveNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>archive</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setArchived</name></name><argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Trashes/restore single note
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>trashNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trash</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>note</name><operator>.</operator><name>setTrashed</name></name><argument_list>(<argument><expr><name>trash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Deleting single note
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>deleteNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>deleteNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Deleting single note but keeping attachments
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>deleteNote</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>keepAttachments</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>deletedNotes</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name>getDatabase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Delete notes</comment>
        <expr_stmt><expr><name>deletedNotes</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NOTES</name></expr></argument>, <argument><expr><name>KEY_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>keepAttachments</name></expr>)</condition><then> <block>{
            <comment type="line">// Delete note's attachments</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>deletedAttachments</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_ATTACHMENTS</name></expr></argument>, <argument><expr><name>KEY_ATTACHMENT_NOTE_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                    <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>&amp;&amp;</operator> <name>deletedAttachments</name> <operator>==</operator> <call><name><name>note</name><operator>.</operator><name>getAttachmentsList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// Check on correct and complete deletion</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>&amp;&amp;</operator> <name>deletedNotes</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Empties trash deleting all trashed notes
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>emptyTrash</name><parameter_list>()</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><call><name>getNotesTrashed</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name>deleteNote</name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Gets notes matching pattern with title or content text
     *
     * @param pattern String to match with
     * @return Notes list
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesByPattern</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{
    	<decl_stmt><decl><type><name>String</name></type> <name>escapedPattern</name> <init>= <expr><call><name><name>StringEscapeUtils</name><operator>.</operator><name>escapeSql</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>navigation</name> <init>= <expr><call><name><name>Navigation</name><operator>.</operator><name>getNavigation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal>
                <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>TRASH</name></name></expr> ?</condition><then> <expr><literal type="string">" IS 1"</literal></expr> </then><else>: <expr><literal type="string">" IS NOT 1"</literal></expr></else></ternary><operator>)</operator>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>ARCHIVE</name></name></expr> ?</condition><then> <expr><literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_ARCHIVED</name> <operator>+</operator> <literal type="string">" IS 1"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>CATEGORY</name></name></expr> ?</condition><then> <expr><literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_CATEGORY</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <call><name><name>Navigation</name><operator>.</operator><name>getCategory</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>navigation</name> <operator>==</operator> <name><name>Navigation</name><operator>.</operator><name>UNCATEGORIZED</name></name></expr> ?</condition><then> <expr><literal type="string">" AND ("</literal> <operator>+</operator> <name>KEY_CATEGORY</name> <operator>+</operator> <literal type="string">" IS NULL OR "</literal> <operator>+</operator> <name>KEY_CATEGORY_ID</name>
                <operator>+</operator> <literal type="string">" == 0) "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>REMINDERS</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_REMINDER</name> <operator>+</operator> <literal type="string">" IS NOT NULL"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator>
                <operator>+</operator> <literal type="string">" AND ("</literal>
                <operator>+</operator> <literal type="string">" ( "</literal> <operator>+</operator> <name>KEY_LOCKED</name> <operator>+</operator> <literal type="string">" IS NOT 1 AND ("</literal> <operator>+</operator> <name>KEY_TITLE</name> <operator>+</operator> <literal type="string">" LIKE '%"</literal> <operator>+</operator> <name>escapedPattern</name> <operator>+</operator> <literal type="string">"%' "</literal> <operator>+</operator> <literal type="string">" OR "</literal> <operator>+</operator>
                <name>KEY_CONTENT</name> <operator>+</operator> <literal type="string">" LIKE '%"</literal> <operator>+</operator> <name>escapedPattern</name> <operator>+</operator> <literal type="string">"%' ))"</literal>
                <operator>+</operator> <literal type="string">" OR ( "</literal> <operator>+</operator> <name>KEY_LOCKED</name> <operator>+</operator> <literal type="string">" = 1 AND "</literal> <operator>+</operator> <name>KEY_TITLE</name> <operator>+</operator> <literal type="string">" LIKE '%"</literal> <operator>+</operator> <name>escapedPattern</name> <operator>+</operator> <literal type="string">"%' )"</literal>
                <operator>+</operator> <literal type="string">")"</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Search for notes with reminder
     *
     * @param filterPastReminders Excludes past reminders
     * @return Notes list
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesWithReminder</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>filterPastReminders</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_REMINDER</name>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>filterPastReminders</name></expr> ?</condition><then> <expr><literal type="string">" &gt;= "</literal> <operator>+</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">" IS NOT NULL"</literal></expr></else></ternary><operator>)</operator>
                <operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_ARCHIVED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal>
                <operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Returns all notes that have a reminder that has not been alredy fired
     *
     * @return Notes list
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesWithReminderNotFired</name> <parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_REMINDER</name> <operator>+</operator> <literal type="string">" IS NOT NULL"</literal>
                                <operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_REMINDER_FIRED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal>
                                <operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_ARCHIVED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal>
                                <operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves locked or unlocked notes
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesWithLock</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>locked</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_LOCKED</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>locked</name></expr> ?</condition><then> <expr><literal type="string">" = 1 "</literal></expr> </then><else>: <expr><literal type="string">" IS NOT 1 "</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Search for notes with reminder expiring the current day
     *
     * @return Notes list
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getTodayReminders</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE DATE("</literal> <operator>+</operator> <name>KEY_REMINDER</name> <operator>+</operator> <literal type="string">"/1000, 'unixepoch') = DATE('now') AND "</literal> <operator>+</operator>
                <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves all attachments related to specific note
     */</comment>
    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>getNoteAttachments</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_ATTACHMENT_NOTE_ID</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getAttachments</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getChecklists</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_CHECKLIST</name> <operator>+</operator> <literal type="string">" = 1"</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getMasked</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_LOCKED</name> <operator>+</operator> <literal type="string">" = 1"</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves all notes related to Category it passed as parameter
     *
     * @param categoryId Category integer identifier
     * @return List of notes with requested category
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesByCategory</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>categoryId</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>filterArchived</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_FILTER_ARCHIVED_IN_CATEGORIES</name></name> <operator>+</operator> <name>categoryId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal>
                    <operator>+</operator> <name>KEY_CATEGORY_ID</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name>categoryId</name>
					<operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal>
					<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>filterArchived</name></expr> ?</condition><then> <expr><literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_ARCHIVED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>notes</name> <operator>=</operator> <call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>notes</name> <operator>=</operator> <call><name>getAllNotes</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>notes</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves all tags
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>getTags</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getTags</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves all tags of a specified note
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>getTags</name><parameter_list>(<parameter><decl><type><name>Note</name></type> <name>note</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Tag</name></argument>&gt;</argument_list></name></type> <name>tags</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tagsMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>note</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>KEY_ID</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>get_id</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" AND "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator>
                <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <name>KEY_CONTENT</name> <operator>+</operator> <literal type="string">" LIKE '%#%' OR "</literal> <operator>+</operator> <name>KEY_TITLE</name> <operator>+</operator> <literal type="string">" LIKE '%#%' "</literal> <operator>+</operator> <literal type="string">")"</literal>
                <operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>TRASH</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" NOT "</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">" 1"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notesRetrieved</name> <init>= <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Note</name></type> <name>noteRetrieved</name> <range>: <expr><name>notesRetrieved</name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tagsRetrieved</name> <init>= <expr><call><name><name>TagsHelper</name><operator>.</operator><name>retrieveTags</name></name><argument_list>(<argument><expr><name>noteRetrieved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><call><name><name>tagsRetrieved</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><call><name><name>tagsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>tagsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>tagsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>++</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><call><name><name>tagsMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>Tag</name></type> <name>tag</name> <init>= <expr><operator>new</operator> <call><name>Tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>tagsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>tag1</name></decl></parameter>, <parameter><decl><name>tag2</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>tag1</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareToIgnoreCase</name><argument_list>(<argument><expr><call><name><name>tag2</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tags</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves all notes related to category it passed as parameter
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesByTag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>tag</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getNotesByTag</name><argument_list>(<argument><expr><call><name><name>tag</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name>getNotesByTag</name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name>tag</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves all notes with specified tags
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesByTag</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>tags</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>whereCondition</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>whereCondition</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" WHERE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tags</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>whereCondition</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
			<expr_stmt><expr><call><name><name>whereCondition</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"("</literal> <operator>+</operator> <name>KEY_CONTENT</name> <operator>+</operator> <literal type="string">" LIKE '%"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"%' OR "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>KEY_TITLE</name></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" LIKE '%"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"%')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">// Trashed notes must be included in search results only if search if performed from trash</comment>
        <expr_stmt><expr><call><name><name>whereCondition</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" AND "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>Navigation</name><operator>.</operator><name>checkNavigation</name></name><argument_list>(<argument><expr><name><name>Navigation</name><operator>.</operator><name>TRASH</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
                <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">""</literal> <operator>+</operator>
                <literal type="string">" NOT "</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><call><name><name>rx</name><operator>.</operator><name>Observable</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name>getNotes</name><argument_list>(<argument><expr><call><name><name>whereCondition</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>note</name></decl></parameter></parameter_list> -&gt; <block>{
					<decl_stmt><decl><type><name>boolean</name></type> <name>matches</name> <init>= <expr><call><name><name>rx</name><operator>.</operator><name>Observable</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call>
							<operator>.</operator><call><name>all</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>tag</name></decl></parameter></parameter_list> -&gt; <block>{
								<decl_stmt><decl><type><name>Pattern</name></type> <name>p</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">".*(\\s|^)"</literal> <operator>+</operator> <name>tag</name> <operator>+</operator> <literal type="string">"(\\s|$).*"</literal></expr></argument>, <argument><expr><name><name>Pattern</name><operator>.</operator><name>MULTILINE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<return>return <expr><call><name><name>p</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>note</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>note</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>find</name><argument_list>()</argument_list></call></expr>;</return>
							}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toBlocking</name><argument_list>()</argument_list></call><operator>.</operator><call><name>single</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<return>return <expr><ternary><condition><expr><name>matches</name></expr> ?</condition><then> <expr><name>note</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
				}</block></lambda></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>note</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name>note</name> <operator>!=</operator> <literal type="null">null</literal></expr></block></lambda></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBlocking</name><argument_list>()</argument_list></call><operator>.</operator><call><name>single</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieves all uncompleted checklists
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>getNotesByUncompleteChecklist</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>whereCondition</name> <init>= <expr><literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_CHECKLIST</name> <operator>+</operator> <literal type="string">" = 1 AND "</literal> <operator>+</operator> <name>KEY_CONTENT</name> <operator>+</operator> <literal type="string">" LIKE '%"</literal> <operator>+</operator> <name><name>it</name><operator>.</operator><name>feio</name><operator>.</operator><name>android</name>
				<operator>.</operator><name>checklistview</name><operator>.</operator><name>interfaces</name><operator>.</operator><name>Constants</name><operator>.</operator><name>UNCHECKED_SYM</name></name> <operator>+</operator> <literal type="string">"%'"</literal></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><name>whereCondition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves all attachments
     */</comment>
    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>getAllAttachments</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getAttachments</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves attachments using a condition passed as parameter
     *
     * @return List of attachments
     */</comment>
    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>getAttachments</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>whereCondition</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachmentsList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT "</literal>
                <operator>+</operator> <name>KEY_ATTACHMENT_ID</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_ATTACHMENT_URI</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_ATTACHMENT_NAME</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_ATTACHMENT_SIZE</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_ATTACHMENT_LENGTH</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_ATTACHMENT_MIME_TYPE</name>
                <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TABLE_ATTACHMENTS</name>
                <operator>+</operator> <name>whereCondition</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{

            <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>getDatabase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>rawQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Looping through all rows and adding to list</comment>
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Attachment</name></type> <name>mAttachment</name></decl>;</decl_stmt>
                <do>do <block>{
                    <expr_stmt><expr><name>mAttachment</name> <operator>=</operator> <operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>attachmentsList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mAttachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            }</block></then></if>

        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>
        <return>return <expr><name>attachmentsList</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves categories list from database
     *
     * @return List of categories
     */</comment>
    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>getCategories</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categoriesList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT "</literal>
                <operator>+</operator> <name>KEY_CATEGORY_ID</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_NAME</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_DESCRIPTION</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_COLOR</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <literal type="string">" COUNT("</literal> <operator>+</operator> <name>KEY_ID</name> <operator>+</operator> <literal type="string">") count"</literal>
                <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TABLE_CATEGORY</name>
                <operator>+</operator> <literal type="string">" LEFT JOIN ("</literal>
                <operator>+</operator> <literal type="string">" SELECT "</literal> <operator>+</operator> <name>KEY_ID</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>KEY_CATEGORY</name>
                <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TABLE_NOTES</name>
                <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_TRASHED</name> <operator>+</operator> <literal type="string">" IS NOT 1"</literal>
                <operator>+</operator> <literal type="string">") USING( "</literal> <operator>+</operator> <name>KEY_CATEGORY</name> <operator>+</operator> <literal type="string">") "</literal>
                <operator>+</operator> <literal type="string">" GROUP BY "</literal>
                <operator>+</operator> <name>KEY_CATEGORY_ID</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_NAME</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_DESCRIPTION</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_COLOR</name>
                <operator>+</operator> <literal type="string">" ORDER BY IFNULL(NULLIF("</literal> <operator>+</operator> <name>KEY_CATEGORY_NAME</name> <operator>+</operator> <literal type="string">", ''),'zzzzzzzz') "</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>getDatabase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>rawQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Looping through all rows and adding to list</comment>
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <do>do <block>{
                    <expr_stmt><expr><call><name><name>categoriesList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Category</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name>
                            <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            }</block></then></if>

        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>
        <return>return <expr><name>categoriesList</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Updates or insert a new a category
     *
     * @param category Category to be updated or inserted
     * @return Rows affected or new inserted category id
     */</comment>
    <function><specifier>public</specifier> <type><name>Category</name></type> <name>updateCategory</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CATEGORY_ID</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>category</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>category</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
				<operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CATEGORY_NAME</name></expr></argument>, <argument><expr><call><name><name>category</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CATEGORY_DESCRIPTION</name></expr></argument>, <argument><expr><call><name><name>category</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CATEGORY_COLOR</name></expr></argument>, <argument><expr><call><name><name>category</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getDatabase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>insertWithOnConflict</name><argument_list>(<argument><expr><name>TABLE_CATEGORY</name></expr></argument>, <argument><expr><name>KEY_CATEGORY_ID</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name><name>SQLiteDatabase</name>
				<operator>.</operator><name>CONFLICT_REPLACE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>category</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Deletion of  a category
     *
     * @param category Category to be deleted
     * @return Number 1 if category's record has been deleted, 0 otherwise
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>deleteCategory</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>deleted</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name>getDatabase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Un-categorize notes associated with this category</comment>
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CATEGORY</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Updating row</comment>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NOTES</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>KEY_CATEGORY</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Delete category</comment>
        <expr_stmt><expr><name>deleted</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_CATEGORY</name></expr></argument>, <argument><expr><name>KEY_CATEGORY_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>deleted</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Get note Category
     */</comment>
    <function><specifier>public</specifier> <type><name>Category</name></type> <name>getCategory</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Category</name></type> <name>category</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT "</literal>
                <operator>+</operator> <name>KEY_CATEGORY_ID</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_NAME</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_DESCRIPTION</name> <operator>+</operator> <literal type="string">","</literal>
                <operator>+</operator> <name>KEY_CATEGORY_COLOR</name>
                <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TABLE_CATEGORY</name>
                <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_CATEGORY_ID</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name>id</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>getDatabase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>rawQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Looping through all rows and adding to list</comment>
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>category</name> <operator>=</operator> <operator>new</operator> <call><name>Category</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>
        <return>return <expr><name>category</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>int</name></type> <name>getCategorizedCount</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT COUNT(*)"</literal>
                <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TABLE_NOTES</name>
                <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_CATEGORY</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <call><name><name>category</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>getDatabase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>rawQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Looping through all rows and adding to list</comment>
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>
        <return>return <expr><name>count</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Retrieves statistics data based on app usage
     */</comment>
    <function><specifier>public</specifier> <type><name>Stats</name></type> <name>getStats</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Stats</name></type> <name>mStats</name> <init>= <expr><operator>new</operator> <call><name>Stats</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Categories</comment>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setCategories</name></name><argument_list>(<argument><expr><call><name>getCategories</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Everything about notes and their text stats</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>notesActive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>notesArchived</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>notesTrashed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>reminders</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>remindersFuture</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>checklists</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>notesMasked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>locations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>totalWords</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>totalChars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxWords</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxChars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>avgWords</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>avgChars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>words</name></decl>, <decl><type ref="prev"/><name>chars</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Note</name></argument>&gt;</argument_list></name></type> <name>notes</name> <init>= <expr><call><name>getAllNotes</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Note</name></type> <name>note</name> <range>: <expr><name>notes</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isTrashed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>notesTrashed</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isArchived</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>notesArchived</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><name>notesActive</name><operator>++</operator></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>note</name><operator>.</operator><name>getAlarm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>remindersFuture</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>reminders</name><operator>++</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isChecklist</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>checklists</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>notesMasked</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>tags</name> <operator>+=</operator> <call><name><name>TagsHelper</name><operator>.</operator><name>retrieveTags</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>note</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>note</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>locations</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>words</name> <operator>=</operator> <call><name><name>NotesHelper</name><operator>.</operator><name>getWords</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>chars</name> <operator>=</operator> <call><name><name>NotesHelper</name><operator>.</operator><name>getChars</name></name><argument_list>(<argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>words</name> <operator>&gt;</operator> <name>maxWords</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>maxWords</name> <operator>=</operator> <name>words</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>chars</name> <operator>&gt;</operator> <name>maxChars</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>maxChars</name> <operator>=</operator> <name>chars</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>totalWords</name> <operator>+=</operator> <name>words</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>totalChars</name> <operator>+=</operator> <name>chars</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setNotesActive</name></name><argument_list>(<argument><expr><name>notesActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setNotesArchived</name></name><argument_list>(<argument><expr><name>notesArchived</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setNotesTrashed</name></name><argument_list>(<argument><expr><name>notesTrashed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setReminders</name></name><argument_list>(<argument><expr><name>reminders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setRemindersFutures</name></name><argument_list>(<argument><expr><name>remindersFuture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setNotesChecklist</name></name><argument_list>(<argument><expr><name>checklists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setNotesMasked</name></name><argument_list>(<argument><expr><name>notesMasked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setTags</name></name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setLocation</name></name><argument_list>(<argument><expr><name>locations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>avgWords</name> <operator>=</operator> <name>totalWords</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>avgChars</name> <operator>=</operator> <name>totalChars</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>notes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setWords</name></name><argument_list>(<argument><expr><name>totalWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setWordsMax</name></name><argument_list>(<argument><expr><name>maxWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setWordsAvg</name></name><argument_list>(<argument><expr><name>avgWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setChars</name></name><argument_list>(<argument><expr><name>totalChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setCharsMax</name></name><argument_list>(<argument><expr><name>maxChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setCharsAvg</name></name><argument_list>(<argument><expr><name>avgChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Everything about attachments</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>attachmentsAll</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>images</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>videos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>audioRecordings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sketches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>files</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name> <init>= <expr><call><name>getAllAttachments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><name>attachments</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_IMAGE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>images</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_VIDEO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>videos</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_AUDIO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>audioRecordings</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_SKETCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sketches</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIME_TYPE_FILES</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getMime_type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>files</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setAttachments</name></name><argument_list>(<argument><expr><name>attachmentsAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setImages</name></name><argument_list>(<argument><expr><name>images</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setVideos</name></name><argument_list>(<argument><expr><name>videos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setAudioRecordings</name></name><argument_list>(<argument><expr><name>audioRecordings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setSketches</name></name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStats</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>mStats</name></expr>;</return>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setReminderFired</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>noteId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>fired</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_REMINDER_FIRED</name></expr></argument>, <argument><expr><name>fired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getDatabase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>TABLE_NOTES</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>KEY_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>noteId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


}</block></class>
</unit>

</unit>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\dit042\SimpleIO.java" hash="067ce871199712ab28972013b3809261b1303a10"><package>package <name>dit042</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Scanner</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<comment type="block" format="javadoc">/**
 *  Seventies style standard IO.
 *  @author Cezar Ionescu &lt;cezar@chalmers.se&gt;
 *  @author Johannes Ekberg &lt;uppfinnarn@gmail.com&gt;
 *  @author Musard Balliu
 *  @version 0.4
 *  @since 2015-09-01
 */</comment>
<comment type="line">// Fixes by Johannes Ekberg: closed scanners, removed useless scanner</comment>
<comment type="line">// Closing scanners leads to errors for multiple reads.</comment>
<comment type="line">// Musard: add method to read a String and a line from std input</comment>
<comment type="line">// Musard: modified readChar and setLocale for double</comment>

<class><specifier>public</specifier> class <name>SimpleIO</name> <block>{
    <comment type="block" format="javadoc">/**
     *  "Global" variable used for error checking.
     *  Always check if the value is false after an input
     *  operation, otherwise the result can be incorrect!
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>IOError</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     *  Generic print.
     *  @param o object to print
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generic println.
     *  @param o object to print
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next byte from standard input.
     *  Sets IOResult in case of error.
     *  @return next byte read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>byte</name></type> <name>readByte</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next short from standard input.
     *  Sets IOResult in case of error.
     *  @return next short read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>short</name></type> <name>readShort</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>short</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next int from standard input.
     *  Sets IOResult in case of error.
     *  @return next int read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>readInt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next long from standard input.
     *  Sets IOResult in case of error.
     *  @return next long read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>readLong</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next char from standard input.
     *  Should perhaps set IOResult on EOF, but currently doesn't.
     *  @return next char read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>char</name></type> <name>readChar</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next float from standard input.
     *  Sets IOResult in case of error.
     *  @return next float read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>readFloat</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scan</name><operator>.</operator><name>useLocale</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextFloat</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next double from standard input.
     *  Sets IOResult in case of error.
     *  @return next double read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>double</name></type> <name>readDouble</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scan</name><operator>.</operator><name>useLocale</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{

            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next boolean from standard input.
     *  Sets IOResult in case of error.
     *  @return next boolean read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>readBoolean</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next string from standard input.
     *  Stops at the first empty space.
     *  Sets IOResult in case of error.
     *  @return next string read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>readString</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="block" format="javadoc">/**
     *  Reads next line from standard input, including empty spaces.
     *  Sets IOResult in case of error.
     *  @return next line read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>readLine</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>    
            
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\Book.java" hash="f7940d79f98e52dfaaa8f06c0c766f6f07c94bc9"><package>package <name>application</name>;</package>

<class><specifier>public</specifier> class <name>Book</name> <super><implements>implements <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></implements></super> <block>{
	<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>EOL</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>lineSeparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>genre</name></decl>, <decl><type ref="prev"/><name>publisher</name></decl>, <decl><type ref="prev"/><name>coverURL</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>pages</name></decl>, <decl><type ref="prev"/><name>book_id</name></decl>, <decl><type ref="prev"/><name>quantity</name></decl>, <decl><type ref="prev"/><name>shelf</name></decl>;</decl_stmt>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getShelf</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>shelf</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setShelf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shelf</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>shelf</name></name> <operator>=</operator> <name>shelf</name></expr>;</expr_stmt>
	}</block></function>
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>isbn</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>rating</name></decl>;</decl_stmt>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setRating</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>rating</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rating</name></name> <operator>=</operator> <name>rating</name></expr>;</expr_stmt>
	}</block></function>
	<constructor><specifier>public</specifier> <name>Book</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pages</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>isbn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shelf</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>author</name></name> <operator>=</operator> <name>author</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>genre</name></name> <operator>=</operator> <name>genre</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>publisher</name></name> <operator>=</operator> <name>publisher</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>pages</name></name> <operator>=</operator> <name>pages</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isbn</name></name> <operator>=</operator> <name>isbn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>book_id</name></name> <operator>=</operator> <name>book_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>shelf</name></name> <operator>=</operator> <name>shelf</name></expr>;</expr_stmt>
	}</block></constructor>
	<constructor><specifier>public</specifier> <name>Book</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pages</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>isbn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quantity</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rating</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shelf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>coverURL</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>author</name></name> <operator>=</operator> <name>author</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>genre</name></name> <operator>=</operator> <name>genre</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>publisher</name></name> <operator>=</operator> <name>publisher</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>pages</name></name> <operator>=</operator> <name>pages</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isbn</name></name> <operator>=</operator> <name>isbn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>book_id</name></name> <operator>=</operator> <name>book_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>quantity</name></name> <operator>=</operator> <name>quantity</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rating</name></name> <operator>=</operator> <name>rating</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>shelf</name></name> <operator>=</operator> <name>shelf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>coverURL</name></name> <operator>=</operator> <name>coverURL</name></expr>;</expr_stmt>
	}</block></constructor>
	<constructor><specifier>public</specifier> <name>Book</name><parameter_list>(<parameter><decl><type><name>Book</name></type> <name>another</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <call><name><name>another</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>author</name></name> <operator>=</operator> <call><name><name>another</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>genre</name></name> <operator>=</operator> <call><name><name>another</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>publisher</name></name> <operator>=</operator> <call><name><name>another</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>pages</name></name> <operator>=</operator> <call><name><name>another</name><operator>.</operator><name>getPages</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isbn</name></name> <operator>=</operator> <call><name><name>another</name><operator>.</operator><name>getIsbn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>book_id</name></name> <operator>=</operator> <call><name><name>another</name><operator>.</operator><name>getBook_ID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>shelf</name></name><operator>=</operator><call><name><name>another</name><operator>.</operator><name>getShelf</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	}</block></constructor>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getCoverURL</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>coverURL</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		
		<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">"|Title: "</literal> <operator>+</operator> <name>title</name> <operator>+</operator> 
						<literal type="string">" | Author: "</literal> <operator>+</operator> <name>author</name> <operator>+</operator>
						<literal type="string">" | Genre: "</literal> <operator>+</operator> <name>genre</name> <operator>+</operator>
						<literal type="string">" | Publisher: "</literal> <operator>+</operator> <name>publisher</name>  <operator>+</operator>
						<literal type="string">" | Pages: "</literal> <operator>+</operator> <name>pages</name> <operator>+</operator>
						<literal type="string">" | Quantity Available: "</literal> <operator>+</operator> <name>quantity</name> <operator>+</operator>
						<literal type="string">" | Rating: "</literal> <operator>+</operator> <name>rating</name> <operator>+</operator>
						<literal type="string">" | ISBN: "</literal> <operator>+</operator> <name>isbn</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>result</name></expr>;</return>		

	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString2</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">"| ID: "</literal> <operator>+</operator> <name>book_id</name> <operator>+</operator> <literal type="string">" |Rating: "</literal> <operator>+</operator> <name>rating</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>result</name></expr>;</return>
		
		
		
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getBook_ID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>book_id</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>title</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getAuthor</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>author</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getGenre</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>genre</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getPublisher</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>publisher</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getPages</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>pages</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>long</name></type> <name>getIsbn</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>isbn</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setRating</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>totalRating</name></decl></parameter>)</parameter_list> <block>{	
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rating</name></name> <operator>=</operator> <name>totalRating</name> <operator>/</operator> <name>count</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>double</name></type> <name>getRating</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>rating</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getQuantity</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>quantity</name></name></expr>;</return>
	}</block></function>
	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Book</name></type> <name>compareBook</name></decl></parameter>)</parameter_list> <block>{
		
		<if>if <condition>( <expr><name>rating</name> <operator>&lt;</operator> <name><name>compareBook</name><operator>.</operator><name>rating</name></name></expr>)</condition><then> <block>{
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		}</block></then>
		<elseif>else <if>if <condition>( <expr><name>rating</name> <operator>&gt;</operator> <name><name>compareBook</name><operator>.</operator><name>rating</name></name></expr> )</condition><then> <block>{
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		}</block></then></if></elseif></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>alreadyBorrowed</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="string">"You have already borrowed"</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>title</name></name> <operator>+</operator> <literal type="string">" , please remove it from the checkout."</literal></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>borrowedSuccess</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><name>title</name> <operator>+</operator> <literal type="string">" by "</literal> <operator>+</operator> <name>author</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\AdvancedSearchController.java" hash="49162b8ea6ae09c23e41988f85aa2db9e7f074b0"><package>package <name>application</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DriverManager</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Statement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ResourceBundle</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>application</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>value</name><operator>.</operator><name>ChangeListener</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>FXCollections</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ListChangeListener</name><operator>.</operator><name>Change</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableSet</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>EventHandler</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>Initializable</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Tab</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableColumn</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TablePosition</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableRow</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableView</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Tooltip</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name><operator>.</operator><name>AlertType</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>cell</name><operator>.</operator><name>PropertyValueFactory</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>input</name><operator>.</operator><name>MouseEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>layout</name><operator>.</operator><name>AnchorPane</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>layout</name><operator>.</operator><name>StackPane</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>

<class><specifier>public</specifier> class <name>AdvancedSearchController</name> <super><implements>implements <name>Initializable</name></implements></super>   <block>{
	<decl_stmt><decl><specifier>static</specifier> <type><name>MyViewController</name></type> <name>myview</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>Book</name></type> <name>bookClass</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>static</specifier> <type><name>Database</name></type> <name>library</name></decl> ;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>AnchorPane</name></type> <name>rootPane</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>MenuItem</name></type> <name>exit</name></decl>, <decl><type ref="prev"/><name>about</name></decl>;</decl_stmt>
	

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>TextField</name></type> <name>Search</name></decl>, <decl><type ref="prev"/><name>SearchAuthor</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>searchCategory</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>textSearch</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableView</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>TitleCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>AuthorCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>GenreCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>PagesCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>PublisherCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>ISBNCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>QuantityCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>Book_idCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>RatingCol</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <specifier>private</specifier> <type><name>Button</name></type> <name>AdvSearch</name></decl>, <decl><type ref="prev"/><name>Toplist</name></decl>, <decl><type ref="prev"/><name>CheckOut</name></decl>, <decl><type ref="prev"/><name>SearchButton</name></decl>, <decl><type ref="prev"/><name>GoBack</name></decl>, <decl><type ref="prev"/><name>MyBooks</name></decl>, <decl><type ref="prev"/><name>AddSelectedBook</name></decl>, <decl><type ref="prev"/><name>AddCheckOut</name></decl>, <decl><type ref="prev"/><name>generateToplist</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTextSearch</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>textSearch</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTextSearch</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>textSearch</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>textSearch</name></name> <operator>=</operator> <name>textSearch</name></expr>;</expr_stmt>
	}</block></function>
 
   
    
    <function><annotation>@<name>FXML</name></annotation>
    <type><name>void</name></type> <name>SearchButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
    		
    	<decl_stmt><decl><type><name>MyViewController</name></type> <name>MyViewCo</name> <init>= <expr><operator>new</operator> <call><name>MyViewController</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
	    	<if>if<condition>(<expr><call><name><name>Search</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
	    		<expr_stmt><expr><call><name><name>MyViewCo</name><operator>.</operator><name>setSearchCategory</name></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<expr_stmt><expr><call><name><name>MyViewCo</name><operator>.</operator><name>setTextSearch</name></name><argument_list>(<argument><expr><call><name><name>SearchAuthor</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	}</block></then>
	    	<elseif>else <if>if<condition>(<expr><call><name><name>SearchAuthor</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
	    		<expr_stmt><expr><call><name><name>MyViewCo</name><operator>.</operator><name>setSearchCategory</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<expr_stmt><expr><call><name><name>MyViewCo</name><operator>.</operator><name>setTextSearch</name></name><argument_list>(<argument><expr><call><name><name>Search</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	}</block></then></if></elseif>
	    	<elseif>else <if>if<condition>(<expr><operator>!</operator><call><name><name>SearchAuthor</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Search</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{		
	    		
	    		<decl_stmt><decl><type><name>String</name></type> <name>titleText</name> <init>= <expr><call><name><name>Search</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    		<decl_stmt><decl><type><name>String</name></type> <name>authorText</name> <init>= <expr><call><name><name>SearchAuthor</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    		
	    		<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getBook</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>titleText</name></expr></argument>, <argument><expr><name>authorText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<return>return;</return>
	    	}</block></then></if></elseif></if>
	    	<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getBook</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>SearchAuthor</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>setTextSearch</name><argument_list>(<argument><expr><call><name><name>Search</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation> 
	<specifier>public</specifier> <type><name>void</name></type> <name>onEnter</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>ae</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>SearchButton</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>AddToCheckOut</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Book</name></type> <name>aBook</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>book_id</name> <init>= <expr><call><name><name>aBook</name><operator>.</operator><name>getBook_ID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>addToCheckoutList</name></name><argument_list>(<argument><expr><name>aBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>generateToplist</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getBook</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>Search</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoBack</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type>  <name>My_View_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"MyView.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>My_View_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>My_View_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>My_View_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>AdvSearch</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>Advanced_Search_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"AdvancedSearch.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>Advanced_Search_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>Advanced_Search_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>Advanced_Search_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>EnterMyBorrowedBooks</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>My_Books_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"MyBooks.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>My_Books_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>My_Books_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>My_Books_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoToToplist</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>Toplist_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Toplist.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>Toplist_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>Toplist_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>Toplist_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoToCheckOut</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>  <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>CheckOut_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"CheckOut.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>CheckOut_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>CheckOut_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FXMLLoader</name></type> <name>loader</name> <init>= <expr><operator>new</operator> <call><name>FXMLLoader</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"CheckOut.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>CheckOut_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>ResourceBundle</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>myview</name> <operator>=</operator> <operator>new</operator> <call><name>MyViewController</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//set up the columns in the table</comment>
		<expr_stmt><expr><call><name><name>TitleCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>AuthorCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>GenreCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>PublisherCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>PagesCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"pages"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ISBNCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"isbn"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>QuantityCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"quantity"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Book_idCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"book_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>RatingCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"rating"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try>try <block>{
			<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getBook</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> 
		<catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setRowFactory</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>tableView</name></decl></parameter>)</parameter_list> -&gt; <block>{
		      <return>return <expr><operator>new</operator> <call><name><name>TooltipTableRow</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><type><name>Book</name></type> <name>book</name></decl></parameter>)</parameter_list> -&gt; <block>{
		        <return>return <expr><call><name><name>book</name><operator>.</operator><name>getCoverURL</name></name><argument_list>()</argument_list></call></expr>;</return>
		      }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
       <comment type="block">/* result.setRowFactory(tv -&gt; new TableRow&lt;Book&gt;() {
            private Tooltip hoverImage = new Tooltip();
            @Override
            public void updateItem(Book book, boolean empty) {
                super.updateItem(book, empty);
                if (book == null) {
                    setTooltip(null);
                } else {
                    hoverImage.setText(book.getTitle()+", written by:  "+book.getAuthor());
                    setTooltip(hoverImage);
                }
            }
        });*/</comment>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>getBook</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>searchMethod</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type><name>strings</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{

		<decl_stmt><decl><type><name><name>Book</name> <index>[]</index></name></type> <name>searchArray</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>book</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>searchMethod</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name><name>strings</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
				<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
					<expr_stmt><expr><name>searchArray</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>searchAuthorTitle</name></name><argument_list>(<argument><expr><name><name>strings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>searchArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
						<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>searchArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>
				}</block></try>
			}</block></then>
			<elseif>else <if>if <condition>(<expr><name><name>strings</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
					<expr_stmt><expr><name>searchArray</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><call><name><name>myview</name><operator>.</operator><name>getTextSearch</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>myview</name><operator>.</operator><name>getSearchCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>searchArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
						<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>searchArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for> 
				}</block></try>
			}</block></then></if></elseif></if>	
		}</block></then>
		<elseif>else <if>if <condition>(<expr><operator>!</operator><name>searchMethod</name></expr>)</condition><then> <block>{
			<try>try <init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
				<expr_stmt><expr><name>searchArray</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>getTop10</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>searchArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>searchArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></try>
		}</block></then></if></elseif></if>
		<return>return <expr><name>book</name></expr>;</return>
	}</block></function>
	

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setStringResultAuthor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>SearchAuthor</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setStringResultTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Search</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>public</specifier>  <type><name>String</name></type> <name>getSearchCategory</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>searchCategory</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setSearchCategory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>searchCategory</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>AdvancedSearchController</name><operator>.</operator><name>searchCategory</name></name> <operator>=</operator> <name>searchCategory</name></expr>;</expr_stmt>
	}</block></function>
	
	 <function><annotation>@<name>FXML</name></annotation>
	    <type><name>void</name></type> <name>exitProgram</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
	    	<expr_stmt><expr><call><name><name>Platform</name><operator>.</operator><name>exit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></function>
	
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>aboutMenuButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Alert</name></type> <name>addBook</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Library System"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"Made by :Tim Eklund &amp; Marcus Danielsson"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"SQLite | Java | JavaFX | jBCrypt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>		
			
	

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\BorrowedBook.java" hash="5cb19899a38d7797e03ab0c30110a36bf8a39a7f"><package>package <name>application</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> class <name>BorrowedBook</name> <super><extends>extends <name>Book</name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>epoch_borrowed</name></decl>, <decl><type ref="prev"/><name>epoch_return</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>card_id</name></decl>, <decl><type ref="prev"/><name>days</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>borrowedDate</name></decl>, <decl><type ref="prev"/><name>returnDate</name></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>long</name></type> <name>getEpoch_borrowed</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>epoch_borrowed</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>long</name></type> <name>getEpoch_return</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>epoch_return</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getCard_id</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>card_id</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDays</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>days</name></expr>;</return>
	}</block></function>
	<constructor><specifier>public</specifier> <name>BorrowedBook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pages</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>isbn</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>epoch_borrowed</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>epoch_return</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>isbn</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>epoch_borrowed</name></name> <operator>=</operator> <name>epoch_borrowed</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>epoch_return</name></name> <operator>=</operator> <name>epoch_return</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>card_id</name></name> <operator>=</operator> <name>card_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>borrowedDate</name></name> <operator>=</operator> <call><name>formatEpoch</name><argument_list>(<argument><expr><name>epoch_borrowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>returnDate</name></name> <operator>=</operator> <call><name>formatEpoch</name><argument_list>(<argument><expr><name>epoch_return</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>days</name></name> <operator>=</operator> <call><name>getDaysDue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&gt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>days</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getDaysOver</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></constructor>
	<function><specifier>public</specifier>  <type><name>String</name></type> <name>formatEpoch</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>epoch</name></decl></parameter>)</parameter_list> <block>{
		 <decl_stmt><decl><type><name>Date</name></type> <name>date</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>epoch</name> <operator>*</operator> <literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		 <decl_stmt><decl><type><name>DateFormat</name></type> <name>format</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyy-MM-dd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		 <decl_stmt><decl><type><name>String</name></type> <name>formatted</name> <init>= <expr><call><name><name>format</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		 <return>return <expr><name>formatted</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getBorrowedDate</name><parameter_list>()</parameter_list> <block>{
		
		<comment type="line">//String result = formatEpoch(this.epoch_borrowed);</comment>
		<return>return <expr><name><name>this</name><operator>.</operator><name>borrowedDate</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getReturnDate</name><parameter_list>()</parameter_list> <block>{
		
		<comment type="line">//String result = formatEpoch(this.epoch_return);</comment>
		<return>return <expr><name><name>this</name><operator>.</operator><name>returnDate</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDaysDue</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>borrowed</name></decl>, <decl><type ref="prev"/><name>due</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>borrowed</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toDays</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>due</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toDays</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>due</name> <operator>-</operator> <name>borrowed</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDaysOver</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>due</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>now</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toDays</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>due</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toDays</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>now</name> <operator>-</operator> <name>due</name><operator>)</operator></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>onTime</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> 
		}</block></then>
		<elseif>else <if>if<condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&gt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>result</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" is due in "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getDaysDue</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" days."</literal></expr>;</expr_stmt>  
		}</block></then>
		<elseif>else <if>if<condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&gt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" was due "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getDaysOver</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" days ago."</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toStringReturn</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>result</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator><literal type="string">"Book ID: "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getBook_ID</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"."</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" is due in "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getDaysDue</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" days."</literal></expr>;</expr_stmt>  
		}</block></then>
		<elseif>else <if>if<condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&gt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator><literal type="string">"Book ID: "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getBook_ID</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"."</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" was due "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getDaysOver</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" days ago."</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>returnOnTime</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>result</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name><operator>=</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal><operator>)</operator> <operator>&gt;</operator> <name><name>this</name><operator>.</operator><name>epoch_return</name></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator><literal type="string">"No, "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getDaysOver</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" days past due"</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>delayedString</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" | Loaned out to Card #: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>card_id</name></name></expr>;</expr_stmt>
		
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\Customer.java" hash="b3767431d4be4b905c9db99927fbbd031c5a5f4d"><package>package <name>application</name>;</package>

<class><specifier>public</specifier> class <name>Customer</name> <block>{
	
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>city</name></decl>, <decl><type ref="prev"/><name>street</name></decl>, <decl><type ref="prev"/><name>phoneNr</name></decl>, <decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>card_id</name></decl>, <decl><type ref="prev"/><name>debt</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>Customer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>city</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>street</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>phoneNr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter> )</parameter_list> <block>{
		
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>city</name></name> <operator>=</operator> <name>city</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>street</name></name> <operator>=</operator> <name>street</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>phoneNr</name></name> <operator>=</operator> <name>phoneNr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>card_id</name></name> <operator>=</operator> <name>card_id</name></expr>;</expr_stmt>
	}</block></constructor>
	<constructor><specifier>public</specifier> <name>Customer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>city</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>street</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>phoneNr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debt</name></decl></parameter> )</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>city</name></name> <operator>=</operator> <name>city</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>street</name></name> <operator>=</operator> <name>street</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>phoneNr</name></name> <operator>=</operator> <name>phoneNr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>card_id</name></name> <operator>=</operator> <name>card_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>debt</name></name> <operator>=</operator> <name>debt</name></expr>;</expr_stmt>
		
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getCity</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>city</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getStreet</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>street</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getPhoneNr</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>phoneNr</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>name</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getDebt</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>debt</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getCard_id</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>card_id</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>tooltipToString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">". "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>street</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>city</name></name> <operator>+</operator><literal type="string">"."</literal></expr>;</return> 
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\CheckOutController.java" hash="ac471e5594ebfd0150b2ce2c76694f6724d9afd2"><package>package <name>application</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ResourceBundle</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>application</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>value</name><operator>.</operator><name>ChangeListener</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>value</name><operator>.</operator><name>ObservableValue</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>FXCollections</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>Initializable</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>ChoiceDialog</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableColumn</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableView</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextArea</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name><operator>.</operator><name>AlertType</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>cell</name><operator>.</operator><name>PropertyValueFactory</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>

<class><specifier>public</specifier> class <name>CheckOutController</name> <super><implements>implements <name>Initializable</name></implements></super> <block>{
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>MenuItem</name></type> <name>exit</name></decl>, <decl><type ref="prev"/><name>about</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>EOL</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>lineSeparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>Database</name></type> <name>library</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>choiceWeeks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>checkoutData</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Event Listener on MenuItem[#exit].onAction</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>AdvSearch</name></decl>, <decl><type ref="prev"/><name>Toplist</name></decl>, <decl><type ref="prev"/><name>CheckOut</name></decl>, <decl><type ref="prev"/><name>GoBack</name></decl>, <decl><type ref="prev"/><name>MyBooks</name></decl>, <decl><type ref="prev"/><name>removeSelected</name></decl>, <decl><type ref="prev"/><name>borrowBooks</name></decl>, <decl><type ref="prev"/><name>IDScan</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>cardID</name></decl>;</decl_stmt>
 	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <type><name>TextField</name></type> <name>IDScanText</name></decl>, <decl><type ref="prev"/><name>showNameField</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableView</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>checkoutTable</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>TitleCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>AuthorCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>GenreCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>PagesCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>PublisherCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>ISBNCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>QuantityCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>Book_idCol</name></decl>;</decl_stmt>
	
	
	    
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>borrowBooksButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>amountWeeks</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>ChoiceDialog</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>ChoiceDialog</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>choiceWeeks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Choose the number of weeks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"Choose the number of weeks to borrow the books: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if>if<condition>(<expr><call><name><name>result</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>amountWeeks</name> <operator>=</operator> <call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<return>return;</return>
		}</block></else></if>
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			
			<decl_stmt><decl><type><name>String</name></type> <name>borrowSuccess</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>addBorrowedList</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>IDScanText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>amountWeeks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Alert</name></type> <name>addBook</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Borrow Books"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><name>borrowSuccess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>checkoutTable</name><operator>.</operator><name>getItems</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>IDScanText</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


		}</block></try>
		<expr_stmt><expr><call><name><name>checkoutTable</name><operator>.</operator><name>getItems</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>IDScanText</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	    
	<function><annotation>@<name>FXML</name></annotation> 
	<type><name>void</name></type>  <name>IDScanButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{
		<expr_stmt><expr><name>cardID</name> <operator>=</operator>  <call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>IDScanText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name>Customer</name></type> <name>current</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getCustomer</name></name><argument_list>(<argument><expr><name>cardID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>showNameField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></try>
	}</block></function>
	    
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>removeSelectedBook</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument>, <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Book</name></type> <name>removal</name> <init>= <expr><call><name><name>checkoutTable</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>checkoutTable</name><operator>.</operator><name>getItems</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>removal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>removeFromCheckout</name></name><argument_list>(<argument><expr><name>removal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<try>try <init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<expr_stmt><expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>removeFromCheckout</name></name><argument_list>(<argument><expr><name>removal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></try>

	}</block></function>
	
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoBack</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type>  <name>My_View_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"MyView.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>My_View_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>My_View_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>My_View_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>AdvSearch</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>Advanced_Search_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"AdvancedSearch.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>Advanced_Search_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>Advanced_Search_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>Advanced_Search_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>EnterMyBorrowedBooks</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>My_Books_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"MyBooks.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>My_Books_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>My_Books_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>My_Books_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoToToplist</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>Toplist_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Toplist.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>Toplist_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>Toplist_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>Toplist_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoToCheckOut</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>  <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>CheckOut_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"CheckOut.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>CheckOut_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>CheckOut_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>CheckOut_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<comment type="block">/*static void setList(ArrayList&lt;Book&gt; list) {
		checkoutList = list;
	}
	
	public ObservableList&lt;Book&gt; getCheckout() throws SQLException{
		
		ObservableList&lt;Book&gt; book = FXCollections.observableArrayList();
		for(int i = 0; i &lt; checkoutList.size(); i++) {
			book.add(checkoutList.get(i));
		}
		//book.addAll(checkoutList);
		return book;
	}*/</comment>
	<function><specifier>public</specifier> <type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>getCheckoutData</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>checkoutData</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setCheckoutData</name><parameter_list>()</parameter_list> <block>{
		
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>checkoutList</name> <init>= <expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>getCheckoutList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>checkoutList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>checkoutList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>checkoutData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>checkoutList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>ResourceBundle</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">//set up the columns in the table</comment>
		<expr_stmt><expr><call><name><name>TitleCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>AuthorCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>GenreCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>PublisherCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>PagesCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"pages"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ISBNCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"isbn"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>QuantityCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"quantity"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setCheckoutData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>checkoutTable</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getCheckoutData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>IDScanText</name><operator>.</operator><name>textProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ChangeListener</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
		    <function><annotation>@<name>Override</name></annotation>
		    <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>(<parameter><decl><type><name><name>ObservableValue</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>String</name></extends></argument>&gt;</argument_list></name></type> <name>observable</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>oldValue</name></decl></parameter>, 
		        <parameter><decl><type><name>String</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{
		        <if>if <condition>(<expr><operator>!</operator><call><name><name>newValue</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"\\d*"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		            <expr_stmt><expr><call><name><name>IDScanText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^\\d]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
	            <if>if <condition>(<expr><call><name><name>IDScanText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><then> <block>{
	                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>IDScanText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	                <expr_stmt><expr><call><name><name>IDScanText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></then></if>
		    }</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>choiceWeeks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>choiceWeeks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>choiceWeeks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>choiceWeeks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	<function><type><name>void</name></type> <name>initData</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>checkoutData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>exitProgram</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Platform</name><operator>.</operator><name>exit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>aboutMenuButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Alert</name></type> <name>addBook</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Library System"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"Made by :Tim Eklund &amp; Marcus Danielsson"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"SQLite | Java | JavaFX | jBCrypt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\AdminStartPageController.java" hash="bf5bc658760952fe3494d47930528aacb14094c5"><package>package <name>application</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ResourceBundle</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>value</name><operator>.</operator><name>ChangeListener</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>value</name><operator>.</operator><name>ObservableValue</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>FXCollections</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ListChangeListener</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ListChangeListener</name><operator>.</operator><name>Change</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>Initializable</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>ButtonType</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>RadioButton</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Tab</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TabPane</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableColumn</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TablePosition</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableView</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextInputDialog</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>ToggleGroup</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name><operator>.</operator><name>AlertType</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>cell</name><operator>.</operator><name>PropertyValueFactory</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>

<class><specifier>public</specifier> class <name>AdminStartPageController</name> <super><implements>implements <name>Initializable</name></implements></super> <block>{
	<decl_stmt><decl><specifier>static</specifier> <type><name>Customer</name></type> <name>customer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>EOL</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>lineSeparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>IDScanNumber</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>ToggleGroup</name></type> <name>removeBookCategory</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>bookErrorText</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <type><name>RadioButton</name></type> <name>isbnSelected</name></decl>, <decl><type ref="prev"/><name>titleSelected</name></decl>;</decl_stmt>

	

	
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>Tab</name></type> <name>manageCustomer</name></decl>, <decl><type ref="prev"/><name>manageBooks</name></decl>, <decl><type ref="prev"/><name>borrowedBooks</name></decl>, <decl><type ref="prev"/><name>BorrowedBy</name></decl>, <decl><type ref="prev"/><name>allBorrowedBooks</name></decl>, <decl><type ref="prev"/><name>allDelayedBooks</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>TextField</name></type> <name>addTitle</name></decl>, <decl><type ref="prev"/><name>addStreet</name></decl>, <decl><type ref="prev"/><name>addAuthor</name></decl>, <decl><type ref="prev"/><name>costumerIdUpdate</name></decl>, <decl><type ref="prev"/><name>addCustomerName</name></decl>, <decl><type ref="prev"/><name>addCity</name></decl>,
	<decl><type ref="prev"/><name>addPhoneNr</name></decl>, <decl><type ref="prev"/><name>addISBN</name></decl>, <decl><type ref="prev"/><name>addPublisher</name></decl>, <decl><type ref="prev"/><name>addQuantity</name></decl>, <decl><type ref="prev"/><name>addCardID</name></decl>, <decl><type ref="prev"/><name>addGenre</name></decl>, <decl><type ref="prev"/><name>addPages</name></decl>, <decl><type ref="prev"/><name>addShelf</name></decl>, <decl><type ref="prev"/><name>textSearchRemove</name></decl>, <decl><type ref="prev"/><name>selectedBook</name></decl>,
	<decl><type ref="prev"/><name>showCustomerName</name></decl>, <decl><type ref="prev"/><name>showCustomerPhone</name></decl>, <decl><type ref="prev"/><name>showCustomerCity</name></decl>, <decl><type ref="prev"/><name>showCustomerStreet</name></decl>, <decl><type ref="prev"/><name>showCustomerCardID</name></decl>, <decl><type ref="prev"/><name>IDScan</name></decl>, <decl><type ref="prev"/><name>borrowedName</name></decl>;</decl_stmt>


	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>Button</name></type> <name>logOut</name></decl>, <decl><type ref="prev"/><name>addCustomerButton</name></decl>, <decl><type ref="prev"/><name>addBook</name></decl>, <decl><type ref="prev"/><name>searchRemove</name></decl>, <decl><type ref="prev"/><name>clearAddBookForm</name></decl>, <decl><type ref="prev"/><name>selectCustomer</name></decl>,
	<decl><type ref="prev"/><name>searchUpdateCustomer</name></decl>, <decl><type ref="prev"/><name>confirmUpdateCustomer</name></decl>, <decl><type ref="prev"/><name>searchBorrowedByButton</name></decl>, <decl><type ref="prev"/><name>removeCustomer</name></decl>,
	<decl><type ref="prev"/><name>getAllDelayedButton</name></decl>, <decl><type ref="prev"/><name>getAllBorrowedBooks</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name><name>TableView</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>&gt;</argument_list></name></type> <name>updateCustomerTable</name></decl>, <decl><type ref="prev"/><name>customerListTable</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>nameCustomer</name></decl>, <decl><type ref="prev"/><name>customerListName</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>phoneCustomer</name></decl>, <decl><type ref="prev"/><name>customerListPhone</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cityCustomer</name></decl>, <decl><type ref="prev"/><name>customerListCity</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>streetCustomer</name></decl>, <decl><type ref="prev"/><name>customerListStreet</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cardIDCustomer</name></decl>, <decl><type ref="prev"/><name>customerListCardID</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>customerListDebt</name></decl>;</decl_stmt>
	

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>TabPane</name></type> <name>adminManageTab</name></decl>, <decl><type ref="prev"/><name>borrowedBooksTab</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableView</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>borrowedByTable</name></decl>, <decl><type ref="prev"/><name>allDelayedTable</name></decl>, <decl><type ref="prev"/><name>allBorrowedTable</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableView</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>removeResult</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>titleCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>authorCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>genreCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>isbnCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>quantityCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>bookIDCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>delayedTitleCol</name></decl>, <decl><type ref="prev"/><name>delayedReturnCol</name></decl> ,<decl><type ref="prev"/><name>borrowedByTitleCol</name></decl>, <decl><type ref="prev"/><name>borrowedByAuthorCol</name></decl>, <decl><type ref="prev"/><name>borrowedByGenreCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allBorrowedTitleCol</name></decl>, <decl><type ref="prev"/><name>allBorrowedBorrowedDateCol</name></decl>, <decl><type ref="prev"/><name>allBorrowedReturnCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>borrowedByIsbnCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>borrowedByQuantityCol</name></decl>, <decl><type ref="prev"/><name>borrowedByBookIDCol</name></decl>, <decl><type ref="prev"/><name>allBorrowedCardCol</name></decl>, <decl><type ref="prev"/><name>allBorrowedDaysCol</name></decl>, <decl><type ref="prev"/><name>allBorrowedbookIDCol</name></decl>, <decl><type ref="prev"/><name>delayedCardCol</name></decl>, <decl><type ref="prev"/><name>delayedDaysCol</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Customer</name></type> <name>selectedCustomer</name></decl>;</decl_stmt>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>searchRemoveBook</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

		<expr_stmt><expr><call><name><name>removeResult</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getBook</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation> 
	<type><name>void</name></type> <name>confirmUpdateCustomer</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>card_id</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>showCustomerCardID</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if<condition>(<expr><operator>!</operator><call><name><name>selectedCustomer</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>showCustomerName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>updateCustomer</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>showCustomerName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></try>
		}</block></then></if>
		<if>if<condition>(<expr><operator>!</operator><call><name><name>selectedCustomer</name><operator>.</operator><name>getPhoneNr</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>showCustomerPhone</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>updateCustomer</name></name><argument_list>(<argument><expr><literal type="string">"phone_nr"</literal></expr></argument>, <argument><expr><call><name><name>showCustomerPhone</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></try>
		}</block></then></if>
		<if>if<condition>(<expr><operator>!</operator><call><name><name>selectedCustomer</name><operator>.</operator><name>getCity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>showCustomerCity</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>updateCustomer</name></name><argument_list>(<argument><expr><literal type="string">"city"</literal></expr></argument>, <argument><expr><call><name><name>showCustomerCity</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></try>
		}</block></then></if>
		<if>if<condition>(<expr><operator>!</operator><call><name><name>selectedCustomer</name><operator>.</operator><name>getStreet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>showCustomerStreet</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>updateCustomer</name></name><argument_list>(<argument><expr><literal type="string">"street"</literal></expr></argument>, <argument><expr><call><name><name>showCustomerStreet</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></try>
		}</block></then></if>
		<expr_stmt><expr><call><name>searchUpdateCustomer</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>searchUpdateCustomer</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name><name>updateCustomerTable</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getCustomer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>selectCustomer</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<expr_stmt><expr><name>selectedCustomer</name> <operator>=</operator>	<call><name><name>updateCustomerTable</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>showCustomerName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>selectedCustomer</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>showCustomerPhone</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>selectedCustomer</name><operator>.</operator><name>getPhoneNr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>showCustomerCity</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>selectedCustomer</name><operator>.</operator><name>getCity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>showCustomerStreet</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>selectedCustomer</name><operator>.</operator><name>getStreet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>showCustomerCardID</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>selectedCustomer</name><operator>.</operator><name>getCard_id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>&gt;</argument_list></name></type> <name>getCustomer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>card_id</name>  <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>costumerIdUpdate</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>&gt;</argument_list></name></type> <name>customerList</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name>Customer</name></type> <name>current</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getCustomer</name></name><argument_list>(<argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>customerList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></try>
		<return>return <expr><name>customerList</name></expr>;</return>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>removeCustomer</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>card_id</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>showCustomerCardID</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>showCustomerName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Alert</name></type> <name>remove</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>CONFIRMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>remove</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"You're about to delete a customer from the system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>remove</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"Are you sure you want to delete this customer?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>remove</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"Name: "</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">" with Card ID : "</literal> <operator>+</operator> <name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ButtonType</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>remove</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ButtonType</name><operator>.</operator><name>OK</name></name></expr>)</condition><then><block>{

				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>removeCustomer</name></name><argument_list>(<argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>showCustomerName</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>showCustomerPhone</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>showCustomerCity</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>showCustomerStreet</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>showCustomerCardID</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>costumerIdUpdate</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			}</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ButtonType</name><operator>.</operator><name>CANCEL</name></name><operator>)</operator></expr>)</condition><then> <block>{

			}</block></then></if></elseif></if>
		}</block></try>
		
	}</block></function>
	
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>getAllBorrowedBooks</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name><name>allBorrowedTable</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getAllBorrowedBooks</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>getAllDelayedButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument>, <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<comment type="line">//try(Database db = new Database()) {</comment>
			<expr_stmt><expr><call><name><name>allDelayedTable</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getDelayedBook</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		<comment type="line">//}</comment>
	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>allDelayedBooks</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<comment type="line">//try(Database db = new Database()) {</comment>
			<comment type="line">//db.getDelayedBooksList();</comment>
			<comment type="line">//allDelayedTable.setItems(getDelayedBook());</comment>

		<comment type="line">//} </comment>

		<comment type="line">//}</comment>

	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>searchBorrowedByButton</name> <parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument>, <argument><expr><name>Exception</name></expr></argument></throws>  <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>IDScanString</name><init>= <expr><call><name><name>IDScan</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>IDScanNumber</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>IDScanString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>borrowedByTable</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getBorrowedBook</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name>Customer</name></type> <name>current</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getCustomer</name></name><argument_list>(<argument><expr><name>IDScanNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>borrowedName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></try>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>getAllBorrowedBooks</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{
		<decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>book</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


		<try>try<init>(<decl><type><name>Database</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name><name>BorrowedBook</name> <index>[]</index></name></type> <name>searchArray</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getBorrowedBooks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>searchArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>searchArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></try>
		<return>return <expr><name>book</name></expr>;</return> 
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>getBorrowedBook</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{
		<decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>book</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<try>try<init>(<decl><type><name>Database</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name><name>BorrowedBook</name> <index>[]</index></name></type> <name>searchArray</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getBorrowedBooks</name></name><argument_list>(<argument><expr><name>IDScanNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>searchArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>searchArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></try>
		<return>return <expr><name>book</name></expr>;</return> 
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>getDelayedBook</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{
		
		<decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>book</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try<init>(<decl><type><name>Database</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name><name>BorrowedBook</name> <index>[]</index></name></type> <name>searchArray</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getDelayedBooksList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>searchArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>searchArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></try>
		<comment type="line">//Book [] searchArray = Main.library.getBorrowedBooks(IDScanNumber);</comment>
		<return>return <expr><name>book</name></expr>;</return> 
	}</block></function>


	<function><specifier>public</specifier> <type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>getBook</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>searchField</name> <init>= <expr><call><name><name>textSearchRemove</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>category</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>book</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if<condition>(<expr><call><name><name>isbnSelected</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>category</name> <operator>=</operator> <literal type="string">"isbn"</literal></expr>;</expr_stmt>
		}</block></then>

		<elseif>else <if>if<condition>(<expr><call><name><name>titleSelected</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>category</name> <operator>=</operator> <literal type="string">"title"</literal></expr>;</expr_stmt>

		}</block></then></if></elseif></if>
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{

			<decl_stmt><decl><type><name><name>Book</name> <index>[]</index></name></type> <name>searchArray</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>searchField</name></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>searchArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>searchArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></try>
		<return>return <expr><name>book</name></expr>;</return>

	}</block></function>


	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>addBook</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		
		<if>if<condition>(<expr><call><name>checkBookFields</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>isbn</name> <init>=<expr><call><name><name>addISBN</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>addTitle</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>author</name> <init>= <expr><call><name><name>addAuthor</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>genre</name> <init>= <expr><call><name><name>addGenre</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>shelf</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>addShelf</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>publisher</name> <init>= <expr><call><name><name>addPublisher</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>quantity</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>addQuantity</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>pages</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>addPages</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>addBook</name></name><argument_list>(<argument><expr><name>isbn</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>shelf</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>quantity</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></try>
			<decl_stmt><decl><type><name>Alert</name></type> <name>addBook</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"New Book"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"The book was successfully added to the library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"Title: "</literal> <operator>+</operator> <name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>clearAddBookForm</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>Alert</name></type> <name>errorBook</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>errorBook</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Missing information!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>errorBook</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>errorBook</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><name>bookErrorText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>errorBook</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>checkBookFields</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		
		<if>if<condition>(<expr><call><name><name>addISBN</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><call><name><name>addAuthor</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><call><name><name>addGenre</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><call><name><name>addShelf</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><call><name><name>addPublisher</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><call><name><name>addQuantity</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><call><name><name>addPages</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if>
		
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>addCustomer</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>card_id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>addCustomerName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>street</name> <init>= <expr><call><name><name>addStreet</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>city</name> <init>= <expr><call><name><name>addCity</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>phone_nr</name> <init>= <expr><call><name><name>addPhoneNr</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<expr_stmt><expr><name>card_id</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>addCustomer</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>city</name></expr></argument>, <argument><expr><name>street</name></expr></argument>, <argument><expr><name>phone_nr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>	
		}</block></try>

		<decl_stmt><decl><type><name>Alert</name></type> <name>addCustomer</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addCardID</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addCustomer</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Customer succesfully added!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addCustomer</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addCustomer</name><operator>.</operator><name>setContentText</name></name><argument_list>( <argument><expr><name>name</name> <operator>+</operator> <literal type="string">" was added as a customer, with Card ID: "</literal> <operator>+</operator> <name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addCustomer</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>clearCustomerForm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>searchRemoveButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		
		<decl_stmt><decl><type><name>Book</name></type> <name>book</name> <init>= <expr><call><name><name>removeResult</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>book</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>book_id</name> <init>=<expr><call><name><name>book</name><operator>.</operator><name>getBook_ID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Alert</name></type> <name>remove</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>CONFIRMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>remove</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"You're about to delete a book from the system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>remove</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"Are you sure you want to delete this title?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>remove</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"title: "</literal> <operator>+</operator> <name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ButtonType</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>remove</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ButtonType</name><operator>.</operator><name>OK</name></name></expr>)</condition><then><block>{

			<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>removeBook</name></name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></try>
			<expr_stmt><expr><call><name>searchRemoveBook</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ButtonType</name><operator>.</operator><name>CANCEL</name></name><operator>)</operator></expr>)</condition><then> <block>{

		}</block></then></if></elseif></if>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>ResourceBundle</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">//Remove book-table Cell factories</comment>
		
		<expr_stmt><expr><call><name><name>titleCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>authorCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>isbnCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"isbn"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>quantityCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"quantity"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bookIDCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"book_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//Customer Table Cell Factories</comment>
		<expr_stmt><expr><call><name><name>nameCustomer</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>phoneCustomer</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"phoneNr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cityCustomer</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"city"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>streetCustomer</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"street"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cardIDCustomer</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"card_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//BorrowedBy-table Cell Factories</comment>
		<expr_stmt><expr><call><name><name>borrowedByTitleCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>borrowedByAuthorCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>borrowedByIsbnCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"isbn"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>borrowedByQuantityCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"quantity"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>borrowedByBookIDCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"book_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//All delayed-table Cell factories</comment>
		<expr_stmt><expr><call><name><name>delayedCardCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"card_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>delayedTitleCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>delayedReturnCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"returnDate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>delayedDaysCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"days"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//All borrowed-table Cell factories</comment>
		<expr_stmt><expr><call><name><name>allBorrowedCardCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"card_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allBorrowedTitleCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allBorrowedBorrowedDateCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"borrowedDate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allBorrowedReturnCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"returnDate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allBorrowedDaysCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"days"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allBorrowedbookIDCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"book_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//All Customers-table Cell factories</comment>
		<expr_stmt><expr><call><name><name>customerListName</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>customerListPhone</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"phoneNr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>customerListCity</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"city"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>customerListStreet</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"street"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>customerListCardID</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"card_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>customerListDebt</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"debt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>addPages</name><operator>.</operator><name>textProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ChangeListener</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
		    <function><annotation>@<name>Override</name></annotation>
		    <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>(<parameter><decl><type><name><name>ObservableValue</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>String</name></extends></argument>&gt;</argument_list></name></type> <name>observable</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>oldValue</name></decl></parameter>, 
		        <parameter><decl><type><name>String</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{
		        <if>if <condition>(<expr><operator>!</operator><call><name><name>newValue</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"\\d*"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		            <expr_stmt><expr><call><name><name>addPages</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^\\d]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
		    }</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addShelf</name><operator>.</operator><name>textProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ChangeListener</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
		    <function><annotation>@<name>Override</name></annotation>
		    <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>(<parameter><decl><type><name><name>ObservableValue</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>String</name></extends></argument>&gt;</argument_list></name></type> <name>observable</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>oldValue</name></decl></parameter>, 
		        <parameter><decl><type><name>String</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{
		        <if>if <condition>(<expr><operator>!</operator><call><name><name>newValue</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"\\d*"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		            <expr_stmt><expr><call><name><name>addShelf</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^\\d]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
		    }</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addISBN</name><operator>.</operator><name>textProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ChangeListener</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
		    <function><annotation>@<name>Override</name></annotation>
		    <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>(<parameter><decl><type><name><name>ObservableValue</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>String</name></extends></argument>&gt;</argument_list></name></type> <name>observable</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>oldValue</name></decl></parameter>, 
		        <parameter><decl><type><name>String</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{
		        <if>if <condition>(<expr><operator>!</operator><call><name><name>newValue</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"\\d*"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		            <expr_stmt><expr><call><name><name>addISBN</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^\\d]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
		    }</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addQuantity</name><operator>.</operator><name>textProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ChangeListener</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
		    <function><annotation>@<name>Override</name></annotation>
		    <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>(<parameter><decl><type><name><name>ObservableValue</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>String</name></extends></argument>&gt;</argument_list></name></type> <name>observable</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>oldValue</name></decl></parameter>, 
		        <parameter><decl><type><name>String</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{
		        <if>if <condition>(<expr><operator>!</operator><call><name><name>newValue</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"\\d*"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		            <expr_stmt><expr><call><name><name>addQuantity</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^\\d]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
		    }</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allBorrowedTable</name><operator>.</operator><name>setRowFactory</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>tableView</name></decl></parameter>)</parameter_list> -&gt; <block>{
		      <return>return <expr><operator>new</operator> <call><name><name>customerTooltipTableRow</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><type><name>BorrowedBook</name></type> <name>borrowedBook</name></decl></parameter>)</parameter_list> -&gt; <block>{
		    	  <decl_stmt><decl><type><name>Customer</name></type> <name>customer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		    	  <decl_stmt><decl><type><name>int</name></type> <name>card_id</name> <init>= <expr><call><name><name>borrowedBook</name><operator>.</operator><name>getCard_id</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		    	  <try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
		    		  <expr_stmt><expr><name>customer</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>getCustomer</name></name><argument_list>(<argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    	  }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch>
		    	  <return>return <expr><call><name><name>customer</name><operator>.</operator><name>tooltipToString</name></name><argument_list>()</argument_list></call></expr>;</return>
		      }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allDelayedTable</name><operator>.</operator><name>setRowFactory</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>tableView</name></decl></parameter>)</parameter_list> -&gt; <block>{
		      <return>return <expr><operator>new</operator> <call><name><name>customerTooltipTableRow</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><type><name>BorrowedBook</name></type> <name>borrowedBook</name></decl></parameter>)</parameter_list> -&gt; <block>{
		    	  <decl_stmt><decl><type><name>Customer</name></type> <name>customer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		    	  <decl_stmt><decl><type><name>int</name></type> <name>card_id</name> <init>= <expr><call><name><name>borrowedBook</name><operator>.</operator><name>getCard_id</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		    	  <try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
		    		  <expr_stmt><expr><name>customer</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>getCustomer</name></name><argument_list>(<argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    	  }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch>
		    	  <return>return <expr><call><name><name>customer</name><operator>.</operator><name>tooltipToString</name></name><argument_list>()</argument_list></call></expr>;</return>
		      }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeBook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>removeBook</name></name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></try>
	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>logOut</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type>  <name>My_View_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"MyView.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>My_View_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>My_View_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>My_View_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>RadioButtons</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>ToggleGroup</name></type> <name>toggleGroup</name> <init>= <expr><operator>new</operator> <call><name>ToggleGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>isbnSelected</name><operator>.</operator><name>setToggleGroup</name></name><argument_list>(<argument><expr><name>toggleGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>titleSelected</name><operator>.</operator><name>setToggleGroup</name></name><argument_list>(<argument><expr><name>toggleGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>clearAddBookForm</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>addTitle</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addAuthor</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addGenre</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addPublisher</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addPages</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addQuantity</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addISBN</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addShelf</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>clearCustomerForm</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>addCustomerName</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addPhoneNr</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addCity</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addCardID</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addStreet</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>&gt;</argument_list></name></type> <name>getFullCustomerList</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>&gt;</argument_list></name></type> <name>customerList</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name><name>Customer</name><index>[]</index></name></type> <name>allCustomers</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getCustomerList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>customerList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>allCustomers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></try>
		<return>return <expr><name>customerList</name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>getCustomerList</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name><name>customerListTable</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getFullCustomerList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>acceptPayment</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument>, <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Customer</name></type> <name>current</name> <init>= <expr><call><name><name>customerListTable</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>TextInputDialog</name></type> <name>amountInput</name> <init>= <expr><operator>new</operator> <call><name>TextInputDialog</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>amountInput</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Text Input Dialog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>amountInput</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>amountInput</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"Please enter the amount: "</literal> <operator>+</operator> <name>EOL</name> <operator>+</operator> <literal type="string">"No more than "</literal> <operator>+</operator> <call><name><name>current</name><operator>.</operator><name>getDebt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>amountText</name> <init>= <expr><call><name><name>amountInput</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if>if <condition>(<expr><call><name><name>amountText</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>amountText</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name><name>current</name><operator>.</operator><name>getDebt</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block>{
		
		<decl_stmt><decl><type><name>int</name></type> <name>amount</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>amountText</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			
			<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>payDebt</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getCard_id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></try>
		
		<expr_stmt><expr><call><name>getCustomerList</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>Alert</name></type> <name>paymentAlert</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>paymentAlert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Payment error!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>paymentAlert</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>paymentAlert</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"Something went wrong with the payment. It might have exceeded the debt."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>paymentAlert</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		
	}</block></function>
}</block></class>
	</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\LoginController.java" hash="85cfbdc76e402953eb3eb124bbe62f2e178c2573"><package>package <name>application</name>;</package>

<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>Initializable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ResourceBundle</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>application</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name><operator>.</operator><name>AlertType</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>PasswordField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>

<class><specifier>public</specifier> class <name>LoginController</name> <super><implements>implements <name>Initializable</name></implements></super> <block>{
	<decl_stmt><decl><type><name>Database</name></type> <name>library</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>MenuItem</name></type> <name>exit</name></decl>, <decl><type ref="prev"/><name>about</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>Button</name></type> <name>GoBack</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>Button</name></type> <name>AdminLoginButton</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>TextField</name></type> <name>adminUserName</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>PasswordField</name></type> <name>adminPassword</name></decl>;</decl_stmt>


	
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>AdminLoginButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
				<if>if<condition>(<expr><call><name><name>db</name><operator>.</operator><name>verifyLogin</name></name><argument_list>(<argument><expr><call><name><name>adminUserName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>adminPassword</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>Parent</name></type> <name>Admin_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"AdminStartPage.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Scene</name></type> <name>Admin_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>Admin_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>Admin_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else  <block>{
				<decl_stmt><decl><type><name>Alert</name></type> <name>incorrect</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>incorrect</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Failed login"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>incorrect</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>incorrect</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"Incorrect login-credentials!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>incorrect</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></try>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoBack</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type>  <name>My_View_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"MyView.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>My_View_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>My_View_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>My_View_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>ResourceBundle</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{
		
	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>exitProgram</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Platform</name><operator>.</operator><name>exit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>aboutMenuButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Alert</name></type> <name>addBook</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Library System"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"Made by :Tim Eklund &amp; Marcus Danielsson"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"SQLite | Java | JavaFX | jBCrypt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\Main.java" hash="e73fbf48cf5df965f46abb40ea9884cdf31cbf50"><package>package <name>application</name>;</package>
	
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Button</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>application</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>


<class><specifier>public</specifier> class <name>Main</name> <super><extends>extends <name>Application</name></extends></super> <block>{
	<comment type="line">//static Database library;</comment>
	<decl_stmt><decl><specifier>static</specifier> <type><name>staticData</name></type> <name>checkoutData</name></decl>;</decl_stmt>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>Stage</name></type> <name>primaryStage</name></decl></parameter>)</parameter_list> <block>{
		<try>try <block>{
			<try>try <init>( <decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>createHistoryTable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></try>
			<expr_stmt><expr><name>checkoutData</name> <operator>=</operator> <operator>new</operator> <call><name>staticData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Parent</name></type> <name>root</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"/application/MyView.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><literal type="number">1080</literal></expr></argument>,<argument><expr><literal type="number">750</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>getStylesheets</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"application.css"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">//scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());</comment>

			<expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>getStylesheets</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"application.css"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>primaryStage</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Library System"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>primaryStage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>primaryStage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		
		<expr_stmt><expr><call><name>launch</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\org\mindrot\jbcrypt\BCrypt.java" hash="65e1202e2e07bc3a294c229066bf4909e53e9405"><comment type="line">// Copyright (c) 2006 Damien Miller &lt;djm@mindrot.org&gt;</comment>
<comment type="line">//</comment>
<comment type="line">// Permission to use, copy, modify, and distribute this software for any</comment>
<comment type="line">// purpose with or without fee is hereby granted, provided that the above</comment>
<comment type="line">// copyright notice and this permission notice appear in all copies.</comment>
<comment type="line">//</comment>
<comment type="line">// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES</comment>
<comment type="line">// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</comment>
<comment type="line">// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</comment>
<comment type="line">// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</comment>
<comment type="line">// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</comment>
<comment type="line">// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</comment>
<comment type="line">// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</comment>

<package>package <name><name>org</name><operator>.</operator><name>mindrot</name><operator>.</operator><name>jbcrypt</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>

<comment type="block" format="javadoc">/**
 * BCrypt implements OpenBSD-style Blowfish password hashing using
 * the scheme described in "A Future-Adaptable Password Scheme" by
 * Niels Provos and David Mazieres.
 * &lt;p&gt;
 * This password hashing system tries to thwart off-line password
 * cracking using a computationally-intensive hashing algorithm,
 * based on Bruce Schneier's Blowfish cipher. The work factor of
 * the algorithm is parameterised, so it can be increased as
 * computers get faster.
 * &lt;p&gt;
 * Usage is really simple. To hash a password for the first time,
 * call the hashpw method with a random salt, like this:
 * &lt;p&gt;
 * &lt;code&gt;
 * String pw_hash = BCrypt.hashpw(plain_password, BCrypt.gensalt()); &lt;br /&gt;
 * &lt;/code&gt;
 * &lt;p&gt;
 * To check whether a plaintext password matches one that has been
 * hashed previously, use the checkpw method:
 * &lt;p&gt;
 * &lt;code&gt;
 * if (BCrypt.checkpw(candidate_password, stored_hash))&lt;br /&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("It matches");&lt;br /&gt;
 * else&lt;br /&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("It does not match");&lt;br /&gt;
 * &lt;/code&gt;
 * &lt;p&gt;
 * The gensalt() method takes an optional parameter (log_rounds)
 * that determines the computational complexity of the hashing:
 * &lt;p&gt;
 * &lt;code&gt;
 * String strong_salt = BCrypt.gensalt(10)&lt;br /&gt;
 * String stronger_salt = BCrypt.gensalt(12)&lt;br /&gt;
 * &lt;/code&gt;
 * &lt;p&gt;
 * The amount of work increases exponentially (2**log_rounds), so 
 * each increment is twice as much work. The default log_rounds is
 * 10, and the valid range is 4 to 30.
 *
 * @author Damien Miller
 * @version 0.2
 */</comment>
<class><specifier>public</specifier> class <name>BCrypt</name> <block>{
	<comment type="line">// BCrypt parameters</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENSALT_DEFAULT_LOG2_ROUNDS</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BCRYPT_SALT_LEN</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Blowfish parameters</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BLOWFISH_NUM_ROUNDS</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Initial contents of key schedule</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name><name>P_orig</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x243f6a88</literal></expr>, <expr><literal type="number">0x85a308d3</literal></expr>, <expr><literal type="number">0x13198a2e</literal></expr>, <expr><literal type="number">0x03707344</literal></expr>,
		<expr><literal type="number">0xa4093822</literal></expr>, <expr><literal type="number">0x299f31d0</literal></expr>, <expr><literal type="number">0x082efa98</literal></expr>, <expr><literal type="number">0xec4e6c89</literal></expr>,
		<expr><literal type="number">0x452821e6</literal></expr>, <expr><literal type="number">0x38d01377</literal></expr>, <expr><literal type="number">0xbe5466cf</literal></expr>, <expr><literal type="number">0x34e90c6c</literal></expr>,
		<expr><literal type="number">0xc0ac29b7</literal></expr>, <expr><literal type="number">0xc97c50dd</literal></expr>, <expr><literal type="number">0x3f84d5b5</literal></expr>, <expr><literal type="number">0xb5470917</literal></expr>,
		<expr><literal type="number">0x9216d5d9</literal></expr>, <expr><literal type="number">0x8979fb1b</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name><name>S_orig</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0xd1310ba6</literal></expr>, <expr><literal type="number">0x98dfb5ac</literal></expr>, <expr><literal type="number">0x2ffd72db</literal></expr>, <expr><literal type="number">0xd01adfb7</literal></expr>,
		<expr><literal type="number">0xb8e1afed</literal></expr>, <expr><literal type="number">0x6a267e96</literal></expr>, <expr><literal type="number">0xba7c9045</literal></expr>, <expr><literal type="number">0xf12c7f99</literal></expr>,
		<expr><literal type="number">0x24a19947</literal></expr>, <expr><literal type="number">0xb3916cf7</literal></expr>, <expr><literal type="number">0x0801f2e2</literal></expr>, <expr><literal type="number">0x858efc16</literal></expr>,
		<expr><literal type="number">0x636920d8</literal></expr>, <expr><literal type="number">0x71574e69</literal></expr>, <expr><literal type="number">0xa458fea3</literal></expr>, <expr><literal type="number">0xf4933d7e</literal></expr>,
		<expr><literal type="number">0x0d95748f</literal></expr>, <expr><literal type="number">0x728eb658</literal></expr>, <expr><literal type="number">0x718bcd58</literal></expr>, <expr><literal type="number">0x82154aee</literal></expr>,
		<expr><literal type="number">0x7b54a41d</literal></expr>, <expr><literal type="number">0xc25a59b5</literal></expr>, <expr><literal type="number">0x9c30d539</literal></expr>, <expr><literal type="number">0x2af26013</literal></expr>,
		<expr><literal type="number">0xc5d1b023</literal></expr>, <expr><literal type="number">0x286085f0</literal></expr>, <expr><literal type="number">0xca417918</literal></expr>, <expr><literal type="number">0xb8db38ef</literal></expr>,
		<expr><literal type="number">0x8e79dcb0</literal></expr>, <expr><literal type="number">0x603a180e</literal></expr>, <expr><literal type="number">0x6c9e0e8b</literal></expr>, <expr><literal type="number">0xb01e8a3e</literal></expr>,
		<expr><literal type="number">0xd71577c1</literal></expr>, <expr><literal type="number">0xbd314b27</literal></expr>, <expr><literal type="number">0x78af2fda</literal></expr>, <expr><literal type="number">0x55605c60</literal></expr>,
		<expr><literal type="number">0xe65525f3</literal></expr>, <expr><literal type="number">0xaa55ab94</literal></expr>, <expr><literal type="number">0x57489862</literal></expr>, <expr><literal type="number">0x63e81440</literal></expr>,
		<expr><literal type="number">0x55ca396a</literal></expr>, <expr><literal type="number">0x2aab10b6</literal></expr>, <expr><literal type="number">0xb4cc5c34</literal></expr>, <expr><literal type="number">0x1141e8ce</literal></expr>,
		<expr><literal type="number">0xa15486af</literal></expr>, <expr><literal type="number">0x7c72e993</literal></expr>, <expr><literal type="number">0xb3ee1411</literal></expr>, <expr><literal type="number">0x636fbc2a</literal></expr>,
		<expr><literal type="number">0x2ba9c55d</literal></expr>, <expr><literal type="number">0x741831f6</literal></expr>, <expr><literal type="number">0xce5c3e16</literal></expr>, <expr><literal type="number">0x9b87931e</literal></expr>,
		<expr><literal type="number">0xafd6ba33</literal></expr>, <expr><literal type="number">0x6c24cf5c</literal></expr>, <expr><literal type="number">0x7a325381</literal></expr>, <expr><literal type="number">0x28958677</literal></expr>,
		<expr><literal type="number">0x3b8f4898</literal></expr>, <expr><literal type="number">0x6b4bb9af</literal></expr>, <expr><literal type="number">0xc4bfe81b</literal></expr>, <expr><literal type="number">0x66282193</literal></expr>,
		<expr><literal type="number">0x61d809cc</literal></expr>, <expr><literal type="number">0xfb21a991</literal></expr>, <expr><literal type="number">0x487cac60</literal></expr>, <expr><literal type="number">0x5dec8032</literal></expr>,
		<expr><literal type="number">0xef845d5d</literal></expr>, <expr><literal type="number">0xe98575b1</literal></expr>, <expr><literal type="number">0xdc262302</literal></expr>, <expr><literal type="number">0xeb651b88</literal></expr>,
		<expr><literal type="number">0x23893e81</literal></expr>, <expr><literal type="number">0xd396acc5</literal></expr>, <expr><literal type="number">0x0f6d6ff3</literal></expr>, <expr><literal type="number">0x83f44239</literal></expr>,
		<expr><literal type="number">0x2e0b4482</literal></expr>, <expr><literal type="number">0xa4842004</literal></expr>, <expr><literal type="number">0x69c8f04a</literal></expr>, <expr><literal type="number">0x9e1f9b5e</literal></expr>,
		<expr><literal type="number">0x21c66842</literal></expr>, <expr><literal type="number">0xf6e96c9a</literal></expr>, <expr><literal type="number">0x670c9c61</literal></expr>, <expr><literal type="number">0xabd388f0</literal></expr>,
		<expr><literal type="number">0x6a51a0d2</literal></expr>, <expr><literal type="number">0xd8542f68</literal></expr>, <expr><literal type="number">0x960fa728</literal></expr>, <expr><literal type="number">0xab5133a3</literal></expr>,
		<expr><literal type="number">0x6eef0b6c</literal></expr>, <expr><literal type="number">0x137a3be4</literal></expr>, <expr><literal type="number">0xba3bf050</literal></expr>, <expr><literal type="number">0x7efb2a98</literal></expr>,
		<expr><literal type="number">0xa1f1651d</literal></expr>, <expr><literal type="number">0x39af0176</literal></expr>, <expr><literal type="number">0x66ca593e</literal></expr>, <expr><literal type="number">0x82430e88</literal></expr>,
		<expr><literal type="number">0x8cee8619</literal></expr>, <expr><literal type="number">0x456f9fb4</literal></expr>, <expr><literal type="number">0x7d84a5c3</literal></expr>, <expr><literal type="number">0x3b8b5ebe</literal></expr>,
		<expr><literal type="number">0xe06f75d8</literal></expr>, <expr><literal type="number">0x85c12073</literal></expr>, <expr><literal type="number">0x401a449f</literal></expr>, <expr><literal type="number">0x56c16aa6</literal></expr>,
		<expr><literal type="number">0x4ed3aa62</literal></expr>, <expr><literal type="number">0x363f7706</literal></expr>, <expr><literal type="number">0x1bfedf72</literal></expr>, <expr><literal type="number">0x429b023d</literal></expr>,
		<expr><literal type="number">0x37d0d724</literal></expr>, <expr><literal type="number">0xd00a1248</literal></expr>, <expr><literal type="number">0xdb0fead3</literal></expr>, <expr><literal type="number">0x49f1c09b</literal></expr>,
		<expr><literal type="number">0x075372c9</literal></expr>, <expr><literal type="number">0x80991b7b</literal></expr>, <expr><literal type="number">0x25d479d8</literal></expr>, <expr><literal type="number">0xf6e8def7</literal></expr>,
		<expr><literal type="number">0xe3fe501a</literal></expr>, <expr><literal type="number">0xb6794c3b</literal></expr>, <expr><literal type="number">0x976ce0bd</literal></expr>, <expr><literal type="number">0x04c006ba</literal></expr>,
		<expr><literal type="number">0xc1a94fb6</literal></expr>, <expr><literal type="number">0x409f60c4</literal></expr>, <expr><literal type="number">0x5e5c9ec2</literal></expr>, <expr><literal type="number">0x196a2463</literal></expr>,
		<expr><literal type="number">0x68fb6faf</literal></expr>, <expr><literal type="number">0x3e6c53b5</literal></expr>, <expr><literal type="number">0x1339b2eb</literal></expr>, <expr><literal type="number">0x3b52ec6f</literal></expr>,
		<expr><literal type="number">0x6dfc511f</literal></expr>, <expr><literal type="number">0x9b30952c</literal></expr>, <expr><literal type="number">0xcc814544</literal></expr>, <expr><literal type="number">0xaf5ebd09</literal></expr>,
		<expr><literal type="number">0xbee3d004</literal></expr>, <expr><literal type="number">0xde334afd</literal></expr>, <expr><literal type="number">0x660f2807</literal></expr>, <expr><literal type="number">0x192e4bb3</literal></expr>,
		<expr><literal type="number">0xc0cba857</literal></expr>, <expr><literal type="number">0x45c8740f</literal></expr>, <expr><literal type="number">0xd20b5f39</literal></expr>, <expr><literal type="number">0xb9d3fbdb</literal></expr>,
		<expr><literal type="number">0x5579c0bd</literal></expr>, <expr><literal type="number">0x1a60320a</literal></expr>, <expr><literal type="number">0xd6a100c6</literal></expr>, <expr><literal type="number">0x402c7279</literal></expr>,
		<expr><literal type="number">0x679f25fe</literal></expr>, <expr><literal type="number">0xfb1fa3cc</literal></expr>, <expr><literal type="number">0x8ea5e9f8</literal></expr>, <expr><literal type="number">0xdb3222f8</literal></expr>,
		<expr><literal type="number">0x3c7516df</literal></expr>, <expr><literal type="number">0xfd616b15</literal></expr>, <expr><literal type="number">0x2f501ec8</literal></expr>, <expr><literal type="number">0xad0552ab</literal></expr>,
		<expr><literal type="number">0x323db5fa</literal></expr>, <expr><literal type="number">0xfd238760</literal></expr>, <expr><literal type="number">0x53317b48</literal></expr>, <expr><literal type="number">0x3e00df82</literal></expr>,
		<expr><literal type="number">0x9e5c57bb</literal></expr>, <expr><literal type="number">0xca6f8ca0</literal></expr>, <expr><literal type="number">0x1a87562e</literal></expr>, <expr><literal type="number">0xdf1769db</literal></expr>,
		<expr><literal type="number">0xd542a8f6</literal></expr>, <expr><literal type="number">0x287effc3</literal></expr>, <expr><literal type="number">0xac6732c6</literal></expr>, <expr><literal type="number">0x8c4f5573</literal></expr>,
		<expr><literal type="number">0x695b27b0</literal></expr>, <expr><literal type="number">0xbbca58c8</literal></expr>, <expr><literal type="number">0xe1ffa35d</literal></expr>, <expr><literal type="number">0xb8f011a0</literal></expr>,
		<expr><literal type="number">0x10fa3d98</literal></expr>, <expr><literal type="number">0xfd2183b8</literal></expr>, <expr><literal type="number">0x4afcb56c</literal></expr>, <expr><literal type="number">0x2dd1d35b</literal></expr>,
		<expr><literal type="number">0x9a53e479</literal></expr>, <expr><literal type="number">0xb6f84565</literal></expr>, <expr><literal type="number">0xd28e49bc</literal></expr>, <expr><literal type="number">0x4bfb9790</literal></expr>,
		<expr><literal type="number">0xe1ddf2da</literal></expr>, <expr><literal type="number">0xa4cb7e33</literal></expr>, <expr><literal type="number">0x62fb1341</literal></expr>, <expr><literal type="number">0xcee4c6e8</literal></expr>,
		<expr><literal type="number">0xef20cada</literal></expr>, <expr><literal type="number">0x36774c01</literal></expr>, <expr><literal type="number">0xd07e9efe</literal></expr>, <expr><literal type="number">0x2bf11fb4</literal></expr>,
		<expr><literal type="number">0x95dbda4d</literal></expr>, <expr><literal type="number">0xae909198</literal></expr>, <expr><literal type="number">0xeaad8e71</literal></expr>, <expr><literal type="number">0x6b93d5a0</literal></expr>,
		<expr><literal type="number">0xd08ed1d0</literal></expr>, <expr><literal type="number">0xafc725e0</literal></expr>, <expr><literal type="number">0x8e3c5b2f</literal></expr>, <expr><literal type="number">0x8e7594b7</literal></expr>,
		<expr><literal type="number">0x8ff6e2fb</literal></expr>, <expr><literal type="number">0xf2122b64</literal></expr>, <expr><literal type="number">0x8888b812</literal></expr>, <expr><literal type="number">0x900df01c</literal></expr>,
		<expr><literal type="number">0x4fad5ea0</literal></expr>, <expr><literal type="number">0x688fc31c</literal></expr>, <expr><literal type="number">0xd1cff191</literal></expr>, <expr><literal type="number">0xb3a8c1ad</literal></expr>,
		<expr><literal type="number">0x2f2f2218</literal></expr>, <expr><literal type="number">0xbe0e1777</literal></expr>, <expr><literal type="number">0xea752dfe</literal></expr>, <expr><literal type="number">0x8b021fa1</literal></expr>,
		<expr><literal type="number">0xe5a0cc0f</literal></expr>, <expr><literal type="number">0xb56f74e8</literal></expr>, <expr><literal type="number">0x18acf3d6</literal></expr>, <expr><literal type="number">0xce89e299</literal></expr>,
		<expr><literal type="number">0xb4a84fe0</literal></expr>, <expr><literal type="number">0xfd13e0b7</literal></expr>, <expr><literal type="number">0x7cc43b81</literal></expr>, <expr><literal type="number">0xd2ada8d9</literal></expr>,
		<expr><literal type="number">0x165fa266</literal></expr>, <expr><literal type="number">0x80957705</literal></expr>, <expr><literal type="number">0x93cc7314</literal></expr>, <expr><literal type="number">0x211a1477</literal></expr>,
		<expr><literal type="number">0xe6ad2065</literal></expr>, <expr><literal type="number">0x77b5fa86</literal></expr>, <expr><literal type="number">0xc75442f5</literal></expr>, <expr><literal type="number">0xfb9d35cf</literal></expr>,
		<expr><literal type="number">0xebcdaf0c</literal></expr>, <expr><literal type="number">0x7b3e89a0</literal></expr>, <expr><literal type="number">0xd6411bd3</literal></expr>, <expr><literal type="number">0xae1e7e49</literal></expr>,
		<expr><literal type="number">0x00250e2d</literal></expr>, <expr><literal type="number">0x2071b35e</literal></expr>, <expr><literal type="number">0x226800bb</literal></expr>, <expr><literal type="number">0x57b8e0af</literal></expr>,
		<expr><literal type="number">0x2464369b</literal></expr>, <expr><literal type="number">0xf009b91e</literal></expr>, <expr><literal type="number">0x5563911d</literal></expr>, <expr><literal type="number">0x59dfa6aa</literal></expr>,
		<expr><literal type="number">0x78c14389</literal></expr>, <expr><literal type="number">0xd95a537f</literal></expr>, <expr><literal type="number">0x207d5ba2</literal></expr>, <expr><literal type="number">0x02e5b9c5</literal></expr>,
		<expr><literal type="number">0x83260376</literal></expr>, <expr><literal type="number">0x6295cfa9</literal></expr>, <expr><literal type="number">0x11c81968</literal></expr>, <expr><literal type="number">0x4e734a41</literal></expr>,
		<expr><literal type="number">0xb3472dca</literal></expr>, <expr><literal type="number">0x7b14a94a</literal></expr>, <expr><literal type="number">0x1b510052</literal></expr>, <expr><literal type="number">0x9a532915</literal></expr>,
		<expr><literal type="number">0xd60f573f</literal></expr>, <expr><literal type="number">0xbc9bc6e4</literal></expr>, <expr><literal type="number">0x2b60a476</literal></expr>, <expr><literal type="number">0x81e67400</literal></expr>,
		<expr><literal type="number">0x08ba6fb5</literal></expr>, <expr><literal type="number">0x571be91f</literal></expr>, <expr><literal type="number">0xf296ec6b</literal></expr>, <expr><literal type="number">0x2a0dd915</literal></expr>,
		<expr><literal type="number">0xb6636521</literal></expr>, <expr><literal type="number">0xe7b9f9b6</literal></expr>, <expr><literal type="number">0xff34052e</literal></expr>, <expr><literal type="number">0xc5855664</literal></expr>,
		<expr><literal type="number">0x53b02d5d</literal></expr>, <expr><literal type="number">0xa99f8fa1</literal></expr>, <expr><literal type="number">0x08ba4799</literal></expr>, <expr><literal type="number">0x6e85076a</literal></expr>,
		<expr><literal type="number">0x4b7a70e9</literal></expr>, <expr><literal type="number">0xb5b32944</literal></expr>, <expr><literal type="number">0xdb75092e</literal></expr>, <expr><literal type="number">0xc4192623</literal></expr>,
		<expr><literal type="number">0xad6ea6b0</literal></expr>, <expr><literal type="number">0x49a7df7d</literal></expr>, <expr><literal type="number">0x9cee60b8</literal></expr>, <expr><literal type="number">0x8fedb266</literal></expr>,
		<expr><literal type="number">0xecaa8c71</literal></expr>, <expr><literal type="number">0x699a17ff</literal></expr>, <expr><literal type="number">0x5664526c</literal></expr>, <expr><literal type="number">0xc2b19ee1</literal></expr>,
		<expr><literal type="number">0x193602a5</literal></expr>, <expr><literal type="number">0x75094c29</literal></expr>, <expr><literal type="number">0xa0591340</literal></expr>, <expr><literal type="number">0xe4183a3e</literal></expr>,
		<expr><literal type="number">0x3f54989a</literal></expr>, <expr><literal type="number">0x5b429d65</literal></expr>, <expr><literal type="number">0x6b8fe4d6</literal></expr>, <expr><literal type="number">0x99f73fd6</literal></expr>,
		<expr><literal type="number">0xa1d29c07</literal></expr>, <expr><literal type="number">0xefe830f5</literal></expr>, <expr><literal type="number">0x4d2d38e6</literal></expr>, <expr><literal type="number">0xf0255dc1</literal></expr>,
		<expr><literal type="number">0x4cdd2086</literal></expr>, <expr><literal type="number">0x8470eb26</literal></expr>, <expr><literal type="number">0x6382e9c6</literal></expr>, <expr><literal type="number">0x021ecc5e</literal></expr>,
		<expr><literal type="number">0x09686b3f</literal></expr>, <expr><literal type="number">0x3ebaefc9</literal></expr>, <expr><literal type="number">0x3c971814</literal></expr>, <expr><literal type="number">0x6b6a70a1</literal></expr>,
		<expr><literal type="number">0x687f3584</literal></expr>, <expr><literal type="number">0x52a0e286</literal></expr>, <expr><literal type="number">0xb79c5305</literal></expr>, <expr><literal type="number">0xaa500737</literal></expr>,
		<expr><literal type="number">0x3e07841c</literal></expr>, <expr><literal type="number">0x7fdeae5c</literal></expr>, <expr><literal type="number">0x8e7d44ec</literal></expr>, <expr><literal type="number">0x5716f2b8</literal></expr>,
		<expr><literal type="number">0xb03ada37</literal></expr>, <expr><literal type="number">0xf0500c0d</literal></expr>, <expr><literal type="number">0xf01c1f04</literal></expr>, <expr><literal type="number">0x0200b3ff</literal></expr>,
		<expr><literal type="number">0xae0cf51a</literal></expr>, <expr><literal type="number">0x3cb574b2</literal></expr>, <expr><literal type="number">0x25837a58</literal></expr>, <expr><literal type="number">0xdc0921bd</literal></expr>,
		<expr><literal type="number">0xd19113f9</literal></expr>, <expr><literal type="number">0x7ca92ff6</literal></expr>, <expr><literal type="number">0x94324773</literal></expr>, <expr><literal type="number">0x22f54701</literal></expr>,
		<expr><literal type="number">0x3ae5e581</literal></expr>, <expr><literal type="number">0x37c2dadc</literal></expr>, <expr><literal type="number">0xc8b57634</literal></expr>, <expr><literal type="number">0x9af3dda7</literal></expr>,
		<expr><literal type="number">0xa9446146</literal></expr>, <expr><literal type="number">0x0fd0030e</literal></expr>, <expr><literal type="number">0xecc8c73e</literal></expr>, <expr><literal type="number">0xa4751e41</literal></expr>,
		<expr><literal type="number">0xe238cd99</literal></expr>, <expr><literal type="number">0x3bea0e2f</literal></expr>, <expr><literal type="number">0x3280bba1</literal></expr>, <expr><literal type="number">0x183eb331</literal></expr>,
		<expr><literal type="number">0x4e548b38</literal></expr>, <expr><literal type="number">0x4f6db908</literal></expr>, <expr><literal type="number">0x6f420d03</literal></expr>, <expr><literal type="number">0xf60a04bf</literal></expr>,
		<expr><literal type="number">0x2cb81290</literal></expr>, <expr><literal type="number">0x24977c79</literal></expr>, <expr><literal type="number">0x5679b072</literal></expr>, <expr><literal type="number">0xbcaf89af</literal></expr>,
		<expr><literal type="number">0xde9a771f</literal></expr>, <expr><literal type="number">0xd9930810</literal></expr>, <expr><literal type="number">0xb38bae12</literal></expr>, <expr><literal type="number">0xdccf3f2e</literal></expr>,
		<expr><literal type="number">0x5512721f</literal></expr>, <expr><literal type="number">0x2e6b7124</literal></expr>, <expr><literal type="number">0x501adde6</literal></expr>, <expr><literal type="number">0x9f84cd87</literal></expr>,
		<expr><literal type="number">0x7a584718</literal></expr>, <expr><literal type="number">0x7408da17</literal></expr>, <expr><literal type="number">0xbc9f9abc</literal></expr>, <expr><literal type="number">0xe94b7d8c</literal></expr>,
		<expr><literal type="number">0xec7aec3a</literal></expr>, <expr><literal type="number">0xdb851dfa</literal></expr>, <expr><literal type="number">0x63094366</literal></expr>, <expr><literal type="number">0xc464c3d2</literal></expr>,
		<expr><literal type="number">0xef1c1847</literal></expr>, <expr><literal type="number">0x3215d908</literal></expr>, <expr><literal type="number">0xdd433b37</literal></expr>, <expr><literal type="number">0x24c2ba16</literal></expr>,
		<expr><literal type="number">0x12a14d43</literal></expr>, <expr><literal type="number">0x2a65c451</literal></expr>, <expr><literal type="number">0x50940002</literal></expr>, <expr><literal type="number">0x133ae4dd</literal></expr>,
		<expr><literal type="number">0x71dff89e</literal></expr>, <expr><literal type="number">0x10314e55</literal></expr>, <expr><literal type="number">0x81ac77d6</literal></expr>, <expr><literal type="number">0x5f11199b</literal></expr>,
		<expr><literal type="number">0x043556f1</literal></expr>, <expr><literal type="number">0xd7a3c76b</literal></expr>, <expr><literal type="number">0x3c11183b</literal></expr>, <expr><literal type="number">0x5924a509</literal></expr>,
		<expr><literal type="number">0xf28fe6ed</literal></expr>, <expr><literal type="number">0x97f1fbfa</literal></expr>, <expr><literal type="number">0x9ebabf2c</literal></expr>, <expr><literal type="number">0x1e153c6e</literal></expr>,
		<expr><literal type="number">0x86e34570</literal></expr>, <expr><literal type="number">0xeae96fb1</literal></expr>, <expr><literal type="number">0x860e5e0a</literal></expr>, <expr><literal type="number">0x5a3e2ab3</literal></expr>,
		<expr><literal type="number">0x771fe71c</literal></expr>, <expr><literal type="number">0x4e3d06fa</literal></expr>, <expr><literal type="number">0x2965dcb9</literal></expr>, <expr><literal type="number">0x99e71d0f</literal></expr>,
		<expr><literal type="number">0x803e89d6</literal></expr>, <expr><literal type="number">0x5266c825</literal></expr>, <expr><literal type="number">0x2e4cc978</literal></expr>, <expr><literal type="number">0x9c10b36a</literal></expr>,
		<expr><literal type="number">0xc6150eba</literal></expr>, <expr><literal type="number">0x94e2ea78</literal></expr>, <expr><literal type="number">0xa5fc3c53</literal></expr>, <expr><literal type="number">0x1e0a2df4</literal></expr>,
		<expr><literal type="number">0xf2f74ea7</literal></expr>, <expr><literal type="number">0x361d2b3d</literal></expr>, <expr><literal type="number">0x1939260f</literal></expr>, <expr><literal type="number">0x19c27960</literal></expr>,
		<expr><literal type="number">0x5223a708</literal></expr>, <expr><literal type="number">0xf71312b6</literal></expr>, <expr><literal type="number">0xebadfe6e</literal></expr>, <expr><literal type="number">0xeac31f66</literal></expr>,
		<expr><literal type="number">0xe3bc4595</literal></expr>, <expr><literal type="number">0xa67bc883</literal></expr>, <expr><literal type="number">0xb17f37d1</literal></expr>, <expr><literal type="number">0x018cff28</literal></expr>,
		<expr><literal type="number">0xc332ddef</literal></expr>, <expr><literal type="number">0xbe6c5aa5</literal></expr>, <expr><literal type="number">0x65582185</literal></expr>, <expr><literal type="number">0x68ab9802</literal></expr>,
		<expr><literal type="number">0xeecea50f</literal></expr>, <expr><literal type="number">0xdb2f953b</literal></expr>, <expr><literal type="number">0x2aef7dad</literal></expr>, <expr><literal type="number">0x5b6e2f84</literal></expr>,
		<expr><literal type="number">0x1521b628</literal></expr>, <expr><literal type="number">0x29076170</literal></expr>, <expr><literal type="number">0xecdd4775</literal></expr>, <expr><literal type="number">0x619f1510</literal></expr>,
		<expr><literal type="number">0x13cca830</literal></expr>, <expr><literal type="number">0xeb61bd96</literal></expr>, <expr><literal type="number">0x0334fe1e</literal></expr>, <expr><literal type="number">0xaa0363cf</literal></expr>,
		<expr><literal type="number">0xb5735c90</literal></expr>, <expr><literal type="number">0x4c70a239</literal></expr>, <expr><literal type="number">0xd59e9e0b</literal></expr>, <expr><literal type="number">0xcbaade14</literal></expr>,
		<expr><literal type="number">0xeecc86bc</literal></expr>, <expr><literal type="number">0x60622ca7</literal></expr>, <expr><literal type="number">0x9cab5cab</literal></expr>, <expr><literal type="number">0xb2f3846e</literal></expr>,
		<expr><literal type="number">0x648b1eaf</literal></expr>, <expr><literal type="number">0x19bdf0ca</literal></expr>, <expr><literal type="number">0xa02369b9</literal></expr>, <expr><literal type="number">0x655abb50</literal></expr>,
		<expr><literal type="number">0x40685a32</literal></expr>, <expr><literal type="number">0x3c2ab4b3</literal></expr>, <expr><literal type="number">0x319ee9d5</literal></expr>, <expr><literal type="number">0xc021b8f7</literal></expr>,
		<expr><literal type="number">0x9b540b19</literal></expr>, <expr><literal type="number">0x875fa099</literal></expr>, <expr><literal type="number">0x95f7997e</literal></expr>, <expr><literal type="number">0x623d7da8</literal></expr>,
		<expr><literal type="number">0xf837889a</literal></expr>, <expr><literal type="number">0x97e32d77</literal></expr>, <expr><literal type="number">0x11ed935f</literal></expr>, <expr><literal type="number">0x16681281</literal></expr>,
		<expr><literal type="number">0x0e358829</literal></expr>, <expr><literal type="number">0xc7e61fd6</literal></expr>, <expr><literal type="number">0x96dedfa1</literal></expr>, <expr><literal type="number">0x7858ba99</literal></expr>,
		<expr><literal type="number">0x57f584a5</literal></expr>, <expr><literal type="number">0x1b227263</literal></expr>, <expr><literal type="number">0x9b83c3ff</literal></expr>, <expr><literal type="number">0x1ac24696</literal></expr>,
		<expr><literal type="number">0xcdb30aeb</literal></expr>, <expr><literal type="number">0x532e3054</literal></expr>, <expr><literal type="number">0x8fd948e4</literal></expr>, <expr><literal type="number">0x6dbc3128</literal></expr>,
		<expr><literal type="number">0x58ebf2ef</literal></expr>, <expr><literal type="number">0x34c6ffea</literal></expr>, <expr><literal type="number">0xfe28ed61</literal></expr>, <expr><literal type="number">0xee7c3c73</literal></expr>,
		<expr><literal type="number">0x5d4a14d9</literal></expr>, <expr><literal type="number">0xe864b7e3</literal></expr>, <expr><literal type="number">0x42105d14</literal></expr>, <expr><literal type="number">0x203e13e0</literal></expr>,
		<expr><literal type="number">0x45eee2b6</literal></expr>, <expr><literal type="number">0xa3aaabea</literal></expr>, <expr><literal type="number">0xdb6c4f15</literal></expr>, <expr><literal type="number">0xfacb4fd0</literal></expr>,
		<expr><literal type="number">0xc742f442</literal></expr>, <expr><literal type="number">0xef6abbb5</literal></expr>, <expr><literal type="number">0x654f3b1d</literal></expr>, <expr><literal type="number">0x41cd2105</literal></expr>,
		<expr><literal type="number">0xd81e799e</literal></expr>, <expr><literal type="number">0x86854dc7</literal></expr>, <expr><literal type="number">0xe44b476a</literal></expr>, <expr><literal type="number">0x3d816250</literal></expr>,
		<expr><literal type="number">0xcf62a1f2</literal></expr>, <expr><literal type="number">0x5b8d2646</literal></expr>, <expr><literal type="number">0xfc8883a0</literal></expr>, <expr><literal type="number">0xc1c7b6a3</literal></expr>,
		<expr><literal type="number">0x7f1524c3</literal></expr>, <expr><literal type="number">0x69cb7492</literal></expr>, <expr><literal type="number">0x47848a0b</literal></expr>, <expr><literal type="number">0x5692b285</literal></expr>,
		<expr><literal type="number">0x095bbf00</literal></expr>, <expr><literal type="number">0xad19489d</literal></expr>, <expr><literal type="number">0x1462b174</literal></expr>, <expr><literal type="number">0x23820e00</literal></expr>,
		<expr><literal type="number">0x58428d2a</literal></expr>, <expr><literal type="number">0x0c55f5ea</literal></expr>, <expr><literal type="number">0x1dadf43e</literal></expr>, <expr><literal type="number">0x233f7061</literal></expr>,
		<expr><literal type="number">0x3372f092</literal></expr>, <expr><literal type="number">0x8d937e41</literal></expr>, <expr><literal type="number">0xd65fecf1</literal></expr>, <expr><literal type="number">0x6c223bdb</literal></expr>,
		<expr><literal type="number">0x7cde3759</literal></expr>, <expr><literal type="number">0xcbee7460</literal></expr>, <expr><literal type="number">0x4085f2a7</literal></expr>, <expr><literal type="number">0xce77326e</literal></expr>,
		<expr><literal type="number">0xa6078084</literal></expr>, <expr><literal type="number">0x19f8509e</literal></expr>, <expr><literal type="number">0xe8efd855</literal></expr>, <expr><literal type="number">0x61d99735</literal></expr>,
		<expr><literal type="number">0xa969a7aa</literal></expr>, <expr><literal type="number">0xc50c06c2</literal></expr>, <expr><literal type="number">0x5a04abfc</literal></expr>, <expr><literal type="number">0x800bcadc</literal></expr>,
		<expr><literal type="number">0x9e447a2e</literal></expr>, <expr><literal type="number">0xc3453484</literal></expr>, <expr><literal type="number">0xfdd56705</literal></expr>, <expr><literal type="number">0x0e1e9ec9</literal></expr>,
		<expr><literal type="number">0xdb73dbd3</literal></expr>, <expr><literal type="number">0x105588cd</literal></expr>, <expr><literal type="number">0x675fda79</literal></expr>, <expr><literal type="number">0xe3674340</literal></expr>,
		<expr><literal type="number">0xc5c43465</literal></expr>, <expr><literal type="number">0x713e38d8</literal></expr>, <expr><literal type="number">0x3d28f89e</literal></expr>, <expr><literal type="number">0xf16dff20</literal></expr>,
		<expr><literal type="number">0x153e21e7</literal></expr>, <expr><literal type="number">0x8fb03d4a</literal></expr>, <expr><literal type="number">0xe6e39f2b</literal></expr>, <expr><literal type="number">0xdb83adf7</literal></expr>,
		<expr><literal type="number">0xe93d5a68</literal></expr>, <expr><literal type="number">0x948140f7</literal></expr>, <expr><literal type="number">0xf64c261c</literal></expr>, <expr><literal type="number">0x94692934</literal></expr>,
		<expr><literal type="number">0x411520f7</literal></expr>, <expr><literal type="number">0x7602d4f7</literal></expr>, <expr><literal type="number">0xbcf46b2e</literal></expr>, <expr><literal type="number">0xd4a20068</literal></expr>,
		<expr><literal type="number">0xd4082471</literal></expr>, <expr><literal type="number">0x3320f46a</literal></expr>, <expr><literal type="number">0x43b7d4b7</literal></expr>, <expr><literal type="number">0x500061af</literal></expr>,
		<expr><literal type="number">0x1e39f62e</literal></expr>, <expr><literal type="number">0x97244546</literal></expr>, <expr><literal type="number">0x14214f74</literal></expr>, <expr><literal type="number">0xbf8b8840</literal></expr>,
		<expr><literal type="number">0x4d95fc1d</literal></expr>, <expr><literal type="number">0x96b591af</literal></expr>, <expr><literal type="number">0x70f4ddd3</literal></expr>, <expr><literal type="number">0x66a02f45</literal></expr>,
		<expr><literal type="number">0xbfbc09ec</literal></expr>, <expr><literal type="number">0x03bd9785</literal></expr>, <expr><literal type="number">0x7fac6dd0</literal></expr>, <expr><literal type="number">0x31cb8504</literal></expr>,
		<expr><literal type="number">0x96eb27b3</literal></expr>, <expr><literal type="number">0x55fd3941</literal></expr>, <expr><literal type="number">0xda2547e6</literal></expr>, <expr><literal type="number">0xabca0a9a</literal></expr>,
		<expr><literal type="number">0x28507825</literal></expr>, <expr><literal type="number">0x530429f4</literal></expr>, <expr><literal type="number">0x0a2c86da</literal></expr>, <expr><literal type="number">0xe9b66dfb</literal></expr>,
		<expr><literal type="number">0x68dc1462</literal></expr>, <expr><literal type="number">0xd7486900</literal></expr>, <expr><literal type="number">0x680ec0a4</literal></expr>, <expr><literal type="number">0x27a18dee</literal></expr>,
		<expr><literal type="number">0x4f3ffea2</literal></expr>, <expr><literal type="number">0xe887ad8c</literal></expr>, <expr><literal type="number">0xb58ce006</literal></expr>, <expr><literal type="number">0x7af4d6b6</literal></expr>,
		<expr><literal type="number">0xaace1e7c</literal></expr>, <expr><literal type="number">0xd3375fec</literal></expr>, <expr><literal type="number">0xce78a399</literal></expr>, <expr><literal type="number">0x406b2a42</literal></expr>,
		<expr><literal type="number">0x20fe9e35</literal></expr>, <expr><literal type="number">0xd9f385b9</literal></expr>, <expr><literal type="number">0xee39d7ab</literal></expr>, <expr><literal type="number">0x3b124e8b</literal></expr>,
		<expr><literal type="number">0x1dc9faf7</literal></expr>, <expr><literal type="number">0x4b6d1856</literal></expr>, <expr><literal type="number">0x26a36631</literal></expr>, <expr><literal type="number">0xeae397b2</literal></expr>,
		<expr><literal type="number">0x3a6efa74</literal></expr>, <expr><literal type="number">0xdd5b4332</literal></expr>, <expr><literal type="number">0x6841e7f7</literal></expr>, <expr><literal type="number">0xca7820fb</literal></expr>,
		<expr><literal type="number">0xfb0af54e</literal></expr>, <expr><literal type="number">0xd8feb397</literal></expr>, <expr><literal type="number">0x454056ac</literal></expr>, <expr><literal type="number">0xba489527</literal></expr>,
		<expr><literal type="number">0x55533a3a</literal></expr>, <expr><literal type="number">0x20838d87</literal></expr>, <expr><literal type="number">0xfe6ba9b7</literal></expr>, <expr><literal type="number">0xd096954b</literal></expr>,
		<expr><literal type="number">0x55a867bc</literal></expr>, <expr><literal type="number">0xa1159a58</literal></expr>, <expr><literal type="number">0xcca92963</literal></expr>, <expr><literal type="number">0x99e1db33</literal></expr>,
		<expr><literal type="number">0xa62a4a56</literal></expr>, <expr><literal type="number">0x3f3125f9</literal></expr>, <expr><literal type="number">0x5ef47e1c</literal></expr>, <expr><literal type="number">0x9029317c</literal></expr>,
		<expr><literal type="number">0xfdf8e802</literal></expr>, <expr><literal type="number">0x04272f70</literal></expr>, <expr><literal type="number">0x80bb155c</literal></expr>, <expr><literal type="number">0x05282ce3</literal></expr>,
		<expr><literal type="number">0x95c11548</literal></expr>, <expr><literal type="number">0xe4c66d22</literal></expr>, <expr><literal type="number">0x48c1133f</literal></expr>, <expr><literal type="number">0xc70f86dc</literal></expr>,
		<expr><literal type="number">0x07f9c9ee</literal></expr>, <expr><literal type="number">0x41041f0f</literal></expr>, <expr><literal type="number">0x404779a4</literal></expr>, <expr><literal type="number">0x5d886e17</literal></expr>,
		<expr><literal type="number">0x325f51eb</literal></expr>, <expr><literal type="number">0xd59bc0d1</literal></expr>, <expr><literal type="number">0xf2bcc18f</literal></expr>, <expr><literal type="number">0x41113564</literal></expr>,
		<expr><literal type="number">0x257b7834</literal></expr>, <expr><literal type="number">0x602a9c60</literal></expr>, <expr><literal type="number">0xdff8e8a3</literal></expr>, <expr><literal type="number">0x1f636c1b</literal></expr>,
		<expr><literal type="number">0x0e12b4c2</literal></expr>, <expr><literal type="number">0x02e1329e</literal></expr>, <expr><literal type="number">0xaf664fd1</literal></expr>, <expr><literal type="number">0xcad18115</literal></expr>,
		<expr><literal type="number">0x6b2395e0</literal></expr>, <expr><literal type="number">0x333e92e1</literal></expr>, <expr><literal type="number">0x3b240b62</literal></expr>, <expr><literal type="number">0xeebeb922</literal></expr>,
		<expr><literal type="number">0x85b2a20e</literal></expr>, <expr><literal type="number">0xe6ba0d99</literal></expr>, <expr><literal type="number">0xde720c8c</literal></expr>, <expr><literal type="number">0x2da2f728</literal></expr>,
		<expr><literal type="number">0xd0127845</literal></expr>, <expr><literal type="number">0x95b794fd</literal></expr>, <expr><literal type="number">0x647d0862</literal></expr>, <expr><literal type="number">0xe7ccf5f0</literal></expr>,
		<expr><literal type="number">0x5449a36f</literal></expr>, <expr><literal type="number">0x877d48fa</literal></expr>, <expr><literal type="number">0xc39dfd27</literal></expr>, <expr><literal type="number">0xf33e8d1e</literal></expr>,
		<expr><literal type="number">0x0a476341</literal></expr>, <expr><literal type="number">0x992eff74</literal></expr>, <expr><literal type="number">0x3a6f6eab</literal></expr>, <expr><literal type="number">0xf4f8fd37</literal></expr>,
		<expr><literal type="number">0xa812dc60</literal></expr>, <expr><literal type="number">0xa1ebddf8</literal></expr>, <expr><literal type="number">0x991be14c</literal></expr>, <expr><literal type="number">0xdb6e6b0d</literal></expr>,
		<expr><literal type="number">0xc67b5510</literal></expr>, <expr><literal type="number">0x6d672c37</literal></expr>, <expr><literal type="number">0x2765d43b</literal></expr>, <expr><literal type="number">0xdcd0e804</literal></expr>,
		<expr><literal type="number">0xf1290dc7</literal></expr>, <expr><literal type="number">0xcc00ffa3</literal></expr>, <expr><literal type="number">0xb5390f92</literal></expr>, <expr><literal type="number">0x690fed0b</literal></expr>,
		<expr><literal type="number">0x667b9ffb</literal></expr>, <expr><literal type="number">0xcedb7d9c</literal></expr>, <expr><literal type="number">0xa091cf0b</literal></expr>, <expr><literal type="number">0xd9155ea3</literal></expr>,
		<expr><literal type="number">0xbb132f88</literal></expr>, <expr><literal type="number">0x515bad24</literal></expr>, <expr><literal type="number">0x7b9479bf</literal></expr>, <expr><literal type="number">0x763bd6eb</literal></expr>,
		<expr><literal type="number">0x37392eb3</literal></expr>, <expr><literal type="number">0xcc115979</literal></expr>, <expr><literal type="number">0x8026e297</literal></expr>, <expr><literal type="number">0xf42e312d</literal></expr>,
		<expr><literal type="number">0x6842ada7</literal></expr>, <expr><literal type="number">0xc66a2b3b</literal></expr>, <expr><literal type="number">0x12754ccc</literal></expr>, <expr><literal type="number">0x782ef11c</literal></expr>,
		<expr><literal type="number">0x6a124237</literal></expr>, <expr><literal type="number">0xb79251e7</literal></expr>, <expr><literal type="number">0x06a1bbe6</literal></expr>, <expr><literal type="number">0x4bfb6350</literal></expr>,
		<expr><literal type="number">0x1a6b1018</literal></expr>, <expr><literal type="number">0x11caedfa</literal></expr>, <expr><literal type="number">0x3d25bdd8</literal></expr>, <expr><literal type="number">0xe2e1c3c9</literal></expr>,
		<expr><literal type="number">0x44421659</literal></expr>, <expr><literal type="number">0x0a121386</literal></expr>, <expr><literal type="number">0xd90cec6e</literal></expr>, <expr><literal type="number">0xd5abea2a</literal></expr>,
		<expr><literal type="number">0x64af674e</literal></expr>, <expr><literal type="number">0xda86a85f</literal></expr>, <expr><literal type="number">0xbebfe988</literal></expr>, <expr><literal type="number">0x64e4c3fe</literal></expr>,
		<expr><literal type="number">0x9dbc8057</literal></expr>, <expr><literal type="number">0xf0f7c086</literal></expr>, <expr><literal type="number">0x60787bf8</literal></expr>, <expr><literal type="number">0x6003604d</literal></expr>,
		<expr><literal type="number">0xd1fd8346</literal></expr>, <expr><literal type="number">0xf6381fb0</literal></expr>, <expr><literal type="number">0x7745ae04</literal></expr>, <expr><literal type="number">0xd736fccc</literal></expr>,
		<expr><literal type="number">0x83426b33</literal></expr>, <expr><literal type="number">0xf01eab71</literal></expr>, <expr><literal type="number">0xb0804187</literal></expr>, <expr><literal type="number">0x3c005e5f</literal></expr>,
		<expr><literal type="number">0x77a057be</literal></expr>, <expr><literal type="number">0xbde8ae24</literal></expr>, <expr><literal type="number">0x55464299</literal></expr>, <expr><literal type="number">0xbf582e61</literal></expr>,
		<expr><literal type="number">0x4e58f48f</literal></expr>, <expr><literal type="number">0xf2ddfda2</literal></expr>, <expr><literal type="number">0xf474ef38</literal></expr>, <expr><literal type="number">0x8789bdc2</literal></expr>,
		<expr><literal type="number">0x5366f9c3</literal></expr>, <expr><literal type="number">0xc8b38e74</literal></expr>, <expr><literal type="number">0xb475f255</literal></expr>, <expr><literal type="number">0x46fcd9b9</literal></expr>,
		<expr><literal type="number">0x7aeb2661</literal></expr>, <expr><literal type="number">0x8b1ddf84</literal></expr>, <expr><literal type="number">0x846a0e79</literal></expr>, <expr><literal type="number">0x915f95e2</literal></expr>,
		<expr><literal type="number">0x466e598e</literal></expr>, <expr><literal type="number">0x20b45770</literal></expr>, <expr><literal type="number">0x8cd55591</literal></expr>, <expr><literal type="number">0xc902de4c</literal></expr>,
		<expr><literal type="number">0xb90bace1</literal></expr>, <expr><literal type="number">0xbb8205d0</literal></expr>, <expr><literal type="number">0x11a86248</literal></expr>, <expr><literal type="number">0x7574a99e</literal></expr>,
		<expr><literal type="number">0xb77f19b6</literal></expr>, <expr><literal type="number">0xe0a9dc09</literal></expr>, <expr><literal type="number">0x662d09a1</literal></expr>, <expr><literal type="number">0xc4324633</literal></expr>,
		<expr><literal type="number">0xe85a1f02</literal></expr>, <expr><literal type="number">0x09f0be8c</literal></expr>, <expr><literal type="number">0x4a99a025</literal></expr>, <expr><literal type="number">0x1d6efe10</literal></expr>,
		<expr><literal type="number">0x1ab93d1d</literal></expr>, <expr><literal type="number">0x0ba5a4df</literal></expr>, <expr><literal type="number">0xa186f20f</literal></expr>, <expr><literal type="number">0x2868f169</literal></expr>,
		<expr><literal type="number">0xdcb7da83</literal></expr>, <expr><literal type="number">0x573906fe</literal></expr>, <expr><literal type="number">0xa1e2ce9b</literal></expr>, <expr><literal type="number">0x4fcd7f52</literal></expr>,
		<expr><literal type="number">0x50115e01</literal></expr>, <expr><literal type="number">0xa70683fa</literal></expr>, <expr><literal type="number">0xa002b5c4</literal></expr>, <expr><literal type="number">0x0de6d027</literal></expr>,
		<expr><literal type="number">0x9af88c27</literal></expr>, <expr><literal type="number">0x773f8641</literal></expr>, <expr><literal type="number">0xc3604c06</literal></expr>, <expr><literal type="number">0x61a806b5</literal></expr>,
		<expr><literal type="number">0xf0177a28</literal></expr>, <expr><literal type="number">0xc0f586e0</literal></expr>, <expr><literal type="number">0x006058aa</literal></expr>, <expr><literal type="number">0x30dc7d62</literal></expr>,
		<expr><literal type="number">0x11e69ed7</literal></expr>, <expr><literal type="number">0x2338ea63</literal></expr>, <expr><literal type="number">0x53c2dd94</literal></expr>, <expr><literal type="number">0xc2c21634</literal></expr>,
		<expr><literal type="number">0xbbcbee56</literal></expr>, <expr><literal type="number">0x90bcb6de</literal></expr>, <expr><literal type="number">0xebfc7da1</literal></expr>, <expr><literal type="number">0xce591d76</literal></expr>,
		<expr><literal type="number">0x6f05e409</literal></expr>, <expr><literal type="number">0x4b7c0188</literal></expr>, <expr><literal type="number">0x39720a3d</literal></expr>, <expr><literal type="number">0x7c927c24</literal></expr>,
		<expr><literal type="number">0x86e3725f</literal></expr>, <expr><literal type="number">0x724d9db9</literal></expr>, <expr><literal type="number">0x1ac15bb4</literal></expr>, <expr><literal type="number">0xd39eb8fc</literal></expr>,
		<expr><literal type="number">0xed545578</literal></expr>, <expr><literal type="number">0x08fca5b5</literal></expr>, <expr><literal type="number">0xd83d7cd3</literal></expr>, <expr><literal type="number">0x4dad0fc4</literal></expr>,
		<expr><literal type="number">0x1e50ef5e</literal></expr>, <expr><literal type="number">0xb161e6f8</literal></expr>, <expr><literal type="number">0xa28514d9</literal></expr>, <expr><literal type="number">0x6c51133c</literal></expr>,
		<expr><literal type="number">0x6fd5c7e7</literal></expr>, <expr><literal type="number">0x56e14ec4</literal></expr>, <expr><literal type="number">0x362abfce</literal></expr>, <expr><literal type="number">0xddc6c837</literal></expr>,
		<expr><literal type="number">0xd79a3234</literal></expr>, <expr><literal type="number">0x92638212</literal></expr>, <expr><literal type="number">0x670efa8e</literal></expr>, <expr><literal type="number">0x406000e0</literal></expr>,
		<expr><literal type="number">0x3a39ce37</literal></expr>, <expr><literal type="number">0xd3faf5cf</literal></expr>, <expr><literal type="number">0xabc27737</literal></expr>, <expr><literal type="number">0x5ac52d1b</literal></expr>,
		<expr><literal type="number">0x5cb0679e</literal></expr>, <expr><literal type="number">0x4fa33742</literal></expr>, <expr><literal type="number">0xd3822740</literal></expr>, <expr><literal type="number">0x99bc9bbe</literal></expr>,
		<expr><literal type="number">0xd5118e9d</literal></expr>, <expr><literal type="number">0xbf0f7315</literal></expr>, <expr><literal type="number">0xd62d1c7e</literal></expr>, <expr><literal type="number">0xc700c47b</literal></expr>,
		<expr><literal type="number">0xb78c1b6b</literal></expr>, <expr><literal type="number">0x21a19045</literal></expr>, <expr><literal type="number">0xb26eb1be</literal></expr>, <expr><literal type="number">0x6a366eb4</literal></expr>,
		<expr><literal type="number">0x5748ab2f</literal></expr>, <expr><literal type="number">0xbc946e79</literal></expr>, <expr><literal type="number">0xc6a376d2</literal></expr>, <expr><literal type="number">0x6549c2c8</literal></expr>,
		<expr><literal type="number">0x530ff8ee</literal></expr>, <expr><literal type="number">0x468dde7d</literal></expr>, <expr><literal type="number">0xd5730a1d</literal></expr>, <expr><literal type="number">0x4cd04dc6</literal></expr>,
		<expr><literal type="number">0x2939bbdb</literal></expr>, <expr><literal type="number">0xa9ba4650</literal></expr>, <expr><literal type="number">0xac9526e8</literal></expr>, <expr><literal type="number">0xbe5ee304</literal></expr>,
		<expr><literal type="number">0xa1fad5f0</literal></expr>, <expr><literal type="number">0x6a2d519a</literal></expr>, <expr><literal type="number">0x63ef8ce2</literal></expr>, <expr><literal type="number">0x9a86ee22</literal></expr>,
		<expr><literal type="number">0xc089c2b8</literal></expr>, <expr><literal type="number">0x43242ef6</literal></expr>, <expr><literal type="number">0xa51e03aa</literal></expr>, <expr><literal type="number">0x9cf2d0a4</literal></expr>,
		<expr><literal type="number">0x83c061ba</literal></expr>, <expr><literal type="number">0x9be96a4d</literal></expr>, <expr><literal type="number">0x8fe51550</literal></expr>, <expr><literal type="number">0xba645bd6</literal></expr>,
		<expr><literal type="number">0x2826a2f9</literal></expr>, <expr><literal type="number">0xa73a3ae1</literal></expr>, <expr><literal type="number">0x4ba99586</literal></expr>, <expr><literal type="number">0xef5562e9</literal></expr>,
		<expr><literal type="number">0xc72fefd3</literal></expr>, <expr><literal type="number">0xf752f7da</literal></expr>, <expr><literal type="number">0x3f046f69</literal></expr>, <expr><literal type="number">0x77fa0a59</literal></expr>,
		<expr><literal type="number">0x80e4a915</literal></expr>, <expr><literal type="number">0x87b08601</literal></expr>, <expr><literal type="number">0x9b09e6ad</literal></expr>, <expr><literal type="number">0x3b3ee593</literal></expr>,
		<expr><literal type="number">0xe990fd5a</literal></expr>, <expr><literal type="number">0x9e34d797</literal></expr>, <expr><literal type="number">0x2cf0b7d9</literal></expr>, <expr><literal type="number">0x022b8b51</literal></expr>,
		<expr><literal type="number">0x96d5ac3a</literal></expr>, <expr><literal type="number">0x017da67d</literal></expr>, <expr><literal type="number">0xd1cf3ed6</literal></expr>, <expr><literal type="number">0x7c7d2d28</literal></expr>,
		<expr><literal type="number">0x1f9f25cf</literal></expr>, <expr><literal type="number">0xadf2b89b</literal></expr>, <expr><literal type="number">0x5ad6b472</literal></expr>, <expr><literal type="number">0x5a88f54c</literal></expr>,
		<expr><literal type="number">0xe029ac71</literal></expr>, <expr><literal type="number">0xe019a5e6</literal></expr>, <expr><literal type="number">0x47b0acfd</literal></expr>, <expr><literal type="number">0xed93fa9b</literal></expr>,
		<expr><literal type="number">0xe8d3c48d</literal></expr>, <expr><literal type="number">0x283b57cc</literal></expr>, <expr><literal type="number">0xf8d56629</literal></expr>, <expr><literal type="number">0x79132e28</literal></expr>,
		<expr><literal type="number">0x785f0191</literal></expr>, <expr><literal type="number">0xed756055</literal></expr>, <expr><literal type="number">0xf7960e44</literal></expr>, <expr><literal type="number">0xe3d35e8c</literal></expr>,
		<expr><literal type="number">0x15056dd4</literal></expr>, <expr><literal type="number">0x88f46dba</literal></expr>, <expr><literal type="number">0x03a16125</literal></expr>, <expr><literal type="number">0x0564f0bd</literal></expr>,
		<expr><literal type="number">0xc3eb9e15</literal></expr>, <expr><literal type="number">0x3c9057a2</literal></expr>, <expr><literal type="number">0x97271aec</literal></expr>, <expr><literal type="number">0xa93a072a</literal></expr>,
		<expr><literal type="number">0x1b3f6d9b</literal></expr>, <expr><literal type="number">0x1e6321f5</literal></expr>, <expr><literal type="number">0xf59c66fb</literal></expr>, <expr><literal type="number">0x26dcf319</literal></expr>,
		<expr><literal type="number">0x7533d928</literal></expr>, <expr><literal type="number">0xb155fdf5</literal></expr>, <expr><literal type="number">0x03563482</literal></expr>, <expr><literal type="number">0x8aba3cbb</literal></expr>,
		<expr><literal type="number">0x28517711</literal></expr>, <expr><literal type="number">0xc20ad9f8</literal></expr>, <expr><literal type="number">0xabcc5167</literal></expr>, <expr><literal type="number">0xccad925f</literal></expr>,
		<expr><literal type="number">0x4de81751</literal></expr>, <expr><literal type="number">0x3830dc8e</literal></expr>, <expr><literal type="number">0x379d5862</literal></expr>, <expr><literal type="number">0x9320f991</literal></expr>,
		<expr><literal type="number">0xea7a90c2</literal></expr>, <expr><literal type="number">0xfb3e7bce</literal></expr>, <expr><literal type="number">0x5121ce64</literal></expr>, <expr><literal type="number">0x774fbe32</literal></expr>,
		<expr><literal type="number">0xa8b6e37e</literal></expr>, <expr><literal type="number">0xc3293d46</literal></expr>, <expr><literal type="number">0x48de5369</literal></expr>, <expr><literal type="number">0x6413e680</literal></expr>,
		<expr><literal type="number">0xa2ae0810</literal></expr>, <expr><literal type="number">0xdd6db224</literal></expr>, <expr><literal type="number">0x69852dfd</literal></expr>, <expr><literal type="number">0x09072166</literal></expr>,
		<expr><literal type="number">0xb39a460a</literal></expr>, <expr><literal type="number">0x6445c0dd</literal></expr>, <expr><literal type="number">0x586cdecf</literal></expr>, <expr><literal type="number">0x1c20c8ae</literal></expr>,
		<expr><literal type="number">0x5bbef7dd</literal></expr>, <expr><literal type="number">0x1b588d40</literal></expr>, <expr><literal type="number">0xccd2017f</literal></expr>, <expr><literal type="number">0x6bb4e3bb</literal></expr>,
		<expr><literal type="number">0xdda26a7e</literal></expr>, <expr><literal type="number">0x3a59ff45</literal></expr>, <expr><literal type="number">0x3e350a44</literal></expr>, <expr><literal type="number">0xbcb4cdd5</literal></expr>,
		<expr><literal type="number">0x72eacea8</literal></expr>, <expr><literal type="number">0xfa6484bb</literal></expr>, <expr><literal type="number">0x8d6612ae</literal></expr>, <expr><literal type="number">0xbf3c6f47</literal></expr>,
		<expr><literal type="number">0xd29be463</literal></expr>, <expr><literal type="number">0x542f5d9e</literal></expr>, <expr><literal type="number">0xaec2771b</literal></expr>, <expr><literal type="number">0xf64e6370</literal></expr>,
		<expr><literal type="number">0x740e0d8d</literal></expr>, <expr><literal type="number">0xe75b1357</literal></expr>, <expr><literal type="number">0xf8721671</literal></expr>, <expr><literal type="number">0xaf537d5d</literal></expr>,
		<expr><literal type="number">0x4040cb08</literal></expr>, <expr><literal type="number">0x4eb4e2cc</literal></expr>, <expr><literal type="number">0x34d2466a</literal></expr>, <expr><literal type="number">0x0115af84</literal></expr>,
		<expr><literal type="number">0xe1b00428</literal></expr>, <expr><literal type="number">0x95983a1d</literal></expr>, <expr><literal type="number">0x06b89fb4</literal></expr>, <expr><literal type="number">0xce6ea048</literal></expr>,
		<expr><literal type="number">0x6f3f3b82</literal></expr>, <expr><literal type="number">0x3520ab82</literal></expr>, <expr><literal type="number">0x011a1d4b</literal></expr>, <expr><literal type="number">0x277227f8</literal></expr>,
		<expr><literal type="number">0x611560b1</literal></expr>, <expr><literal type="number">0xe7933fdc</literal></expr>, <expr><literal type="number">0xbb3a792b</literal></expr>, <expr><literal type="number">0x344525bd</literal></expr>,
		<expr><literal type="number">0xa08839e1</literal></expr>, <expr><literal type="number">0x51ce794b</literal></expr>, <expr><literal type="number">0x2f32c9b7</literal></expr>, <expr><literal type="number">0xa01fbac9</literal></expr>,
		<expr><literal type="number">0xe01cc87e</literal></expr>, <expr><literal type="number">0xbcc7d1f6</literal></expr>, <expr><literal type="number">0xcf0111c3</literal></expr>, <expr><literal type="number">0xa1e8aac7</literal></expr>,
		<expr><literal type="number">0x1a908749</literal></expr>, <expr><literal type="number">0xd44fbd9a</literal></expr>, <expr><literal type="number">0xd0dadecb</literal></expr>, <expr><literal type="number">0xd50ada38</literal></expr>,
		<expr><literal type="number">0x0339c32a</literal></expr>, <expr><literal type="number">0xc6913667</literal></expr>, <expr><literal type="number">0x8df9317c</literal></expr>, <expr><literal type="number">0xe0b12b4f</literal></expr>,
		<expr><literal type="number">0xf79e59b7</literal></expr>, <expr><literal type="number">0x43f5bb3a</literal></expr>, <expr><literal type="number">0xf2d519ff</literal></expr>, <expr><literal type="number">0x27d9459c</literal></expr>,
		<expr><literal type="number">0xbf97222c</literal></expr>, <expr><literal type="number">0x15e6fc2a</literal></expr>, <expr><literal type="number">0x0f91fc71</literal></expr>, <expr><literal type="number">0x9b941525</literal></expr>,
		<expr><literal type="number">0xfae59361</literal></expr>, <expr><literal type="number">0xceb69ceb</literal></expr>, <expr><literal type="number">0xc2a86459</literal></expr>, <expr><literal type="number">0x12baa8d1</literal></expr>,
		<expr><literal type="number">0xb6c1075e</literal></expr>, <expr><literal type="number">0xe3056a0c</literal></expr>, <expr><literal type="number">0x10d25065</literal></expr>, <expr><literal type="number">0xcb03a442</literal></expr>,
		<expr><literal type="number">0xe0ec6e0e</literal></expr>, <expr><literal type="number">0x1698db3b</literal></expr>, <expr><literal type="number">0x4c98a0be</literal></expr>, <expr><literal type="number">0x3278e964</literal></expr>,
		<expr><literal type="number">0x9f1f9532</literal></expr>, <expr><literal type="number">0xe0d392df</literal></expr>, <expr><literal type="number">0xd3a0342b</literal></expr>, <expr><literal type="number">0x8971f21e</literal></expr>,
		<expr><literal type="number">0x1b0a7441</literal></expr>, <expr><literal type="number">0x4ba3348c</literal></expr>, <expr><literal type="number">0xc5be7120</literal></expr>, <expr><literal type="number">0xc37632d8</literal></expr>,
		<expr><literal type="number">0xdf359f8d</literal></expr>, <expr><literal type="number">0x9b992f2e</literal></expr>, <expr><literal type="number">0xe60b6f47</literal></expr>, <expr><literal type="number">0x0fe3f11d</literal></expr>,
		<expr><literal type="number">0xe54cda54</literal></expr>, <expr><literal type="number">0x1edad891</literal></expr>, <expr><literal type="number">0xce6279cf</literal></expr>, <expr><literal type="number">0xcd3e7e6f</literal></expr>,
		<expr><literal type="number">0x1618b166</literal></expr>, <expr><literal type="number">0xfd2c1d05</literal></expr>, <expr><literal type="number">0x848fd2c5</literal></expr>, <expr><literal type="number">0xf6fb2299</literal></expr>,
		<expr><literal type="number">0xf523f357</literal></expr>, <expr><literal type="number">0xa6327623</literal></expr>, <expr><literal type="number">0x93a83531</literal></expr>, <expr><literal type="number">0x56cccd02</literal></expr>,
		<expr><literal type="number">0xacf08162</literal></expr>, <expr><literal type="number">0x5a75ebb5</literal></expr>, <expr><literal type="number">0x6e163697</literal></expr>, <expr><literal type="number">0x88d273cc</literal></expr>,
		<expr><literal type="number">0xde966292</literal></expr>, <expr><literal type="number">0x81b949d0</literal></expr>, <expr><literal type="number">0x4c50901b</literal></expr>, <expr><literal type="number">0x71c65614</literal></expr>,
		<expr><literal type="number">0xe6c6c7bd</literal></expr>, <expr><literal type="number">0x327a140a</literal></expr>, <expr><literal type="number">0x45e1d006</literal></expr>, <expr><literal type="number">0xc3f27b9a</literal></expr>,
		<expr><literal type="number">0xc9aa53fd</literal></expr>, <expr><literal type="number">0x62a80f00</literal></expr>, <expr><literal type="number">0xbb25bfe2</literal></expr>, <expr><literal type="number">0x35bdd2f6</literal></expr>,
		<expr><literal type="number">0x71126905</literal></expr>, <expr><literal type="number">0xb2040222</literal></expr>, <expr><literal type="number">0xb6cbcf7c</literal></expr>, <expr><literal type="number">0xcd769c2b</literal></expr>,
		<expr><literal type="number">0x53113ec0</literal></expr>, <expr><literal type="number">0x1640e3d3</literal></expr>, <expr><literal type="number">0x38abbd60</literal></expr>, <expr><literal type="number">0x2547adf0</literal></expr>,
		<expr><literal type="number">0xba38209c</literal></expr>, <expr><literal type="number">0xf746ce76</literal></expr>, <expr><literal type="number">0x77afa1c5</literal></expr>, <expr><literal type="number">0x20756060</literal></expr>,
		<expr><literal type="number">0x85cbfe4e</literal></expr>, <expr><literal type="number">0x8ae88dd8</literal></expr>, <expr><literal type="number">0x7aaaf9b0</literal></expr>, <expr><literal type="number">0x4cf9aa7e</literal></expr>,
		<expr><literal type="number">0x1948c25c</literal></expr>, <expr><literal type="number">0x02fb8a8c</literal></expr>, <expr><literal type="number">0x01c36ae4</literal></expr>, <expr><literal type="number">0xd6ebe1f9</literal></expr>,
		<expr><literal type="number">0x90d4f869</literal></expr>, <expr><literal type="number">0xa65cdea0</literal></expr>, <expr><literal type="number">0x3f09252d</literal></expr>, <expr><literal type="number">0xc208e69f</literal></expr>,
		<expr><literal type="number">0xb74e6132</literal></expr>, <expr><literal type="number">0xce77e25b</literal></expr>, <expr><literal type="number">0x578fdfe3</literal></expr>, <expr><literal type="number">0x3ac372e6</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// bcrypt IV: "OrpheanBeholderScryDoubt". The C implementation calls</comment>
	<comment type="line">// this "ciphertext", but it is really plaintext or an IV. We keep</comment>
	<comment type="line">// the name to make code comparison easier.</comment>
	<decl_stmt><decl><specifier>static</specifier> <specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name><name>bf_crypt_ciphertext</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x4f727068</literal></expr>, <expr><literal type="number">0x65616e42</literal></expr>, <expr><literal type="number">0x65686f6c</literal></expr>,
		<expr><literal type="number">0x64657253</literal></expr>, <expr><literal type="number">0x63727944</literal></expr>, <expr><literal type="number">0x6f756274</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// Table for Base64 encoding</comment>
	<decl_stmt><decl><specifier>static</specifier> <specifier>private</specifier> <type><specifier>final</specifier> <name>char</name></type> <name><name>base64_code</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'J'</literal></expr>,
		<expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>,
		<expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'h'</literal></expr>,
		<expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'j'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>,
		<expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>,
		<expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// Table for Base64 decoding</comment>
	<decl_stmt><decl><specifier>static</specifier> <specifier>private</specifier> <type><specifier>final</specifier> <name>byte</name></type> <name><name>index_64</name><index>[]</index></name> <init>= <expr><block>{
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>,
		<expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
		<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>,
		<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>,
		<expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>,
		<expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>,
		<expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// Expanded Blowfish key</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name><name>P</name><index>[]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name><name>S</name><index>[]</index></name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Encode a byte array using bcrypt's slightly-modified base64
	 * encoding scheme. Note that this is *not* compatible with
	 * the standard MIME-base64 encoding.
	 *
	 * @param d	the byte array to encode
	 * @param len	the number of bytes to encode
	 * @return	base64-encoded string
	 * @exception IllegalArgumentException if the length is invalid
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encode_base64</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>d</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
		<throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>rs</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <name><name>d</name><operator>.</operator><name>length</name></name></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Invalid len"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

		<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><operator>(</operator><name>c1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>|=</operator> <operator>(</operator><name>c2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>|=</operator> <operator>(</operator><name>c2</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<return>return <expr><call><name><name>rs</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Look up the 3 bits base64-encoded by the specified character,
	 * range-checking againt conversion table
	 * @param x	the base64-encoded value
	 * @return	the decoded value of x
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>byte</name></type> <name>char64</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>x</name> <argument_list type="generic">&lt; <argument><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name>x</name></argument> &gt;</argument_list></name> <name><name>index_64</name><operator>.</operator><name>length</name></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
		<return>return <expr><name><name>index_64</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>]</index></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Decode a string encoded using bcrypt's base64 scheme to a
	 * byte array. Note that this is *not* compatible with
	 * the standard MIME-base64 encoding.
	 * @param s	the string to decode
	 * @param maxolen	the maximum number of bytes to decode
	 * @return	an array containing the decoded bytes
	 * @throws IllegalArgumentException if maxolen is invalid
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode_base64</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxolen</name></decl></parameter>)</parameter_list>
		<throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>rs</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slen</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>ret</name><index>[]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>maxolen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Invalid maxolen"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

		<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>slen</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>olen</name> <operator>&lt;</operator> <name>maxolen</name></expr>)</condition> <block>{
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>c1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>c2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>o</name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>|=</operator> <operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><operator>++</operator><name>olen</name> <operator>&gt;=</operator> <name>maxolen</name> <operator>||</operator> <name>off</name> <operator>&gt;=</operator> <name>slen</name></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>c3</name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>c3</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>o</name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>|=</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0x3c</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><operator>++</operator><name>olen</name> <operator>&gt;=</operator> <name>maxolen</name> <operator>||</operator> <name>off</name> <operator>&gt;=</operator> <name>slen</name></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>c4</name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>|=</operator> <name>c4</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>olen</name></expr>;</expr_stmt>
		}</block></while>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>olen</name></expr>]</index></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name>olen</name></expr>;</condition> <incr><expr><name>off</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>ret</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><call><name><name>rs</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<return>return <expr><name>ret</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Blowfish encipher a single 64-bit block encoded as
	 * two 32-bit halves
	 * @param lr	an array containing the two 32-bit half blocks
	 * @param off	the position in the array of the blocks
	 */</comment>
	<function><specifier>private</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>encipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>lr</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>lr</name><index>[<expr><name>off</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name><name>lr</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>l</name> <operator>^=</operator> <name><name>P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>BLOWFISH_NUM_ROUNDS</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition><incr/>)</control> <block>{
			<comment type="line">// Feistel substitution on left word</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>S</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>S</name><index>[<expr><literal type="number">0x100</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>^=</operator> <name><name>S</name><index>[<expr><literal type="number">0x200</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>S</name><index>[<expr><literal type="number">0x300</literal> <operator>|</operator> <operator>(</operator><name>l</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>n</name> <operator>^</operator> <name><name>P</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<comment type="line">// Feistel substitution on right word</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>S</name><index>[<expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>S</name><index>[<expr><literal type="number">0x100</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>^=</operator> <name><name>S</name><index>[<expr><literal type="number">0x200</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>S</name><index>[<expr><literal type="number">0x300</literal> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>n</name> <operator>^</operator> <name><name>P</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>lr</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>^</operator> <name><name>P</name><index>[<expr><name>BLOWFISH_NUM_ROUNDS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lr</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Cycically extract a word of key material
	 * @param data	the string to extract the data from
	 * @param offp	a "pointer" (as a one-entry array) to the
	 * current offset into data
	 * @return	the next word of material from data
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>streamtoword</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>offp</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name><name>offp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>(</operator><name>word</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>off</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>data</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name><name>offp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
		<return>return <expr><name>word</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Initialise the Blowfish key schedule
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>init_key</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>P</name> <operator>=</operator> <operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><call><name><name>P_orig</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>S</name> <operator>=</operator> <operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><call><name><name>S_orig</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Key the Blowfish cipher
	 * @param key	an array containing the key
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>key</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>key</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>koffp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>lr</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>plen</name> <init>= <expr><name><name>P</name><operator>.</operator><name>length</name></name></expr></init></decl>, <decl><type ref="prev"/><name>slen</name> <init>= <expr><name><name>S</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>plen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>koffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>plen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>lr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>lr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Perform the "enhanced key schedule" step described by
	 * Provos and Mazieres in "A Future-Adaptable Password Scheme"
	 * http://www.openbsd.org/papers/bcrypt-paper.ps
	 * @param data	salt information
	 * @param key	password information
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>ekskey</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name><name>key</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>koffp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>doffp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>lr</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>plen</name> <init>= <expr><name><name>P</name><operator>.</operator><name>length</name></name></expr></init></decl>, <decl><type ref="prev"/><name>slen</name> <init>= <expr><name><name>S</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>plen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>koffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>plen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>doffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>doffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>lr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>doffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>doffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>lr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Perform the central password hashing step in the
	 * bcrypt scheme
	 * @param password	the password to hash
	 * @param salt	the binary salt to hash with the password
	 * @param log_rounds	the binary logarithm of the number
	 * of rounds of hashing to apply
	 * @param cdata         the plaintext to encrypt
	 * @return	an array containing the binary hashed password
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>crypt_raw</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>password</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name><name>salt</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_rounds</name></decl></parameter>,
	    <parameter><decl><type><name>int</name></type> <name><name>cdata</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><name><name>cdata</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>ret</name><index>[]</index></name></decl>;</decl_stmt>

		<if>if <condition>(<expr><name><name>log_rounds</name> <argument_list type="generic">&lt; <argument><literal type="number">4</literal> <operator>||</operator> <name>log_rounds</name></argument> &gt;</argument_list></name> <literal type="number">30</literal></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Bad number of rounds"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
		<expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log_rounds</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>salt</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>BCRYPT_SALT_LEN</name></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Bad salt length"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

		<expr_stmt><expr><call><name>init_key</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ekskey</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>rounds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>key</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>key</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>clen</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		}</block></for>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>clen</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>clen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>cdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>cdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>cdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name><name>cdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<return>return <expr><name>ret</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Hash a password using the OpenBSD bcrypt scheme
	 * @param password	the password to hash
	 * @param salt	the salt to hash with (perhaps generated
	 * using BCrypt.gensalt)
	 * @return	the hashed password
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>hashpw</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>salt</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>BCrypt</name></type> <name>B</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>real_salt</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>passwordb</name><index>[]</index></name></decl>, <decl><type ref="prev"/><name><name>saltb</name><index>[]</index></name></decl>, <decl><type ref="prev"/><name><name>hashed</name><index>[]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>minor</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>rs</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'$'</literal> <operator>||</operator> <call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'2'</literal></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Invalid salt version"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
		<if>if <condition>(<expr><call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then>
		<else>else <block>{
			<expr_stmt><expr><name>minor</name> <operator>=</operator> <call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>minor</name> <operator>!=</operator> <literal type="char">'a'</literal> <operator>||</operator> <call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><then>
				<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Invalid salt revision"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
			<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		}</block></else></if>

		<comment type="line">// Extract number of rounds</comment>
		<if>if <condition>(<expr><call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="char">'$'</literal></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Missing salt rounds"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
		<expr_stmt><expr><name>rounds</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>salt</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>real_salt</name> <operator>=</operator> <call><name><name>salt</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>passwordb</name> <operator>=</operator> <operator>(</operator><name>password</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>minor</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr> ?</condition><then> <expr><literal type="string">"\000"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>uee</name></decl></parameter>)</parameter_list> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"UTF-8 is not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></catch></try>

		<expr_stmt><expr><name>saltb</name> <operator>=</operator> <call><name>decode_base64</name><argument_list>(<argument><expr><name>real_salt</name></expr></argument>, <argument><expr><name>BCRYPT_SALT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>new</operator> <call><name>BCrypt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashed</name> <operator>=</operator> <call><name><name>B</name><operator>.</operator><name>crypt_raw</name></name><argument_list>(<argument><expr><name>passwordb</name></expr></argument>, <argument><expr><name>saltb</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>,
		    <argument><expr><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><call><name><name>bf_crypt_ciphertext</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>minor</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>rounds</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>rounds</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
			    <argument><expr><literal type="string">"rounds exceeds maximum (30)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>encode_base64</name><argument_list>(<argument><expr><name>saltb</name></expr></argument>, <argument><expr><name><name>saltb</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>encode_base64</name><argument_list>(<argument><expr><name>hashed</name></expr></argument>,
		    <argument><expr><name><name>bf_crypt_ciphertext</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name><name>rs</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Generate a salt for use with the BCrypt.hashpw() method
	 * @param log_rounds	the log2 of the number of rounds of
	 * hashing to apply - the work factor therefore increases as
	 * 2**log_rounds.
	 * @param random		an instance of SecureRandom to use
	 * @return	an encoded salt value
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>gensalt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>log_rounds</name></decl></parameter>, <parameter><decl><type><name>SecureRandom</name></type> <name>random</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>rs</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>rnd</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>BCRYPT_SALT_LEN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$2a$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>log_rounds</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>log_rounds</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
			    <argument><expr><literal type="string">"log_rounds exceeds maximum (30)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>log_rounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>encode_base64</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><name><name>rnd</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name><name>rs</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Generate a salt for use with the BCrypt.hashpw() method
	 * @param log_rounds	the log2 of the number of rounds of
	 * hashing to apply - the work factor therefore increases as
	 * 2**log_rounds.
	 * @return	an encoded salt value
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>gensalt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>log_rounds</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>gensalt</name><argument_list>(<argument><expr><name>log_rounds</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Generate a salt for use with the BCrypt.hashpw() method,
	 * selecting a reasonable default for the number of hashing
	 * rounds to apply
	 * @return	an encoded salt value
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>gensalt</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>gensalt</name><argument_list>(<argument><expr><name>GENSALT_DEFAULT_LOG2_ROUNDS</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Check that a plaintext password matches a previously hashed
	 * one
	 * @param plaintext	the plaintext password to verify
	 * @param hashed	the previously-hashed password
	 * @return	true if the passwords match, false otherwise
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkpw</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>plaintext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>hashed</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>byte</name></type> <name><name>hashed_bytes</name><index>[]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>try_bytes</name><index>[]</index></name></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>try_pw</name> <init>= <expr><call><name>hashpw</name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>, <argument><expr><name>hashed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>hashed_bytes</name> <operator>=</operator> <call><name><name>hashed</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>try_bytes</name> <operator>=</operator> <call><name><name>try_pw</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>uee</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></catch></try>
		<if>if <condition>(<expr><name><name>hashed_bytes</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name><name>try_bytes</name><operator>.</operator><name>length</name></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>byte</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>try_bytes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>|=</operator> <name><name>hashed_bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>try_bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\MyViewController.java" hash="a66b37437dae084bbe61f6a63e5c092557bbfcbd"><package>package <name>application</name>;</package>




<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ResourceBundle</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>glass</name><operator>.</operator><name>ui</name><operator>.</operator><name>Accessible</name><operator>.</operator><name>EventHandler</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>glass</name><operator>.</operator><name>ui</name><operator>.</operator><name>MenuBar</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>application</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>value</name><operator>.</operator><name>ChangeListener</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>value</name><operator>.</operator><name>ObservableValue</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>Initializable</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>RadioButton</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableView</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextArea</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Toggle</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>ToggleGroup</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name><operator>.</operator><name>AlertType</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>layout</name><operator>.</operator><name>AnchorPane</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>layout</name><operator>.</operator><name>Pane</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>text</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>application</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>MyViewController</name> <super><implements>implements <name>Initializable</name></implements></super> <block>{

	<decl_stmt><decl><type><name>Book</name></type> <name>book</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AdvancedSearchController</name></type> <name>advsearch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>searchResultText</name></decl>;</decl_stmt>	
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>textSearch</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>searchCategory</name> <init>= <expr><literal type="string">"title"</literal></expr></init></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTextSearch</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>textSearch</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTextSearch</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>textSearch</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>MyViewController</name><operator>.</operator><name>textSearch</name></name> <operator>=</operator> <name>textSearch</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier>  <type><name>String</name></type> <name>getSearchCategory</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>searchCategory</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier>  <type><name>void</name></type> <name>setSearchCategory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>searchCategory</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>MyViewController</name><operator>.</operator><name>searchCategory</name></name> <operator>=</operator> <name>searchCategory</name></expr>;</expr_stmt>
	}</block></function>

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>ToggleGroup</name></type> <name>RadioOption</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>RadioButton</name></type> <name>RadioAuthor</name></decl>, <decl><type ref="prev"/><name>RadioTitle</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>Button</name></type> <name>Toplist</name></decl>, <decl><type ref="prev"/><name>AdvSearch</name></decl>, <decl><type ref="prev"/><name>CheckOut</name></decl>, <decl><type ref="prev"/><name>SearchButton</name></decl>, <decl><type ref="prev"/><name>MyBooks</name></decl>, <decl><type ref="prev"/><name>GoToAdminLogin</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>AnchorPane</name></type> <name>rootView</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>MenuItem</name></type> <name>exit</name></decl>, <decl><type ref="prev"/><name>EnterAdminLogin</name></decl>, <decl><type ref="prev"/><name>about</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <type><name>TextField</name></type> <name>Search</name></decl>;</decl_stmt>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>Search</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>advsearch</name><operator>.</operator><name>setTextSearch</name></name><argument_list>(<argument><expr><call><name><name>Search</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	}</block></function>

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>ToggleGroup</name></type> <name>radioOption</name></decl>;</decl_stmt>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoToAdminLogin</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<comment type="line">//library.closeConn();</comment>
		<decl_stmt><decl><type><name>Parent</name></type> <name>Admin_Login_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Login.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>Admin_Login_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>Admin_Login_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>Admin_Login_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><annotation>@<name>FXML</name></annotation> 
	<specifier>public</specifier> <type><name>void</name></type> <name>onEnter</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>ae</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>SearchButton</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>



	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>SearchButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SQLException</name></expr></argument></throws><block>{
		<comment type="line">//library.closeConn();</comment>
		<expr_stmt><expr><call><name>setTextSearch</name><argument_list>(<argument><expr><call><name><name>Search</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if<condition>(<expr><call><name><name>RadioTitle</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setSearchCategory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>

		<elseif>else <if>if<condition>(<expr><call><name><name>RadioAuthor</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

			<expr_stmt><expr><call><name>setSearchCategory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></then></if></elseif></if>

		<decl_stmt><decl><type><name>FXMLLoader</name></type> <name>loader</name> <init>= <expr><operator>new</operator> <call><name>FXMLLoader</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"AdvancedSearch.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Parent</name></type> <name>root</name> <init>= <expr><operator>(</operator><name>Parent</name><operator>)</operator> <call><name><name>loader</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Stage</name></type> <name>stage</name> <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>




	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>exitProgram</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Platform</name><operator>.</operator><name>exit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>aboutMenuButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Alert</name></type> <name>addBook</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Library System"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"Made by :Tim Eklund &amp; Marcus Danielsson"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"SQLite | Java | JavaFX | jBCrypt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>




	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>AdvSearch</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<if>if<condition>(<expr><call><name><name>RadioTitle</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setSearchCategory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><call><name><name>RadioAuthor</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setSearchCategory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<decl_stmt><decl><type><name>FXMLLoader</name></type> <name>loader</name> <init>= <expr><operator>new</operator> <call><name>FXMLLoader</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"AdvancedSearch.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Parent</name></type> <name>root</name> <init>= <expr><operator>(</operator><name>Parent</name><operator>)</operator> <call><name><name>loader</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Stage</name></type> <name>stage</name> <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>




	<function><specifier>public</specifier> <type><name>void</name></type> <name>RadioButtons</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>ToggleGroup</name></type> <name>toggleGroup</name> <init>= <expr><operator>new</operator> <call><name>ToggleGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>RadioAuthor</name><operator>.</operator><name>setToggleGroup</name></name><argument_list>(<argument><expr><name>toggleGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>RadioTitle</name><operator>.</operator><name>setToggleGroup</name></name><argument_list>(<argument><expr><name>toggleGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>



	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>EnterMyBorrowedBooks</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>My_Books_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"MyBooks.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>My_Books_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>My_Books_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>My_Books_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoToToplist</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>Toplist_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Toplist.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>Toplist_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>Toplist_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>Toplist_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoToCheckOut</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>  <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>CheckOut_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"CheckOut.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>CheckOut_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>CheckOut_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>CheckOut_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>



	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>EnterAdminLogin</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>GoToAdminLogin</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>ResourceBundle</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{

	}</block></function>
	

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\MyBooksController.java" hash="f629e6128a529af46592b0672adeb93336ed5450"><package>package <name>application</name>;</package>

<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>Initializable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ResourceBundle</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>application</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>value</name><operator>.</operator><name>ChangeListener</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>value</name><operator>.</operator><name>ObservableValue</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>FXCollections</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>ButtonType</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>ChoiceDialog</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableColumn</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableView</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name><operator>.</operator><name>AlertType</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>cell</name><operator>.</operator><name>PropertyValueFactory</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>text</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>

<class><specifier>public</specifier> class <name>MyBooksController</name> <super><implements>implements <name>Initializable</name></implements></super> <block>{
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>MenuItem</name></type> <name>exit</name></decl>, <decl><type ref="prev"/><name>about</name></decl>;</decl_stmt>

	<comment type="line">// Event Listener on MenuItem[#exit].onAction</comment>
	
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>Button</name></type> <name>AdvSearch</name></decl>, <decl><type ref="prev"/><name>Toplist</name></decl>, <decl><type ref="prev"/><name>CheckOut</name></decl>, <decl><type ref="prev"/><name>GoBack</name></decl>, <decl><type ref="prev"/><name>MyBooks</name></decl>, <decl><type ref="prev"/><name>enterCardIDButton</name></decl>, <decl><type ref="prev"/><name>returnBookButton</name></decl>;</decl_stmt>

	<decl_stmt><decl><annotation>@<name>FXML</name></annotation>
	<specifier>private</specifier> <type><name>TextField</name></type> <name>nameInfo</name></decl>, <decl><type ref="prev"/><name>IDScan</name></decl>;</decl_stmt>


	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableView</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>borrowedTitleCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>borrowedDateCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>borrowedReturnCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>borrowedDaysCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name><name>TableColumn</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>borrowedBookIDCol</name></decl>;</decl_stmt>


	<decl_stmt><decl><type><name>int</name></type> <name>IDScanNumber</name></decl>;</decl_stmt>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>returnBookButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument>, <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Book</name></type> <name>aBook</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>cardID</name> <init>=<expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>IDScan</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>returnRating</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>aBook</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name>Alert</name></type> <name>remove</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>CONFIRMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>remove</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Return book"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>remove</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"Would you want to rate this title?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>remove</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"title: "</literal> <operator>+</operator> <name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ButtonType</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>remove</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ButtonType</name><operator>.</operator><name>OK</name></name></expr>)</condition><then><block>{

				<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>choices</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>choices</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>choices</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>choices</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>choices</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>choices</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name><name>ChoiceDialog</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>ChoiceDialog</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>choices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"Set your rating"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"Rate between 1-5:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>optionResult</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name><name>optionResult</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>int</name></type> <name>test</name> <init>= <expr><operator>(</operator><call><name><name>optionResult</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt> 
					<expr_stmt><expr><name>returnRating</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>test</name><operator>)</operator></expr>;</expr_stmt>

					<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>returnBook</name></name><argument_list>(<argument><expr><name>cardID</name></expr></argument>, <argument><expr><call><name><name>aBook</name><operator>.</operator><name>getBook_ID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>returnRating</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>enterCardIDButton</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else>else <block>{
					<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>returnBook</name></name><argument_list>(<argument><expr><name>cardID</name></expr></argument>, <argument><expr><call><name><name>aBook</name><operator>.</operator><name>getBook_ID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
				}</block></else></if>

			}</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ButtonType</name><operator>.</operator><name>CANCEL</name></name><operator>)</operator></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>returnBook</name></name><argument_list>(<argument><expr><name>cardID</name></expr></argument>, <argument><expr><call><name><name>aBook</name><operator>.</operator><name>getBook_ID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>enterCardIDButton</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
		}</block></try>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>enterCardIDButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>IDScanString</name><init>= <expr><call><name><name>IDScan</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>IDScanNumber</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>IDScanString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name>getBorrowedBook</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try<init>(<decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name>Customer</name></type> <name>current</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getCustomer</name></name><argument_list>(<argument><expr><name>IDScanNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>nameInfo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></try>


	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoBack</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type>  <name>My_View_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"MyView.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>My_View_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>My_View_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>My_View_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>AdvSearch</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>Advanced_Search_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"AdvancedSearch.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>Advanced_Search_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>Advanced_Search_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>Advanced_Search_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>EnterMyBorrowedBooks</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>My_Books_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"MyBooks.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>My_Books_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>My_Books_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>My_Books_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoToToplist</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>Toplist_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Toplist.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>Toplist_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>Toplist_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>Toplist_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>GoToCheckOut</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>  <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Parent</name></type> <name>CheckOut_parent</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"CheckOut.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Scene</name></type> <name>CheckOut_scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>CheckOut_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Stage</name></type> <name>app_stage</name>  <init>= <expr><call>(<name>Stage</name>) <argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScene</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>CheckOut_scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>app_stage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>ResourceBundle</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{

		<comment type="line">//set up the columns in the table</comment>
		<expr_stmt><expr><call><name><name>borrowedTitleCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>borrowedDateCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"borrowedDate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>borrowedReturnCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"returnDate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>borrowedDaysCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"days"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>borrowedBookIDCol</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PropertyValueFactory</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"book_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">//Make textfield IDScan integer only</comment>
		<expr_stmt><expr><call><name><name>IDScan</name><operator>.</operator><name>textProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ChangeListener</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
		    <function><annotation>@<name>Override</name></annotation>
		    <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>(<parameter><decl><type><name><name>ObservableValue</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>String</name></extends></argument>&gt;</argument_list></name></type> <name>observable</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>oldValue</name></decl></parameter>, 
		        <parameter><decl><type><name>String</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{
		        <if>if <condition>(<expr><operator>!</operator><call><name><name>newValue</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"\\d*"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		            <expr_stmt><expr><call><name><name>IDScan</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^\\d]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
	            <if>if <condition>(<expr><call><name><name>IDScan</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><then> <block>{
	                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>IDScan</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	                <expr_stmt><expr><call><name><name>IDScan</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></then></if>
		    }</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>getBorrowedBook</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{
		<decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>book</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<try>try<init>(<decl><type><name>Database</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
			<decl_stmt><decl><type><name><name>BorrowedBook</name> <index>[]</index></name></type> <name>searchArray</name><init>=<expr><call><name><name>data</name><operator>.</operator><name>getBorrowedBooks</name></name><argument_list>(<argument><expr><name>IDScanNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>searchArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>searchArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></try>
		<return>return <expr><name>book</name></expr>;</return> 
	}</block></function>
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>exitProgram</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Platform</name><operator>.</operator><name>exit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	
	<function><annotation>@<name>FXML</name></annotation>
	<type><name>void</name></type> <name>aboutMenuButton</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Alert</name></type> <name>addBook</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Library System"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="string">"Made by :Tim Eklund &amp; Marcus Danielsson"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><literal type="string">"SQLite | Java | JavaFX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addBook</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\customerTooltipTableRow.java" hash="ebf7789a02c06151b070a889a5b1ea8ed6413ebd"><package>package <name>application</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>animation</name><operator>.</operator><name>KeyFrame</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>animation</name><operator>.</operator><name>Timeline</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableRow</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Tooltip</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>util</name><operator>.</operator><name>Duration</name></name>;</import>

<class><specifier>public</specifier> class <name><name>customerTooltipTableRow</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>TableRow</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toolTipStringFunction</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>customerTooltipTableRow</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toolTipStringFunction</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>toolTipStringFunction</name></name> <operator>=</operator> <name>toolTipStringFunction</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>updateItem</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>empty</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>updateItem</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>item</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setTooltip</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>Tooltip</name></type> <name>tooltip</name> <init>= <expr><operator>new</operator> <call><name>Tooltip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>tooltip</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><literal type="string">"-fx-font-size: 15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>tooltip</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>toolTipStringFunction</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>hackTooltipStartTiming</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setTooltip</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>hackTooltipStartTiming</name><parameter_list>(<parameter><decl><type><name>Tooltip</name></type> <name>tooltip</name></decl></parameter>)</parameter_list> <block>{
	    <try>try <block>{
	        <decl_stmt><decl><type><name>Field</name></type> <name>fieldBehavior</name> <init>= <expr><call><name><name>tooltip</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaredField</name><argument_list>(<argument><expr><literal type="string">"BEHAVIOR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        <expr_stmt><expr><call><name><name>fieldBehavior</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <decl_stmt><decl><type><name>Object</name></type> <name>objBehavior</name> <init>= <expr><call><name><name>fieldBehavior</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	        <decl_stmt><decl><type><name>Field</name></type> <name>fieldTimer</name> <init>= <expr><call><name><name>objBehavior</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaredField</name><argument_list>(<argument><expr><literal type="string">"activationTimer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        <expr_stmt><expr><call><name><name>fieldTimer</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <decl_stmt><decl><type><name>Timeline</name></type> <name>objTimer</name> <init>= <expr><operator>(</operator><name>Timeline</name><operator>)</operator> <call><name><name>fieldTimer</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>objBehavior</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	        <expr_stmt><expr><call><name><name>objTimer</name><operator>.</operator><name>getKeyFrames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name><name>objTimer</name><operator>.</operator><name>getKeyFrames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>KeyFrame</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Duration</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
	        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></catch></try>
	}</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\TooltipTableRow.java" hash="9b1d7d71214bc34e9f4556a68e47610a21725e74"><package>package <name>application</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>

<import>import <name><name>javafx</name><operator>.</operator><name>animation</name><operator>.</operator><name>KeyFrame</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>animation</name><operator>.</operator><name>Timeline</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TableRow</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Tooltip</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>image</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>image</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>util</name><operator>.</operator><name>Duration</name></name>;</import>

<class><specifier>public</specifier> class <name><name>TooltipTableRow</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>TableRow</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>missingCover</name> <init>= <expr><literal type="string">"http://www.jameshmayfield.com/wp-content/uploads/2015/03/defbookcover-min.jpg"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toolTipStringFunction</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>TooltipTableRow</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toolTipStringFunction</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>toolTipStringFunction</name></name> <operator>=</operator> <name>toolTipStringFunction</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>updateItem</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>empty</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>updateItem</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>item</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>setTooltip</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>Tooltip</name></type> <name>tooltip</name> <init>= <expr><operator>new</operator> <call><name>Tooltip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><call><name><name>toolTipStringFunction</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><operator>new</operator> <call><name>Image</name><argument_list>(<argument><expr><call><name><name>toolTipStringFunction</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>tooltip</name><operator>.</operator><name>setGraphic</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImageView</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><operator>new</operator> <call><name>Image</name><argument_list>(<argument><expr><name>missingCover</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>tooltip</name><operator>.</operator><name>setGraphic</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImageView</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name>hackTooltipStartTiming</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setTooltip</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>hackTooltipStartTiming</name><parameter_list>(<parameter><decl><type><name>Tooltip</name></type> <name>tooltip</name></decl></parameter>)</parameter_list> <block>{
	    <try>try <block>{
	        <decl_stmt><decl><type><name>Field</name></type> <name>fieldBehavior</name> <init>= <expr><call><name><name>tooltip</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaredField</name><argument_list>(<argument><expr><literal type="string">"BEHAVIOR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        <expr_stmt><expr><call><name><name>fieldBehavior</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <decl_stmt><decl><type><name>Object</name></type> <name>objBehavior</name> <init>= <expr><call><name><name>fieldBehavior</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	        <decl_stmt><decl><type><name>Field</name></type> <name>fieldTimer</name> <init>= <expr><call><name><name>objBehavior</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaredField</name><argument_list>(<argument><expr><literal type="string">"activationTimer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        <expr_stmt><expr><call><name><name>fieldTimer</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <decl_stmt><decl><type><name>Timeline</name></type> <name>objTimer</name> <init>= <expr><operator>(</operator><name>Timeline</name><operator>)</operator> <call><name><name>fieldTimer</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>objBehavior</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	        <expr_stmt><expr><call><name><name>objTimer</name><operator>.</operator><name>getKeyFrames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name><name>objTimer</name><operator>.</operator><name>getKeyFrames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>KeyFrame</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Duration</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
	        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></catch></try>
	}</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\staticData.java" hash="22e2a055d7857a7a10abf033071b3a4f658c5b5d"><package>package <name>application</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<class><specifier>public</specifier> class <name>staticData</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>checkoutList</name></decl>;</decl_stmt> 
	
	
	<constructor><specifier>public</specifier> <name>staticData</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>checkoutList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>addToCheckoutList</name><parameter_list>(<parameter><decl><type><name>Book</name></type> <name>addition</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>checkoutList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>getCheckoutList</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>checkoutList</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>clearCheckoutList</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>checkoutList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>checkoutContains</name><parameter_list>(<parameter><decl><type><name>Book</name></type> <name>comparison</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>checkoutList</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>comparison</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getCheckoutSize</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>checkoutList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>removeFromCheckout</name><parameter_list>(<parameter><decl><type><name>Book</name></type> <name>removal</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>checkoutList</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>removal</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>removeFromCheckout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <block>{
		
		<return>return <expr><call><name><name>checkoutList</name><operator>.</operator><name>removeIf</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>book</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>book</name><operator>.</operator><name>getBook_ID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>book_id</name></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\src\application\Database.java" hash="fdc50b70abb8303af2507a79b0a6d6126522cd60"><package>package <name>application</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DatabaseMetaData</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DriverManager</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Statement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JOptionPane</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>mindrot</name><operator>.</operator><name>jbcrypt</name><operator>.</operator><name>BCrypt</name></name>;</import>

<class><specifier>public</specifier> class <name>Database</name> <super><implements>implements <name>AutoCloseable</name></implements></super> <block>{
	<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>checkoutList</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Book</name><index>[]</index></name></type> <name>top10Array</name> <init>= <expr><operator>new</operator> <name><name>Book</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>dbUrl</name> <init>= <expr><literal type="string">"jdbc:sqlite:./sqlite/db/library.db"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>EOL</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>lineSeparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>static</specifier> <type><name>Connection</name></type> <name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Statement</name></type> <name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>UNIXMONTH</name> <init>= <expr><literal type="number">2592000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>UNIXWEEK</name> <init>= <expr><literal type="number">604800</literal></expr></init></decl>;</decl_stmt>
	<constructor><specifier>public</specifier> <name>Database</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{ 
		<expr_stmt><expr><call><name>createLibraryDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>checkoutList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//setRecursiveTriggersTrue();</comment>
		<comment type="line">//top10Array = createTop10();</comment>
		<comment type="block">/*createAdmin("tiEkl", "hejhej123");
		createAdmin("maDan", "password");
		createAdmin("saBol", "1ab2c3");
		System.out.println("Admins created");*/</comment>
	}</block></constructor>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setRecursiveTriggersTrue</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"PRAGMA recursive_triggers = true;"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedExecute</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createTables</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>createBooksTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createBorrowedBooksTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createCustomerTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createHistoryTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createAdminTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createDebtTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createAdmin</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>username</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"INSERT INTO admin (username, password) VALUES(?,?)"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>encryptedPassword</name> <init>= <expr><call><name><name>BCrypt</name><operator>.</operator><name>hashpw</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><call><name><name>BCrypt</name><operator>.</operator><name>gensalt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>encryptedPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createLibraryDatabase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"./sqlite/db"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// attempt to create the directory here</comment>
		<decl_stmt><decl><type><name>boolean</name></type> <name>successful</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>successful</name></expr>)</condition><then>
		<block>{
			<comment type="line">// creating the directory succeeded</comment>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"directory was created successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<comment type="line">// creating the directory failed</comment>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"failed trying to create the directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name><name>DriverManager</name><operator>.</operator><name>getConnection</name></name><argument_list>(<argument><expr><name>dbUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"A new database has been created."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createBooksTable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"CREATE TABLE IF NOT EXISTS books ("</literal> <operator>+</operator>
				<literal type="string">"book_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "</literal><operator>+</operator>
				<literal type="string">"title TEXT NOT NULL,  "</literal> <operator>+</operator>
				<literal type="string">"author TEXT NOT NULL,  "</literal> <operator>+</operator>
				<literal type="string">"genre TEXT NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"shelf INTEGER NOT NULL, "</literal><operator>+</operator>
				<literal type="string">"publisher TEXT NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"quantity INTEGER NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"pages INTEGER NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"isbn TEXT NOT NULL"</literal> <operator>+</operator>
				<literal type="string">"cover_url TEXT DEFAULT NULL"</literal> <operator>+</operator>
				<literal type="string">");"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedExecute</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createBorrowedBooksTable</name><parameter_list>()</parameter_list><throws>throws <argument><expr><name>SQLException</name></expr></argument></throws>  <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"CREATE TABLE IF NOT EXISTS borrowed_books ("</literal> <operator>+</operator>
				<literal type="string">"id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"card_id INTEGER NOT NULL, "</literal><operator>+</operator>
				<literal type="string">"book_id INTEGER NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"borrowed_epoch INTEGER(8) NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"return_epoch INTEGER(8) NOT NULL "</literal> <operator>+</operator>
				<literal type="string">");"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedExecute</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createCustomerTable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws>  <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"CREATE TABLE IF NOT EXISTS customer ("</literal> <operator>+</operator>
				<literal type="string">"card_id INTEGER PRIMARY KEY NOT NULL,"</literal><operator>+</operator>
				<literal type="string">"name TEXT NOT NULL,  "</literal> <operator>+</operator>
				<literal type="string">"city TEXT NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"street TEXT NOT NULL,"</literal> <operator>+</operator>
				<literal type="string">"phone_nr TEXT NOT NULL"</literal> <operator>+</operator>
				<literal type="string">");"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedExecute</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createHistoryTable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws>  <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"CREATE TABLE IF NOT EXISTS history ("</literal> <operator>+</operator>
				<literal type="string">"id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"card_id INTEGER NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"book_id INTEGER NOT NULL,  "</literal> <operator>+</operator>
				<literal type="string">"returned_on_time TEXT NOT NULL,  "</literal> <operator>+</operator>
				<literal type="string">"rating REAL, "</literal> <operator>+</operator>
				<literal type="string">" UNIQUE (card_id, book_id) ON CONFLICT REPLACE"</literal> <operator>+</operator>
				<literal type="string">");"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedExecute</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createDebtTable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws>  <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"CREATE TABLE IF NOT EXISTS customer_debt ("</literal> <operator>+</operator>
				<literal type="string">"card_id INTEGER PRIMARY KEY NOT NULL, "</literal><operator>+</operator>
				<literal type="string">"accumulated_fees INTEGER DEFAULT 0,  "</literal> <operator>+</operator>
				<literal type="string">"paid INTEGER DEFAULT 0"</literal> <operator>+</operator>
				<literal type="string">");"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedExecute</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createAdminTable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"CREATE TABLE IF NOT EXISTS admin ("</literal> <operator>+</operator>
				<literal type="string">"id INTEGER PRIMARY KEY AUTOINCREMENT,"</literal> <operator>+</operator>
				<literal type="string">"username TEXT UNIQUE NOT NULL,"</literal> <operator>+</operator>
				<literal type="string">"password TEXT NOT NULL);"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedExecute</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>addBook</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>isbn</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shelf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quantity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pages</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws>  <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"INSERT INTO books "</literal> <operator>+</operator>
				<literal type="string">"(title, author, genre, shelf, publisher, quantity, pages, isbn) "</literal> <operator>+</operator> <name>EOL</name> <operator>+</operator>
				<literal type="string">"VALUES "</literal> <operator>+</operator>
				<literal type="string">"(?,?,?,?,?,?,?,?);"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>shelf</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>quantity</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>isbn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>addCustomer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>city</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>street</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>phone_nr</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>card_id</name> <init>= <expr><call><name>genCardID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sqlCustomer</name> <init>= <expr><literal type="string">"INSERT INTO customer "</literal> <operator>+</operator>
				<literal type="string">"(card_id, name, city, street, phone_nr) "</literal> <operator>+</operator>
				<literal type="string">"VALUES "</literal> <operator>+</operator>
				<literal type="string">"(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sqlCustomer</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>city</name></expr></argument>, <argument><expr><name>street</name></expr></argument>, <argument><expr><name>phone_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sqlDebt</name> <init>=<expr><literal type="string">"INSERT INTO customer_debt"</literal> <operator>+</operator>
				<literal type="string">"(card_id) "</literal> <operator>+</operator>
				<literal type="string">"VALUES "</literal> <operator>+</operator>
				<literal type="string">"(?);"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sqlDebt</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>card_id</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeCustomer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"DELETE FROM customer WHERE card_id = ?"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>Customer</name><index>[]</index></name></type> <name>getCustomerList</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM customer INNER JOIN customer_debt USING(card_id)"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>customerSet</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Customer</name><index>[]</index></name></type> <name>customerArray</name> <init>= <expr><call><name>rsToCustomerArrayPlus</name><argument_list>(<argument><expr><name>customerSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>customerArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>Customer</name></type> <name>getCustomer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM customer "</literal> <operator>+</operator>
				<literal type="string">"WHERE card_id = ?"</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
		<decl_stmt><decl><type><name>Customer</name></type> <name>result</name> <init>= <expr><call><name>rsToCustomer</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>	
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>Customer</name><index>[]</index></name></type> <name>rsToCustomerArray</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>customerSet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>&gt;</argument_list></name></type> <name>customerList</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>city</name></decl>, <decl><type ref="prev"/><name>street</name></decl>, <decl><type ref="prev"/><name>phoneNr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>card_id</name></decl>;</decl_stmt>
		<while>while<condition>(<expr><call><name><name>customerSet</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>city</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"city"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>phoneNr</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"phone_nr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>street</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"street"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>card_id</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"card_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Customer</name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name>Customer</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>city</name></expr></argument>, <argument><expr><name>street</name></expr></argument>, <argument><expr><name>phoneNr</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>customerList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		}</block></while>
		<expr_stmt><expr><call><name><name>customerSet</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Customer</name><index>[]</index></name></type> <name>customerArray</name> <init>= <expr><call><name><name>customerList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Customer</name><index>[<expr><call><name><name>customerList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>customerArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>Customer</name><index>[]</index></name></type> <name>rsToCustomerArrayPlus</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>customerSet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>&gt;</argument_list></name></type> <name>customerList</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Customer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>city</name></decl>, <decl><type ref="prev"/><name>street</name></decl>, <decl><type ref="prev"/><name>phoneNr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>card_id</name></decl>, <decl><type ref="prev"/><name>debt</name></decl>, <decl><type ref="prev"/><name>paid</name></decl>, <decl><type ref="prev"/><name>fees</name></decl>;</decl_stmt>
		<while>while<condition>(<expr><call><name><name>customerSet</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>city</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"city"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>phoneNr</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"phone_nr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>street</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"street"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>card_id</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"card_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>paid</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"paid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>fees</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"accumulated_fees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>debt</name> <operator>=</operator> <name>fees</name> <operator>+</operator> <name>paid</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Customer</name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name>Customer</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>city</name></expr></argument>, <argument><expr><name>street</name></expr></argument>, <argument><expr><name>phoneNr</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>, <argument><expr><name>debt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>customerList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		}</block></while>
		<expr_stmt><expr><call><name><name>customerSet</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Customer</name><index>[]</index></name></type> <name>customerArray</name> <init>= <expr><call><name><name>customerList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Customer</name><index>[<expr><call><name><name>customerList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>customerArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>Customer</name></type> <name>rsToCustomer</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>customerSet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>city</name></decl>, <decl><type ref="prev"/><name>street</name></decl>, <decl><type ref="prev"/><name>phoneNr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>card_id</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>city</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"city"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>phoneNr</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"phone_nr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>street</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"street"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>card_id</name> <operator>=</operator> <call><name><name>customerSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"card_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Customer</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>Customer</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>city</name></expr></argument>, <argument><expr><name>street</name></expr></argument>, <argument><expr><name>phoneNr</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>customerSet</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>updateCustomer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>update</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"UPDATE  customer SET "</literal><operator>+</operator><name>category</name><operator>+</operator><literal type="string">" = ? WHERE card_id = ?"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>addBorrowed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nrWeeks</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>long</name></type> <name>unixBorrowed</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>unixReturn</name> <init>= <expr><name>unixBorrowed</name> <operator>+</operator> <operator>(</operator><name>UNIXWEEK</name> <operator>*</operator> <name>nrWeeks</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"INSERT INTO borrowed_books"</literal> <operator>+</operator>
				<literal type="string">"(book_id, card_id, borrowed_epoch, return_epoch)"</literal>  <operator>+</operator>
				<literal type="string">"VALUES "</literal> <operator>+</operator>
				<literal type="string">"(?,?,?,?);"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>, <argument><expr><name>unixBorrowed</name></expr></argument>, <argument><expr><name>unixReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>addBorrowedList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nrWeeks</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>duplicates</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>unixBorrowed</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>unixReturn</name> <init>= <expr><name>unixBorrowed</name> <operator>+</operator> <operator>(</operator><name>UNIXWEEK</name> <operator>*</operator> <name>nrWeeks</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>book_id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>result</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"INSERT INTO borrowed_books"</literal> <operator>+</operator>
				<literal type="string">"(book_id, card_id, borrowed_epoch, return_epoch)"</literal>  <operator>+</operator>
				<literal type="string">"VALUES "</literal><operator>+</operator>
				<literal type="string">"(?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>getCheckoutSize</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>book_id</name> <operator>=</operator> <call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>getCheckoutList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBook_ID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><call><name>checkIfAlreadyBorrowed</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>duplicates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>getCheckoutList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>removeFromCheckout</name></name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><call><name><name>duplicates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="string">"You have already borrowed the following books: "</literal> <operator>+</operator> <name>EOL</name></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>duplicates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>duplicates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>borrowedSuccess</name><argument_list>()</argument_list></call> <operator>+</operator> <name>EOL</name></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>getCheckoutSize</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>book_id</name> <operator>=</operator> <call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>getCheckoutList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBook_ID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>, <argument><expr><name>unixBorrowed</name></expr></argument>, <argument><expr><name>unixReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="string">"You have successfully borrowed the following book(s): "</literal> <operator>+</operator> <name>EOL</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>Book</name></type> <name>borrowed</name> <range>: <expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>getCheckoutList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><name>result</name><operator>+=</operator> <call><name><name>borrowed</name><operator>.</operator><name>borrowedSuccess</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>EOL</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>clearCheckoutList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>genCardID</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT  ABS(RANDOM() % (9999 - 1000) + 1000) AS random_num"</literal> <operator>+</operator>
				<literal type="string">" FROM customer "</literal><operator>+</operator>
				<literal type="string">" WHERE random_num NOT IN (SELECT card_id FROM customer) "</literal> <operator>+</operator>
				<literal type="string">" LIMIT 1"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>randomSet</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>randomNr</name> <init>= <expr><call><name><name>randomSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>randomSet</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>randomNr</name> <operator>&lt;=</operator> <literal type="number">999</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>genCardID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>randomNr</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier>  <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>getCheckoutList</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>checkoutList</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>checkIfAlreadyBorrowed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>BorrowedBook</name><index>[]</index></name></type> <name>borrowedList</name> <init>= <expr><call><name>getBorrowedBooks</name><argument_list>(<argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>borrowedList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

			<if>if<condition>(<expr><name>book_id</name> <operator>==</operator> <name><name>borrowedList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getBook_ID</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
 	<function><specifier>public</specifier> <type><name><name>BorrowedBook</name><index>[]</index></name></type> <name>getBorrowedBooks</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM books INNER JOIN borrowed_books USING(book_id)"</literal>
				<operator>+</operator> <literal type="string">" WHERE card_id = ?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>borrowedSet</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>		
		<decl_stmt><decl><type><name><name>BorrowedBook</name><index>[]</index></name></type> <name>borrowedArray</name> <init>= <expr><call><name>getBorrowedArray</name><argument_list>(<argument><expr><name>borrowedSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>borrowedSet</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>borrowedArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>BorrowedBook</name><index>[]</index></name></type> <name>getBorrowedBooks</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM books INNER JOIN borrowed_books USING(book_id)"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>borrowedSet</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>		
		<decl_stmt><decl><type><name><name>BorrowedBook</name><index>[]</index></name></type> <name>borrowedArray</name> <init>= <expr><call><name>getBorrowedArray</name><argument_list>(<argument><expr><name>borrowedSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>borrowedSet</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>borrowedArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>Book</name></type> <name>searchOneBook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>genre</name></decl>, <decl><type ref="prev"/><name>publisher</name></decl>, <decl><type ref="prev"/><name>coverURL</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>isbn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pages</name></decl>, <decl><type ref="prev"/><name>quantity</name></decl>, <decl><type ref="prev"/><name>shelf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>rating</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM books"</literal>
				<operator>+</operator> <literal type="string">" WHERE book_id = ?"</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>		
		<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>author</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>genre</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>publisher</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>isbn</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"isbn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pages</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//quantity = getNumberAvailable(book_id);</comment>
		<expr_stmt><expr><name>quantity</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"quantity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>shelf</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rating</name> <operator>=</operator> <call><name>getRating</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>coverURL</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"cover_url"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Book</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>Book</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>isbn</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>, <argument><expr><name>quantity</name></expr></argument>, <argument><expr><name>rating</name></expr></argument>, <argument><expr><name>shelf</name></expr></argument>, <argument><expr><name>coverURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>			
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>BorrowedBook</name><index>[]</index></name></type> <name>getDelayedBooksList</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>long</name></type> <name>todayEpoch</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM books INNER JOIN borrowed_books USING(book_id)  WHERE return_epoch &lt; ? ORDER BY card_id asc"</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>ResultSet</name></type> <name>books</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>todayEpoch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>BorrowedBook</name><index>[]</index></name></type> <name>result</name> <init>= <expr><call><name>getBorrowedArray</name><argument_list>(<argument><expr><name>books</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>books</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>verifyLogin</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>username</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM admin WHERE username = ?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>isBeforeFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>hashed</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>BCrypt</name><operator>.</operator><name>checkpw</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>hashed</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			}</block></then></if>	
		}</block></then></if>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>Book</name><index>[]</index></name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>search</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>category</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws>  <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM books "</literal> <operator>+</operator>
				<literal type="string">"WHERE "</literal> <operator>+</operator> <name>category</name> <operator>+</operator> <literal type="string">" LIKE ?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument> ,<argument><expr><literal type="string">"%"</literal><operator>+</operator> <name>search</name><operator>+</operator><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Book</name><index>[]</index></name></type> <name>searchedArray</name> <init>= <expr><call><name>getBookArray</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>searchedArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>Book</name><index>[]</index></name></type> <name>searchAuthorTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM books "</literal> <operator>+</operator>
				<literal type="string">"WHERE title LIKE ? AND author LIKE ?"</literal></expr></init></decl> ;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument> ,<argument><expr><literal type="string">"%"</literal><operator>+</operator> <name>title</name> <operator>+</operator><literal type="string">"%"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <operator>+</operator> <name>author</name> <operator>+</operator> <literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Book</name><index>[]</index></name></type> <name>searchedArray</name> <init>= <expr><call><name>getBookArray</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>searchedArray</name></expr>;</return>

	}</block></function>
	<function><specifier>public</specifier> <type><name><name>Book</name><index>[]</index></name></type> <name>createTop10</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>searchedBooks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM books"</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>author</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>genre</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>publisher</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>pages</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"pages"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>shelf</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	  
			<decl_stmt><decl><type><name>int</name></type> <name>book_id</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"book_id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>isbn</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"isbn"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>quantity</name> <init>= <expr><call><name>getNumberAvailable</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>double</name></type> <name>rating</name> <init>= <expr><call><name>getRating</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>coverURL</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"cover_url"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Book</name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name>Book</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>isbn</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>, <argument><expr><name>quantity</name></expr></argument>, <argument><expr><name>rating</name></expr></argument>, <argument><expr><name>shelf</name></expr></argument>, <argument><expr><name>coverURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	
			<expr_stmt><expr><call><name><name>searchedBooks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>searchedBooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Book</name><index>[]</index></name></type> <name>returnArray</name> <init>= <expr><operator>new</operator> <name><name>Book</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>returnArray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>searchedBooks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<return>return <expr><name>returnArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>double</name><index>[]</index></name></type> <name>getRating</name><parameter_list>(<parameter><decl><type><name><name>Book</name><index>[]</index></name></type> <name>searchedArray</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>ratingArray</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><name><name>searchedArray</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>searchedArray</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>ratingArray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getRating</name><argument_list>(<argument><expr><name><name>searchedArray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getBook_ID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></for>

		<return>return <expr><name>ratingArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>double</name></type> <name>getRating</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>double</name></type> <name>rating</name></decl>,<decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sqlCount</name> <init>= <expr><literal type="string">"SELECT count(*) FROM history WHERE book_id =? AND rating &gt; 0"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sqlSum</name> <init>= <expr><literal type="string">"SELECT sum(rating) FROM history WHERE book_id =?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>rsCount</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sqlCount</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>rsCount</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>rsSum</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sqlSum</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>sum</name> <operator>=</operator><call><name><name>rsSum</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rsCount</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rsSum</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>rating</name> <operator>=</operator><name>sum</name> <operator>/</operator> <name>count</name></expr>;</expr_stmt> 
		<return>return <expr><name>rating</name></expr>;</return>
	}</block></function>	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>addDebt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debt</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"UPDATE customer_debt "</literal> <operator>+</operator>
				<literal type="string">" SET accumulated_fees = accumulated_fees + ? "</literal> <operator>+</operator>
				<literal type="string">" WHERE card_id = ? "</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>debt</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>payDebt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>payment</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"UPDATE customer_debt "</literal> <operator>+</operator>
				<literal type="string">" SET paid = paid + ? "</literal> <operator>+</operator>
				<literal type="string">" WHERE card_id = ? "</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>payment</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>returnBook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rating</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>BorrowedBook</name></type> <name>book</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>book</name> <operator>=</operator> <call><name>getOneBorrowedBook</name><argument_list>(<argument><expr><name>card_id</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>book</name><operator>.</operator><name>onTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>debt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>debt</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <operator>(</operator><call><name><name>book</name><operator>.</operator><name>getDaysOver</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>addDebt</name><argument_list>(<argument><expr><name>card_id</name></expr></argument>, <argument><expr><name>debt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name>String</name></type> <name>onTime</name> <init>= <expr><call><name><name>book</name><operator>.</operator><name>returnOnTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>insertHistory</name> <init>= <expr><literal type="string">"INSERT OR REPLACE INTO history "</literal> <operator>+</operator>
				<literal type="string">"(card_id, book_id, returned_on_time, rating)"</literal> <operator>+</operator>
				<literal type="string">"VALUES "</literal> <operator>+</operator>
				<literal type="string">"(?,?,?,?);"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>insertHistory</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>, <argument><expr><name>onTime</name></expr></argument>, <argument><expr><name>rating</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>deleteBorrowed</name> <init>=  <expr><literal type="string">"DELETE FROM borrowed_books WHERE card_id = ? AND book_id = ?"</literal></expr></init></decl>;</decl_stmt>		
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>deleteBorrowed</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>createTop10</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>BorrowedBook</name></type> <name>getOneBorrowedBook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>card_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>genre</name></decl>, <decl><type ref="prev"/><name>publisher</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>isbn</name></decl>, <decl><type ref="prev"/><name>borrowed_epoch</name></decl>, <decl><type ref="prev"/><name>return_epoch</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pages</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM books INNER JOIN borrowed_books USING(book_id)"</literal>
				<operator>+</operator> <literal type="string">" WHERE card_id = ? AND book_id = ?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs2</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>		
		<expr_stmt><expr><name>borrowed_epoch</name> <operator>=</operator> <call><name><name>rs2</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"borrowed_epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>return_epoch</name> <operator>=</operator> <call><name><name>rs2</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"return_epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name><name>rs2</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>author</name> <operator>=</operator> <call><name><name>rs2</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>genre</name> <operator>=</operator> <call><name><name>rs2</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>publisher</name> <operator>=</operator> <call><name><name>rs2</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>isbn</name> <operator>=</operator> <call><name><name>rs2</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"isbn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pages</name> <operator>=</operator> <call><name><name>rs2</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>BorrowedBook</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>BorrowedBook</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>,<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>isbn</name></expr></argument>, <argument><expr><name>borrowed_epoch</name></expr></argument>, <argument><expr><name>return_epoch</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	
		<expr_stmt><expr><call><name><name>rs2</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>checkIfAvailable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>quantity</name></decl>, <decl><type ref="prev"/><name>borrowed</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>countBooks</name> <init>= <expr><literal type="string">"SELECT count(*) FROM borrowed_books WHERE book_id =?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>nrOfBorrowed</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>countBooks</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>borrowed</name> <operator>=</operator> <call><name><name>nrOfBorrowed</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sqlQuantity</name> <init>= <expr><literal type="string">"SELECT quantity FROM books WHERE book_id =?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>bookQuantity</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sqlQuantity</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>quantity</name> <operator>=</operator> <call><name><name>bookQuantity</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"quantity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>nrOfBorrowed</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bookQuantity</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>borrowed</name> <operator>&gt;=</operator> <name>quantity</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name>borrowed</name> <operator>&lt;</operator> <name>quantity</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeBook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>delete</name> <init>= <expr><literal type="string">"DELETE FROM books WHERE book_id = ?"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>delete</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>changeQuantityBook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>change</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>getQuantity</name> <init>= <expr><literal type="string">"SELECT quantity FROM books WHERE book_id = ?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>tableQuantity</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>getQuantity</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>quantity</name> <init>= <expr><call><name><name>tableQuantity</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tableQuantity</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>quantity</name> <operator>-</operator> <name>change</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>removeBook</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>newQuantity</name> <init>= <expr><name>quantity</name> <operator>+</operator> <name>change</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>setNewQuantity</name> <init>= <expr><literal type="string">"UPDATE books SET quantity = ? WHERE book_id = ?"</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>PreparedUpdate</name><argument_list>(<argument><expr><name>setNewQuantity</name></expr></argument>, <argument><expr><name>newQuantity</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>


	}</block></function>
	<function><specifier>public</specifier> <type><name><name>BorrowedBook</name><index>[]</index></name></type> <name>getBorrowedArray</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>borrowedSet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name></type> <name>borrowed_list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>BorrowedBook</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>genre</name></decl>, <decl><type ref="prev"/><name>publisher</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>isbn</name></decl>, <decl><type ref="prev"/><name>borrowed_epoch</name></decl>, <decl><type ref="prev"/><name>return_epoch</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pages</name></decl>, <decl><type ref="prev"/><name>book_id</name></decl>, <decl><type ref="prev"/><name>card_id</name></decl>;</decl_stmt>

		<while>while <condition>(<expr><call><name><name>borrowedSet</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<expr_stmt><expr><name>book_id</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"book_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>card_id</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"card_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>borrowed_epoch</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"borrowed_epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>return_epoch</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"return_epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>author</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>genre</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>publisher</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>isbn</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"isbn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pages</name> <operator>=</operator> <call><name><name>borrowedSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>BorrowedBook</name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name>BorrowedBook</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>,<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>isbn</name></expr></argument>, <argument><expr><name>borrowed_epoch</name></expr></argument>, <argument><expr><name>return_epoch</name></expr></argument>, <argument><expr><name>card_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>borrowed_list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		}</block></while>
		<expr_stmt><expr><call><name><name>borrowedSet</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>BorrowedBook</name><index>[]</index></name></type> <name>borrowedArray</name> <init>= <expr><call><name><name>borrowed_list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>BorrowedBook</name><index>[<expr><call><name><name>borrowed_list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>borrowedArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>Book</name><index>[]</index></name></type> <name>getBookArray</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>bookSet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>bookList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>genre</name></decl>, <decl><type ref="prev"/><name>publisher</name></decl>, <decl><type ref="prev"/><name>coverURL</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>isbn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pages</name></decl>, <decl><type ref="prev"/><name>book_id</name></decl>, <decl><type ref="prev"/><name>quantity</name></decl>, <decl><type ref="prev"/><name>shelf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>rating</name></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>bookSet</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<expr_stmt><expr><name>book_id</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"book_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>author</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>genre</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>publisher</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>isbn</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"isbn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pages</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>shelf</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//quantity = getNumberAvailable(book_id);</comment>
			<expr_stmt><expr><name>quantity</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"quantity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rating</name> <operator>=</operator> <call><name>getRating</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>coverURL</name> <operator>=</operator> <call><name><name>bookSet</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"cover_url"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Book</name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name>Book</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>isbn</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>, <argument><expr><name>quantity</name></expr></argument>, <argument><expr><name>rating</name></expr></argument>, <argument><expr><name>shelf</name></expr></argument>, <argument><expr><name>coverURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>bookList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		}</block></while>
		<expr_stmt><expr><call><name><name>bookSet</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Book</name><index>[]</index></name></type> <name>bookArray</name> <init>= <expr><call><name><name>bookList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Book</name><index>[<expr><call><name><name>bookList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>bookArray</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>Book</name><index>[]</index></name></type> <name>getGenreBooks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT * FROM books WHERE genre = ?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>genreBooks</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Book</name><index>[]</index></name></type> <name>result</name> <init>= <expr><call><name>getBookArray</name><argument_list>(<argument><expr><name>genreBooks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>genreBooks</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getNumberAvailable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>quantity</name></decl>, <decl><type ref="prev"/><name>borrowed</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>countBooks</name> <init>= <expr><literal type="string">"SELECT count(*) FROM borrowed_books WHERE book_id = ?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>nrOfBorrowed</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>countBooks</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>borrowed</name> <operator>=</operator> <call><name><name>nrOfBorrowed</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sqlQuantity</name> <init>= <expr><literal type="string">"SELECT quantity FROM books WHERE book_id =?"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>bookQuantity</name> <init>= <expr><call><name>PreparedQuery</name><argument_list>(<argument><expr><name>sqlQuantity</name></expr></argument>, <argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>quantity</name> <operator>=</operator> <call><name><name>bookQuantity</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"quantity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>quantity</name> <operator>-</operator> <name>borrowed</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>nrOfBorrowed</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bookQuantity</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>		
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>Book</name><index>[]</index></name></type> <name>getTop10</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><name>top10Array</name> <operator>=</operator> <call><name>createTop10</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>top10Array</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>top10Test</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Book</name></type> <name>candidate</name> <init>= <expr><call><name>searchOneBook</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>candidateRating</name> <init>= <expr><call><name><name>candidate</name><operator>.</operator><name>getRating</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>topRating</name> <init>= <expr><name><name>top10Array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getRating</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>minRating</name> <init>= <expr><name><name>top10Array</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><call><name>getRating</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if<condition>(<expr><name>candidateRating</name> <operator>&lt;</operator> <name>minRating</name></expr>)</condition><then> <block>{
			<return>return;</return>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>candidateRating</name> <operator>&gt;</operator> <name>topRating</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>top10Array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>candidate</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>candidateRating</name> <operator>&gt;</operator> <name>minRating</name> <operator>&amp;&amp;</operator> <name>candidateRating</name> <operator>&lt;</operator> <name>topRating</name></expr>)</condition><then> <block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>double</name></type> <name>top10i</name> <init>= <expr><name><name>top10Array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getRating</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>top10minus</name> <init>= <expr><name><name>top10Array</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>getRating</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if<condition>(<expr><name>candidateRating</name> <operator>&gt;</operator> <name>top10i</name> <operator>&amp;&amp;</operator> <name>candidateRating</name> <operator>&lt;</operator> <name>top10minus</name></expr>)</condition><then><block>{
					<comment type="line">//insertIntoTop10(i, candidate);</comment>
					<expr_stmt><expr><name><name>top10Array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>candidate</name></expr>;</expr_stmt>
				}</block></then></if>

			}</block></for>
		}</block></then></if></elseif></if>
	}</block></function>

	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>addToCheckout</name><parameter_list>(<parameter><decl><type><name>Book</name></type> <name>addition</name></decl></parameter>)</parameter_list> <block>{
		
		<if>if<condition>(<expr><operator>!</operator><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>checkoutContains</name></name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>addToCheckoutList</name></name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></then>
		<else>else <block>{ 
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></else></if>
	}</block></function>
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>addToCheckout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>book_id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		
		<if>if<condition>(<expr><operator>!</operator><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>checkoutContains</name></name><argument_list>(<argument><expr><call><name>searchOneBook</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>Main</name><operator>.</operator><name>checkoutData</name><operator>.</operator><name>addToCheckoutList</name></name><argument_list>(<argument><expr><call><name>searchOneBook</name><argument_list>(<argument><expr><name>book_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></then>
		<else>else <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></else></if>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setCheckout</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Book</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>checkoutList</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeFromCheckout</name><parameter_list>(<parameter><decl><type><name>Book</name></type> <name>remove</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>checkoutList</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>ResultSet</name></type> <name>PreparedQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type><name>objects</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>pstmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>objects</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><name><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>check</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<switch>switch<condition>(<expr><name>check</name></expr>)</condition> <block>{
			<case>case <expr><literal type="string">"Integer"</literal></expr>:</case>
				<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="string">"Double"</literal></expr>:</case>
				<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="string">"String"</literal></expr>:</case>
				<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="string">"Long"</literal></expr>:</case>
				<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>setLong</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Magic type, no idea!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></switch>
		}</block></for>
		<decl_stmt><decl><type><name>ResultSet</name></type> <name>result</name> <init>= <expr><call><name><name>pstmt</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>result</name></expr>;</return>	
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>PreparedUpdate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>update</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type><name>objects</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>pstmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>objects</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><name><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>check</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<switch>switch<condition>(<expr><name>check</name></expr>)</condition> <block>{
			<case>case <expr><literal type="string">"Integer"</literal></expr>:</case>
				<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="string">"Double"</literal></expr>:</case>
				<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="string">"String"</literal></expr>:</case>
				<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="string">"Long"</literal></expr>:</case>
				<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>setLong</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Magic type, no idea!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></switch>
		}</block></for>
		<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>closeConn</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>		

	<function><specifier>public</specifier> <type><name>void</name></type> <name>PreparedExecute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>pstmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pstmt</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="TimMarcus-Database-master\org\mindrot\jbcrypt\BCrypt.java" hash="65e1202e2e07bc3a294c229066bf4909e53e9405"><comment type="line">// Copyright (c) 2006 Damien Miller &lt;djm@mindrot.org&gt;</comment>
<comment type="line">//</comment>
<comment type="line">// Permission to use, copy, modify, and distribute this software for any</comment>
<comment type="line">// purpose with or without fee is hereby granted, provided that the above</comment>
<comment type="line">// copyright notice and this permission notice appear in all copies.</comment>
<comment type="line">//</comment>
<comment type="line">// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES</comment>
<comment type="line">// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</comment>
<comment type="line">// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</comment>
<comment type="line">// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</comment>
<comment type="line">// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</comment>
<comment type="line">// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</comment>
<comment type="line">// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</comment>

<package>package <name><name>org</name><operator>.</operator><name>mindrot</name><operator>.</operator><name>jbcrypt</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>

<comment type="block" format="javadoc">/**
 * BCrypt implements OpenBSD-style Blowfish password hashing using
 * the scheme described in "A Future-Adaptable Password Scheme" by
 * Niels Provos and David Mazieres.
 * &lt;p&gt;
 * This password hashing system tries to thwart off-line password
 * cracking using a computationally-intensive hashing algorithm,
 * based on Bruce Schneier's Blowfish cipher. The work factor of
 * the algorithm is parameterised, so it can be increased as
 * computers get faster.
 * &lt;p&gt;
 * Usage is really simple. To hash a password for the first time,
 * call the hashpw method with a random salt, like this:
 * &lt;p&gt;
 * &lt;code&gt;
 * String pw_hash = BCrypt.hashpw(plain_password, BCrypt.gensalt()); &lt;br /&gt;
 * &lt;/code&gt;
 * &lt;p&gt;
 * To check whether a plaintext password matches one that has been
 * hashed previously, use the checkpw method:
 * &lt;p&gt;
 * &lt;code&gt;
 * if (BCrypt.checkpw(candidate_password, stored_hash))&lt;br /&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("It matches");&lt;br /&gt;
 * else&lt;br /&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("It does not match");&lt;br /&gt;
 * &lt;/code&gt;
 * &lt;p&gt;
 * The gensalt() method takes an optional parameter (log_rounds)
 * that determines the computational complexity of the hashing:
 * &lt;p&gt;
 * &lt;code&gt;
 * String strong_salt = BCrypt.gensalt(10)&lt;br /&gt;
 * String stronger_salt = BCrypt.gensalt(12)&lt;br /&gt;
 * &lt;/code&gt;
 * &lt;p&gt;
 * The amount of work increases exponentially (2**log_rounds), so 
 * each increment is twice as much work. The default log_rounds is
 * 10, and the valid range is 4 to 30.
 *
 * @author Damien Miller
 * @version 0.2
 */</comment>
<class><specifier>public</specifier> class <name>BCrypt</name> <block>{
	<comment type="line">// BCrypt parameters</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GENSALT_DEFAULT_LOG2_ROUNDS</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BCRYPT_SALT_LEN</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Blowfish parameters</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BLOWFISH_NUM_ROUNDS</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Initial contents of key schedule</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name><name>P_orig</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x243f6a88</literal></expr>, <expr><literal type="number">0x85a308d3</literal></expr>, <expr><literal type="number">0x13198a2e</literal></expr>, <expr><literal type="number">0x03707344</literal></expr>,
		<expr><literal type="number">0xa4093822</literal></expr>, <expr><literal type="number">0x299f31d0</literal></expr>, <expr><literal type="number">0x082efa98</literal></expr>, <expr><literal type="number">0xec4e6c89</literal></expr>,
		<expr><literal type="number">0x452821e6</literal></expr>, <expr><literal type="number">0x38d01377</literal></expr>, <expr><literal type="number">0xbe5466cf</literal></expr>, <expr><literal type="number">0x34e90c6c</literal></expr>,
		<expr><literal type="number">0xc0ac29b7</literal></expr>, <expr><literal type="number">0xc97c50dd</literal></expr>, <expr><literal type="number">0x3f84d5b5</literal></expr>, <expr><literal type="number">0xb5470917</literal></expr>,
		<expr><literal type="number">0x9216d5d9</literal></expr>, <expr><literal type="number">0x8979fb1b</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name><name>S_orig</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0xd1310ba6</literal></expr>, <expr><literal type="number">0x98dfb5ac</literal></expr>, <expr><literal type="number">0x2ffd72db</literal></expr>, <expr><literal type="number">0xd01adfb7</literal></expr>,
		<expr><literal type="number">0xb8e1afed</literal></expr>, <expr><literal type="number">0x6a267e96</literal></expr>, <expr><literal type="number">0xba7c9045</literal></expr>, <expr><literal type="number">0xf12c7f99</literal></expr>,
		<expr><literal type="number">0x24a19947</literal></expr>, <expr><literal type="number">0xb3916cf7</literal></expr>, <expr><literal type="number">0x0801f2e2</literal></expr>, <expr><literal type="number">0x858efc16</literal></expr>,
		<expr><literal type="number">0x636920d8</literal></expr>, <expr><literal type="number">0x71574e69</literal></expr>, <expr><literal type="number">0xa458fea3</literal></expr>, <expr><literal type="number">0xf4933d7e</literal></expr>,
		<expr><literal type="number">0x0d95748f</literal></expr>, <expr><literal type="number">0x728eb658</literal></expr>, <expr><literal type="number">0x718bcd58</literal></expr>, <expr><literal type="number">0x82154aee</literal></expr>,
		<expr><literal type="number">0x7b54a41d</literal></expr>, <expr><literal type="number">0xc25a59b5</literal></expr>, <expr><literal type="number">0x9c30d539</literal></expr>, <expr><literal type="number">0x2af26013</literal></expr>,
		<expr><literal type="number">0xc5d1b023</literal></expr>, <expr><literal type="number">0x286085f0</literal></expr>, <expr><literal type="number">0xca417918</literal></expr>, <expr><literal type="number">0xb8db38ef</literal></expr>,
		<expr><literal type="number">0x8e79dcb0</literal></expr>, <expr><literal type="number">0x603a180e</literal></expr>, <expr><literal type="number">0x6c9e0e8b</literal></expr>, <expr><literal type="number">0xb01e8a3e</literal></expr>,
		<expr><literal type="number">0xd71577c1</literal></expr>, <expr><literal type="number">0xbd314b27</literal></expr>, <expr><literal type="number">0x78af2fda</literal></expr>, <expr><literal type="number">0x55605c60</literal></expr>,
		<expr><literal type="number">0xe65525f3</literal></expr>, <expr><literal type="number">0xaa55ab94</literal></expr>, <expr><literal type="number">0x57489862</literal></expr>, <expr><literal type="number">0x63e81440</literal></expr>,
		<expr><literal type="number">0x55ca396a</literal></expr>, <expr><literal type="number">0x2aab10b6</literal></expr>, <expr><literal type="number">0xb4cc5c34</literal></expr>, <expr><literal type="number">0x1141e8ce</literal></expr>,
		<expr><literal type="number">0xa15486af</literal></expr>, <expr><literal type="number">0x7c72e993</literal></expr>, <expr><literal type="number">0xb3ee1411</literal></expr>, <expr><literal type="number">0x636fbc2a</literal></expr>,
		<expr><literal type="number">0x2ba9c55d</literal></expr>, <expr><literal type="number">0x741831f6</literal></expr>, <expr><literal type="number">0xce5c3e16</literal></expr>, <expr><literal type="number">0x9b87931e</literal></expr>,
		<expr><literal type="number">0xafd6ba33</literal></expr>, <expr><literal type="number">0x6c24cf5c</literal></expr>, <expr><literal type="number">0x7a325381</literal></expr>, <expr><literal type="number">0x28958677</literal></expr>,
		<expr><literal type="number">0x3b8f4898</literal></expr>, <expr><literal type="number">0x6b4bb9af</literal></expr>, <expr><literal type="number">0xc4bfe81b</literal></expr>, <expr><literal type="number">0x66282193</literal></expr>,
		<expr><literal type="number">0x61d809cc</literal></expr>, <expr><literal type="number">0xfb21a991</literal></expr>, <expr><literal type="number">0x487cac60</literal></expr>, <expr><literal type="number">0x5dec8032</literal></expr>,
		<expr><literal type="number">0xef845d5d</literal></expr>, <expr><literal type="number">0xe98575b1</literal></expr>, <expr><literal type="number">0xdc262302</literal></expr>, <expr><literal type="number">0xeb651b88</literal></expr>,
		<expr><literal type="number">0x23893e81</literal></expr>, <expr><literal type="number">0xd396acc5</literal></expr>, <expr><literal type="number">0x0f6d6ff3</literal></expr>, <expr><literal type="number">0x83f44239</literal></expr>,
		<expr><literal type="number">0x2e0b4482</literal></expr>, <expr><literal type="number">0xa4842004</literal></expr>, <expr><literal type="number">0x69c8f04a</literal></expr>, <expr><literal type="number">0x9e1f9b5e</literal></expr>,
		<expr><literal type="number">0x21c66842</literal></expr>, <expr><literal type="number">0xf6e96c9a</literal></expr>, <expr><literal type="number">0x670c9c61</literal></expr>, <expr><literal type="number">0xabd388f0</literal></expr>,
		<expr><literal type="number">0x6a51a0d2</literal></expr>, <expr><literal type="number">0xd8542f68</literal></expr>, <expr><literal type="number">0x960fa728</literal></expr>, <expr><literal type="number">0xab5133a3</literal></expr>,
		<expr><literal type="number">0x6eef0b6c</literal></expr>, <expr><literal type="number">0x137a3be4</literal></expr>, <expr><literal type="number">0xba3bf050</literal></expr>, <expr><literal type="number">0x7efb2a98</literal></expr>,
		<expr><literal type="number">0xa1f1651d</literal></expr>, <expr><literal type="number">0x39af0176</literal></expr>, <expr><literal type="number">0x66ca593e</literal></expr>, <expr><literal type="number">0x82430e88</literal></expr>,
		<expr><literal type="number">0x8cee8619</literal></expr>, <expr><literal type="number">0x456f9fb4</literal></expr>, <expr><literal type="number">0x7d84a5c3</literal></expr>, <expr><literal type="number">0x3b8b5ebe</literal></expr>,
		<expr><literal type="number">0xe06f75d8</literal></expr>, <expr><literal type="number">0x85c12073</literal></expr>, <expr><literal type="number">0x401a449f</literal></expr>, <expr><literal type="number">0x56c16aa6</literal></expr>,
		<expr><literal type="number">0x4ed3aa62</literal></expr>, <expr><literal type="number">0x363f7706</literal></expr>, <expr><literal type="number">0x1bfedf72</literal></expr>, <expr><literal type="number">0x429b023d</literal></expr>,
		<expr><literal type="number">0x37d0d724</literal></expr>, <expr><literal type="number">0xd00a1248</literal></expr>, <expr><literal type="number">0xdb0fead3</literal></expr>, <expr><literal type="number">0x49f1c09b</literal></expr>,
		<expr><literal type="number">0x075372c9</literal></expr>, <expr><literal type="number">0x80991b7b</literal></expr>, <expr><literal type="number">0x25d479d8</literal></expr>, <expr><literal type="number">0xf6e8def7</literal></expr>,
		<expr><literal type="number">0xe3fe501a</literal></expr>, <expr><literal type="number">0xb6794c3b</literal></expr>, <expr><literal type="number">0x976ce0bd</literal></expr>, <expr><literal type="number">0x04c006ba</literal></expr>,
		<expr><literal type="number">0xc1a94fb6</literal></expr>, <expr><literal type="number">0x409f60c4</literal></expr>, <expr><literal type="number">0x5e5c9ec2</literal></expr>, <expr><literal type="number">0x196a2463</literal></expr>,
		<expr><literal type="number">0x68fb6faf</literal></expr>, <expr><literal type="number">0x3e6c53b5</literal></expr>, <expr><literal type="number">0x1339b2eb</literal></expr>, <expr><literal type="number">0x3b52ec6f</literal></expr>,
		<expr><literal type="number">0x6dfc511f</literal></expr>, <expr><literal type="number">0x9b30952c</literal></expr>, <expr><literal type="number">0xcc814544</literal></expr>, <expr><literal type="number">0xaf5ebd09</literal></expr>,
		<expr><literal type="number">0xbee3d004</literal></expr>, <expr><literal type="number">0xde334afd</literal></expr>, <expr><literal type="number">0x660f2807</literal></expr>, <expr><literal type="number">0x192e4bb3</literal></expr>,
		<expr><literal type="number">0xc0cba857</literal></expr>, <expr><literal type="number">0x45c8740f</literal></expr>, <expr><literal type="number">0xd20b5f39</literal></expr>, <expr><literal type="number">0xb9d3fbdb</literal></expr>,
		<expr><literal type="number">0x5579c0bd</literal></expr>, <expr><literal type="number">0x1a60320a</literal></expr>, <expr><literal type="number">0xd6a100c6</literal></expr>, <expr><literal type="number">0x402c7279</literal></expr>,
		<expr><literal type="number">0x679f25fe</literal></expr>, <expr><literal type="number">0xfb1fa3cc</literal></expr>, <expr><literal type="number">0x8ea5e9f8</literal></expr>, <expr><literal type="number">0xdb3222f8</literal></expr>,
		<expr><literal type="number">0x3c7516df</literal></expr>, <expr><literal type="number">0xfd616b15</literal></expr>, <expr><literal type="number">0x2f501ec8</literal></expr>, <expr><literal type="number">0xad0552ab</literal></expr>,
		<expr><literal type="number">0x323db5fa</literal></expr>, <expr><literal type="number">0xfd238760</literal></expr>, <expr><literal type="number">0x53317b48</literal></expr>, <expr><literal type="number">0x3e00df82</literal></expr>,
		<expr><literal type="number">0x9e5c57bb</literal></expr>, <expr><literal type="number">0xca6f8ca0</literal></expr>, <expr><literal type="number">0x1a87562e</literal></expr>, <expr><literal type="number">0xdf1769db</literal></expr>,
		<expr><literal type="number">0xd542a8f6</literal></expr>, <expr><literal type="number">0x287effc3</literal></expr>, <expr><literal type="number">0xac6732c6</literal></expr>, <expr><literal type="number">0x8c4f5573</literal></expr>,
		<expr><literal type="number">0x695b27b0</literal></expr>, <expr><literal type="number">0xbbca58c8</literal></expr>, <expr><literal type="number">0xe1ffa35d</literal></expr>, <expr><literal type="number">0xb8f011a0</literal></expr>,
		<expr><literal type="number">0x10fa3d98</literal></expr>, <expr><literal type="number">0xfd2183b8</literal></expr>, <expr><literal type="number">0x4afcb56c</literal></expr>, <expr><literal type="number">0x2dd1d35b</literal></expr>,
		<expr><literal type="number">0x9a53e479</literal></expr>, <expr><literal type="number">0xb6f84565</literal></expr>, <expr><literal type="number">0xd28e49bc</literal></expr>, <expr><literal type="number">0x4bfb9790</literal></expr>,
		<expr><literal type="number">0xe1ddf2da</literal></expr>, <expr><literal type="number">0xa4cb7e33</literal></expr>, <expr><literal type="number">0x62fb1341</literal></expr>, <expr><literal type="number">0xcee4c6e8</literal></expr>,
		<expr><literal type="number">0xef20cada</literal></expr>, <expr><literal type="number">0x36774c01</literal></expr>, <expr><literal type="number">0xd07e9efe</literal></expr>, <expr><literal type="number">0x2bf11fb4</literal></expr>,
		<expr><literal type="number">0x95dbda4d</literal></expr>, <expr><literal type="number">0xae909198</literal></expr>, <expr><literal type="number">0xeaad8e71</literal></expr>, <expr><literal type="number">0x6b93d5a0</literal></expr>,
		<expr><literal type="number">0xd08ed1d0</literal></expr>, <expr><literal type="number">0xafc725e0</literal></expr>, <expr><literal type="number">0x8e3c5b2f</literal></expr>, <expr><literal type="number">0x8e7594b7</literal></expr>,
		<expr><literal type="number">0x8ff6e2fb</literal></expr>, <expr><literal type="number">0xf2122b64</literal></expr>, <expr><literal type="number">0x8888b812</literal></expr>, <expr><literal type="number">0x900df01c</literal></expr>,
		<expr><literal type="number">0x4fad5ea0</literal></expr>, <expr><literal type="number">0x688fc31c</literal></expr>, <expr><literal type="number">0xd1cff191</literal></expr>, <expr><literal type="number">0xb3a8c1ad</literal></expr>,
		<expr><literal type="number">0x2f2f2218</literal></expr>, <expr><literal type="number">0xbe0e1777</literal></expr>, <expr><literal type="number">0xea752dfe</literal></expr>, <expr><literal type="number">0x8b021fa1</literal></expr>,
		<expr><literal type="number">0xe5a0cc0f</literal></expr>, <expr><literal type="number">0xb56f74e8</literal></expr>, <expr><literal type="number">0x18acf3d6</literal></expr>, <expr><literal type="number">0xce89e299</literal></expr>,
		<expr><literal type="number">0xb4a84fe0</literal></expr>, <expr><literal type="number">0xfd13e0b7</literal></expr>, <expr><literal type="number">0x7cc43b81</literal></expr>, <expr><literal type="number">0xd2ada8d9</literal></expr>,
		<expr><literal type="number">0x165fa266</literal></expr>, <expr><literal type="number">0x80957705</literal></expr>, <expr><literal type="number">0x93cc7314</literal></expr>, <expr><literal type="number">0x211a1477</literal></expr>,
		<expr><literal type="number">0xe6ad2065</literal></expr>, <expr><literal type="number">0x77b5fa86</literal></expr>, <expr><literal type="number">0xc75442f5</literal></expr>, <expr><literal type="number">0xfb9d35cf</literal></expr>,
		<expr><literal type="number">0xebcdaf0c</literal></expr>, <expr><literal type="number">0x7b3e89a0</literal></expr>, <expr><literal type="number">0xd6411bd3</literal></expr>, <expr><literal type="number">0xae1e7e49</literal></expr>,
		<expr><literal type="number">0x00250e2d</literal></expr>, <expr><literal type="number">0x2071b35e</literal></expr>, <expr><literal type="number">0x226800bb</literal></expr>, <expr><literal type="number">0x57b8e0af</literal></expr>,
		<expr><literal type="number">0x2464369b</literal></expr>, <expr><literal type="number">0xf009b91e</literal></expr>, <expr><literal type="number">0x5563911d</literal></expr>, <expr><literal type="number">0x59dfa6aa</literal></expr>,
		<expr><literal type="number">0x78c14389</literal></expr>, <expr><literal type="number">0xd95a537f</literal></expr>, <expr><literal type="number">0x207d5ba2</literal></expr>, <expr><literal type="number">0x02e5b9c5</literal></expr>,
		<expr><literal type="number">0x83260376</literal></expr>, <expr><literal type="number">0x6295cfa9</literal></expr>, <expr><literal type="number">0x11c81968</literal></expr>, <expr><literal type="number">0x4e734a41</literal></expr>,
		<expr><literal type="number">0xb3472dca</literal></expr>, <expr><literal type="number">0x7b14a94a</literal></expr>, <expr><literal type="number">0x1b510052</literal></expr>, <expr><literal type="number">0x9a532915</literal></expr>,
		<expr><literal type="number">0xd60f573f</literal></expr>, <expr><literal type="number">0xbc9bc6e4</literal></expr>, <expr><literal type="number">0x2b60a476</literal></expr>, <expr><literal type="number">0x81e67400</literal></expr>,
		<expr><literal type="number">0x08ba6fb5</literal></expr>, <expr><literal type="number">0x571be91f</literal></expr>, <expr><literal type="number">0xf296ec6b</literal></expr>, <expr><literal type="number">0x2a0dd915</literal></expr>,
		<expr><literal type="number">0xb6636521</literal></expr>, <expr><literal type="number">0xe7b9f9b6</literal></expr>, <expr><literal type="number">0xff34052e</literal></expr>, <expr><literal type="number">0xc5855664</literal></expr>,
		<expr><literal type="number">0x53b02d5d</literal></expr>, <expr><literal type="number">0xa99f8fa1</literal></expr>, <expr><literal type="number">0x08ba4799</literal></expr>, <expr><literal type="number">0x6e85076a</literal></expr>,
		<expr><literal type="number">0x4b7a70e9</literal></expr>, <expr><literal type="number">0xb5b32944</literal></expr>, <expr><literal type="number">0xdb75092e</literal></expr>, <expr><literal type="number">0xc4192623</literal></expr>,
		<expr><literal type="number">0xad6ea6b0</literal></expr>, <expr><literal type="number">0x49a7df7d</literal></expr>, <expr><literal type="number">0x9cee60b8</literal></expr>, <expr><literal type="number">0x8fedb266</literal></expr>,
		<expr><literal type="number">0xecaa8c71</literal></expr>, <expr><literal type="number">0x699a17ff</literal></expr>, <expr><literal type="number">0x5664526c</literal></expr>, <expr><literal type="number">0xc2b19ee1</literal></expr>,
		<expr><literal type="number">0x193602a5</literal></expr>, <expr><literal type="number">0x75094c29</literal></expr>, <expr><literal type="number">0xa0591340</literal></expr>, <expr><literal type="number">0xe4183a3e</literal></expr>,
		<expr><literal type="number">0x3f54989a</literal></expr>, <expr><literal type="number">0x5b429d65</literal></expr>, <expr><literal type="number">0x6b8fe4d6</literal></expr>, <expr><literal type="number">0x99f73fd6</literal></expr>,
		<expr><literal type="number">0xa1d29c07</literal></expr>, <expr><literal type="number">0xefe830f5</literal></expr>, <expr><literal type="number">0x4d2d38e6</literal></expr>, <expr><literal type="number">0xf0255dc1</literal></expr>,
		<expr><literal type="number">0x4cdd2086</literal></expr>, <expr><literal type="number">0x8470eb26</literal></expr>, <expr><literal type="number">0x6382e9c6</literal></expr>, <expr><literal type="number">0x021ecc5e</literal></expr>,
		<expr><literal type="number">0x09686b3f</literal></expr>, <expr><literal type="number">0x3ebaefc9</literal></expr>, <expr><literal type="number">0x3c971814</literal></expr>, <expr><literal type="number">0x6b6a70a1</literal></expr>,
		<expr><literal type="number">0x687f3584</literal></expr>, <expr><literal type="number">0x52a0e286</literal></expr>, <expr><literal type="number">0xb79c5305</literal></expr>, <expr><literal type="number">0xaa500737</literal></expr>,
		<expr><literal type="number">0x3e07841c</literal></expr>, <expr><literal type="number">0x7fdeae5c</literal></expr>, <expr><literal type="number">0x8e7d44ec</literal></expr>, <expr><literal type="number">0x5716f2b8</literal></expr>,
		<expr><literal type="number">0xb03ada37</literal></expr>, <expr><literal type="number">0xf0500c0d</literal></expr>, <expr><literal type="number">0xf01c1f04</literal></expr>, <expr><literal type="number">0x0200b3ff</literal></expr>,
		<expr><literal type="number">0xae0cf51a</literal></expr>, <expr><literal type="number">0x3cb574b2</literal></expr>, <expr><literal type="number">0x25837a58</literal></expr>, <expr><literal type="number">0xdc0921bd</literal></expr>,
		<expr><literal type="number">0xd19113f9</literal></expr>, <expr><literal type="number">0x7ca92ff6</literal></expr>, <expr><literal type="number">0x94324773</literal></expr>, <expr><literal type="number">0x22f54701</literal></expr>,
		<expr><literal type="number">0x3ae5e581</literal></expr>, <expr><literal type="number">0x37c2dadc</literal></expr>, <expr><literal type="number">0xc8b57634</literal></expr>, <expr><literal type="number">0x9af3dda7</literal></expr>,
		<expr><literal type="number">0xa9446146</literal></expr>, <expr><literal type="number">0x0fd0030e</literal></expr>, <expr><literal type="number">0xecc8c73e</literal></expr>, <expr><literal type="number">0xa4751e41</literal></expr>,
		<expr><literal type="number">0xe238cd99</literal></expr>, <expr><literal type="number">0x3bea0e2f</literal></expr>, <expr><literal type="number">0x3280bba1</literal></expr>, <expr><literal type="number">0x183eb331</literal></expr>,
		<expr><literal type="number">0x4e548b38</literal></expr>, <expr><literal type="number">0x4f6db908</literal></expr>, <expr><literal type="number">0x6f420d03</literal></expr>, <expr><literal type="number">0xf60a04bf</literal></expr>,
		<expr><literal type="number">0x2cb81290</literal></expr>, <expr><literal type="number">0x24977c79</literal></expr>, <expr><literal type="number">0x5679b072</literal></expr>, <expr><literal type="number">0xbcaf89af</literal></expr>,
		<expr><literal type="number">0xde9a771f</literal></expr>, <expr><literal type="number">0xd9930810</literal></expr>, <expr><literal type="number">0xb38bae12</literal></expr>, <expr><literal type="number">0xdccf3f2e</literal></expr>,
		<expr><literal type="number">0x5512721f</literal></expr>, <expr><literal type="number">0x2e6b7124</literal></expr>, <expr><literal type="number">0x501adde6</literal></expr>, <expr><literal type="number">0x9f84cd87</literal></expr>,
		<expr><literal type="number">0x7a584718</literal></expr>, <expr><literal type="number">0x7408da17</literal></expr>, <expr><literal type="number">0xbc9f9abc</literal></expr>, <expr><literal type="number">0xe94b7d8c</literal></expr>,
		<expr><literal type="number">0xec7aec3a</literal></expr>, <expr><literal type="number">0xdb851dfa</literal></expr>, <expr><literal type="number">0x63094366</literal></expr>, <expr><literal type="number">0xc464c3d2</literal></expr>,
		<expr><literal type="number">0xef1c1847</literal></expr>, <expr><literal type="number">0x3215d908</literal></expr>, <expr><literal type="number">0xdd433b37</literal></expr>, <expr><literal type="number">0x24c2ba16</literal></expr>,
		<expr><literal type="number">0x12a14d43</literal></expr>, <expr><literal type="number">0x2a65c451</literal></expr>, <expr><literal type="number">0x50940002</literal></expr>, <expr><literal type="number">0x133ae4dd</literal></expr>,
		<expr><literal type="number">0x71dff89e</literal></expr>, <expr><literal type="number">0x10314e55</literal></expr>, <expr><literal type="number">0x81ac77d6</literal></expr>, <expr><literal type="number">0x5f11199b</literal></expr>,
		<expr><literal type="number">0x043556f1</literal></expr>, <expr><literal type="number">0xd7a3c76b</literal></expr>, <expr><literal type="number">0x3c11183b</literal></expr>, <expr><literal type="number">0x5924a509</literal></expr>,
		<expr><literal type="number">0xf28fe6ed</literal></expr>, <expr><literal type="number">0x97f1fbfa</literal></expr>, <expr><literal type="number">0x9ebabf2c</literal></expr>, <expr><literal type="number">0x1e153c6e</literal></expr>,
		<expr><literal type="number">0x86e34570</literal></expr>, <expr><literal type="number">0xeae96fb1</literal></expr>, <expr><literal type="number">0x860e5e0a</literal></expr>, <expr><literal type="number">0x5a3e2ab3</literal></expr>,
		<expr><literal type="number">0x771fe71c</literal></expr>, <expr><literal type="number">0x4e3d06fa</literal></expr>, <expr><literal type="number">0x2965dcb9</literal></expr>, <expr><literal type="number">0x99e71d0f</literal></expr>,
		<expr><literal type="number">0x803e89d6</literal></expr>, <expr><literal type="number">0x5266c825</literal></expr>, <expr><literal type="number">0x2e4cc978</literal></expr>, <expr><literal type="number">0x9c10b36a</literal></expr>,
		<expr><literal type="number">0xc6150eba</literal></expr>, <expr><literal type="number">0x94e2ea78</literal></expr>, <expr><literal type="number">0xa5fc3c53</literal></expr>, <expr><literal type="number">0x1e0a2df4</literal></expr>,
		<expr><literal type="number">0xf2f74ea7</literal></expr>, <expr><literal type="number">0x361d2b3d</literal></expr>, <expr><literal type="number">0x1939260f</literal></expr>, <expr><literal type="number">0x19c27960</literal></expr>,
		<expr><literal type="number">0x5223a708</literal></expr>, <expr><literal type="number">0xf71312b6</literal></expr>, <expr><literal type="number">0xebadfe6e</literal></expr>, <expr><literal type="number">0xeac31f66</literal></expr>,
		<expr><literal type="number">0xe3bc4595</literal></expr>, <expr><literal type="number">0xa67bc883</literal></expr>, <expr><literal type="number">0xb17f37d1</literal></expr>, <expr><literal type="number">0x018cff28</literal></expr>,
		<expr><literal type="number">0xc332ddef</literal></expr>, <expr><literal type="number">0xbe6c5aa5</literal></expr>, <expr><literal type="number">0x65582185</literal></expr>, <expr><literal type="number">0x68ab9802</literal></expr>,
		<expr><literal type="number">0xeecea50f</literal></expr>, <expr><literal type="number">0xdb2f953b</literal></expr>, <expr><literal type="number">0x2aef7dad</literal></expr>, <expr><literal type="number">0x5b6e2f84</literal></expr>,
		<expr><literal type="number">0x1521b628</literal></expr>, <expr><literal type="number">0x29076170</literal></expr>, <expr><literal type="number">0xecdd4775</literal></expr>, <expr><literal type="number">0x619f1510</literal></expr>,
		<expr><literal type="number">0x13cca830</literal></expr>, <expr><literal type="number">0xeb61bd96</literal></expr>, <expr><literal type="number">0x0334fe1e</literal></expr>, <expr><literal type="number">0xaa0363cf</literal></expr>,
		<expr><literal type="number">0xb5735c90</literal></expr>, <expr><literal type="number">0x4c70a239</literal></expr>, <expr><literal type="number">0xd59e9e0b</literal></expr>, <expr><literal type="number">0xcbaade14</literal></expr>,
		<expr><literal type="number">0xeecc86bc</literal></expr>, <expr><literal type="number">0x60622ca7</literal></expr>, <expr><literal type="number">0x9cab5cab</literal></expr>, <expr><literal type="number">0xb2f3846e</literal></expr>,
		<expr><literal type="number">0x648b1eaf</literal></expr>, <expr><literal type="number">0x19bdf0ca</literal></expr>, <expr><literal type="number">0xa02369b9</literal></expr>, <expr><literal type="number">0x655abb50</literal></expr>,
		<expr><literal type="number">0x40685a32</literal></expr>, <expr><literal type="number">0x3c2ab4b3</literal></expr>, <expr><literal type="number">0x319ee9d5</literal></expr>, <expr><literal type="number">0xc021b8f7</literal></expr>,
		<expr><literal type="number">0x9b540b19</literal></expr>, <expr><literal type="number">0x875fa099</literal></expr>, <expr><literal type="number">0x95f7997e</literal></expr>, <expr><literal type="number">0x623d7da8</literal></expr>,
		<expr><literal type="number">0xf837889a</literal></expr>, <expr><literal type="number">0x97e32d77</literal></expr>, <expr><literal type="number">0x11ed935f</literal></expr>, <expr><literal type="number">0x16681281</literal></expr>,
		<expr><literal type="number">0x0e358829</literal></expr>, <expr><literal type="number">0xc7e61fd6</literal></expr>, <expr><literal type="number">0x96dedfa1</literal></expr>, <expr><literal type="number">0x7858ba99</literal></expr>,
		<expr><literal type="number">0x57f584a5</literal></expr>, <expr><literal type="number">0x1b227263</literal></expr>, <expr><literal type="number">0x9b83c3ff</literal></expr>, <expr><literal type="number">0x1ac24696</literal></expr>,
		<expr><literal type="number">0xcdb30aeb</literal></expr>, <expr><literal type="number">0x532e3054</literal></expr>, <expr><literal type="number">0x8fd948e4</literal></expr>, <expr><literal type="number">0x6dbc3128</literal></expr>,
		<expr><literal type="number">0x58ebf2ef</literal></expr>, <expr><literal type="number">0x34c6ffea</literal></expr>, <expr><literal type="number">0xfe28ed61</literal></expr>, <expr><literal type="number">0xee7c3c73</literal></expr>,
		<expr><literal type="number">0x5d4a14d9</literal></expr>, <expr><literal type="number">0xe864b7e3</literal></expr>, <expr><literal type="number">0x42105d14</literal></expr>, <expr><literal type="number">0x203e13e0</literal></expr>,
		<expr><literal type="number">0x45eee2b6</literal></expr>, <expr><literal type="number">0xa3aaabea</literal></expr>, <expr><literal type="number">0xdb6c4f15</literal></expr>, <expr><literal type="number">0xfacb4fd0</literal></expr>,
		<expr><literal type="number">0xc742f442</literal></expr>, <expr><literal type="number">0xef6abbb5</literal></expr>, <expr><literal type="number">0x654f3b1d</literal></expr>, <expr><literal type="number">0x41cd2105</literal></expr>,
		<expr><literal type="number">0xd81e799e</literal></expr>, <expr><literal type="number">0x86854dc7</literal></expr>, <expr><literal type="number">0xe44b476a</literal></expr>, <expr><literal type="number">0x3d816250</literal></expr>,
		<expr><literal type="number">0xcf62a1f2</literal></expr>, <expr><literal type="number">0x5b8d2646</literal></expr>, <expr><literal type="number">0xfc8883a0</literal></expr>, <expr><literal type="number">0xc1c7b6a3</literal></expr>,
		<expr><literal type="number">0x7f1524c3</literal></expr>, <expr><literal type="number">0x69cb7492</literal></expr>, <expr><literal type="number">0x47848a0b</literal></expr>, <expr><literal type="number">0x5692b285</literal></expr>,
		<expr><literal type="number">0x095bbf00</literal></expr>, <expr><literal type="number">0xad19489d</literal></expr>, <expr><literal type="number">0x1462b174</literal></expr>, <expr><literal type="number">0x23820e00</literal></expr>,
		<expr><literal type="number">0x58428d2a</literal></expr>, <expr><literal type="number">0x0c55f5ea</literal></expr>, <expr><literal type="number">0x1dadf43e</literal></expr>, <expr><literal type="number">0x233f7061</literal></expr>,
		<expr><literal type="number">0x3372f092</literal></expr>, <expr><literal type="number">0x8d937e41</literal></expr>, <expr><literal type="number">0xd65fecf1</literal></expr>, <expr><literal type="number">0x6c223bdb</literal></expr>,
		<expr><literal type="number">0x7cde3759</literal></expr>, <expr><literal type="number">0xcbee7460</literal></expr>, <expr><literal type="number">0x4085f2a7</literal></expr>, <expr><literal type="number">0xce77326e</literal></expr>,
		<expr><literal type="number">0xa6078084</literal></expr>, <expr><literal type="number">0x19f8509e</literal></expr>, <expr><literal type="number">0xe8efd855</literal></expr>, <expr><literal type="number">0x61d99735</literal></expr>,
		<expr><literal type="number">0xa969a7aa</literal></expr>, <expr><literal type="number">0xc50c06c2</literal></expr>, <expr><literal type="number">0x5a04abfc</literal></expr>, <expr><literal type="number">0x800bcadc</literal></expr>,
		<expr><literal type="number">0x9e447a2e</literal></expr>, <expr><literal type="number">0xc3453484</literal></expr>, <expr><literal type="number">0xfdd56705</literal></expr>, <expr><literal type="number">0x0e1e9ec9</literal></expr>,
		<expr><literal type="number">0xdb73dbd3</literal></expr>, <expr><literal type="number">0x105588cd</literal></expr>, <expr><literal type="number">0x675fda79</literal></expr>, <expr><literal type="number">0xe3674340</literal></expr>,
		<expr><literal type="number">0xc5c43465</literal></expr>, <expr><literal type="number">0x713e38d8</literal></expr>, <expr><literal type="number">0x3d28f89e</literal></expr>, <expr><literal type="number">0xf16dff20</literal></expr>,
		<expr><literal type="number">0x153e21e7</literal></expr>, <expr><literal type="number">0x8fb03d4a</literal></expr>, <expr><literal type="number">0xe6e39f2b</literal></expr>, <expr><literal type="number">0xdb83adf7</literal></expr>,
		<expr><literal type="number">0xe93d5a68</literal></expr>, <expr><literal type="number">0x948140f7</literal></expr>, <expr><literal type="number">0xf64c261c</literal></expr>, <expr><literal type="number">0x94692934</literal></expr>,
		<expr><literal type="number">0x411520f7</literal></expr>, <expr><literal type="number">0x7602d4f7</literal></expr>, <expr><literal type="number">0xbcf46b2e</literal></expr>, <expr><literal type="number">0xd4a20068</literal></expr>,
		<expr><literal type="number">0xd4082471</literal></expr>, <expr><literal type="number">0x3320f46a</literal></expr>, <expr><literal type="number">0x43b7d4b7</literal></expr>, <expr><literal type="number">0x500061af</literal></expr>,
		<expr><literal type="number">0x1e39f62e</literal></expr>, <expr><literal type="number">0x97244546</literal></expr>, <expr><literal type="number">0x14214f74</literal></expr>, <expr><literal type="number">0xbf8b8840</literal></expr>,
		<expr><literal type="number">0x4d95fc1d</literal></expr>, <expr><literal type="number">0x96b591af</literal></expr>, <expr><literal type="number">0x70f4ddd3</literal></expr>, <expr><literal type="number">0x66a02f45</literal></expr>,
		<expr><literal type="number">0xbfbc09ec</literal></expr>, <expr><literal type="number">0x03bd9785</literal></expr>, <expr><literal type="number">0x7fac6dd0</literal></expr>, <expr><literal type="number">0x31cb8504</literal></expr>,
		<expr><literal type="number">0x96eb27b3</literal></expr>, <expr><literal type="number">0x55fd3941</literal></expr>, <expr><literal type="number">0xda2547e6</literal></expr>, <expr><literal type="number">0xabca0a9a</literal></expr>,
		<expr><literal type="number">0x28507825</literal></expr>, <expr><literal type="number">0x530429f4</literal></expr>, <expr><literal type="number">0x0a2c86da</literal></expr>, <expr><literal type="number">0xe9b66dfb</literal></expr>,
		<expr><literal type="number">0x68dc1462</literal></expr>, <expr><literal type="number">0xd7486900</literal></expr>, <expr><literal type="number">0x680ec0a4</literal></expr>, <expr><literal type="number">0x27a18dee</literal></expr>,
		<expr><literal type="number">0x4f3ffea2</literal></expr>, <expr><literal type="number">0xe887ad8c</literal></expr>, <expr><literal type="number">0xb58ce006</literal></expr>, <expr><literal type="number">0x7af4d6b6</literal></expr>,
		<expr><literal type="number">0xaace1e7c</literal></expr>, <expr><literal type="number">0xd3375fec</literal></expr>, <expr><literal type="number">0xce78a399</literal></expr>, <expr><literal type="number">0x406b2a42</literal></expr>,
		<expr><literal type="number">0x20fe9e35</literal></expr>, <expr><literal type="number">0xd9f385b9</literal></expr>, <expr><literal type="number">0xee39d7ab</literal></expr>, <expr><literal type="number">0x3b124e8b</literal></expr>,
		<expr><literal type="number">0x1dc9faf7</literal></expr>, <expr><literal type="number">0x4b6d1856</literal></expr>, <expr><literal type="number">0x26a36631</literal></expr>, <expr><literal type="number">0xeae397b2</literal></expr>,
		<expr><literal type="number">0x3a6efa74</literal></expr>, <expr><literal type="number">0xdd5b4332</literal></expr>, <expr><literal type="number">0x6841e7f7</literal></expr>, <expr><literal type="number">0xca7820fb</literal></expr>,
		<expr><literal type="number">0xfb0af54e</literal></expr>, <expr><literal type="number">0xd8feb397</literal></expr>, <expr><literal type="number">0x454056ac</literal></expr>, <expr><literal type="number">0xba489527</literal></expr>,
		<expr><literal type="number">0x55533a3a</literal></expr>, <expr><literal type="number">0x20838d87</literal></expr>, <expr><literal type="number">0xfe6ba9b7</literal></expr>, <expr><literal type="number">0xd096954b</literal></expr>,
		<expr><literal type="number">0x55a867bc</literal></expr>, <expr><literal type="number">0xa1159a58</literal></expr>, <expr><literal type="number">0xcca92963</literal></expr>, <expr><literal type="number">0x99e1db33</literal></expr>,
		<expr><literal type="number">0xa62a4a56</literal></expr>, <expr><literal type="number">0x3f3125f9</literal></expr>, <expr><literal type="number">0x5ef47e1c</literal></expr>, <expr><literal type="number">0x9029317c</literal></expr>,
		<expr><literal type="number">0xfdf8e802</literal></expr>, <expr><literal type="number">0x04272f70</literal></expr>, <expr><literal type="number">0x80bb155c</literal></expr>, <expr><literal type="number">0x05282ce3</literal></expr>,
		<expr><literal type="number">0x95c11548</literal></expr>, <expr><literal type="number">0xe4c66d22</literal></expr>, <expr><literal type="number">0x48c1133f</literal></expr>, <expr><literal type="number">0xc70f86dc</literal></expr>,
		<expr><literal type="number">0x07f9c9ee</literal></expr>, <expr><literal type="number">0x41041f0f</literal></expr>, <expr><literal type="number">0x404779a4</literal></expr>, <expr><literal type="number">0x5d886e17</literal></expr>,
		<expr><literal type="number">0x325f51eb</literal></expr>, <expr><literal type="number">0xd59bc0d1</literal></expr>, <expr><literal type="number">0xf2bcc18f</literal></expr>, <expr><literal type="number">0x41113564</literal></expr>,
		<expr><literal type="number">0x257b7834</literal></expr>, <expr><literal type="number">0x602a9c60</literal></expr>, <expr><literal type="number">0xdff8e8a3</literal></expr>, <expr><literal type="number">0x1f636c1b</literal></expr>,
		<expr><literal type="number">0x0e12b4c2</literal></expr>, <expr><literal type="number">0x02e1329e</literal></expr>, <expr><literal type="number">0xaf664fd1</literal></expr>, <expr><literal type="number">0xcad18115</literal></expr>,
		<expr><literal type="number">0x6b2395e0</literal></expr>, <expr><literal type="number">0x333e92e1</literal></expr>, <expr><literal type="number">0x3b240b62</literal></expr>, <expr><literal type="number">0xeebeb922</literal></expr>,
		<expr><literal type="number">0x85b2a20e</literal></expr>, <expr><literal type="number">0xe6ba0d99</literal></expr>, <expr><literal type="number">0xde720c8c</literal></expr>, <expr><literal type="number">0x2da2f728</literal></expr>,
		<expr><literal type="number">0xd0127845</literal></expr>, <expr><literal type="number">0x95b794fd</literal></expr>, <expr><literal type="number">0x647d0862</literal></expr>, <expr><literal type="number">0xe7ccf5f0</literal></expr>,
		<expr><literal type="number">0x5449a36f</literal></expr>, <expr><literal type="number">0x877d48fa</literal></expr>, <expr><literal type="number">0xc39dfd27</literal></expr>, <expr><literal type="number">0xf33e8d1e</literal></expr>,
		<expr><literal type="number">0x0a476341</literal></expr>, <expr><literal type="number">0x992eff74</literal></expr>, <expr><literal type="number">0x3a6f6eab</literal></expr>, <expr><literal type="number">0xf4f8fd37</literal></expr>,
		<expr><literal type="number">0xa812dc60</literal></expr>, <expr><literal type="number">0xa1ebddf8</literal></expr>, <expr><literal type="number">0x991be14c</literal></expr>, <expr><literal type="number">0xdb6e6b0d</literal></expr>,
		<expr><literal type="number">0xc67b5510</literal></expr>, <expr><literal type="number">0x6d672c37</literal></expr>, <expr><literal type="number">0x2765d43b</literal></expr>, <expr><literal type="number">0xdcd0e804</literal></expr>,
		<expr><literal type="number">0xf1290dc7</literal></expr>, <expr><literal type="number">0xcc00ffa3</literal></expr>, <expr><literal type="number">0xb5390f92</literal></expr>, <expr><literal type="number">0x690fed0b</literal></expr>,
		<expr><literal type="number">0x667b9ffb</literal></expr>, <expr><literal type="number">0xcedb7d9c</literal></expr>, <expr><literal type="number">0xa091cf0b</literal></expr>, <expr><literal type="number">0xd9155ea3</literal></expr>,
		<expr><literal type="number">0xbb132f88</literal></expr>, <expr><literal type="number">0x515bad24</literal></expr>, <expr><literal type="number">0x7b9479bf</literal></expr>, <expr><literal type="number">0x763bd6eb</literal></expr>,
		<expr><literal type="number">0x37392eb3</literal></expr>, <expr><literal type="number">0xcc115979</literal></expr>, <expr><literal type="number">0x8026e297</literal></expr>, <expr><literal type="number">0xf42e312d</literal></expr>,
		<expr><literal type="number">0x6842ada7</literal></expr>, <expr><literal type="number">0xc66a2b3b</literal></expr>, <expr><literal type="number">0x12754ccc</literal></expr>, <expr><literal type="number">0x782ef11c</literal></expr>,
		<expr><literal type="number">0x6a124237</literal></expr>, <expr><literal type="number">0xb79251e7</literal></expr>, <expr><literal type="number">0x06a1bbe6</literal></expr>, <expr><literal type="number">0x4bfb6350</literal></expr>,
		<expr><literal type="number">0x1a6b1018</literal></expr>, <expr><literal type="number">0x11caedfa</literal></expr>, <expr><literal type="number">0x3d25bdd8</literal></expr>, <expr><literal type="number">0xe2e1c3c9</literal></expr>,
		<expr><literal type="number">0x44421659</literal></expr>, <expr><literal type="number">0x0a121386</literal></expr>, <expr><literal type="number">0xd90cec6e</literal></expr>, <expr><literal type="number">0xd5abea2a</literal></expr>,
		<expr><literal type="number">0x64af674e</literal></expr>, <expr><literal type="number">0xda86a85f</literal></expr>, <expr><literal type="number">0xbebfe988</literal></expr>, <expr><literal type="number">0x64e4c3fe</literal></expr>,
		<expr><literal type="number">0x9dbc8057</literal></expr>, <expr><literal type="number">0xf0f7c086</literal></expr>, <expr><literal type="number">0x60787bf8</literal></expr>, <expr><literal type="number">0x6003604d</literal></expr>,
		<expr><literal type="number">0xd1fd8346</literal></expr>, <expr><literal type="number">0xf6381fb0</literal></expr>, <expr><literal type="number">0x7745ae04</literal></expr>, <expr><literal type="number">0xd736fccc</literal></expr>,
		<expr><literal type="number">0x83426b33</literal></expr>, <expr><literal type="number">0xf01eab71</literal></expr>, <expr><literal type="number">0xb0804187</literal></expr>, <expr><literal type="number">0x3c005e5f</literal></expr>,
		<expr><literal type="number">0x77a057be</literal></expr>, <expr><literal type="number">0xbde8ae24</literal></expr>, <expr><literal type="number">0x55464299</literal></expr>, <expr><literal type="number">0xbf582e61</literal></expr>,
		<expr><literal type="number">0x4e58f48f</literal></expr>, <expr><literal type="number">0xf2ddfda2</literal></expr>, <expr><literal type="number">0xf474ef38</literal></expr>, <expr><literal type="number">0x8789bdc2</literal></expr>,
		<expr><literal type="number">0x5366f9c3</literal></expr>, <expr><literal type="number">0xc8b38e74</literal></expr>, <expr><literal type="number">0xb475f255</literal></expr>, <expr><literal type="number">0x46fcd9b9</literal></expr>,
		<expr><literal type="number">0x7aeb2661</literal></expr>, <expr><literal type="number">0x8b1ddf84</literal></expr>, <expr><literal type="number">0x846a0e79</literal></expr>, <expr><literal type="number">0x915f95e2</literal></expr>,
		<expr><literal type="number">0x466e598e</literal></expr>, <expr><literal type="number">0x20b45770</literal></expr>, <expr><literal type="number">0x8cd55591</literal></expr>, <expr><literal type="number">0xc902de4c</literal></expr>,
		<expr><literal type="number">0xb90bace1</literal></expr>, <expr><literal type="number">0xbb8205d0</literal></expr>, <expr><literal type="number">0x11a86248</literal></expr>, <expr><literal type="number">0x7574a99e</literal></expr>,
		<expr><literal type="number">0xb77f19b6</literal></expr>, <expr><literal type="number">0xe0a9dc09</literal></expr>, <expr><literal type="number">0x662d09a1</literal></expr>, <expr><literal type="number">0xc4324633</literal></expr>,
		<expr><literal type="number">0xe85a1f02</literal></expr>, <expr><literal type="number">0x09f0be8c</literal></expr>, <expr><literal type="number">0x4a99a025</literal></expr>, <expr><literal type="number">0x1d6efe10</literal></expr>,
		<expr><literal type="number">0x1ab93d1d</literal></expr>, <expr><literal type="number">0x0ba5a4df</literal></expr>, <expr><literal type="number">0xa186f20f</literal></expr>, <expr><literal type="number">0x2868f169</literal></expr>,
		<expr><literal type="number">0xdcb7da83</literal></expr>, <expr><literal type="number">0x573906fe</literal></expr>, <expr><literal type="number">0xa1e2ce9b</literal></expr>, <expr><literal type="number">0x4fcd7f52</literal></expr>,
		<expr><literal type="number">0x50115e01</literal></expr>, <expr><literal type="number">0xa70683fa</literal></expr>, <expr><literal type="number">0xa002b5c4</literal></expr>, <expr><literal type="number">0x0de6d027</literal></expr>,
		<expr><literal type="number">0x9af88c27</literal></expr>, <expr><literal type="number">0x773f8641</literal></expr>, <expr><literal type="number">0xc3604c06</literal></expr>, <expr><literal type="number">0x61a806b5</literal></expr>,
		<expr><literal type="number">0xf0177a28</literal></expr>, <expr><literal type="number">0xc0f586e0</literal></expr>, <expr><literal type="number">0x006058aa</literal></expr>, <expr><literal type="number">0x30dc7d62</literal></expr>,
		<expr><literal type="number">0x11e69ed7</literal></expr>, <expr><literal type="number">0x2338ea63</literal></expr>, <expr><literal type="number">0x53c2dd94</literal></expr>, <expr><literal type="number">0xc2c21634</literal></expr>,
		<expr><literal type="number">0xbbcbee56</literal></expr>, <expr><literal type="number">0x90bcb6de</literal></expr>, <expr><literal type="number">0xebfc7da1</literal></expr>, <expr><literal type="number">0xce591d76</literal></expr>,
		<expr><literal type="number">0x6f05e409</literal></expr>, <expr><literal type="number">0x4b7c0188</literal></expr>, <expr><literal type="number">0x39720a3d</literal></expr>, <expr><literal type="number">0x7c927c24</literal></expr>,
		<expr><literal type="number">0x86e3725f</literal></expr>, <expr><literal type="number">0x724d9db9</literal></expr>, <expr><literal type="number">0x1ac15bb4</literal></expr>, <expr><literal type="number">0xd39eb8fc</literal></expr>,
		<expr><literal type="number">0xed545578</literal></expr>, <expr><literal type="number">0x08fca5b5</literal></expr>, <expr><literal type="number">0xd83d7cd3</literal></expr>, <expr><literal type="number">0x4dad0fc4</literal></expr>,
		<expr><literal type="number">0x1e50ef5e</literal></expr>, <expr><literal type="number">0xb161e6f8</literal></expr>, <expr><literal type="number">0xa28514d9</literal></expr>, <expr><literal type="number">0x6c51133c</literal></expr>,
		<expr><literal type="number">0x6fd5c7e7</literal></expr>, <expr><literal type="number">0x56e14ec4</literal></expr>, <expr><literal type="number">0x362abfce</literal></expr>, <expr><literal type="number">0xddc6c837</literal></expr>,
		<expr><literal type="number">0xd79a3234</literal></expr>, <expr><literal type="number">0x92638212</literal></expr>, <expr><literal type="number">0x670efa8e</literal></expr>, <expr><literal type="number">0x406000e0</literal></expr>,
		<expr><literal type="number">0x3a39ce37</literal></expr>, <expr><literal type="number">0xd3faf5cf</literal></expr>, <expr><literal type="number">0xabc27737</literal></expr>, <expr><literal type="number">0x5ac52d1b</literal></expr>,
		<expr><literal type="number">0x5cb0679e</literal></expr>, <expr><literal type="number">0x4fa33742</literal></expr>, <expr><literal type="number">0xd3822740</literal></expr>, <expr><literal type="number">0x99bc9bbe</literal></expr>,
		<expr><literal type="number">0xd5118e9d</literal></expr>, <expr><literal type="number">0xbf0f7315</literal></expr>, <expr><literal type="number">0xd62d1c7e</literal></expr>, <expr><literal type="number">0xc700c47b</literal></expr>,
		<expr><literal type="number">0xb78c1b6b</literal></expr>, <expr><literal type="number">0x21a19045</literal></expr>, <expr><literal type="number">0xb26eb1be</literal></expr>, <expr><literal type="number">0x6a366eb4</literal></expr>,
		<expr><literal type="number">0x5748ab2f</literal></expr>, <expr><literal type="number">0xbc946e79</literal></expr>, <expr><literal type="number">0xc6a376d2</literal></expr>, <expr><literal type="number">0x6549c2c8</literal></expr>,
		<expr><literal type="number">0x530ff8ee</literal></expr>, <expr><literal type="number">0x468dde7d</literal></expr>, <expr><literal type="number">0xd5730a1d</literal></expr>, <expr><literal type="number">0x4cd04dc6</literal></expr>,
		<expr><literal type="number">0x2939bbdb</literal></expr>, <expr><literal type="number">0xa9ba4650</literal></expr>, <expr><literal type="number">0xac9526e8</literal></expr>, <expr><literal type="number">0xbe5ee304</literal></expr>,
		<expr><literal type="number">0xa1fad5f0</literal></expr>, <expr><literal type="number">0x6a2d519a</literal></expr>, <expr><literal type="number">0x63ef8ce2</literal></expr>, <expr><literal type="number">0x9a86ee22</literal></expr>,
		<expr><literal type="number">0xc089c2b8</literal></expr>, <expr><literal type="number">0x43242ef6</literal></expr>, <expr><literal type="number">0xa51e03aa</literal></expr>, <expr><literal type="number">0x9cf2d0a4</literal></expr>,
		<expr><literal type="number">0x83c061ba</literal></expr>, <expr><literal type="number">0x9be96a4d</literal></expr>, <expr><literal type="number">0x8fe51550</literal></expr>, <expr><literal type="number">0xba645bd6</literal></expr>,
		<expr><literal type="number">0x2826a2f9</literal></expr>, <expr><literal type="number">0xa73a3ae1</literal></expr>, <expr><literal type="number">0x4ba99586</literal></expr>, <expr><literal type="number">0xef5562e9</literal></expr>,
		<expr><literal type="number">0xc72fefd3</literal></expr>, <expr><literal type="number">0xf752f7da</literal></expr>, <expr><literal type="number">0x3f046f69</literal></expr>, <expr><literal type="number">0x77fa0a59</literal></expr>,
		<expr><literal type="number">0x80e4a915</literal></expr>, <expr><literal type="number">0x87b08601</literal></expr>, <expr><literal type="number">0x9b09e6ad</literal></expr>, <expr><literal type="number">0x3b3ee593</literal></expr>,
		<expr><literal type="number">0xe990fd5a</literal></expr>, <expr><literal type="number">0x9e34d797</literal></expr>, <expr><literal type="number">0x2cf0b7d9</literal></expr>, <expr><literal type="number">0x022b8b51</literal></expr>,
		<expr><literal type="number">0x96d5ac3a</literal></expr>, <expr><literal type="number">0x017da67d</literal></expr>, <expr><literal type="number">0xd1cf3ed6</literal></expr>, <expr><literal type="number">0x7c7d2d28</literal></expr>,
		<expr><literal type="number">0x1f9f25cf</literal></expr>, <expr><literal type="number">0xadf2b89b</literal></expr>, <expr><literal type="number">0x5ad6b472</literal></expr>, <expr><literal type="number">0x5a88f54c</literal></expr>,
		<expr><literal type="number">0xe029ac71</literal></expr>, <expr><literal type="number">0xe019a5e6</literal></expr>, <expr><literal type="number">0x47b0acfd</literal></expr>, <expr><literal type="number">0xed93fa9b</literal></expr>,
		<expr><literal type="number">0xe8d3c48d</literal></expr>, <expr><literal type="number">0x283b57cc</literal></expr>, <expr><literal type="number">0xf8d56629</literal></expr>, <expr><literal type="number">0x79132e28</literal></expr>,
		<expr><literal type="number">0x785f0191</literal></expr>, <expr><literal type="number">0xed756055</literal></expr>, <expr><literal type="number">0xf7960e44</literal></expr>, <expr><literal type="number">0xe3d35e8c</literal></expr>,
		<expr><literal type="number">0x15056dd4</literal></expr>, <expr><literal type="number">0x88f46dba</literal></expr>, <expr><literal type="number">0x03a16125</literal></expr>, <expr><literal type="number">0x0564f0bd</literal></expr>,
		<expr><literal type="number">0xc3eb9e15</literal></expr>, <expr><literal type="number">0x3c9057a2</literal></expr>, <expr><literal type="number">0x97271aec</literal></expr>, <expr><literal type="number">0xa93a072a</literal></expr>,
		<expr><literal type="number">0x1b3f6d9b</literal></expr>, <expr><literal type="number">0x1e6321f5</literal></expr>, <expr><literal type="number">0xf59c66fb</literal></expr>, <expr><literal type="number">0x26dcf319</literal></expr>,
		<expr><literal type="number">0x7533d928</literal></expr>, <expr><literal type="number">0xb155fdf5</literal></expr>, <expr><literal type="number">0x03563482</literal></expr>, <expr><literal type="number">0x8aba3cbb</literal></expr>,
		<expr><literal type="number">0x28517711</literal></expr>, <expr><literal type="number">0xc20ad9f8</literal></expr>, <expr><literal type="number">0xabcc5167</literal></expr>, <expr><literal type="number">0xccad925f</literal></expr>,
		<expr><literal type="number">0x4de81751</literal></expr>, <expr><literal type="number">0x3830dc8e</literal></expr>, <expr><literal type="number">0x379d5862</literal></expr>, <expr><literal type="number">0x9320f991</literal></expr>,
		<expr><literal type="number">0xea7a90c2</literal></expr>, <expr><literal type="number">0xfb3e7bce</literal></expr>, <expr><literal type="number">0x5121ce64</literal></expr>, <expr><literal type="number">0x774fbe32</literal></expr>,
		<expr><literal type="number">0xa8b6e37e</literal></expr>, <expr><literal type="number">0xc3293d46</literal></expr>, <expr><literal type="number">0x48de5369</literal></expr>, <expr><literal type="number">0x6413e680</literal></expr>,
		<expr><literal type="number">0xa2ae0810</literal></expr>, <expr><literal type="number">0xdd6db224</literal></expr>, <expr><literal type="number">0x69852dfd</literal></expr>, <expr><literal type="number">0x09072166</literal></expr>,
		<expr><literal type="number">0xb39a460a</literal></expr>, <expr><literal type="number">0x6445c0dd</literal></expr>, <expr><literal type="number">0x586cdecf</literal></expr>, <expr><literal type="number">0x1c20c8ae</literal></expr>,
		<expr><literal type="number">0x5bbef7dd</literal></expr>, <expr><literal type="number">0x1b588d40</literal></expr>, <expr><literal type="number">0xccd2017f</literal></expr>, <expr><literal type="number">0x6bb4e3bb</literal></expr>,
		<expr><literal type="number">0xdda26a7e</literal></expr>, <expr><literal type="number">0x3a59ff45</literal></expr>, <expr><literal type="number">0x3e350a44</literal></expr>, <expr><literal type="number">0xbcb4cdd5</literal></expr>,
		<expr><literal type="number">0x72eacea8</literal></expr>, <expr><literal type="number">0xfa6484bb</literal></expr>, <expr><literal type="number">0x8d6612ae</literal></expr>, <expr><literal type="number">0xbf3c6f47</literal></expr>,
		<expr><literal type="number">0xd29be463</literal></expr>, <expr><literal type="number">0x542f5d9e</literal></expr>, <expr><literal type="number">0xaec2771b</literal></expr>, <expr><literal type="number">0xf64e6370</literal></expr>,
		<expr><literal type="number">0x740e0d8d</literal></expr>, <expr><literal type="number">0xe75b1357</literal></expr>, <expr><literal type="number">0xf8721671</literal></expr>, <expr><literal type="number">0xaf537d5d</literal></expr>,
		<expr><literal type="number">0x4040cb08</literal></expr>, <expr><literal type="number">0x4eb4e2cc</literal></expr>, <expr><literal type="number">0x34d2466a</literal></expr>, <expr><literal type="number">0x0115af84</literal></expr>,
		<expr><literal type="number">0xe1b00428</literal></expr>, <expr><literal type="number">0x95983a1d</literal></expr>, <expr><literal type="number">0x06b89fb4</literal></expr>, <expr><literal type="number">0xce6ea048</literal></expr>,
		<expr><literal type="number">0x6f3f3b82</literal></expr>, <expr><literal type="number">0x3520ab82</literal></expr>, <expr><literal type="number">0x011a1d4b</literal></expr>, <expr><literal type="number">0x277227f8</literal></expr>,
		<expr><literal type="number">0x611560b1</literal></expr>, <expr><literal type="number">0xe7933fdc</literal></expr>, <expr><literal type="number">0xbb3a792b</literal></expr>, <expr><literal type="number">0x344525bd</literal></expr>,
		<expr><literal type="number">0xa08839e1</literal></expr>, <expr><literal type="number">0x51ce794b</literal></expr>, <expr><literal type="number">0x2f32c9b7</literal></expr>, <expr><literal type="number">0xa01fbac9</literal></expr>,
		<expr><literal type="number">0xe01cc87e</literal></expr>, <expr><literal type="number">0xbcc7d1f6</literal></expr>, <expr><literal type="number">0xcf0111c3</literal></expr>, <expr><literal type="number">0xa1e8aac7</literal></expr>,
		<expr><literal type="number">0x1a908749</literal></expr>, <expr><literal type="number">0xd44fbd9a</literal></expr>, <expr><literal type="number">0xd0dadecb</literal></expr>, <expr><literal type="number">0xd50ada38</literal></expr>,
		<expr><literal type="number">0x0339c32a</literal></expr>, <expr><literal type="number">0xc6913667</literal></expr>, <expr><literal type="number">0x8df9317c</literal></expr>, <expr><literal type="number">0xe0b12b4f</literal></expr>,
		<expr><literal type="number">0xf79e59b7</literal></expr>, <expr><literal type="number">0x43f5bb3a</literal></expr>, <expr><literal type="number">0xf2d519ff</literal></expr>, <expr><literal type="number">0x27d9459c</literal></expr>,
		<expr><literal type="number">0xbf97222c</literal></expr>, <expr><literal type="number">0x15e6fc2a</literal></expr>, <expr><literal type="number">0x0f91fc71</literal></expr>, <expr><literal type="number">0x9b941525</literal></expr>,
		<expr><literal type="number">0xfae59361</literal></expr>, <expr><literal type="number">0xceb69ceb</literal></expr>, <expr><literal type="number">0xc2a86459</literal></expr>, <expr><literal type="number">0x12baa8d1</literal></expr>,
		<expr><literal type="number">0xb6c1075e</literal></expr>, <expr><literal type="number">0xe3056a0c</literal></expr>, <expr><literal type="number">0x10d25065</literal></expr>, <expr><literal type="number">0xcb03a442</literal></expr>,
		<expr><literal type="number">0xe0ec6e0e</literal></expr>, <expr><literal type="number">0x1698db3b</literal></expr>, <expr><literal type="number">0x4c98a0be</literal></expr>, <expr><literal type="number">0x3278e964</literal></expr>,
		<expr><literal type="number">0x9f1f9532</literal></expr>, <expr><literal type="number">0xe0d392df</literal></expr>, <expr><literal type="number">0xd3a0342b</literal></expr>, <expr><literal type="number">0x8971f21e</literal></expr>,
		<expr><literal type="number">0x1b0a7441</literal></expr>, <expr><literal type="number">0x4ba3348c</literal></expr>, <expr><literal type="number">0xc5be7120</literal></expr>, <expr><literal type="number">0xc37632d8</literal></expr>,
		<expr><literal type="number">0xdf359f8d</literal></expr>, <expr><literal type="number">0x9b992f2e</literal></expr>, <expr><literal type="number">0xe60b6f47</literal></expr>, <expr><literal type="number">0x0fe3f11d</literal></expr>,
		<expr><literal type="number">0xe54cda54</literal></expr>, <expr><literal type="number">0x1edad891</literal></expr>, <expr><literal type="number">0xce6279cf</literal></expr>, <expr><literal type="number">0xcd3e7e6f</literal></expr>,
		<expr><literal type="number">0x1618b166</literal></expr>, <expr><literal type="number">0xfd2c1d05</literal></expr>, <expr><literal type="number">0x848fd2c5</literal></expr>, <expr><literal type="number">0xf6fb2299</literal></expr>,
		<expr><literal type="number">0xf523f357</literal></expr>, <expr><literal type="number">0xa6327623</literal></expr>, <expr><literal type="number">0x93a83531</literal></expr>, <expr><literal type="number">0x56cccd02</literal></expr>,
		<expr><literal type="number">0xacf08162</literal></expr>, <expr><literal type="number">0x5a75ebb5</literal></expr>, <expr><literal type="number">0x6e163697</literal></expr>, <expr><literal type="number">0x88d273cc</literal></expr>,
		<expr><literal type="number">0xde966292</literal></expr>, <expr><literal type="number">0x81b949d0</literal></expr>, <expr><literal type="number">0x4c50901b</literal></expr>, <expr><literal type="number">0x71c65614</literal></expr>,
		<expr><literal type="number">0xe6c6c7bd</literal></expr>, <expr><literal type="number">0x327a140a</literal></expr>, <expr><literal type="number">0x45e1d006</literal></expr>, <expr><literal type="number">0xc3f27b9a</literal></expr>,
		<expr><literal type="number">0xc9aa53fd</literal></expr>, <expr><literal type="number">0x62a80f00</literal></expr>, <expr><literal type="number">0xbb25bfe2</literal></expr>, <expr><literal type="number">0x35bdd2f6</literal></expr>,
		<expr><literal type="number">0x71126905</literal></expr>, <expr><literal type="number">0xb2040222</literal></expr>, <expr><literal type="number">0xb6cbcf7c</literal></expr>, <expr><literal type="number">0xcd769c2b</literal></expr>,
		<expr><literal type="number">0x53113ec0</literal></expr>, <expr><literal type="number">0x1640e3d3</literal></expr>, <expr><literal type="number">0x38abbd60</literal></expr>, <expr><literal type="number">0x2547adf0</literal></expr>,
		<expr><literal type="number">0xba38209c</literal></expr>, <expr><literal type="number">0xf746ce76</literal></expr>, <expr><literal type="number">0x77afa1c5</literal></expr>, <expr><literal type="number">0x20756060</literal></expr>,
		<expr><literal type="number">0x85cbfe4e</literal></expr>, <expr><literal type="number">0x8ae88dd8</literal></expr>, <expr><literal type="number">0x7aaaf9b0</literal></expr>, <expr><literal type="number">0x4cf9aa7e</literal></expr>,
		<expr><literal type="number">0x1948c25c</literal></expr>, <expr><literal type="number">0x02fb8a8c</literal></expr>, <expr><literal type="number">0x01c36ae4</literal></expr>, <expr><literal type="number">0xd6ebe1f9</literal></expr>,
		<expr><literal type="number">0x90d4f869</literal></expr>, <expr><literal type="number">0xa65cdea0</literal></expr>, <expr><literal type="number">0x3f09252d</literal></expr>, <expr><literal type="number">0xc208e69f</literal></expr>,
		<expr><literal type="number">0xb74e6132</literal></expr>, <expr><literal type="number">0xce77e25b</literal></expr>, <expr><literal type="number">0x578fdfe3</literal></expr>, <expr><literal type="number">0x3ac372e6</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// bcrypt IV: "OrpheanBeholderScryDoubt". The C implementation calls</comment>
	<comment type="line">// this "ciphertext", but it is really plaintext or an IV. We keep</comment>
	<comment type="line">// the name to make code comparison easier.</comment>
	<decl_stmt><decl><specifier>static</specifier> <specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name><name>bf_crypt_ciphertext</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x4f727068</literal></expr>, <expr><literal type="number">0x65616e42</literal></expr>, <expr><literal type="number">0x65686f6c</literal></expr>,
		<expr><literal type="number">0x64657253</literal></expr>, <expr><literal type="number">0x63727944</literal></expr>, <expr><literal type="number">0x6f756274</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// Table for Base64 encoding</comment>
	<decl_stmt><decl><specifier>static</specifier> <specifier>private</specifier> <type><specifier>final</specifier> <name>char</name></type> <name><name>base64_code</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'J'</literal></expr>,
		<expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>,
		<expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'h'</literal></expr>,
		<expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'j'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>,
		<expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>,
		<expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// Table for Base64 decoding</comment>
	<decl_stmt><decl><specifier>static</specifier> <specifier>private</specifier> <type><specifier>final</specifier> <name>byte</name></type> <name><name>index_64</name><index>[]</index></name> <init>= <expr><block>{
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>,
		<expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
		<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>,
		<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>,
		<expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>,
		<expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>,
		<expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// Expanded Blowfish key</comment>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name><name>P</name><index>[]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name><name>S</name><index>[]</index></name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Encode a byte array using bcrypt's slightly-modified base64
	 * encoding scheme. Note that this is *not* compatible with
	 * the standard MIME-base64 encoding.
	 *
	 * @param d	the byte array to encode
	 * @param len	the number of bytes to encode
	 * @return	base64-encoded string
	 * @exception IllegalArgumentException if the length is invalid
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encode_base64</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>d</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
		<throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>rs</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <name><name>d</name><operator>.</operator><name>length</name></name></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Invalid len"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

		<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><operator>(</operator><name>c1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>|=</operator> <operator>(</operator><name>c2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>|=</operator> <operator>(</operator><name>c2</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>base64_code</name><index>[<expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<return>return <expr><call><name><name>rs</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Look up the 3 bits base64-encoded by the specified character,
	 * range-checking againt conversion table
	 * @param x	the base64-encoded value
	 * @return	the decoded value of x
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>byte</name></type> <name>char64</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>x</name> <argument_list type="generic">&lt; <argument><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name>x</name></argument> &gt;</argument_list></name> <name><name>index_64</name><operator>.</operator><name>length</name></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
		<return>return <expr><name><name>index_64</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>]</index></name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Decode a string encoded using bcrypt's base64 scheme to a
	 * byte array. Note that this is *not* compatible with
	 * the standard MIME-base64 encoding.
	 * @param s	the string to decode
	 * @param maxolen	the maximum number of bytes to decode
	 * @return	an array containing the decoded bytes
	 * @throws IllegalArgumentException if maxolen is invalid
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode_base64</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxolen</name></decl></parameter>)</parameter_list>
		<throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>rs</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slen</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>ret</name><index>[]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>maxolen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Invalid maxolen"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

		<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>slen</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>olen</name> <operator>&lt;</operator> <name>maxolen</name></expr>)</condition> <block>{
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>c1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>c2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>o</name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>|=</operator> <operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><operator>++</operator><name>olen</name> <operator>&gt;=</operator> <name>maxolen</name> <operator>||</operator> <name>off</name> <operator>&gt;=</operator> <name>slen</name></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>c3</name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>c3</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>o</name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>|=</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0x3c</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><operator>++</operator><name>olen</name> <operator>&gt;=</operator> <name>maxolen</name> <operator>||</operator> <name>off</name> <operator>&gt;=</operator> <name>slen</name></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>c4</name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>o</name> <operator>|=</operator> <name>c4</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>olen</name></expr>;</expr_stmt>
		}</block></while>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>olen</name></expr>]</index></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name>olen</name></expr>;</condition> <incr><expr><name>off</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>ret</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><call><name><name>rs</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<return>return <expr><name>ret</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Blowfish encipher a single 64-bit block encoded as
	 * two 32-bit halves
	 * @param lr	an array containing the two 32-bit half blocks
	 * @param off	the position in the array of the blocks
	 */</comment>
	<function><specifier>private</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>encipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>lr</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>lr</name><index>[<expr><name>off</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name><name>lr</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>l</name> <operator>^=</operator> <name><name>P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>BLOWFISH_NUM_ROUNDS</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition><incr/>)</control> <block>{
			<comment type="line">// Feistel substitution on left word</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>S</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>S</name><index>[<expr><literal type="number">0x100</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>^=</operator> <name><name>S</name><index>[<expr><literal type="number">0x200</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>S</name><index>[<expr><literal type="number">0x300</literal> <operator>|</operator> <operator>(</operator><name>l</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>n</name> <operator>^</operator> <name><name>P</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<comment type="line">// Feistel substitution on right word</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>S</name><index>[<expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>S</name><index>[<expr><literal type="number">0x100</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>^=</operator> <name><name>S</name><index>[<expr><literal type="number">0x200</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>S</name><index>[<expr><literal type="number">0x300</literal> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>n</name> <operator>^</operator> <name><name>P</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>lr</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>^</operator> <name><name>P</name><index>[<expr><name>BLOWFISH_NUM_ROUNDS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lr</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Cycically extract a word of key material
	 * @param data	the string to extract the data from
	 * @param offp	a "pointer" (as a one-entry array) to the
	 * current offset into data
	 * @return	the next word of material from data
	 */</comment>
	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>streamtoword</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>offp</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name><name>offp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>(</operator><name>word</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>off</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>data</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name><name>offp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
		<return>return <expr><name>word</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Initialise the Blowfish key schedule
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>init_key</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>P</name> <operator>=</operator> <operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><call><name><name>P_orig</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>S</name> <operator>=</operator> <operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><call><name><name>S_orig</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Key the Blowfish cipher
	 * @param key	an array containing the key
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>key</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>key</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>koffp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>lr</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>plen</name> <init>= <expr><name><name>P</name><operator>.</operator><name>length</name></name></expr></init></decl>, <decl><type ref="prev"/><name>slen</name> <init>= <expr><name><name>S</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>plen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>koffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>plen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>lr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>lr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Perform the "enhanced key schedule" step described by
	 * Provos and Mazieres in "A Future-Adaptable Password Scheme"
	 * http://www.openbsd.org/papers/bcrypt-paper.ps
	 * @param data	salt information
	 * @param key	password information
	 */</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>ekskey</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name><name>key</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>koffp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>doffp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>lr</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>plen</name> <init>= <expr><name><name>P</name><operator>.</operator><name>length</name></name></expr></init></decl>, <decl><type ref="prev"/><name>slen</name> <init>= <expr><name><name>S</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>plen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>koffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>plen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>doffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>doffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>lr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>doffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <call><name>streamtoword</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>doffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>lr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Perform the central password hashing step in the
	 * bcrypt scheme
	 * @param password	the password to hash
	 * @param salt	the binary salt to hash with the password
	 * @param log_rounds	the binary logarithm of the number
	 * of rounds of hashing to apply
	 * @param cdata         the plaintext to encrypt
	 * @return	an array containing the binary hashed password
	 */</comment>
	<function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>crypt_raw</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name><name>password</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name><name>salt</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_rounds</name></decl></parameter>,
	    <parameter><decl><type><name>int</name></type> <name><name>cdata</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><name><name>cdata</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>ret</name><index>[]</index></name></decl>;</decl_stmt>

		<if>if <condition>(<expr><name><name>log_rounds</name> <argument_list type="generic">&lt; <argument><literal type="number">4</literal> <operator>||</operator> <name>log_rounds</name></argument> &gt;</argument_list></name> <literal type="number">30</literal></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Bad number of rounds"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
		<expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log_rounds</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>salt</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>BCRYPT_SALT_LEN</name></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Bad salt length"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

		<expr_stmt><expr><call><name>init_key</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ekskey</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>rounds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>key</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>key</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>clen</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name>encipher</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		}</block></for>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>clen</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>clen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>cdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>cdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>cdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name><name>cdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<return>return <expr><name>ret</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Hash a password using the OpenBSD bcrypt scheme
	 * @param password	the password to hash
	 * @param salt	the salt to hash with (perhaps generated
	 * using BCrypt.gensalt)
	 * @return	the hashed password
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>hashpw</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>salt</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>BCrypt</name></type> <name>B</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>real_salt</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>passwordb</name><index>[]</index></name></decl>, <decl><type ref="prev"/><name><name>saltb</name><index>[]</index></name></decl>, <decl><type ref="prev"/><name><name>hashed</name><index>[]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>minor</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>rs</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'$'</literal> <operator>||</operator> <call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'2'</literal></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Invalid salt version"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
		<if>if <condition>(<expr><call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then>
		<else>else <block>{
			<expr_stmt><expr><name>minor</name> <operator>=</operator> <call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>minor</name> <operator>!=</operator> <literal type="char">'a'</literal> <operator>||</operator> <call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><then>
				<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Invalid salt revision"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
			<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		}</block></else></if>

		<comment type="line">// Extract number of rounds</comment>
		<if>if <condition>(<expr><call><name><name>salt</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="char">'$'</literal></expr>)</condition><then>
			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name> <argument_list>(<argument><expr><literal type="string">"Missing salt rounds"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
		<expr_stmt><expr><name>rounds</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>salt</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>real_salt</name> <operator>=</operator> <call><name><name>salt</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>passwordb</name> <operator>=</operator> <operator>(</operator><name>password</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>minor</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr> ?</condition><then> <expr><literal type="string">"\000"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>uee</name></decl></parameter>)</parameter_list> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"UTF-8 is not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></catch></try>

		<expr_stmt><expr><name>saltb</name> <operator>=</operator> <call><name>decode_base64</name><argument_list>(<argument><expr><name>real_salt</name></expr></argument>, <argument><expr><name>BCRYPT_SALT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>new</operator> <call><name>BCrypt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashed</name> <operator>=</operator> <call><name><name>B</name><operator>.</operator><name>crypt_raw</name></name><argument_list>(<argument><expr><name>passwordb</name></expr></argument>, <argument><expr><name>saltb</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>,
		    <argument><expr><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><call><name><name>bf_crypt_ciphertext</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>minor</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>rounds</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>rounds</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
			    <argument><expr><literal type="string">"rounds exceeds maximum (30)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>encode_base64</name><argument_list>(<argument><expr><name>saltb</name></expr></argument>, <argument><expr><name><name>saltb</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>encode_base64</name><argument_list>(<argument><expr><name>hashed</name></expr></argument>,
		    <argument><expr><name><name>bf_crypt_ciphertext</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name><name>rs</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Generate a salt for use with the BCrypt.hashpw() method
	 * @param log_rounds	the log2 of the number of rounds of
	 * hashing to apply - the work factor therefore increases as
	 * 2**log_rounds.
	 * @param random		an instance of SecureRandom to use
	 * @return	an encoded salt value
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>gensalt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>log_rounds</name></decl></parameter>, <parameter><decl><type><name>SecureRandom</name></type> <name>random</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>rs</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>rnd</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>BCRYPT_SALT_LEN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$2a$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>log_rounds</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>log_rounds</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
			    <argument><expr><literal type="string">"log_rounds exceeds maximum (30)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>log_rounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>encode_base64</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><name><name>rnd</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name><name>rs</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Generate a salt for use with the BCrypt.hashpw() method
	 * @param log_rounds	the log2 of the number of rounds of
	 * hashing to apply - the work factor therefore increases as
	 * 2**log_rounds.
	 * @return	an encoded salt value
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>gensalt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>log_rounds</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>gensalt</name><argument_list>(<argument><expr><name>log_rounds</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Generate a salt for use with the BCrypt.hashpw() method,
	 * selecting a reasonable default for the number of hashing
	 * rounds to apply
	 * @return	an encoded salt value
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>gensalt</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name>gensalt</name><argument_list>(<argument><expr><name>GENSALT_DEFAULT_LOG2_ROUNDS</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Check that a plaintext password matches a previously hashed
	 * one
	 * @param plaintext	the plaintext password to verify
	 * @param hashed	the previously-hashed password
	 * @return	true if the passwords match, false otherwise
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkpw</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>plaintext</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>hashed</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>byte</name></type> <name><name>hashed_bytes</name><index>[]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>try_bytes</name><index>[]</index></name></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>try_pw</name> <init>= <expr><call><name>hashpw</name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>, <argument><expr><name>hashed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>hashed_bytes</name> <operator>=</operator> <call><name><name>hashed</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>try_bytes</name> <operator>=</operator> <call><name><name>try_pw</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>uee</name></decl></parameter>)</parameter_list> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></catch></try>
		<if>if <condition>(<expr><name><name>hashed_bytes</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name><name>try_bytes</name><operator>.</operator><name>length</name></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>byte</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>try_bytes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>|=</operator> <name><name>hashed_bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>try_bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
	}</block></function>
}</block></class>
</unit>

</unit>

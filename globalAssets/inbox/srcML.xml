<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\FakeDesktop\Coding\TEAMFLEX\dit355\Middleware\Gitgetter\FileStorer\Jorelsin/rpg-game-manager.java"><import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>filechooser</name><operator>.</operator><name>FileNameExtensionFilter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<class><specifier>public</specifier> class <name>GameFrame</name> <block>{

    <decl_stmt><decl><type><name>String</name></type> <name>CampaingName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JFrame</name></type> <name>frame</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JPanel</name></type> <name>panel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JsonReader</name></type> <name>reader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JFileChooser</name></type> <name>fileChooser</name></decl>;</decl_stmt>

    <constructor><name>GameFrame</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>CampaingName</name> <operator>=</operator> <call><name>getChooser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>frame</name></name> <operator>=</operator> <operator>new</operator> <call><name>JFrame</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>panel</name> <operator>=</operator> <operator>new</operator> <call><name>JPanel</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>JsonReader</name><argument_list>(<argument><expr><name>CampaingName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setGameFrame</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>getAppSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setGameFrame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>size</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPanel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>JLabel</name></type> <name>getCampaingName</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>CName</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getCName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JLabel</name></type> <name>Name</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><name>CName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Name</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Name</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"Arial"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Name</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>Name</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setPanel</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>panel</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">150</literal></expr></argument>,<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>panel</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>DARK_GRAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>panel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getCampaingName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getChooser</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>json</name> <init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>fileChooser</name> <operator>=</operator> <operator>new</operator> <call><name>JFileChooser</name><argument_list>(<argument><expr><literal type="string">"Campaigns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileNameExtensionFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>FileNameExtensionFilter</name><argument_list>(<argument><expr><literal type="string">"Campaings"</literal></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fileChooser</name><operator>.</operator><name>setFileFilter</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>returnVal</name> <init>= <expr><call><name><name>fileChooser</name><operator>.</operator><name>showOpenDialog</name></name><argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>returnVal</name> <operator>==</operator> <name><name>JFileChooser</name><operator>.</operator><name>APPROVE_OPTION</name></name></expr>)</condition><then><block>{
          <return>return <expr><name>json</name> <operator>=</operator> <call><name><name>fileChooser</name><operator>.</operator><name>getSelectedFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name>json</name> <operator>==</operator> <literal type="string">""</literal></expr>)</condition><then><block>{
           <expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>getChooser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>json</name></expr>;</return>
    }</block></function>
}</block></class>
 <import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>JsonReader</name> <block>{

    <decl_stmt><decl><type><name>String</name></type> <name>Cname</name></decl>;</decl_stmt>

    <constructor><name>JsonReader</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>Cname</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>Cname</name></name> <operator>=</operator> <name>Cname</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getCName</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>jsonText</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSONObject</name></type> <name>reader</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try<block>{
            <expr_stmt><expr><name>jsonText</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>Cname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>jsonText</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"CampaingInfo"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"Name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>name</name></expr>;</return>

        }</block><catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"ERROR!"</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>int</name><index>[]</index></name></type> <name>getAppSize</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>jsonText</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSONObject</name></type> <name>parser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">1080</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">780</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>size</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

        <try>try<block>{
            <expr_stmt><expr><name>jsonText</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>Cname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>parser</name> <operator>=</operator> <operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>jsonText</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"AppInfo"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><literal type="string">"appW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"AppInfo"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><literal type="string">"appH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
            <return>return <expr><name>size</name></expr>;</return>

        }</block><catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

}</block></class>
 <import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>JsonWriter</name> <block>{
    <decl_stmt><decl><type><name>FileWriter</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>Cname</name></decl>;</decl_stmt>

    <constructor><name>JsonWriter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>Cname</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>Cname</name></name> <operator>=</operator> <name>Cname</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{

        <decl_stmt><decl><type><name>String</name></type> <name>jsonText</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSONObject</name></type> <name>writer</name></decl>;</decl_stmt>


            <expr_stmt><expr><name>jsonText</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"Campaigns/Oikos/Oikos"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>jsonText</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>JSONObject</name></type> <name>info</name> <init>= <expr><call><name><name>writer</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"CampaingInfo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"Name"</literal></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><literal type="string">"Campaigns/Oikos/Oikos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>writer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>
}</block></class>
 <import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>MainWindow</name> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>UnsupportedLookAndFeelException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>UIManager</name><operator>.</operator><name>setLookAndFeel</name></name><argument_list>(<argument><expr><literal type="string">"com.sun.java.swing.plaf.windows.WindowsLookAndFeel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>appName</name> <init>= <expr><literal type="string">"JorelsinÂ´s Game Manager"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GameFrame</name></type> <name>mainwindow</name> <init>= <expr><operator>new</operator> <call><name>GameFrame</name><argument_list>(<argument><expr><name>appName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    }</block></function>

}</block></class>
 <import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>filechooser</name><operator>.</operator><name>FileNameExtensionFilter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<class><specifier>public</specifier> class <name>GameFrame</name> <block>{

    <decl_stmt><decl><type><name>String</name></type> <name>CampaingName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JFrame</name></type> <name>frame</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JPanel</name></type> <name>panel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JsonReader</name></type> <name>reader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JFileChooser</name></type> <name>fileChooser</name></decl>;</decl_stmt>

    <constructor><name>GameFrame</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>CampaingName</name> <operator>=</operator> <call><name>getChooser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>frame</name></name> <operator>=</operator> <operator>new</operator> <call><name>JFrame</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>panel</name> <operator>=</operator> <operator>new</operator> <call><name>JPanel</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>JsonReader</name><argument_list>(<argument><expr><name>CampaingName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setGameFrame</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>getAppSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setGameFrame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>size</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPanel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>JLabel</name></type> <name>getCampaingName</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>CName</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getCName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JLabel</name></type> <name>Name</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><name>CName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Name</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Name</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"Arial"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Name</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>Name</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setPanel</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>panel</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">150</literal></expr></argument>,<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>panel</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>DARK_GRAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>panel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getCampaingName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getChooser</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>json</name> <init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>fileChooser</name> <operator>=</operator> <operator>new</operator> <call><name>JFileChooser</name><argument_list>(<argument><expr><literal type="string">"Campaigns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileNameExtensionFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>FileNameExtensionFilter</name><argument_list>(<argument><expr><literal type="string">"Campaings"</literal></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fileChooser</name><operator>.</operator><name>setFileFilter</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>returnVal</name> <init>= <expr><call><name><name>fileChooser</name><operator>.</operator><name>showOpenDialog</name></name><argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>returnVal</name> <operator>==</operator> <name><name>JFileChooser</name><operator>.</operator><name>APPROVE_OPTION</name></name></expr>)</condition><then><block>{
          <return>return <expr><name>json</name> <operator>=</operator> <call><name><name>fileChooser</name><operator>.</operator><name>getSelectedFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name>json</name> <operator>==</operator> <literal type="string">""</literal></expr>)</condition><then><block>{
           <expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>getChooser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>json</name></expr>;</return>
    }</block></function>
}</block></class>
 <import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>JsonReader</name> <block>{

    <decl_stmt><decl><type><name>String</name></type> <name>Cname</name></decl>;</decl_stmt>

    <constructor><name>JsonReader</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>Cname</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>Cname</name></name> <operator>=</operator> <name>Cname</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getCName</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>jsonText</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSONObject</name></type> <name>reader</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try<block>{
            <expr_stmt><expr><name>jsonText</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>Cname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>jsonText</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"CampaingInfo"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"Name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>name</name></expr>;</return>

        }</block><catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"ERROR!"</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>int</name><index>[]</index></name></type> <name>getAppSize</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>jsonText</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSONObject</name></type> <name>parser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">1080</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">780</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>size</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

        <try>try<block>{
            <expr_stmt><expr><name>jsonText</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>Cname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>parser</name> <operator>=</operator> <operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>jsonText</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"AppInfo"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><literal type="string">"appW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"AppInfo"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><literal type="string">"appH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
            <return>return <expr><name>size</name></expr>;</return>

        }</block><catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

}</block></class>
 <import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>JsonWriter</name> <block>{
    <decl_stmt><decl><type><name>FileWriter</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>Cname</name></decl>;</decl_stmt>

    <constructor><name>JsonWriter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>Cname</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>Cname</name></name> <operator>=</operator> <name>Cname</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{

        <decl_stmt><decl><type><name>String</name></type> <name>jsonText</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSONObject</name></type> <name>writer</name></decl>;</decl_stmt>


            <expr_stmt><expr><name>jsonText</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"Campaigns/Oikos/Oikos"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>jsonText</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>JSONObject</name></type> <name>info</name> <init>= <expr><call><name><name>writer</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"CampaingInfo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"Name"</literal></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><literal type="string">"Campaigns/Oikos/Oikos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>writer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>
}</block></class>
 <import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>MainWindow</name> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>UnsupportedLookAndFeelException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>UIManager</name><operator>.</operator><name>setLookAndFeel</name></name><argument_list>(<argument><expr><literal type="string">"com.sun.java.swing.plaf.windows.WindowsLookAndFeel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>appName</name> <init>= <expr><literal type="string">"JorelsinÂ´s Game Manager"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GameFrame</name></type> <name>mainwindow</name> <init>= <expr><operator>new</operator> <call><name>GameFrame</name><argument_list>(<argument><expr><name>appName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    }</block></function>

}</block></class>
 </unit>

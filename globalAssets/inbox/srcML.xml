<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="E:\Programmering\DIT355_buildless\Middleware\Gitgetter\FileStorer\bitcoin-wallet/bitcoin-wallet.java"><comment type="block" format="javadoc">/**
 * Copyright 2012-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>integration</name><operator>.</operator><name>android</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>BitcoinIntegration</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INTENT_EXTRA_PAYMENTREQUEST</name> <init>= <expr><literal type="string">"paymentrequest"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INTENT_EXTRA_PAYMENT</name> <init>= <expr><literal type="string">"payment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INTENT_EXTRA_TRANSACTION_HASH</name> <init>= <expr><literal type="string">"transaction_hash"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MIMETYPE_PAYMENTREQUEST</name> <init>= <expr><literal type="string">"application/bitcoin-paymentrequest"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// BIP 71</comment>

    <comment type="block" format="javadoc">/**
     * Request any amount of Bitcoins (probably a donation) from user, without feedback from the app.
     * 
     * @param context
     *            Android context
     * @param address
     *            Bitcoin address
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>request</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>makeBitcoinUriIntent</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Request specific amount of Bitcoins from user, without feedback from the app.
     * 
     * @param context
     *            Android context
     * @param address
     *            Bitcoin address
     * @param amount
     *            Bitcoin amount in satoshis
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>request</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>makeBitcoinUriIntent</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Request payment from user, without feedback from the app.
     * 
     * @param context
     *            Android context
     * @param paymentRequest
     *            BIP70 formatted payment request
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>request</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequest</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>makePaymentRequestIntent</name><argument_list>(<argument><expr><name>paymentRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Request any amount of Bitcoins (probably a donation) from user, with feedback from the app. Result
     * intent can be received by overriding {@link android.app.Activity#onActivityResult()}. Result indicates
     * either {@link Activity#RESULT_OK} or {@link Activity#RESULT_CANCELED}. In the success case, use
     * {@link #transactionHashFromResult(Intent)} to read the transaction hash from the intent.
     * 
     * Warning: A success indication is no guarantee! To be on the safe side, you must drive your own Bitcoin
     * infrastructure and validate the transaction.
     * 
     * @param activity
     *            Calling Android activity
     * @param requestCode
     *            Code identifying the call when {@link android.app.Activity#onActivityResult()} is called
     *            back
     * @param address
     *            Bitcoin address
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>requestForResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>makeBitcoinUriIntent</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startForResult</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Request specific amount of Bitcoins from user, with feedback from the app. Result intent can be
     * received by overriding {@link android.app.Activity#onActivityResult()}. Result indicates either
     * {@link Activity#RESULT_OK} or {@link Activity#RESULT_CANCELED}. In the success case, use
     * {@link #transactionHashFromResult(Intent)} to read the transaction hash from the intent.
     * 
     * Warning: A success indication is no guarantee! To be on the safe side, you must drive your own Bitcoin
     * infrastructure and validate the transaction.
     * 
     * @param activity
     *            Calling Android activity
     * @param requestCode
     *            Code identifying the call when {@link android.app.Activity#onActivityResult()} is called
     *            back
     * @param address
     *            Bitcoin address
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>requestForResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>makeBitcoinUriIntent</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startForResult</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Request payment from user, with feedback from the app. Result intent can be received by overriding
     * {@link android.app.Activity#onActivityResult()}. Result indicates either {@link Activity#RESULT_OK} or
     * {@link Activity#RESULT_CANCELED}. In the success case, use {@link #transactionHashFromResult(Intent)}
     * to read the transaction hash from the intent.
     * 
     * Warning: A success indication is no guarantee! To be on the safe side, you must drive your own Bitcoin
     * infrastructure and validate the transaction.
     * 
     * @param activity
     *            Calling Android activity
     * @param requestCode
     *            Code identifying the call when {@link android.app.Activity#onActivityResult()} is called
     *            back
     * @param paymentRequest
     *            BIP70 formatted payment request
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>requestForResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequest</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>makePaymentRequestIntent</name><argument_list>(<argument><expr><name>paymentRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startForResult</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get payment request from intent. Meant for usage by applications accepting payment requests.
     * 
     * @param intent
     *            intent
     * @return payment request or null
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>paymentRequestFromIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequest</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getByteArrayExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_PAYMENTREQUEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>paymentRequest</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Put BIP70 payment message into result intent. Meant for usage by Bitcoin wallet applications.
     * 
     * @param result
     *            result intent
     * @param payment
     *            payment message
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>paymentToResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>payment</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_PAYMENT</name></expr></argument>, <argument><expr><name>payment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get BIP70 payment message from result intent. Meant for usage by applications initiating a Bitcoin
     * payment.
     * 
     * You can use the transactions contained in the payment to validate the payment. For this, you need your
     * own Bitcoin infrastructure though. There is no guarantee that the payment will ever confirm.
     * 
     * @param result
     *            result intent
     * @return payment message
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>paymentFromResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>payment</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>getByteArrayExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_PAYMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>payment</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Put transaction hash into result intent. Meant for usage by Bitcoin wallet applications.
     * 
     * @param result
     *            result intent
     * @param txHash
     *            transaction hash
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>transactionHashToResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>txHash</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_TRANSACTION_HASH</name></expr></argument>, <argument><expr><name>txHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get transaction hash from result intent. Meant for usage by applications initiating a Bitcoin payment.
     * 
     * You can use this hash to request the transaction from the Bitcoin network, in order to validate. For
     * this, you need your own Bitcoin infrastructure though. There is no guarantee that the transaction has
     * ever been broadcasted to the Bitcoin network.
     * 
     * @param result
     *            result intent
     * @return transaction hash
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>transactionHashFromResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>txHash</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_TRANSACTION_HASH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>txHash</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SATOSHIS_PER_COIN</name> <init>= <expr><literal type="number">100000000</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Intent</name></type> <name>makeBitcoinUriIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Long</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>uri</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"bitcoin:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>uri</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>amount</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>uri</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"?amount="</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%d.%08d"</literal></expr></argument>, <argument><expr><name>amount</name> <operator>/</operator> <name>SATOSHIS_PER_COIN</name></expr></argument>, <argument><expr><name>amount</name> <operator>%</operator> <name>SATOSHIS_PER_COIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>intent</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Intent</name></type> <name>makePaymentRequestIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequest</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name>MIMETYPE_PAYMENTREQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_PAYMENTREQUEST</name></expr></argument>, <argument><expr><name>paymentRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>intent</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>pm</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>redirectToDownload</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startForResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>pm</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>redirectToDownload</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>redirectToDownload</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"No Bitcoin application found.\nPlease install Bitcoin Wallet."</literal></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>marketIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>,
                <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"market://details?id=de.schildbach.wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>binaryIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>,
                <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://github.com/bitcoin-wallet/bitcoin-wallet/releases"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>pm</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>marketIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>marketIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><call><name><name>pm</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>binaryIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>binaryIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
        <comment type="line">// else out of luck</comment>
    }</block></function>
}</block></class>

<comment type="block" format="javadoc">/**
 * Copyright 2012-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>integration</name><operator>.</operator><name>sample</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoin</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>Protos</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>AddressFormatException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>NetworkParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>script</name><operator>.</operator><name>ScriptBuilder</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>TypefaceSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RadioButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>integration</name><operator>.</operator><name>android</name><operator>.</operator><name>BitcoinIntegration</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>SampleActivity</name> <super><extends>extends <name>Activity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>AMOUNT</name> <init>= <expr><literal type="number">500000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>DONATION_ADDRESSES_MAINNET</name> <init>= <expr><block>{ <expr><literal type="string">"18CK5k1gajRKKSC7yVSTXT9LUzbheh1XY4"</literal></expr>,
            <expr><literal type="string">"1PZmMahjbfsTy6DsaRyfStzoWTPppWwDnZ"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>DONATION_ADDRESSES_TESTNET</name> <init>= <expr><block>{ <expr><literal type="string">"mkCLjaXncyw8eSWJBcBtnTgviU85z5PfwS"</literal></expr>,
            <expr><literal type="string">"mwEacn7pYszzxfgcNaVUzYvzL6ypRJzB6A"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MEMO</name> <init>= <expr><literal type="string">"Sample donation"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>donateButton</name></decl>, <decl><type ref="prev"/><name>requestButton</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>donateMessage</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>sample_activity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>donateButton</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sample_donate_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>donateButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>handleDonate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>requestButton</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sample_request_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>requestButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>handleRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>donateMessage</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sample_donate_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>donationAddresses</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isMainnet</name> <init>= <expr><operator>(</operator><operator>(</operator><name>RadioButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sample_network_mainnet</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><ternary><condition><expr><name>isMainnet</name></expr> ?</condition><then> <expr><name>DONATION_ADDRESSES_MAINNET</name></expr> </then><else>: <expr><name>DONATION_ADDRESSES_TESTNET</name></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleDonate</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>addresses</name> <init>= <expr><call><name>donationAddresses</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>BitcoinIntegration</name><operator>.</operator><name>requestForResult</name></name><argument_list>(<argument><expr><name><name>SampleActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>REQUEST_CODE</name></expr></argument>, <argument><expr><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleRequest</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>addresses</name> <init>= <expr><call><name>donationAddresses</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>NetworkParameters</name></type> <name>params</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>getParametersFromAddress</name></name><argument_list>(<argument><expr><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>Output</name><operator>.</operator><name>Builder</name></name></type> <name>output1</name> <init>= <expr><call><name><name>Protos</name><operator>.</operator><name>Output</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>output1</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name>AMOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>output1</name><operator>.</operator><name>setScript</name></name><argument_list>(<argument><expr><call><name><name>ByteString</name>
                    <operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><call><name><name>ScriptBuilder</name><operator>.</operator><name>createOutputScript</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Address</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getProgram</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>Output</name><operator>.</operator><name>Builder</name></name></type> <name>output2</name> <init>= <expr><call><name><name>Protos</name><operator>.</operator><name>Output</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>output2</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name>AMOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>output2</name><operator>.</operator><name>setScript</name></name><argument_list>(<argument><expr><call><name><name>ByteString</name>
                    <operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><call><name><name>ScriptBuilder</name><operator>.</operator><name>createOutputScript</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Address</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name><name>addresses</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getProgram</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>PaymentDetails</name><operator>.</operator><name>Builder</name></name></type> <name>paymentDetails</name> <init>= <expr><call><name><name>Protos</name><operator>.</operator><name>PaymentDetails</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>paymentDetails</name><operator>.</operator><name>setNetwork</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>getPaymentProtocolId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>paymentDetails</name><operator>.</operator><name>addOutputs</name></name><argument_list>(<argument><expr><name>output1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>paymentDetails</name><operator>.</operator><name>addOutputs</name></name><argument_list>(<argument><expr><name>output2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>paymentDetails</name><operator>.</operator><name>setMemo</name></name><argument_list>(<argument><expr><name>MEMO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>paymentDetails</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>PaymentRequest</name><operator>.</operator><name>Builder</name></name></type> <name>paymentRequest</name> <init>= <expr><call><name><name>Protos</name><operator>.</operator><name>PaymentRequest</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>paymentRequest</name><operator>.</operator><name>setSerializedPaymentDetails</name></name><argument_list>(<argument><expr><call><name><name>paymentDetails</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>BitcoinIntegration</name><operator>.</operator><name>requestForResult</name></name><argument_list>(<argument><expr><name><name>SampleActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>REQUEST_CODE</name></expr></argument>,
                    <argument><expr><call><name><name>paymentRequest</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AddressFormatException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>txHash</name> <init>= <expr><call><name><name>BitcoinIntegration</name><operator>.</operator><name>transactionHashFromResult</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>txHash</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>SpannableStringBuilder</name></type> <name>messageBuilder</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>(<argument><expr><literal type="string">"Transaction hash:\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>messageBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>txHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>messageBuilder</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TypefaceSpan</name><argument_list>(<argument><expr><literal type="string">"monospace"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageBuilder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>txHash</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>messageBuilder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><call><name><name>BitcoinIntegration</name><operator>.</operator><name>paymentFromResult</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>messageBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n(also a BIP70 payment message was received)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

                    <expr_stmt><expr><call><name><name>donateMessage</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>messageBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>donateMessage</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">"Thank you!"</literal></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">"Cancelled."</literal></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">"Unknown result."</literal></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fiat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Strings</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRate</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>OnSharedPreferenceChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>Configuration</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>lastVersionCode</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Resources</name></type> <name>res</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_BTC_PRECISION</name> <init>= <expr><literal type="string">"btc_precision"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_OWN_NAME</name> <init>= <expr><literal type="string">"own_name"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_SEND_COINS_AUTOCLOSE</name> <init>= <expr><literal type="string">"send_coins_autoclose"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_CONNECTIVITY_NOTIFICATION</name> <init>= <expr><literal type="string">"connectivity_notification"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_EXCHANGE_CURRENCY</name> <init>= <expr><literal type="string">"exchange_currency"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_TRUSTED_PEER</name> <init>= <expr><literal type="string">"trusted_peer"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_TRUSTED_PEER_ONLY</name> <init>= <expr><literal type="string">"trusted_peer_only"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_BLOCK_EXPLORER</name> <init>= <expr><literal type="string">"block_explorer"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_DATA_USAGE</name> <init>= <expr><literal type="string">"data_usage"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_REMIND_BALANCE</name> <init>= <expr><literal type="string">"remind_balance"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_DISCLAIMER</name> <init>= <expr><literal type="string">"disclaimer"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_LAST_VERSION</name> <init>= <expr><literal type="string">"last_version"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_LAST_USED</name> <init>= <expr><literal type="string">"last_used"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_BEST_CHAIN_HEIGHT_EVER</name> <init>= <expr><literal type="string">"best_chain_height_ever"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_CACHED_EXCHANGE_CURRENCY</name> <init>= <expr><literal type="string">"cached_exchange_currency"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_CACHED_EXCHANGE_RATE_COIN</name> <init>= <expr><literal type="string">"cached_exchange_rate_coin"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_CACHED_EXCHANGE_RATE_FIAT</name> <init>= <expr><literal type="string">"cached_exchange_rate_fiat"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_LAST_EXCHANGE_DIRECTION</name> <init>= <expr><literal type="string">"last_exchange_direction"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_CHANGE_LOG_VERSION</name> <init>= <expr><literal type="string">"change_log_version"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_REMIND_BACKUP</name> <init>= <expr><literal type="string">"remind_backup"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_LAST_BACKUP</name> <init>= <expr><literal type="string">"last_backup"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_LAST_BLUETOOTH_ADDRESS</name> <init>= <expr><literal type="string">"last_bluetooth_address"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PREFS_DEFAULT_BTC_SHIFT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PREFS_DEFAULT_BTC_PRECISION</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Configuration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Configuration</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Resources</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefs</name></name> <operator>=</operator> <name>prefs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastVersionCode</name></name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>getBtcPrecision</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>precision</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREFS_KEY_BTC_PRECISION</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>precision</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>precision</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><name>PREFS_DEFAULT_BTC_PRECISION</name></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getBtcShift</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>precision</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREFS_KEY_BTC_PRECISION</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>precision</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><ternary><condition><expr><call><name><name>precision</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><call><name><name>precision</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><name>PREFS_DEFAULT_BTC_SHIFT</name></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Coin</name></type> <name>getBtcBase</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><call><name>getBtcShift</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>shift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><name>shift</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>Coin</name><operator>.</operator><name>MILLICOIN</name></name></expr>;</return></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name>shift</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>Coin</name><operator>.</operator><name>MICROCOIN</name></name></expr>;</return></block></then></if></elseif>
        <else>else
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"cannot handle shift: "</literal> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</throw></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>MonetaryFormat</name></type> <name>getFormat</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><call><name>getBtcShift</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>minPrecision</name> <init>= <expr><ternary><condition><expr><name>shift</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>decimalRepetitions</name> <init>= <expr><operator>(</operator><call><name>getBtcPrecision</name><argument_list>()</argument_list></call> <operator>-</operator> <name>minPrecision</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>MonetaryFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>shift</name><argument_list>(<argument><expr><name>shift</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>minDecimals</name><argument_list>(<argument><expr><name>minPrecision</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>repeatOptionalDecimals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
                <argument><expr><name>decimalRepetitions</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>MonetaryFormat</name></type> <name>getMaxPrecisionFormat</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><call><name>getBtcShift</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>shift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>MonetaryFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>shift</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>minDecimals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>optionalDecimals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><name>shift</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>MonetaryFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>shift</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>minDecimals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>optionalDecimals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
        <else>else
            <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>MonetaryFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>shift</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>minDecimals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>optionalDecimals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getOwnName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Strings</name><operator>.</operator><name>emptyToNull</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREFS_KEY_OWN_NAME</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getSendCoinsAutoclose</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>PREFS_KEY_SEND_COINS_AUTOCLOSE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getConnectivityNotificationEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CONNECTIVITY_NOTIFICATION</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getTrustedPeerHost</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Strings</name><operator>.</operator><name>emptyToNull</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREFS_KEY_TRUSTED_PEER</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getTrustedPeerOnly</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>PREFS_KEY_TRUSTED_PEER_ONLY</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Uri</name></type> <name>getBlockExplorer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREFS_KEY_BLOCK_EXPLORER</name></expr></argument>,
                <argument><expr><call><name><name>res</name><operator>.</operator><name>getStringArray</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>preferences_block_explorer_values</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>remindBalance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>PREFS_KEY_REMIND_BALANCE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setRemindBalance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>remindBalance</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name>PREFS_KEY_REMIND_BALANCE</name></expr></argument>, <argument><expr><name>remindBalance</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>remindBackup</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>PREFS_KEY_REMIND_BACKUP</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getLastBackupTime</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_BACKUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>armBackupReminder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name>PREFS_KEY_REMIND_BACKUP</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>disarmBackupReminder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name>PREFS_KEY_REMIND_BACKUP</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_BACKUP</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getDisclaimerEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>PREFS_KEY_DISCLAIMER</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getExchangeCurrencyCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREFS_KEY_EXCHANGE_CURRENCY</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setExchangeCurrencyCode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>exchangeCurrencyCode</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name>PREFS_KEY_EXCHANGE_CURRENCY</name></expr></argument>, <argument><expr><name>exchangeCurrencyCode</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>versionCodeCrossed</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>currentVersionCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>triggeringVersionCode</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>wasBelow</name> <init>= <expr><name>lastVersionCode</name> <operator>&lt;</operator> <name>triggeringVersionCode</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>wasUsedBefore</name> <init>= <expr><name>lastVersionCode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isNowAbove</name> <init>= <expr><name>currentVersionCode</name> <operator>&gt;=</operator> <name>triggeringVersionCode</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>wasUsedBefore</name> <operator>&amp;&amp;</operator> <name>wasBelow</name> <operator>&amp;&amp;</operator> <name>isNowAbove</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateLastVersionCode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>currentVersionCode</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_VERSION</name></expr></argument>, <argument><expr><name>currentVersionCode</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>currentVersionCode</name> <operator>&gt;</operator> <name>lastVersionCode</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"detected app upgrade: "</literal> <operator>+</operator> <name>lastVersionCode</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>currentVersionCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>currentVersionCode</name> <operator>&lt;</operator> <name>lastVersionCode</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"detected app downgrade: "</literal> <operator>+</operator> <name>lastVersionCode</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>currentVersionCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasBeenUsed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_USED</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getLastUsedAgo</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>now</name> <operator>-</operator> <call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_USED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>touchLastUsed</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>prefsLastUsed</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_USED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_USED</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"just being used - last used {} minutes ago"</literal></expr></argument>, <argument><expr><operator>(</operator><name>now</name> <operator>-</operator> <name>prefsLastUsed</name><operator>)</operator> <operator>/</operator> <name><name>DateUtils</name><operator>.</operator><name>MINUTE_IN_MILLIS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getBestChainHeightEver</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>PREFS_KEY_BEST_CHAIN_HEIGHT_EVER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>maybeIncrementBestChainHeightEver</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>bestChainHeightEver</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bestChainHeightEver</name> <operator>&gt;</operator> <call><name>getBestChainHeightEver</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name>PREFS_KEY_BEST_CHAIN_HEIGHT_EVER</name></expr></argument>, <argument><expr><name>bestChainHeightEver</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ExchangeRate</name></type> <name>getCachedExchangeRate</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CACHED_EXCHANGE_CURRENCY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>prefs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CACHED_EXCHANGE_RATE_COIN</name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>prefs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CACHED_EXCHANGE_RATE_FIAT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>cachedExchangeCurrency</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CACHED_EXCHANGE_CURRENCY</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>cachedExchangeRateCoin</name> <init>= <expr><call><name><name>Coin</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CACHED_EXCHANGE_RATE_COIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>cachedExchangeRateFiat</name> <init>= <expr><call><name><name>Fiat</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>cachedExchangeCurrency</name></expr></argument>,
                    <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CACHED_EXCHANGE_RATE_FIAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>ExchangeRate</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name><argument_list>(<argument><expr><name>cachedExchangeRateCoin</name></expr></argument>, <argument><expr><name>cachedExchangeRateFiat</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCachedExchangeRate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>cachedExchangeRate</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Editor</name></type> <name>edit</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CACHED_EXCHANGE_CURRENCY</name></expr></argument>, <argument><expr><call><name><name>cachedExchangeRate</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CACHED_EXCHANGE_RATE_COIN</name></expr></argument>, <argument><expr><name><name>cachedExchangeRate</name><operator>.</operator><name>rate</name><operator>.</operator><name>coin</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CACHED_EXCHANGE_RATE_FIAT</name></expr></argument>, <argument><expr><name><name>cachedExchangeRate</name><operator>.</operator><name>rate</name><operator>.</operator><name>fiat</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getLastExchangeDirection</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_EXCHANGE_DIRECTION</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setLastExchangeDirection</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>exchangeDirection</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_EXCHANGE_DIRECTION</name></expr></argument>, <argument><expr><name>exchangeDirection</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>changeLogVersionCodeCrossed</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>currentVersionCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>triggeringVersionCode</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>changeLogVersion</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>PREFS_KEY_CHANGE_LOG_VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>wasBelow</name> <init>= <expr><name>changeLogVersion</name> <operator>&lt;</operator> <name>triggeringVersionCode</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>wasUsedBefore</name> <init>= <expr><name>changeLogVersion</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isNowAbove</name> <init>= <expr><name>currentVersionCode</name> <operator>&gt;=</operator> <name>triggeringVersionCode</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name>PREFS_KEY_CHANGE_LOG_VERSION</name></expr></argument>, <argument><expr><name>currentVersionCode</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <comment type="block">/* wasUsedBefore &amp;&amp; */</comment><expr><name>wasBelow</name> <operator>&amp;&amp;</operator> <name>isNowAbove</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateLastBluetoothAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>bluetoothAddress</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bluetoothAddress</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name>PREFS_KEY_LAST_BLUETOOTH_ADDRESS</name></expr></argument>, <argument><expr><name>bluetoothAddress</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>registerOnSharedPreferenceChangeListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>OnSharedPreferenceChangeListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>registerOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>unregisterOnSharedPreferenceChangeListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>OnSharedPreferenceChangeListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>unregisterOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>NetworkParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>params</name><operator>.</operator><name>MainNetParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>params</name><operator>.</operator><name>TestNet3Params</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>BaseEncoding</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>HttpUrl</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>logging</name><operator>.</operator><name>HttpLoggingInterceptor</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Constants</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>TEST</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Network this wallet is on (e.g. testnet or mainnet). */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>NetworkParameters</name></type> <name>NETWORK_PARAMETERS</name> <init>= <expr><ternary><condition><expr><name>TEST</name></expr> ?</condition><then> <expr><call><name><name>TestNet3Params</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>MainNetParams</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Bitcoinj global context. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>CONTEXT</name> <init>= <expr><operator>new</operator> <call><name>Context</name><argument_list>(<argument><expr><name>NETWORK_PARAMETERS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Enable switch for synching of the blockchain */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>ENABLE_BLOCKCHAIN_SYNC</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Enable switch for fetching and showing of exchange rates */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>ENABLE_EXCHANGE_RATES</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Enable switch for sweeping of paper wallets */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>ENABLE_SWEEP_WALLET</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Enable switch for browsing to block explorers */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>ENABLE_BROWSE</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>Files</name> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILENAME_NETWORK_SUFFIX</name> <init>= <expr><ternary><condition><expr><call><name><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>NetworkParameters</name><operator>.</operator><name>ID_MAINNET</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-testnet"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Filename of the wallet. */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>WALLET_FILENAME_PROTOBUF</name> <init>= <expr><literal type="string">"wallet-protobuf"</literal> <operator>+</operator> <name>FILENAME_NETWORK_SUFFIX</name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** How often the wallet is autosaved. */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>WALLET_AUTOSAVE_DELAY_MS</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>SECOND_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Filename of the automatic key backup (old format, can only be read). */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>WALLET_KEY_BACKUP_BASE58</name> <init>= <expr><literal type="string">"key-backup-base58"</literal> <operator>+</operator> <name>FILENAME_NETWORK_SUFFIX</name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Filename of the automatic wallet backup. */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>WALLET_KEY_BACKUP_PROTOBUF</name> <init>= <expr><literal type="string">"key-backup-protobuf"</literal> <operator>+</operator> <name>FILENAME_NETWORK_SUFFIX</name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Path to external storage */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>File</name></type> <name>EXTERNAL_STORAGE_DIR</name> <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStorageDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Manual backups go here. */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>File</name></type> <name>EXTERNAL_WALLET_BACKUP_DIR</name> <init>= <expr><call><name><name>Environment</name>
                <operator>.</operator><name>getExternalStoragePublicDirectory</name></name><argument_list>(<argument><expr><name><name>Environment</name><operator>.</operator><name>DIRECTORY_DOWNLOADS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Filename of the manual key backup (old format, can only be read). */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTERNAL_WALLET_KEY_BACKUP</name> <init>= <expr><literal type="string">"bitcoin-wallet-keys"</literal> <operator>+</operator> <name>FILENAME_NETWORK_SUFFIX</name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Filename of the manual wallet backup. */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTERNAL_WALLET_BACKUP</name> <init>= <expr><literal type="string">"bitcoin-wallet-backup"</literal> <operator>+</operator> <name>FILENAME_NETWORK_SUFFIX</name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Filename of the block store for storing the chain. */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BLOCKCHAIN_FILENAME</name> <init>= <expr><literal type="string">"blockchain"</literal> <operator>+</operator> <name>FILENAME_NETWORK_SUFFIX</name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Filename of the block checkpoints file. */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CHECKPOINTS_FILENAME</name> <init>= <expr><literal type="string">"checkpoints"</literal> <operator>+</operator> <name>FILENAME_NETWORK_SUFFIX</name> <operator>+</operator> <literal type="string">".txt"</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Filename of the fees files. */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FEES_FILENAME</name> <init>= <expr><literal type="string">"fees"</literal> <operator>+</operator> <name>FILENAME_NETWORK_SUFFIX</name> <operator>+</operator> <literal type="string">".txt"</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Filename of the file containing Electrum servers. */</comment>
        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ELECTRUM_SERVERS_FILENAME</name> <init>= <expr><literal type="string">"electrum-servers.txt"</literal></expr></init></decl>;</decl_stmt>
    }</block></class>

    <comment type="block" format="javadoc">/** Currency code for the wallet name resolver. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>WALLET_NAME_CURRENCY_CODE</name> <init>= <expr><ternary><condition><expr><call><name><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>NetworkParameters</name><operator>.</operator><name>ID_MAINNET</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"btc"</literal></expr> </then><else>: <expr><literal type="string">"tbtc"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** URL to fetch version alerts from. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>HttpUrl</name></type> <name>VERSION_URL</name> <init>= <expr><call><name><name>HttpUrl</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://wallet.schildbach.de/version"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** URL to fetch dynamic fees from. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>HttpUrl</name></type> <name>DYNAMIC_FEES_URL</name> <init>= <expr><call><name><name>HttpUrl</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://wallet.schildbach.de/fees"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** MIME type used for transmitting single transactions. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MIMETYPE_TRANSACTION</name> <init>= <expr><literal type="string">"application/x-btctx"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** MIME type used for transmitting wallet backups. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MIMETYPE_WALLET_BACKUP</name> <init>= <expr><literal type="string">"application/x-bitcoin-wallet-backup"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Number of confirmations until a transaction is fully confirmed. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_NUM_CONFIRMATIONS</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** User-agent to use for network access. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>USER_AGENT</name> <init>= <expr><literal type="string">"Bitcoin Wallet"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Default currency to use if all default mechanisms fail. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DEFAULT_EXCHANGE_CURRENCY</name> <init>= <expr><literal type="string">"USD"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Donation address for tip/donate action. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DONATION_ADDRESS</name> <init>= <expr><ternary><condition><expr><call><name><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>NetworkParameters</name><operator>.</operator><name>ID_MAINNET</name></name></expr></argument>)</argument_list></call></expr>
            ?</condition><then> <expr><literal type="string">"182Di1dqanjhNiphpNfrBRtKtdiUQtpgfb"</literal></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Recipient e-mail address for reports. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REPORT_EMAIL</name> <init>= <expr><literal type="string">"bitcoin.wallet.developers@gmail.com"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Subject line for manually reported issues. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REPORT_SUBJECT_ISSUE</name> <init>= <expr><literal type="string">"Reported issue"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Subject line for crash reports. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REPORT_SUBJECT_CRASH</name> <init>= <expr><literal type="string">"Crash report"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>CHAR_HAIR_SPACE</name> <init>= <expr><literal type="char">'\u200a'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>CHAR_THIN_SPACE</name> <init>= <expr><literal type="char">'\u2009'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>CHAR_ALMOST_EQUAL_TO</name> <init>= <expr><literal type="char">'\u2248'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>CHAR_CHECKMARK</name> <init>= <expr><literal type="char">'\u2713'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>CURRENCY_PLUS_SIGN</name> <init>= <expr><literal type="char">'\uff0b'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>CURRENCY_MINUS_SIGN</name> <init>= <expr><literal type="char">'\uff0d'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFIX_ALMOST_EQUAL_TO</name> <init>= <expr><call><name><name>Character</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>CHAR_ALMOST_EQUAL_TO</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CHAR_THIN_SPACE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ADDRESS_FORMAT_GROUP_SIZE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ADDRESS_FORMAT_LINE_SIZE</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>LOCAL_FORMAT</name> <init>= <expr><operator>new</operator> <call><name>MonetaryFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>noCode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minDecimals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>optionalDecimals</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>BaseEncoding</name></type> <name>HEX</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SOURCE_URL</name> <init>= <expr><literal type="string">"https://github.com/bitcoin-wallet/bitcoin-wallet"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BINARY_URL</name> <init>= <expr><literal type="string">"https://wallet.schildbach.de/"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PEER_DISCOVERY_TIMEOUT_MS</name> <init>= <expr><literal type="number">10</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>DateUtils</name><operator>.</operator><name>SECOND_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PEER_TIMEOUT_MS</name> <init>= <expr><literal type="number">15</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>DateUtils</name><operator>.</operator><name>SECOND_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>LAST_USAGE_THRESHOLD_JUST_MS</name> <init>= <expr><name><name>DateUtils</name><operator>.</operator><name>HOUR_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>LAST_USAGE_THRESHOLD_RECENTLY_MS</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>DAY_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>LAST_USAGE_THRESHOLD_INACTIVE_MS</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>WEEK_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>DELAYED_TRANSACTION_THRESHOLD_MS</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>HOUR_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** A balance above this amount will show a warning */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Coin</name></type> <name>TOO_MUCH_BALANCE_THRESHOLD</name> <init>= <expr><call><name><name>Coin</name><operator>.</operator><name>COIN</name><operator>.</operator><name>divide</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** A balance above this amount will cause the donate option to be shown */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Coin</name></type> <name>SOME_BALANCE_THRESHOLD</name> <init>= <expr><call><name><name>Coin</name><operator>.</operator><name>COIN</name><operator>.</operator><name>divide</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SDK_DEPRECATED_BELOW</name> <init>= <expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NOTIFICATION_ID_CONNECTED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NOTIFICATION_ID_COINS_RECEIVED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NOTIFICATION_ID_MAINTENANCE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NOTIFICATION_ID_INACTIVITY</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_GROUP_KEY_RECEIVED</name> <init>= <expr><literal type="string">"group-received"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_CHANNEL_ID_RECEIVED</name> <init>= <expr><literal type="string">"received"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_CHANNEL_ID_ONGOING</name> <init>= <expr><literal type="string">"ongoing"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_CHANNEL_ID_IMPORTANT</name> <init>= <expr><literal type="string">"important"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Desired number of scrypt iterations for deriving the spending PIN */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SCRYPT_ITERATIONS_TARGET</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SCRYPT_ITERATIONS_TARGET_LOWRAM</name> <init>= <expr><literal type="number">32768</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Default ports for Electrum servers */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ELECTRUM_SERVER_DEFAULT_PORT_TCP</name> <init>= <expr><ternary><condition><expr><call><name><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>NetworkParameters</name><operator>.</operator><name>ID_MAINNET</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">50001</literal></expr> </then><else>: <expr><literal type="number">51001</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ELECTRUM_SERVER_DEFAULT_PORT_TLS</name> <init>= <expr><ternary><condition><expr><call><name><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>NetworkParameters</name><operator>.</operator><name>ID_MAINNET</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">50002</literal></expr> </then><else>: <expr><literal type="number">51002</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Shared HTTP client, can reuse connections */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>OkHttpClient</name></type> <name>HTTP_CLIENT</name></decl>;</decl_stmt>
    <static>static <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>HttpLoggingInterceptor</name></type> <name>loggingInterceptor</name> <init>= <expr><operator>new</operator> <call><name>HttpLoggingInterceptor</name><argument_list>(
                <argument><expr><operator>new</operator> <class><super><name><name>HttpLoggingInterceptor</name><operator>.</operator><name>Logger</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>loggingInterceptor</name><operator>.</operator><name>setLevel</name></name><argument_list>(<argument><expr><name><name>HttpLoggingInterceptor</name><operator>.</operator><name>Level</name><operator>.</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>OkHttpClient</name><operator>.</operator><name>Builder</name></name></type> <name>httpClientBuilder</name> <init>= <expr><operator>new</operator> <call><name><name>OkHttpClient</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>followRedirects</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>followSslRedirects</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>connectTimeout</name></name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>writeTimeout</name></name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>readTimeout</name></name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>addInterceptor</name></name><argument_list>(<argument><expr><name>loggingInterceptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>HTTP_CLIENT</name> <operator>=</operator> <call><name><name>httpClientBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>ch</name><operator>.</operator><name>qos</name><operator>.</operator><name>logback</name><operator>.</operator><name>classic</name><operator>.</operator><name>Level</name></name>;</import>
<import>import <name><name>ch</name><operator>.</operator><name>qos</name><operator>.</operator><name>logback</name><operator>.</operator><name>classic</name><operator>.</operator><name>LoggerContext</name></name>;</import>
<import>import <name><name>ch</name><operator>.</operator><name>qos</name><operator>.</operator><name>logback</name><operator>.</operator><name>classic</name><operator>.</operator><name>android</name><operator>.</operator><name>LogcatAppender</name></name>;</import>
<import>import <name><name>ch</name><operator>.</operator><name>qos</name><operator>.</operator><name>logback</name><operator>.</operator><name>classic</name><operator>.</operator><name>encoder</name><operator>.</operator><name>PatternLayoutEncoder</name></name>;</import>
<import>import <name><name>ch</name><operator>.</operator><name>qos</name><operator>.</operator><name>logback</name><operator>.</operator><name>classic</name><operator>.</operator><name>spi</name><operator>.</operator><name>ILoggingEvent</name></name>;</import>
<import>import <name><name>ch</name><operator>.</operator><name>qos</name><operator>.</operator><name>logback</name><operator>.</operator><name>core</name><operator>.</operator><name>rolling</name><operator>.</operator><name>RollingFileAppender</name></name>;</import>
<import>import <name><name>ch</name><operator>.</operator><name>qos</name><operator>.</operator><name>logback</name><operator>.</operator><name>core</name><operator>.</operator><name>rolling</name><operator>.</operator><name>TimeBasedRollingPolicy</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>Logging</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG_DIRECTORY_NAME</name> <init>= <expr><literal type="string">"log"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG_FILE_NAME</name> <init>= <expr><literal type="string">"wallet.log"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG_ROLLING_FILE_NAME_PATTERN</name> <init>= <expr><literal type="string">"wallet.%d{yyyy-MM-dd,UTC}.log.gz"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>logFile</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>filesDir</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>logFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>

        <comment type="line">// create log dir</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>logDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>filesDir</name></expr></argument>, <argument><expr><name>LOG_DIRECTORY_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logDir</name><operator>.</operator><name>mkdir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>logFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>logDir</name></expr></argument>, <argument><expr><name>LOG_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>LoggerContext</name></type> <name>context</name> <init>= <expr><operator>(</operator><name>LoggerContext</name><operator>)</operator> <call><name><name>LoggerFactory</name><operator>.</operator><name>getILoggerFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PatternLayoutEncoder</name></type> <name>filePattern</name> <init>= <expr><operator>new</operator> <call><name>PatternLayoutEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>filePattern</name><operator>.</operator><name>setContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filePattern</name><operator>.</operator><name>setPattern</name></name><argument_list>(<argument><expr><literal type="string">"%d{HH:mm:ss,UTC} [%thread] %logger{0} - %msg%n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filePattern</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>RollingFileAppender</name><argument_list type="generic">&lt;<argument><name>ILoggingEvent</name></argument>&gt;</argument_list></name></type> <name>fileAppender</name> <init>= <expr><operator>new</operator> <call><name><name>RollingFileAppender</name><argument_list type="generic">&lt;<argument><name>ILoggingEvent</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fileAppender</name><operator>.</operator><name>setContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fileAppender</name><operator>.</operator><name>setFile</name></name><argument_list>(<argument><expr><call><name><name>logFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>TimeBasedRollingPolicy</name><argument_list type="generic">&lt;<argument><name>ILoggingEvent</name></argument>&gt;</argument_list></name></type> <name>rollingPolicy</name> <init>= <expr><operator>new</operator> <call><name><name>TimeBasedRollingPolicy</name><argument_list type="generic">&lt;<argument><name>ILoggingEvent</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rollingPolicy</name><operator>.</operator><name>setContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rollingPolicy</name><operator>.</operator><name>setParent</name></name><argument_list>(<argument><expr><name>fileAppender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rollingPolicy</name><operator>.</operator><name>setFileNamePattern</name></name><argument_list>(<argument><expr><call><name><name>logDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>LOG_ROLLING_FILE_NAME_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rollingPolicy</name><operator>.</operator><name>setMaxHistory</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rollingPolicy</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>fileAppender</name><operator>.</operator><name>setEncoder</name></name><argument_list>(<argument><expr><name>filePattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fileAppender</name><operator>.</operator><name>setRollingPolicy</name></name><argument_list>(<argument><expr><name>rollingPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fileAppender</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PatternLayoutEncoder</name></type> <name>logcatTagPattern</name> <init>= <expr><operator>new</operator> <call><name>PatternLayoutEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logcatTagPattern</name><operator>.</operator><name>setContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logcatTagPattern</name><operator>.</operator><name>setPattern</name></name><argument_list>(<argument><expr><literal type="string">"%logger{0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logcatTagPattern</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PatternLayoutEncoder</name></type> <name>logcatPattern</name> <init>= <expr><operator>new</operator> <call><name>PatternLayoutEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logcatPattern</name><operator>.</operator><name>setContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logcatPattern</name><operator>.</operator><name>setPattern</name></name><argument_list>(<argument><expr><literal type="string">"[%thread] %msg%n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logcatPattern</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>LogcatAppender</name></type> <name>logcatAppender</name> <init>= <expr><operator>new</operator> <call><name>LogcatAppender</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logcatAppender</name><operator>.</operator><name>setContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logcatAppender</name><operator>.</operator><name>setTagEncoder</name></name><argument_list>(<argument><expr><name>logcatTagPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logcatAppender</name><operator>.</operator><name>setEncoder</name></name><argument_list>(<argument><expr><name>logcatPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logcatAppender</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ch</name><operator>.</operator><name>qos</name><operator>.</operator><name>logback</name><operator>.</operator><name>classic</name><operator>.</operator><name>Logger</name></name></type> <name>log</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Logger</name><operator>.</operator><name>ROOT_LOGGER_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>addAppender</name></name><argument_list>(<argument><expr><name>fileAppender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>addAppender</name></name><argument_list>(<argument><expr><name>logcatAppender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>setLevel</name></name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VerificationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>LinuxSecureRandom</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>MnemonicCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Threading</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>UnreadableWalletException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletFiles</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletProtobufSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Splitter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Stopwatch</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SettableFuture</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Bluetooth</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>CrashReporter</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Toast</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationChannel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>AudioAttributes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>AudioManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>StrictMode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>MainThread</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>localbroadcastmanager</name><operator>.</operator><name>content</name><operator>.</operator><name>LocalBroadcastManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletApplication</name> <super><extends>extends <name>Application</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>ActivityManager</name></type> <name>activityManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>File</name></type> <name>walletFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletFiles</name></type> <name>walletFiles</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_WALLET_REFERENCE_CHANGED</name> <init>= <expr><call><name><name>WalletApplication</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">".wallet_reference_changed"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>TIME_CREATE_APPLICATION</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BIP39_WORDLIST_FILENAME</name> <init>= <expr><literal type="string">"bip39-wordlist.txt"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>WalletApplication</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name>LinuxSecureRandom</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// init proper random number generator</comment>

        <expr_stmt><expr><call><name><name>Logging</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name>getFilesDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>StrictMode</name><operator>.</operator><name>setThreadPolicy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>StrictMode</name><operator>.</operator><name>ThreadPolicy</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>detectAll</name><argument_list>()</argument_list></call><operator>.</operator><call><name>permitDiskReads</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>permitDiskWrites</name><argument_list>()</argument_list></call><operator>.</operator><call><name>penaltyLog</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Threading</name><operator>.</operator><name>throwOnLockCycles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>enableStrictMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"=== starting app using configuration: {}, {}"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>Constants</name><operator>.</operator><name>TEST</name></name></expr> ?</condition><then> <expr><literal type="string">"test"</literal></expr> </then><else>: <expr><literal type="string">"prod"</literal></expr></else></ternary></expr></argument>,
                <argument><expr><call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>CrashReporter</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name>getCacheDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>packageInfo</name> <init>= <expr><call><name>packageInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>Threading</name><operator>.</operator><name>uncaughtExceptionHandler</name></name> <operator>=</operator> <operator>new</operator> <class><super><name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>uncaughtException</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Thread</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"bitcoinj uncaught exception"</literal></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>CrashReporter</name><operator>.</operator><name>saveBackgroundTrace</name></name><argument_list>(<argument><expr><name>throwable</name></expr></argument>, <argument><expr><name>packageInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</expr_stmt>

        <expr_stmt><expr><name>activityManager</name> <operator>=</operator> <operator>(</operator><name>ActivityManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ACTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>walletFile</name> <operator>=</operator> <call><name>getFileStreamPath</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_FILENAME_PROTOBUF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name> <init>= <expr><call><name>getConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>updateLastVersionCode</name></name><argument_list>(<argument><expr><name><name>packageInfo</name><operator>.</operator><name>versionCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name> <init>= <expr><call><name><name>BluetoothAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>updateLastBluetoothAddress</name></name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>getAddress</name></name><argument_list>(<argument><expr><name>bluetoothAdapter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name>cleanupFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>initNotificationManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>Configuration</name></type> <name>getConfiguration</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>config</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>config</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>config</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>MainThread</name></annotation>
    <specifier>public</specifier> <type><name>Wallet</name></type> <name>getWallet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><call><name><name>SettableFuture</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getWalletAsync</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnWalletLoadedListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onWalletLoaded</name><parameter_list>(<parameter><decl><type><name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <return>return <expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InterruptedException</name></type> | <type><name>ExecutionException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>Looper</name><operator>.</operator><name>getMainLooper</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"UI thread blocked for "</literal> <operator>+</operator> <name>watch</name> <operator>+</operator> <literal type="string">" when using getWallet()"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Executor</name></type> <name>getWalletExecutor</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newSingleThreadExecutor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>getWalletLock</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>MainThread</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>getWalletAsync</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>OnWalletLoadedListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>getWalletExecutor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <synchronized>synchronized <init>(<expr><name>getWalletLock</name></expr>)</init> <block>{
                    <expr_stmt><expr><call><name>initMnemonicCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>walletFiles</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name>loadWalletFromProtobuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></synchronized>
                <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onWalletLoaded</name></name><argument_list>(<argument><expr><call><name><name>walletFiles</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>WorkerThread</name></annotation>
            <specifier>private</specifier> <type><name>void</name></type> <name>loadWalletFromProtobuf</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><name>Wallet</name></type> <name>wallet</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>walletFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <try>try <init>(<decl><type><specifier>final</specifier> <name>FileInputStream</name></type> <name>walletStream</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>walletFile</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>wallet</name> <operator>=</operator> <operator>new</operator> <call><name>WalletProtobufSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readWallet</name><argument_list>(<argument><expr><name>walletStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>UnreadableWalletException</name><argument_list>(
                                    <argument><expr><literal type="string">"bad wallet network parameters: "</literal> <operator>+</operator> <call><name><name>wallet</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"wallet loaded from: '{}', took {}"</literal></expr></argument>, <argument><expr><name>walletFile</name></expr></argument>, <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> | <type><name>UnreadableWalletException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"problem loading wallet, auto-restoring: "</literal> <operator>+</operator> <name>walletFile</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>wallet</name> <operator>=</operator> <call><name><name>WalletUtils</name><operator>.</operator><name>restoreWalletFromAutoBackup</name></name><argument_list>(<argument><expr><name><name>WalletApplication</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>wallet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><operator>new</operator> <call><name>Toast</name><argument_list>(<argument><expr><name><name>WalletApplication</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>postLongToast</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_wallet_reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></catch>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>isConsistent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"inconsistent wallet, auto-restoring: "</literal> <operator>+</operator> <name>walletFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>wallet</name> <operator>=</operator> <call><name><name>WalletUtils</name><operator>.</operator><name>restoreWalletFromAutoBackup</name></name><argument_list>(<argument><expr><name><name>WalletApplication</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>wallet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><operator>new</operator> <call><name>Toast</name><argument_list>(<argument><expr><name><name>WalletApplication</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>postLongToast</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_wallet_reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>

                    <if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>Error</name><argument_list>(<argument><expr><literal type="string">"bad wallet network parameters: "</literal> <operator>+</operator> <call><name><name>wallet</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

                    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>walletFiles</name> <operator>=</operator> <call><name><name>wallet</name><operator>.</operator><name>autosaveToFile</name></name><argument_list>(<argument><expr><name>walletFile</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_AUTOSAVE_DELAY_MS</name></name></expr></argument>,
                            <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>wallet</name> <operator>=</operator> <operator>new</operator> <call><name>Wallet</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>walletFiles</name> <operator>=</operator> <call><name><name>wallet</name><operator>.</operator><name>autosaveToFile</name></name><argument_list>(<argument><expr><name>walletFile</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_AUTOSAVE_DELAY_MS</name></name></expr></argument>,
                            <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>autosaveWalletNow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// persist...</comment>
                    <expr_stmt><expr><call><name><name>WalletUtils</name><operator>.</operator><name>autoBackupWallet</name></name><argument_list>(<argument><expr><name><name>WalletApplication</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// ...and backup asap</comment>
                    <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"fresh wallet created, took {}"</literal></expr></argument>, <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>armBackupReminder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>

            <function><specifier>private</specifier> <type><name>void</name></type> <name>initMnemonicCode</name><parameter_list>()</parameter_list> <block>{
                <if>if <condition>(<expr><name><name>MnemonicCode</name><operator>.</operator><name>INSTANCE</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>MnemonicCode</name><operator>.</operator><name>INSTANCE</name></name> <operator>=</operator> <operator>new</operator> <call><name>MnemonicCode</name><argument_list>(<argument><expr><call><name>getAssets</name><argument_list>()</argument_list></call><operator>.</operator><call><name>open</name><argument_list>(<argument><expr><name>BIP39_WORDLIST_FILENAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"BIP39 wordlist loaded from: '{}', took {}"</literal></expr></argument>, <argument><expr><name>BIP39_WORDLIST_FILENAME</name></expr></argument>, <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <throw>throw <expr><operator>new</operator> <call><name>Error</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch></try>
                }</block></then></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <interface><specifier>public</specifier> <specifier>static</specifier> interface <name>OnWalletLoadedListener</name> <block>{
        <function_decl><type><name>void</name></type> <name>onWalletLoaded</name><parameter_list>(<parameter><decl><type><name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>autosaveWalletNow</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>getWalletLock</name></expr>)</init> <block>{
            <if>if <condition>(<expr><name>walletFiles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"wallet saved to: '{}', took {}"</literal></expr></argument>, <argument><expr><name>walletFile</name></expr></argument>, <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>walletFiles</name><operator>.</operator><name>saveNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"problem with forced autosaving of wallet"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>CrashReporter</name><operator>.</operator><name>saveBackgroundTrace</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>packageInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></synchronized>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>replaceWallet</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>newWallet</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>newWallet</name><operator>.</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>resetBlockchain</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>oldWallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>getWalletLock</name></expr>)</init> <block>{
            <expr_stmt><expr><call><name><name>oldWallet</name><operator>.</operator><name>shutdownAutosaveAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// this will also prevent BlockchainService to save</comment>
            <expr_stmt><expr><name>walletFiles</name> <operator>=</operator> <call><name><name>newWallet</name><operator>.</operator><name>autosaveToFile</name></name><argument_list>(<argument><expr><name>walletFile</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_AUTOSAVE_DELAY_MS</name></name></expr></argument>,
                    <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></synchronized>
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>maybeIncrementBestChainHeightEver</name></name><argument_list>(<argument><expr><call><name><name>newWallet</name><operator>.</operator><name>getLastBlockSeenHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WalletUtils</name><operator>.</operator><name>autoBackupWallet</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>newWallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>broadcast</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>ACTION_WALLET_REFERENCE_CHANGED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sendBroadcast</name><argument_list>(<argument><expr><name>broadcast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>cleanupFiles</name><parameter_list>()</parameter_list> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>filename</name> <range>: <expr><call><name>fileList</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_KEY_BACKUP_BASE58</name></name></expr></argument>)</argument_list></call>
                    <operator>||</operator> <call><name><name>filename</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_KEY_BACKUP_PROTOBUF</name></name> <operator>+</operator> <literal type="char">'.'</literal></expr></argument>)</argument_list></call>
                    <operator>||</operator> <call><name><name>filename</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".tmp"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getFilesDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"removing obsolete file: '{}'"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initNotificationManager</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>O</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>NotificationManager</name></type> <name>nm</name> <init>= <expr><operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>NotificationChannel</name></type> <name>received</name> <init>= <expr><operator>new</operator> <call><name>NotificationChannel</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_CHANNEL_ID_RECEIVED</name></name></expr></argument>,
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_channel_received_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>received</name><operator>.</operator><name>setSound</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"android.resource://"</literal> <operator>+</operator> <call><name>getPackageName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>coins_received</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name><name>AudioAttributes</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setContentType</name><argument_list>(<argument><expr><name><name>AudioAttributes</name><operator>.</operator><name>CONTENT_TYPE_SONIFICATION</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>setLegacyStreamType</name><argument_list>(<argument><expr><name><name>AudioManager</name><operator>.</operator><name>STREAM_NOTIFICATION</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>setUsage</name><argument_list>(<argument><expr><name><name>AudioAttributes</name><operator>.</operator><name>USAGE_NOTIFICATION_EVENT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>createNotificationChannel</name></name><argument_list>(<argument><expr><name>received</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>NotificationChannel</name></type> <name>ongoing</name> <init>= <expr><operator>new</operator> <call><name>NotificationChannel</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_CHANNEL_ID_ONGOING</name></name></expr></argument>,
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_channel_ongoing_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_LOW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>createNotificationChannel</name></name><argument_list>(<argument><expr><name>ongoing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>NotificationChannel</name></type> <name>important</name> <init>= <expr><operator>new</operator> <call><name>NotificationChannel</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_CHANNEL_ID_IMPORTANT</name></name></expr></argument>,
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_channel_important_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_HIGH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>createNotificationChannel</name></name><argument_list>(<argument><expr><name>important</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"created notification channels, took {}"</literal></expr></argument>, <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>processDirectTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>isTransactionRelevant</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>receivePending</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>broadcastTransaction</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>PackageInfo</name></type> <name>packageInfo</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>PackageInfo</name></type> <name>packageInfo</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// replace by BuildConfig.VERSION_* as soon as it's possible</comment>
        <if>if <condition>(<expr><name>packageInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>packageInfo</name> <operator>=</operator> <call><name>getPackageManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><call><name>getPackageName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>NameNotFoundException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><name>packageInfo</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>String</name></type> <name>applicationPackageFlavor</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>packageName</name> <init>= <expr><call><name>getPackageName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name> <init>= <expr><call><name><name>packageName</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>packageName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>httpUserAgent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>versionName</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>VersionMessage</name></type> <name>versionMessage</name> <init>= <expr><operator>new</operator> <call><name>VersionMessage</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>versionMessage</name><operator>.</operator><name>appendToSubVer</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>USER_AGENT</name></name></expr></argument>, <argument><expr><name>versionName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>versionMessage</name><operator>.</operator><name>subVer</name></name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>httpUserAgent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>httpUserAgent</name><argument_list>(<argument><expr><call><name>packageInfo</name><argument_list>()</argument_list></call><operator>.</operator><name>versionName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>maxConnectedPeers</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><call><name><name>activityManager</name><operator>.</operator><name>isLowRamDevice</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>scryptIterationsTarget</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><call><name><name>activityManager</name><operator>.</operator><name>isLowRamDevice</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Constants</name><operator>.</operator><name>SCRYPT_ITERATIONS_TARGET_LOWRAM</name></name></expr>
                </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>SCRYPT_ITERATIONS_TARGET</name></name></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>versionLine</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>packageInfo</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>Splitter</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>splitToList</name><argument_list>(<argument><expr><name><name>packageInfo</name><operator>.</operator><name>packageName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>reverse</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">' '</literal>
                <operator>+</operator> <name><name>packageInfo</name><operator>.</operator><name>versionName</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>BuildConfig</name><operator>.</operator><name>DEBUG</name></name></expr> ?</condition><then> <expr><literal type="string">" (debuggable)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fiat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>BalanceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRate</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>RequestCoinsActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>SendCoinsQrActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>WalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>SendCoinsActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>GenericUtils</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>MonetarySpannable</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>appwidget</name><operator>.</operator><name>AppWidgetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>appwidget</name><operator>.</operator><name>AppWidgetProvider</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>ForegroundColorSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RemoteViews</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletBalanceWidgetProvider</name> <super><extends>extends <name>AppWidgetProvider</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>WalletBalanceWidgetProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onUpdate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AppWidgetManager</name></type> <name>appWidgetManager</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>appWidgetIds</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PendingResult</name></type> <name>result</name> <init>= <expr><call><name>goAsync</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name> <init>= <expr><operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBalance</name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>ESTIMATED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCachedExchangeRate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>updateWidgets</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>appWidgetManager</name></expr></argument>, <argument><expr><name>appWidgetIds</name></expr></argument>, <argument><expr><name>balance</name></expr></argument>, <argument><expr><name>exchangeRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAppWidgetOptionsChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AppWidgetManager</name></type> <name>appWidgetManager</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>appWidgetId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>newOptions</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>newOptions</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"app widget {} options changed: minWidth={}"</literal></expr></argument>, <argument><expr><name>appWidgetId</name></expr></argument>,
                    <argument><expr><call><name><name>newOptions</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>OPTION_APPWIDGET_MIN_WIDTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PendingResult</name></type> <name>result</name> <init>= <expr><call><name>goAsync</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name> <init>= <expr><operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBalance</name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>ESTIMATED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCachedExchangeRate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>updateWidget</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>appWidgetManager</name></expr></argument>, <argument><expr><name>appWidgetId</name></expr></argument>, <argument><expr><name>newOptions</name></expr></argument>, <argument><expr><name>balance</name></expr></argument>, <argument><expr><name>exchangeRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateWidgets</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>ExchangeRate</name></type> <name>exchangeRate</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>AppWidgetManager</name></type> <name>appWidgetManager</name> <init>= <expr><call><name><name>AppWidgetManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ComponentName</name></type> <name>providerName</name> <init>= <expr><operator>new</operator> <call><name>ComponentName</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>WalletBalanceWidgetProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>appWidgetIds</name> <init>= <expr><call><name><name>appWidgetManager</name><operator>.</operator><name>getAppWidgetIds</name></name><argument_list>(<argument><expr><name>providerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>appWidgetIds</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>WalletBalanceWidgetProvider</name><operator>.</operator><name>updateWidgets</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>appWidgetManager</name></expr></argument>, <argument><expr><name>appWidgetIds</name></expr></argument>, <argument><expr><name>balance</name></expr></argument>,
                        <argument><expr><name>exchangeRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RuntimeException</name></type> <name>x</name></decl></parameter>)</parameter_list> <comment type="line">// system server dead?</comment>
        <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"cannot update app widgets"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateWidgets</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AppWidgetManager</name></type> <name>appWidgetManager</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>appWidgetIds</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>ExchangeRate</name></type> <name>exchangeRate</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>int</name></type> <name>appWidgetId</name> <range>: <expr><name>appWidgetIds</name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>options</name> <init>= <expr><call><name>getAppWidgetOptions</name><argument_list>(<argument><expr><name>appWidgetManager</name></expr></argument>, <argument><expr><name>appWidgetId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>updateWidget</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>appWidgetManager</name></expr></argument>, <argument><expr><name>appWidgetId</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>balance</name></expr></argument>, <argument><expr><name>exchangeRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateWidget</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AppWidgetManager</name></type> <name>appWidgetManager</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>appWidgetId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>appWidgetOptions</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>ExchangeRate</name></type> <name>exchangeRate</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name> <init>= <expr><operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>btcFormat</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Spannable</name></type> <name>balanceStr</name> <init>= <expr><operator>new</operator> <call><name>MonetarySpannable</name><argument_list>(<argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>noCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>balance</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyMarkup</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><name><name>MonetarySpannable</name><operator>.</operator><name>STANDARD_INSIGNIFICANT_SPANS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Spannable</name></type> <name>localBalanceStr</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>exchangeRate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>localBalance</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>rate</name><operator>.</operator><name>coinToFiat</name></name><argument_list>(<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>localFormat</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>LOCAL_FORMAT</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
                    <argument><expr><name><name>Constants</name><operator>.</operator><name>PREFIX_ALMOST_EQUAL_TO</name></name> <operator>+</operator> <call><name><name>GenericUtils</name><operator>.</operator><name>currencySymbol</name></name><argument_list>(<argument><expr><call><name><name>exchangeRate</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>prefixSpans</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name><name>MonetarySpannable</name><operator>.</operator><name>SMALLER_SPAN</name></name></expr>,
                    <expr><operator>new</operator> <call><name>ForegroundColorSpan</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>localBalanceStr</name> <operator>=</operator> <operator>new</operator> <call><name>MonetarySpannable</name><argument_list>(<argument><expr><name>localFormat</name></expr></argument>, <argument><expr><name>localBalance</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyMarkup</name><argument_list>(<argument><expr><name>prefixSpans</name></expr></argument>,
                    <argument><expr><name><name>MonetarySpannable</name><operator>.</operator><name>STANDARD_INSIGNIFICANT_SPANS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>localBalanceStr</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>RemoteViews</name></type> <name>views</name> <init>= <expr><operator>new</operator> <call><name>RemoteViews</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>wallet_balance_widget_content</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name> <init>= <expr><call><name><name>btcFormat</name><operator>.</operator><name>code</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>MonetaryFormat</name><operator>.</operator><name>CODE_BTC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setImageViewResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_wallet_prefix</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>currency_symbol_btc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><call><name><name>MonetaryFormat</name><operator>.</operator><name>CODE_MBTC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setImageViewResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_wallet_prefix</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>currency_symbol_mbtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><call><name><name>MonetaryFormat</name><operator>.</operator><name>CODE_UBTC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setImageViewResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_wallet_prefix</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>currency_symbol_ubtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>

        <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setTextViewText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_wallet_balance_btc</name></name></expr></argument>, <argument><expr><name>balanceStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setViewVisibility</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_wallet_balance_local</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>localBalanceStr</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setTextViewText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_wallet_balance_local</name></name></expr></argument>, <argument><expr><name>localBalanceStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>appWidgetOptions</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>minWidth</name> <init>= <expr><call><name><name>appWidgetOptions</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>AppWidgetManager</name><operator>.</operator><name>OPTION_APPWIDGET_MIN_WIDTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setViewVisibility</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_app_icon</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>minWidth</name> <operator>&gt;</operator> <literal type="number">400</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setViewVisibility</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_button_request</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>minWidth</name> <operator>&gt;</operator> <literal type="number">300</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setViewVisibility</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_button_send</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>minWidth</name> <operator>&gt;</operator> <literal type="number">300</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setViewVisibility</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_button_send_qr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>minWidth</name> <operator>&gt;</operator> <literal type="number">200</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_button_balance</name></name></expr></argument>,
                <argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>WalletActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_button_request</name></name></expr></argument>,
                <argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>RequestCoinsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_button_send</name></name></expr></argument>,
                <argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>SendCoinsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>setOnClickPendingIntent</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>widget_button_send_qr</name></name></expr></argument>,
                <argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>SendCoinsQrActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>appWidgetManager</name><operator>.</operator><name>updateAppWidget</name></name><argument_list>(<argument><expr><name>appWidgetId</name></expr></argument>, <argument><expr><name>views</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Bundle</name></type> <name>getAppWidgetOptions</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AppWidgetManager</name></type> <name>appWidgetManager</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>appWidgetId</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Method</name></type> <name>getAppWidgetOptions</name> <init>= <expr><call><name><name>AppWidgetManager</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getMethod</name></name></name><argument_list>(<argument><expr><literal type="string">"getAppWidgetOptions"</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>options</name> <init>= <expr><operator>(</operator><name>Bundle</name><operator>)</operator> <call><name><name>getAppWidgetOptions</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>appWidgetManager</name></expr></argument>, <argument><expr><name>appWidgetId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>options</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name><operator>.</operator><name>OnWalletLoadedListener</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>localbroadcastmanager</name><operator>.</operator><name>content</name><operator>.</operator><name>LocalBroadcastManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>AbstractWalletLiveData</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>ThrottelingLiveData</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LocalBroadcastManager</name></type> <name>broadcastManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Wallet</name></type> <name>wallet</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractWalletLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>broadcastManager</name></name> <operator>=</operator> <call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>AbstractWalletLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>throttleMs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>throttleMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>broadcastManager</name></name> <operator>=</operator> <call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>broadcastManager</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>walletReferenceChangeReceiver</name></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>WalletApplication</name><operator>.</operator><name>ACTION_WALLET_REFERENCE_CHANGED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>loadWallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// TODO cancel async loading</comment>
        <if>if <condition>(<expr><name>wallet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>onWalletInactive</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>broadcastManager</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>walletReferenceChangeReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>loadWallet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>getWalletAsync</name></name><argument_list>(<argument><expr><name>onWalletLoadedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>Wallet</name></type> <name>getWallet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>wallet</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OnWalletLoadedListener</name></type> <name>onWalletLoadedListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnWalletLoadedListener</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onWalletLoaded</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><name><name>AbstractWalletLiveData</name><operator>.</operator><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <name>wallet</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>onWalletActive</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BroadcastReceiver</name></type> <name>walletReferenceChangeReceiver</name> <init>= <expr><operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>wallet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>onWalletInactive</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name>loadWallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>onWalletInactive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// do nothing by default</comment>
    }</block></function><empty_stmt>;</empty_stmt>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>Dao</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>Insert</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>OnConflictStrategy</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>Query</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<interface><annotation>@<name>Dao</name></annotation>
<specifier>public</specifier> interface <name>AddressBookDao</name> <block>{
    <function_decl><annotation>@<name>Insert</name><argument_list>(<argument><expr><name>onConflict</name> <operator>=</operator> <name><name>OnConflictStrategy</name><operator>.</operator><name>REPLACE</name></name></expr></argument>)</argument_list></annotation>
    <type><name>void</name></type> <name>insertOrUpdate</name><parameter_list>(<parameter><decl><type><name>AddressBookEntry</name></type> <name>addressBookEntry</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM address_book WHERE address = :address"</literal></expr></argument>)</argument_list></annotation>
    <type><name>void</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"SELECT label FROM address_book WHERE address = :address"</literal></expr></argument>)</argument_list></annotation>
    <type><name>String</name></type> <name>resolveLabel</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM address_book WHERE address LIKE '%' || :constraint || '%' OR label LIKE '%' || :constraint || '%' ORDER BY label COLLATE LOCALIZED ASC"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>constraint</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM address_book ORDER BY label COLLATE LOCALIZED ASC"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAll</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM address_book WHERE address NOT IN (:except) ORDER BY label COLLATE LOCALIZED ASC"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAllExcept</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>except</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>ColumnInfo</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>PrimaryKey</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><annotation>@<name>Entity</name><argument_list>(<argument><expr><name>tableName</name> <operator>=</operator> <literal type="string">"address_book"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>AddressBookEntry</name> <block>{
    <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>PrimaryKey</name></annotation>
    <annotation>@<name>ColumnInfo</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"address"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>String</name></type> <name>address</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>ColumnInfo</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"label"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>String</name></type> <name>label</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AddressBookEntry</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getAddress</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>address</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>label</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>asMap</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>entries</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>AddressBookEntry</name></type> <name>entry</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>addressBook</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><name>addressBook</name></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>Room</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>RoomDatabase</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>room</name><operator>.</operator><name>migration</name><operator>.</operator><name>Migration</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>db</name><operator>.</operator><name>SupportSQLiteDatabase</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><annotation>@<name>Database</name><argument_list>(<argument><expr><name>entities</name> <operator>=</operator> <block>{ <expr><name><name>AddressBookEntry</name><operator>.</operator><name>class</name></name></expr> }</block></expr></argument>, <argument><expr><name>version</name> <operator>=</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>exportSchema</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>abstract</specifier> class <name>AppDatabase</name> <super><extends>extends <name>RoomDatabase</name></extends></super> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>AddressBookDao</name></type> <name>addressBookDao</name><parameter_list>()</parameter_list>;</function_decl>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>AppDatabase</name></type> <name>INSTANCE</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>AppDatabase</name></type> <name>getDatabase</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>INSTANCE</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <synchronized>synchronized <init>(<expr><name><name>AppDatabase</name><operator>.</operator><name>class</name></name></expr>)</init> <block>{
                <if>if <condition>(<expr><name>INSTANCE</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>INSTANCE</name> <operator>=</operator> <call><name><name>Room</name><operator>.</operator><name>databaseBuilder</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>AppDatabase</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"address_book"</literal></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>addMigrations</name><argument_list>(<argument><expr><name>MIGRATION_1_2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>allowMainThreadQueries</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></synchronized>
        }</block></then></if>
        <return>return <expr><name>INSTANCE</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Migration</name></type> <name>MIGRATION_1_2</name> <init>= <expr><operator>new</operator> <class><super><name>Migration</name></super><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>migrate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SupportSQLiteDatabase</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>execSQL</name></name><argument_list>(
                    <argument><expr><literal type="string">"CREATE TABLE address_book_new (address TEXT NOT NULL, label TEXT NULL, PRIMARY KEY(address))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>execSQL</name></name><argument_list>(
                    <argument><expr><literal type="string">"INSERT OR IGNORE INTO address_book_new (address, label) SELECT address, label FROM address_book"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE address_book"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE address_book_new RENAME TO address_book"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainState</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ServiceConnection</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>localbroadcastmanager</name><operator>.</operator><name>content</name><operator>.</operator><name>LocalBroadcastManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BlockchainStateLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>BlockchainState</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>ServiceConnection</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LocalBroadcastManager</name></type> <name>broadcastManager</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BlockchainStateLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>broadcastManager</name></name> <operator>=</operator> <call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>broadcastManager</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>receiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>ACTION_BLOCKCHAIN_STATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>bindService</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>BIND_AUTO_CREATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>unbindService</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>broadcastManager</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>receiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onServiceConnected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ComponentName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>IBinder</name></type> <name>service</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BlockchainService</name></type> <name>blockchainService</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>BlockchainService</name><operator>.</operator><name>LocalBinder</name></name><operator>)</operator> <name>service</name><operator>)</operator><operator>.</operator><call><name>getService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>blockchainService</name><operator>.</operator><name>getBlockchainState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onServiceDisconnected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ComponentName</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BroadcastReceiver</name></type> <name>receiver</name> <init>= <expr><operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>broadcast</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>BlockchainState</name><operator>.</operator><name>fromIntent</name></name><argument_list>(<argument><expr><name>broadcast</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ConfigFormatLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>MonetaryFormat</name></argument>&gt;</argument_list></name></extends>
        <implements>implements <name><name>SharedPreferences</name><operator>.</operator><name>OnSharedPreferenceChangeListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ConfigFormatLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>registerOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>unregisterOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSharedPreferenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>sharedPreferences</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_BTC_PRECISION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ConfigOwnNameLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></extends>
        <implements>implements <name><name>SharedPreferences</name><operator>.</operator><name>OnSharedPreferenceChangeListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ConfigOwnNameLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>registerOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getOwnName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>unregisterOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSharedPreferenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>sharedPreferences</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_OWN_NAME</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getOwnName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Stopwatch</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteStreams</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>FeeCategory</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>AssetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Call</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>HttpUrl</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Response</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>ResponseBody</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>internal</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpDate</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>DynamicFeeLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>HttpUrl</name></type> <name>dynamicFeesUrl</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>userAgent</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AssetManager</name></type> <name>assets</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>File</name></type> <name>dynamicFeesFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>File</name></type> <name>tempFile</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DynamicFeeLiveData</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DynamicFeeLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>packageInfo</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>versionNameSplit</name> <init>= <expr><call><name><name>packageInfo</name><operator>.</operator><name>versionName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dynamicFeesUrl</name></name> <operator>=</operator> <call><name><name>HttpUrl</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DYNAMIC_FEES_URL</name></name>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>versionNameSplit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>packageInfo</name><operator>.</operator><name>versionName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>versionNameSplit</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userAgent</name></name> <operator>=</operator> <call><name><name>WalletApplication</name><operator>.</operator><name>httpUserAgent</name></name><argument_list>(<argument><expr><name><name>packageInfo</name><operator>.</operator><name>versionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>assets</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getAssets</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dynamicFeesFile</name></name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>application</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>FEES_FILENAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tempFile</name></name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>application</name><operator>.</operator><name>getCacheDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>FEES_FILENAME</name></name> <operator>+</operator> <literal type="string">".temp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>dynamicFees</name> <init>= <expr><call><name>loadInBackground</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><name>dynamicFees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>loadInBackground</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>staticFees</name> <init>= <expr><call><name>parseFees</name><argument_list>(<argument><expr><call><name><name>assets</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>FEES_FILENAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>fetchDynamicFees</name><argument_list>(<argument><expr><name>dynamicFeesUrl</name></expr></argument>, <argument><expr><name>tempFile</name></expr></argument>, <argument><expr><name>dynamicFeesFile</name></expr></argument>, <argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>dynamicFeesFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>staticFees</name></expr>;</return></block></then></if>

            <comment type="line">// Check dynamic fees for sanity, based on the hardcoded fees.</comment>
            <comment type="line">// The bounds are as follows (h is the respective hardcoded fee):</comment>
            <comment type="line">// ECONOMIC: h/8 to h*4</comment>
            <comment type="line">// NORMAL: h/4 to h*4</comment>
            <comment type="line">// PRIORITY: h/4 to h*8</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>dynamicFees</name> <init>= <expr><call><name>parseFees</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>dynamicFeesFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>FeeCategory</name></type> <name>category</name> <range>: <expr><call><name><name>FeeCategory</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>staticFee</name> <init>= <expr><call><name><name>staticFees</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>dynamicFee</name> <init>= <expr><call><name><name>dynamicFees</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>dynamicFee</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>dynamicFees</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>staticFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Dynamic fee category missing, using static: category {}, {}/kB"</literal></expr></argument>, <argument><expr><name>category</name></expr></argument>,
                            <argument><expr><call><name><name>staticFee</name><operator>.</operator><name>toFriendlyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>upperBound</name> <init>= <expr><call><name><name>staticFee</name><operator>.</operator><name>shiftLeft</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>category</name> <operator>==</operator> <name><name>FeeCategory</name><operator>.</operator><name>PRIORITY</name></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>dynamicFee</name><operator>.</operator><name>isGreaterThan</name></name><argument_list>(<argument><expr><name>upperBound</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>dynamicFees</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>upperBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Down-adjusting dynamic fee: category {} from {}/kB to {}/kB"</literal></expr></argument>, <argument><expr><name>category</name></expr></argument>,
                            <argument><expr><call><name><name>dynamicFee</name><operator>.</operator><name>toFriendlyString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>upperBound</name><operator>.</operator><name>toFriendlyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>lowerBound</name> <init>= <expr><call><name><name>staticFee</name><operator>.</operator><name>shiftRight</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>category</name> <operator>==</operator> <name><name>FeeCategory</name><operator>.</operator><name>ECONOMIC</name></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>dynamicFee</name><operator>.</operator><name>isLessThan</name></name><argument_list>(<argument><expr><name>lowerBound</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>dynamicFees</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>lowerBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Up-adjusting dynamic fee: category {} from {}/kB to {}/kB"</literal></expr></argument>, <argument><expr><name>category</name></expr></argument>,
                            <argument><expr><call><name><name>dynamicFee</name><operator>.</operator><name>toFriendlyString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>lowerBound</name><operator>.</operator><name>toFriendlyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <return>return <expr><name>dynamicFees</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// Should not happen</comment>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>parseFees</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>dynamicFees</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><specifier>final</specifier> <name>BufferedReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>US_ASCII</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
                <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>

                <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>FeeCategory</name></type> <name>category</name> <init>= <expr><call><name><name>FeeCategory</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>rate</name> <init>= <expr><call><name><name>Coin</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>dynamicFees</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Cannot parse line, ignoring: '"</literal> <operator>+</operator> <name>line</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></while>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error while parsing: '"</literal> <operator>+</operator> <name>line</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally>
        <return>return <expr><name>dynamicFees</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>fetchDynamicFees</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>HttpUrl</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>tempFile</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>targetFile</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>userAgent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Request</name><operator>.</operator><name>Builder</name></name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>url</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"User-Agent"</literal></expr></argument>, <argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>targetFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"If-Modified-Since"</literal></expr></argument>, <argument><expr><call><name><name>HttpDate</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>targetFile</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>OkHttpClient</name><operator>.</operator><name>Builder</name></name></type> <name>httpClientBuilder</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>HTTP_CLIENT</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>connectTimeout</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>writeTimeout</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>readTimeout</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>OkHttpClient</name></type> <name>httpClient</name> <init>= <expr><call><name><name>httpClientBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Call</name></type> <name>call</name> <init>= <expr><call><name><name>httpClient</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Response</name></type> <name>response</name> <init>= <expr><call><name><name>call</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>status</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>code</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>status</name> <operator>==</operator> <name><name>HttpURLConnection</name><operator>.</operator><name>HTTP_NOT_MODIFIED</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Dynamic fees not modified at {}, took {}"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>status</name> <operator>==</operator> <name><name>HttpURLConnection</name><operator>.</operator><name>HTTP_OK</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ResponseBody</name></type> <name>body</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>FileOutputStream</name></type> <name>os</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>tempFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ByteStreams</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>byteStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Date</name></type> <name>lastModified</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>headers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDate</name><argument_list>(<argument><expr><literal type="string">"Last-Modified"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>lastModified</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>tempFile</name><operator>.</operator><name>setLastModified</name></name><argument_list>(<argument><expr><call><name><name>lastModified</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>body</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>tempFile</name><operator>.</operator><name>renameTo</name></name><argument_list>(<argument><expr><name>targetFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cannot rename "</literal> <operator>+</operator> <name>tempFile</name> <operator>+</operator> <literal type="string">" to "</literal> <operator>+</operator> <name>targetFile</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
                <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Dynamic fees fetched from {}, took {}"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"HTTP status {} when fetching dynamic fees from {}"</literal></expr></argument>, <argument><expr><call><name><name>response</name><operator>.</operator><name>code</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Problem when fetching dynamic fees rates from "</literal> <operator>+</operator> <name>url</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ExchangeRate</name> <block>{
    <constructor><specifier>public</specifier> <name>ExchangeRate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name><name>rate</name><operator>.</operator><name>fiat</name><operator>.</operator><name>currencyCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name></type> <name>rate</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>source</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getCurrencyCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>rate</name><operator>.</operator><name>fiat</name><operator>.</operator><name>currencyCode</name></name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">'['</literal> <operator>+</operator> <name><name>rate</name><operator>.</operator><name>fiat</name></name> <operator>+</operator> <literal type="char">']'</literal></expr>;</return>
    }</block></function>
}</block></class>
<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Currency</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fiat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Stopwatch</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Logging</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>GenericUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentProvider</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>MatrixCursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>BaseColumns</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Call</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>HttpUrl</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Response</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ExchangeRatesProvider</name> <super><extends>extends <name>ContentProvider</name></extends></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CURRENCY_CODE</name> <init>= <expr><literal type="string">"currency_code"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_RATE_COIN</name> <init>= <expr><literal type="string">"rate_coin"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_RATE_FIAT</name> <init>= <expr><literal type="string">"rate_fiat"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_SOURCE</name> <init>= <expr><literal type="string">"source"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUERY_PARAM_Q</name> <init>= <expr><literal type="string">"q"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUERY_PARAM_OFFLINE</name> <init>= <expr><literal type="string">"offline"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>userAgent</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></type> <name>exchangeRates</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>lastUpdated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>HttpUrl</name></type> <name>BITCOINAVERAGE_URL</name> <init>= <expr><call><name><name>HttpUrl</name>
            <operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://apiv2.bitcoinaverage.com/indices/global/ticker/short?crypto=BTC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BITCOINAVERAGE_SOURCE</name> <init>= <expr><literal type="string">"BitcoinAverage.com"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>UPDATE_FREQ_MS</name> <init>= <expr><literal type="number">10</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>MINUTE_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ExchangeRatesProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Logging</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name> <init>= <expr><operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userAgent</name></name> <operator>=</operator> <call><name><name>WalletApplication</name><operator>.</operator><name>httpUserAgent</name></name><argument_list>(<argument><expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><name>versionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>cachedExchangeRate</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getCachedExchangeRate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cachedExchangeRate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>exchangeRates</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExchangeRate</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exchangeRates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>cachedExchangeRate</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cachedExchangeRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{}.onCreate() took {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Uri</name></type> <name>contentUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>packageName</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>offline</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Uri</name><operator>.</operator><name>Builder</name></name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"content://"</literal> <operator>+</operator> <name>packageName</name> <operator>+</operator> <literal type="char">'.'</literal> <operator>+</operator> <literal type="string">"exchange_rates"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildUpon</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>offline</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>uri</name><operator>.</operator><name>appendQueryParameter</name></name><argument_list>(<argument><expr><name>QUERY_PARAM_OFFLINE</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><call><name><name>uri</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Cursor</name></type> <name>query</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>projection</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>sortOrder</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>offline</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getQueryParameter</name></name><argument_list>(<argument><expr><name>QUERY_PARAM_OFFLINE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><name>offline</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>lastUpdated</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>now</name> <operator>-</operator> <name>lastUpdated</name> <operator>&gt;</operator> <name>UPDATE_FREQ_MS</name><operator>)</operator></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></type> <name>newExchangeRates</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>newExchangeRates</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>newExchangeRates</name> <operator>=</operator> <call><name>requestExchangeRates</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

            <if>if <condition>(<expr><name>newExchangeRates</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>exchangeRates</name> <operator>=</operator> <name>newExchangeRates</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>lastUpdated</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRateToCache</name> <init>= <expr><call><name>bestExchangeRate</name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getExchangeCurrencyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>exchangeRateToCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setCachedExchangeRate</name></name><argument_list>(<argument><expr><name>exchangeRateToCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>exchangeRates</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>MatrixCursor</name></type> <name>cursor</name> <init>= <expr><operator>new</operator> <call><name>MatrixCursor</name><argument_list>(
                <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>BaseColumns</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name>KEY_CURRENCY_CODE</name></expr>, <expr><name>KEY_RATE_COIN</name></expr>, <expr><name>KEY_RATE_FIAT</name></expr>, <expr><name>KEY_SOURCE</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>selection</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>exchangeRates</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name></type> <name>rate</name> <init>= <expr><name><name>exchangeRate</name><operator>.</operator><name>rate</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>newRow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>currencyCode</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>rate</name><operator>.</operator><name>coin</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>rate</name><operator>.</operator><name>fiat</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>exchangeRate</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>selection</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>QUERY_PARAM_Q</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>selectionArg</name> <init>= <expr><name><name>selectionArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>exchangeRates</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name></type> <name>rate</name> <init>= <expr><name><name>exchangeRate</name><operator>.</operator><name>rate</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencySymbol</name> <init>= <expr><call><name><name>GenericUtils</name><operator>.</operator><name>currencySymbol</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>currencyCode</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>selectionArg</name></expr></argument>)</argument_list></call>
                        <operator>||</operator> <call><name><name>currencySymbol</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>selectionArg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>newRow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>currencyCode</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>rate</name><operator>.</operator><name>coin</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>rate</name><operator>.</operator><name>fiat</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>exchangeRate</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></for>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>selection</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>KEY_CURRENCY_CODE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>selectionArg</name> <init>= <expr><name><name>selectionArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name> <init>= <expr><call><name>bestExchangeRate</name><argument_list>(<argument><expr><name>selectionArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>exchangeRate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name></type> <name>rate</name> <init>= <expr><name><name>exchangeRate</name><operator>.</operator><name>rate</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>newRow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>currencyCode</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>rate</name><operator>.</operator><name>coin</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>rate</name><operator>.</operator><name>fiat</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>exchangeRate</name><operator>.</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></elseif></if>

        <return>return <expr><name>cursor</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>ExchangeRate</name></type> <name>bestExchangeRate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ExchangeRate</name></type> <name>rate</name> <init>= <expr><ternary><condition><expr><name>currencyCode</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>exchangeRates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>rate</name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>defaultCode</name> <init>= <expr><call><name>defaultCurrencyCode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rate</name> <operator>=</operator> <ternary><condition><expr><name>defaultCode</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>exchangeRates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>defaultCode</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>rate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>rate</name></expr>;</return></block></then></if>

        <return>return <expr><call><name><name>exchangeRates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DEFAULT_EXCHANGE_CURRENCY</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>defaultCurrencyCode</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>Currency</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCurrencyCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ExchangeRate</name></type> <name>getExchangeRate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name> <init>= <expr><call><name><name>cursor</name>
                <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ExchangeRatesProvider</name><operator>.</operator><name>KEY_CURRENCY_CODE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>rateCoin</name> <init>= <expr><call><name><name>Coin</name>
                <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ExchangeRatesProvider</name><operator>.</operator><name>KEY_RATE_COIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>rateFiat</name> <init>= <expr><call><name><name>Fiat</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>,
                <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ExchangeRatesProvider</name><operator>.</operator><name>KEY_RATE_FIAT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ExchangeRatesProvider</name><operator>.</operator><name>KEY_SOURCE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>ExchangeRate</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name><argument_list>(<argument><expr><name>rateCoin</name></expr></argument>, <argument><expr><name>rateFiat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Uri</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ContentValues</name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>update</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ContentValues</name></type> <name>values</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getType</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></type> <name>requestExchangeRates</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Request</name><operator>.</operator><name>Builder</name></name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>url</name></name><argument_list>(<argument><expr><name>BITCOINAVERAGE_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"User-Agent"</literal></expr></argument>, <argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Call</name></type> <name>call</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>HTTP_CLIENT</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Response</name></type> <name>response</name> <init>= <expr><call><name><name>call</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>response</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>content</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>JSONObject</name></type> <name>head</name> <init>= <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></type> <name>rates</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExchangeRate</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>i</name> <init>= <expr><call><name><name>head</name><operator>.</operator><name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>currencyCode</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"BTC"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>fiatCurrencyCode</name> <init>= <expr><call><name><name>currencyCode</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><operator>!</operator><call><name><name>fiatCurrencyCode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>MonetaryFormat</name><operator>.</operator><name>CODE_BTC</name></name></expr></argument>)</argument_list></call>
                                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>fiatCurrencyCode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>MonetaryFormat</name><operator>.</operator><name>CODE_MBTC</name></name></expr></argument>)</argument_list></call>
                                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>fiatCurrencyCode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>MonetaryFormat</name><operator>.</operator><name>CODE_UBTC</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>JSONObject</name></type> <name>exchangeRate</name> <init>= <expr><call><name><name>head</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <try>try <block>{
                                <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>rate</name> <init>= <expr><call><name>parseFiatInexact</name><argument_list>(<argument><expr><name>fiatCurrencyCode</name></expr></argument>, <argument><expr><call><name><name>exchangeRate</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"last"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><call><name><name>rate</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                                    <block type="pseudo"><expr_stmt><expr><call><name><name>rates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>fiatCurrencyCode</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ExchangeRate</name><argument_list>(
                                            <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BITCOINAVERAGE_SOURCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"problem fetching {} exchange rate from {}: {}"</literal></expr></argument>, <argument><expr><name>currencyCode</name></expr></argument>,
                                        <argument><expr><name>BITCOINAVERAGE_URL</name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></catch></try>
                        }</block></then></if>
                    }</block></then></if>
                }</block></for>

                <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"fetched exchange rates from {}, {} chars, took {}"</literal></expr></argument>, <argument><expr><name>BITCOINAVERAGE_URL</name></expr></argument>, <argument><expr><call><name><name>content</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>rates</name></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"http status {} when fetching exchange rates from {}"</literal></expr></argument>, <argument><expr><call><name><name>response</name><operator>.</operator><name>code</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BITCOINAVERAGE_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"problem fetching exchange rates from "</literal> <operator>+</operator> <name>BITCOINAVERAGE_URL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="line">// backport from bitcoinj 0.15</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Fiat</name></type> <name>parseFiatInexact</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>val</name> <init>= <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>movePointRight</name><argument_list>(<argument><expr><name><name>Fiat</name><operator>.</operator><name>SMALLEST_UNIT_EXPONENT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>longValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Fiat</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>AddressFormatException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ScriptException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>script</name><operator>.</operator><name>Script</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>script</name><operator>.</operator><name>ScriptBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>uri</name><operator>.</operator><name>BitcoinURI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>SendRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>BaseEncoding</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Bluetooth</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>GenericUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>PaymentIntent</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <enum><specifier>public</specifier> enum <name>Standard</name> <block>{
        <decl><name>BIP21</name></decl>, <decl><name>BIP70</name></decl>
    }</block></enum>

    <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>Output</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Script</name></type> <name>script</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Output</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Script</name></type> <name>script</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>amount</name></name> <operator>=</operator> <name>amount</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>script</name></name> <operator>=</operator> <name>script</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Output</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>PaymentProtocol</name><operator>.</operator><name>Output</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                <throws>throws <argument><expr><name><name>PaymentProtocolException</name><operator>.</operator><name>InvalidOutputs</name></name></expr></argument></throws> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Script</name></type> <name>script</name> <init>= <expr><operator>new</operator> <call><name>Script</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>scriptData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>new</operator> <call><name><name>PaymentIntent</name><operator>.</operator><name>Output</name></name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>amount</name></name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ScriptException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <throw>throw <expr><operator>new</operator> <call><name><name>PaymentProtocolException</name><operator>.</operator><name>InvalidOutputs</name></name><argument_list>(
                        <argument><expr><literal type="string">"unparseable script in output: "</literal> <operator>+</operator> <call><name><name>Constants</name><operator>.</operator><name>HEX</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>scriptData</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAmount</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>amount</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>amount</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>hasAmount</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>amount</name><operator>.</operator><name>toPlainString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>isSentToAddress</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>script</name><operator>.</operator><name>isPayToScriptHash</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>getToAddress</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>isSentToRawPubKey</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Constants</name><operator>.</operator><name>HEX</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>getPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <elseif>else <if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>isSentToMultiSig</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"multisig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeSerializable</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>program</name> <init>= <expr><call><name><name>script</name><operator>.</operator><name>getProgram</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>program</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeByteArray</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Output</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Output</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>Output</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <call><name>Output</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name><name>Output</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <name><name>Output</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Output</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>amount</name> <operator>=</operator> <operator>(</operator><name>Coin</name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>readSerializable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>programLength</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>program</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>programLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readByteArray</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>script</name> <operator>=</operator> <operator>new</operator> <call><name>Script</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><specifier>final</specifier> <name>Standard</name></type> <name>standard</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>payeeName</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>payeeVerifiedBy</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><specifier>final</specifier> <name><name>Output</name><index>[]</index></name></type> <name>outputs</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>memo</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>paymentUrl</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>payeeData</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>paymentRequestUrl</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequestHash</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>PaymentIntent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PaymentIntent</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Standard</name></type> <name>standard</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>payeeName</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>payeeVerifiedBy</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name><name>Output</name><index>[]</index></name></type> <name>outputs</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>memo</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>paymentUrl</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>payeeData</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>paymentRequestUrl</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequestHash</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>standard</name></name> <operator>=</operator> <name>standard</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>payeeName</name></name> <operator>=</operator> <name>payeeName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>payeeVerifiedBy</name></name> <operator>=</operator> <name>payeeVerifiedBy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outputs</name></name> <operator>=</operator> <name>outputs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>memo</name></name> <operator>=</operator> <name>memo</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paymentUrl</name></name> <operator>=</operator> <name>paymentUrl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>payeeData</name></name> <operator>=</operator> <name>payeeData</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paymentRequestUrl</name></name> <operator>=</operator> <name>paymentRequestUrl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paymentRequestHash</name></name> <operator>=</operator> <name>paymentRequestHash</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>PaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>addressLabel</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>buildSimplePayTo</name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>ZERO</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addressLabel</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PaymentIntent</name></type> <name>blank</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>PaymentIntent</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PaymentIntent</name></type> <name>fromAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>addressLabel</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>PaymentIntent</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>addressLabel</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PaymentIntent</name></type> <name>fromAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>addressLabel</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>AddressFormatException</name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>PaymentIntent</name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addressLabel</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PaymentIntent</name></type> <name>from</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>addressLabel</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AddressFormatException</name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>PaymentIntent</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><call><name>buildSimplePayTo</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addressLabel</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PaymentIntent</name></type> <name>fromBitcoinUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BitcoinURI</name></type> <name>bitcoinUri</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>bitcoinUri</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Output</name><index>[]</index></name></type> <name>outputs</name> <init>= <expr><ternary><condition><expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>buildSimplePayTo</name><argument_list>(<argument><expr><call><name><name>bitcoinUri</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>bluetoothMac</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>bitcoinUri</name><operator>.</operator><name>getParameterByName</name></name><argument_list>(<argument><expr><name><name>Bluetooth</name><operator>.</operator><name>MAC_URI_PARAM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>paymentRequestHashStr</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>bitcoinUri</name><operator>.</operator><name>getParameterByName</name></name><argument_list>(<argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequestHash</name> <init>= <expr><ternary><condition><expr><name>paymentRequestHashStr</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>base64UrlDecode</name><argument_list>(<argument><expr><name>paymentRequestHashStr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>PaymentIntent</name><argument_list>(<argument><expr><name><name>PaymentIntent</name><operator>.</operator><name>Standard</name><operator>.</operator><name>BIP21</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>outputs</name></expr></argument>, <argument><expr><call><name><name>bitcoinUri</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><ternary><condition><expr><name>bluetoothMac</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"bt:"</literal> <operator>+</operator> <name>bluetoothMac</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>bitcoinUri</name><operator>.</operator><name>getPaymentRequestUrl</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>paymentRequestHash</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>BaseEncoding</name></type> <name>BASE64URL</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base64Url</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>omitPadding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>base64UrlDecode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>BASE64URL</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"cannot base64url-decode: "</literal> <operator>+</operator> <name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PaymentIntent</name></type> <name>mergeWithEditedValues</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Coin</name></type> <name>editedAmount</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Address</name></type> <name>editedAddress</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Output</name><index>[]</index></name></type> <name>outputs</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>hasOutputs</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>mayEditAmount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>editedAmount</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// put all coins on first output, skip the others</comment>
                <expr_stmt><expr><name>outputs</name> <operator>=</operator> <operator>new</operator> <name><name>Output</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Output</name><argument_list>(<argument><expr><name>editedAmount</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>script</name></expr></argument>)</argument_list></call></expr> }</block></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// exact copy of outputs</comment>
                <expr_stmt><expr><name>outputs</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>outputs</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>editedAmount</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>editedAddress</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// custom output</comment>
            <expr_stmt><expr><name>outputs</name> <operator>=</operator> <call><name>buildSimplePayTo</name><argument_list>(<argument><expr><name>editedAmount</name></expr></argument>, <argument><expr><name>editedAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><operator>new</operator> <call><name>PaymentIntent</name><argument_list>(<argument><expr><name>standard</name></expr></argument>, <argument><expr><name>payeeName</name></expr></argument>, <argument><expr><name>payeeVerifiedBy</name></expr></argument>, <argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>payeeData</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>SendRequest</name></type> <name>toSendRequest</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name> <init>= <expr><operator>new</operator> <call><name>Transaction</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>PaymentIntent</name><operator>.</operator><name>Output</name></name></type> <name>output</name> <range>: <expr><name>outputs</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>addOutput</name></name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>amount</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><call><name><name>SendRequest</name><operator>.</operator><name>forTx</name></name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Output</name><index>[]</index></name></type> <name>buildSimplePayTo</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <name><name>Output</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>Output</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><call><name><name>ScriptBuilder</name><operator>.</operator><name>createOutputScript</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasPayee</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>payeeName</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasOutputs</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>outputs</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>outputs</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAddress</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>outputs</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>outputs</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Script</name></type> <name>script</name> <init>= <expr><name><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>script</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>script</name><operator>.</operator><name>isSentToAddress</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>script</name><operator>.</operator><name>isPayToScriptHash</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>script</name><operator>.</operator><name>isSentToRawPubKey</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Address</name></type> <name>getAddress</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>hasAddress</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Script</name></type> <name>script</name> <init>= <expr><name><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>script</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>script</name><operator>.</operator><name>getToAddress</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>mayEditAddress</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>standard</name> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAmount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>hasOutputs</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>Output</name></type> <name>output</name> <range>: <expr><name>outputs</name></expr></range></decl></init>)</control>
                <block type="pseudo"><if>if <condition>(<expr><call><name><name>output</name><operator>.</operator><name>hasAmount</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if></block></for></block></then></if>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Coin</name></type> <name>getAmount</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Coin</name></type> <name>amount</name> <init>= <expr><name><name>Coin</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>hasOutputs</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>Output</name></type> <name>output</name> <range>: <expr><name>outputs</name></expr></range></decl></init>)</control>
                <block type="pseudo"><if>if <condition>(<expr><call><name><name>output</name><operator>.</operator><name>hasAmount</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>amount</name> <operator>=</operator> <call><name><name>amount</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>amount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></then></if>

        <if>if <condition>(<expr><call><name><name>amount</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>amount</name></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>mayEditAmount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>!</operator><operator>(</operator><name>standard</name> <operator>==</operator> <name><name>Standard</name><operator>.</operator><name>BIP70</name></name> <operator>&amp;&amp;</operator> <call><name>hasAmount</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasPaymentUrl</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>paymentUrl</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSupportedPaymentUrl</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isHttpPaymentUrl</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isBluetoothPaymentUrl</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isHttpPaymentUrl</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>paymentUrl</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>GenericUtils</name><operator>.</operator><name>startsWithIgnoreCase</name></name><argument_list>(<argument><expr><name>paymentUrl</name></expr></argument>, <argument><expr><literal type="string">"http:"</literal></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>GenericUtils</name><operator>.</operator><name>startsWithIgnoreCase</name></name><argument_list>(<argument><expr><name>paymentUrl</name></expr></argument>, <argument><expr><literal type="string">"https:"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isBluetoothPaymentUrl</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Bluetooth</name><operator>.</operator><name>isBluetoothUrl</name></name><argument_list>(<argument><expr><name>paymentUrl</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasPaymentRequestUrl</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>paymentRequestUrl</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSupportedPaymentRequestUrl</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isHttpPaymentRequestUrl</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isBluetoothPaymentRequestUrl</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isHttpPaymentRequestUrl</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>paymentRequestUrl</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>GenericUtils</name><operator>.</operator><name>startsWithIgnoreCase</name></name><argument_list>(<argument><expr><name>paymentRequestUrl</name></expr></argument>, <argument><expr><literal type="string">"http:"</literal></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>GenericUtils</name><operator>.</operator><name>startsWithIgnoreCase</name></name><argument_list>(<argument><expr><name>paymentRequestUrl</name></expr></argument>, <argument><expr><literal type="string">"https:"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isBluetoothPaymentRequestUrl</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Bluetooth</name><operator>.</operator><name>isBluetoothUrl</name></name><argument_list>(<argument><expr><name>paymentRequestUrl</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Check if given payment intent is only extending on &lt;i&gt;this&lt;/i&gt; one, that is it does not alter any of
     * the fields. Address and amount fields must be equal, respectively (non-existence included).
     * 
     * Alternatively, a BIP21+BIP72 request can provide a hash of the BIP70 request.
     * 
     * @param other
     *            payment intent that is checked if it extends this one
     * @return true if it extends
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isExtendedBy</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// shortcut via hash</comment>
        <if>if <condition>(<expr><name>standard</name> <operator>==</operator> <name><name>Standard</name><operator>.</operator><name>BIP21</name></name> <operator>&amp;&amp;</operator> <name><name>other</name><operator>.</operator><name>standard</name></name> <operator>==</operator> <name><name>Standard</name><operator>.</operator><name>BIP70</name></name></expr>)</condition><then>
            <block type="pseudo"><if>if <condition>(<expr><name>paymentRequestHash</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>paymentRequestHash</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>paymentRequestHash</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if></block></then></if>

        <comment type="line">// TODO memo</comment>
        <return>return <expr><call><name>equalsAmount</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>equalsAddress</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>equalsAmount</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasAmount</name> <init>= <expr><call><name>hasAmount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>hasAmount</name> <operator>!=</operator> <call><name><name>other</name><operator>.</operator><name>hasAmount</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>hasAmount</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getAmount</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>equalsAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasAddress</name> <init>= <expr><call><name>hasAddress</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>hasAddress</name> <operator>!=</operator> <call><name><name>other</name><operator>.</operator><name>hasAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>hasAddress</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>standard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>hasPayee</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>payeeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>payeeVerifiedBy</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>payeeVerifiedBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>hasOutputs</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>outputs</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>paymentUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>payeeData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">",payeeData="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Constants</name><operator>.</operator><name>HEX</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>payeeData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>paymentRequestUrl</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">",paymentRequestUrl="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>paymentRequestUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>paymentRequestHash</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">",paymentRequestHash="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Constants</name><operator>.</operator><name>HEX</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>paymentRequestHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeSerializable</name></name><argument_list>(<argument><expr><name>standard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>payeeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>payeeVerifiedBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>outputs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>outputs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeTypedArray</name></name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>paymentUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>payeeData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>payeeData</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeByteArray</name></name><argument_list>(<argument><expr><name>payeeData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>paymentRequestUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>paymentRequestHash</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>paymentRequestHash</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeByteArray</name></name><argument_list>(<argument><expr><name>paymentRequestHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>PaymentIntent</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>PaymentIntent</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>PaymentIntent</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>PaymentIntent</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>PaymentIntent</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>PaymentIntent</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>PaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>standard</name> <operator>=</operator> <operator>(</operator><name>Standard</name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>readSerializable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>payeeName</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>payeeVerifiedBy</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>outputsLength</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>outputsLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>outputs</name> <operator>=</operator> <operator>new</operator> <name><name>Output</name><index>[<expr><name>outputsLength</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readTypedArray</name></name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name><name>Output</name><operator>.</operator><name>CREATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>outputs</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>paymentUrl</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>payeeDataLength</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>payeeDataLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>payeeData</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>payeeDataLength</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readByteArray</name></name><argument_list>(<argument><expr><name>payeeData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>payeeData</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>paymentRequestUrl</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>paymentRequestHashLength</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>paymentRequestHashLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>paymentRequestHash</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>paymentRequestHashLength</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readByteArray</name></name><argument_list>(<argument><expr><name>paymentRequestHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>paymentRequestHash</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></constructor>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>OnSharedPreferenceChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>loader</name><operator>.</operator><name>content</name><operator>.</operator><name>CursorLoader</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>SelectedExchangeRateLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>OnSharedPreferenceChangeListener</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CursorLoader</name></type> <name>loader</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SelectedExchangeRateLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loader</name></name> <operator>=</operator> <operator>new</operator> <class><super><name>CursorLoader</name></super><argument_list>(<argument><expr><name>application</name></expr></argument>,
                <argument><expr><call><name><name>ExchangeRatesProvider</name><operator>.</operator><name>contentUri</name></name><argument_list>(<argument><expr><call><name><name>application</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><name><name>ExchangeRatesProvider</name><operator>.</operator><name>KEY_CURRENCY_CODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="null">null</literal></expr> }</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>deliverResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>ExchangeRatesProvider</name><operator>.</operator><name>getExchangeRate</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>startLoading</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>registerOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onCurrencyChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>unregisterOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>stopLoading</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSharedPreferenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>sharedPreferences</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_EXCHANGE_CURRENCY</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>onCurrencyChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>onCurrencyChange</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>exchangeCurrency</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getExchangeCurrencyCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>setSelectionArgs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>exchangeCurrency</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>forceLoad</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>MainThread</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>ThrottelingLiveData</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>throttleMs</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>lastMessageMs</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>DEFAULT_THROTTLE_MS</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ThrottelingLiveData</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>DEFAULT_THROTTLE_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>ThrottelingLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>throttleMs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>throttleMs</name></name> <operator>=</operator> <name>throttleMs</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onInactive</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>removeCallbacksAndMessages</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>MainThread</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>triggerLoad</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>removeCallbacksAndMessages</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>runnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><name>lastMessageMs</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>lastMessageAgoMs</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>lastMessageMs</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>lastMessageAgoMs</name> <operator>&lt;</operator> <name>throttleMs</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr><name>throttleMs</name> <operator>-</operator> <name>lastMessageAgoMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if> <comment type="line">// immediately</comment>
    }</block></function>

    <function><annotation>@<name>MainThread</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// do nothing by default</comment>
    }</block></function>
}</block></class>
<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>TimeLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>Date</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TimeLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <name>application</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>tickReceiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_TIME_TICK</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>tickReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BroadcastReceiver</name></type> <name>tickReceiver</name> <init>= <expr><operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Threading</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>BalanceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletChangeEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletCoinsReceivedEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletCoinsSentEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletReorganizeEventListener</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>OnSharedPreferenceChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>WalletBalanceLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></extends>
        <implements>implements <name>OnSharedPreferenceChangeListener</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BalanceType</name></type> <name>balanceType</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WalletBalanceLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>BalanceType</name></type> <name>balanceType</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>balanceType</name></name> <operator>=</operator> <name>balanceType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>WalletBalanceLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><name><name>BalanceType</name><operator>.</operator><name>ESTIMATED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addWalletListener</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>registerOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletInactive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>unregisterOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeWalletListener</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>addWalletListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addCoinsReceivedEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addCoinsSentEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addReorganizeEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addChangeEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>removeWalletListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeChangeEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeReorganizeEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeCoinsSentEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeCoinsReceivedEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name>balanceType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletListener</name></type> <name>walletListener</name> <init>= <expr><operator>new</operator> <call><name>WalletListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> class <name>WalletListener</name> <super><implements>implements <name>WalletCoinsReceivedEventListener</name>, <name>WalletCoinsSentEventListener</name>,
            <name>WalletReorganizeEventListener</name>, <name>WalletChangeEventListener</name></implements></super> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onCoinsReceived</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>prevBalance</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>newBalance</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onCoinsSent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>prevBalance</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>newBalance</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onReorganize</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onWalletChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSharedPreferenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>sharedPreferences</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_BTC_PRECISION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>WalletLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>offline</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VerificationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>CrashReporter</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name><operator>.</operator><name>WakeLock</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LifecycleService</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>AcceptBluetoothService</name> <super><extends>extends <name>LifecycleService</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletLiveData</name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WakeLock</name></type> <name>wakeLock</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AcceptBluetoothThread</name></type> <name>classicThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AcceptBluetoothThread</name></type> <name>paymentProtocolThread</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>serviceCreatedAt</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>TIMEOUT_MS</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>MINUTE_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AcceptBluetoothService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>IBinder</name></type> <name>onBind</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>onStartCommand</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>startId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStartCommand</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>startId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>removeCallbacks</name></name><argument_list>(<argument><expr><name>timeoutRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><name>timeoutRunnable</name></expr></argument>, <argument><expr><name>TIMEOUT_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>START_NOT_STICKY</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>serviceCreatedAt</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">".onCreate()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name>getApplication</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name> <init>= <expr><call><name>checkNotNull</name><argument_list>(<argument><expr><call><name><name>BluetoothAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PowerManager</name></type> <name>pm</name> <init>= <expr><operator>(</operator><name>PowerManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>POWER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>wakeLock</name> <operator>=</operator> <call><name><name>pm</name><operator>.</operator><name>newWakeLock</name></name><argument_list>(<argument><expr><name><name>PowerManager</name><operator>.</operator><name>PARTIAL_WAKE_LOCK</name></name></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>registerReceiver</name><argument_list>(<argument><expr><name>bluetoothStateChangeReceiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>BluetoothAdapter</name><operator>.</operator><name>ACTION_STATE_CHANGED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>classicThread</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>AcceptBluetoothThread</name><operator>.</operator><name>ClassicBluetoothThread</name></name></super><argument_list>(<argument><expr><name>bluetoothAdapter</name></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>boolean</name></type> <name>handleTx</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
                    <return>return <expr><call><name><name>AcceptBluetoothService</name><operator>.</operator><name>this</name><operator>.</operator><name>handleTx</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>
            }</block></class></expr>;</expr_stmt>
            <expr_stmt><expr><name>paymentProtocolThread</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>AcceptBluetoothThread</name><operator>.</operator><name>PaymentProtocolThread</name></name></super><argument_list>(<argument><expr><name>bluetoothAdapter</name></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>boolean</name></type> <name>handleTx</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
                    <return>return <expr><call><name><name>AcceptBluetoothService</name><operator>.</operator><name>this</name><operator>.</operator><name>handleTx</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>
            }</block></class></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><operator>new</operator> <call><name>Toast</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>longToast</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_bluetooth</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"problem with listening, stopping service"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>CrashReporter</name><operator>.</operator><name>saveBackgroundTrace</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stopSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>wallet</name> <operator>=</operator> <operator>new</operator> <call><name>WalletLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>classicThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>paymentProtocolThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>handleTx</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"tx "</literal> <operator>+</operator> <call><name><name>tx</name><operator>.</operator><name>getHashAsString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" arrived via blueooth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>isTransactionRelevant</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>receivePending</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>broadcastTransaction</name></name><argument_list>(<argument><expr><name><name>AcceptBluetoothService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"tx "</literal> <operator>+</operator> <call><name><name>tx</name><operator>.</operator><name>getHashAsString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" irrelevant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VerificationException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"cannot verify tx "</literal> <operator>+</operator> <call><name><name>tx</name><operator>.</operator><name>getHashAsString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" received via bluetooth"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>paymentProtocolThread</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>paymentProtocolThread</name><operator>.</operator><name>stopAccepting</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>classicThread</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>classicThread</name><operator>.</operator><name>stopAccepting</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name>unregisterReceiver</name><argument_list>(<argument><expr><name>bluetoothStateChangeReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>removeCallbacksAndMessages</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"service was up for "</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>serviceCreatedAt</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>+</operator> <literal type="string">" minutes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BroadcastReceiver</name></type> <name>bluetoothStateChangeReceiver</name> <init>= <expr><operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>state</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name><name>BluetoothAdapter</name><operator>.</operator><name>EXTRA_STATE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>BluetoothAdapter</name><operator>.</operator><name>STATE_TURNING_OFF</name></name> <operator>||</operator> <name>state</name> <operator>==</operator> <name><name>BluetoothAdapter</name><operator>.</operator><name>STATE_OFF</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"bluetooth was turned off, stopping service"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>stopSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Runnable</name></type> <name>timeoutRunnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"timeout expired, stopping service"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>stopSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright 2012-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>offline</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoin</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>Protos</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoin</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>Protos</name><operator>.</operator><name>PaymentACK</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Bluetooth</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothServerSocket</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothSocket</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Shahar Livne
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AcceptBluetoothThread</name> <super><extends>extends <name>Thread</name></extends></super> <block>{
    <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>BluetoothServerSocket</name></type> <name>listeningSocket</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>AtomicBoolean</name></type> <name>running</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AcceptBluetoothThread</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>AcceptBluetoothThread</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BluetoothServerSocket</name></type> <name>listeningSocket</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listeningSocket</name></name> <operator>=</operator> <name>listeningSocket</name></expr>;</expr_stmt>
    }</block></constructor>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>ClassicBluetoothThread</name> <super><extends>extends <name>AcceptBluetoothThread</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>ClassicBluetoothThread</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>adapter</name><operator>.</operator><name>listenUsingInsecureRfcommWithServiceRecord</name></name><argument_list>(<argument><expr><name><name>Bluetooth</name><operator>.</operator><name>CLASSIC_PAYMENT_PROTOCOL_NAME</name></name></expr></argument>,
                    <argument><expr><name><name>Bluetooth</name><operator>.</operator><name>CLASSIC_PAYMENT_PROTOCOL_UUID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><call><name><name>running</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <try>try <init>( <comment type="line">// start a blocking call, and return only on success or exception</comment>
                        <decl><type><specifier>final</specifier> <name>BluetoothSocket</name></type> <name>socket</name> <init>= <expr><call><name><name>listeningSocket</name><operator>.</operator><name>accept</name></name><argument_list>()</argument_list></call></expr></init></decl>;
                        <expr><name>final</name> <name>DataInputStream</name> <name>is</name> <operator>=</operator> <operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><call><name><name>socket</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
                        <expr><name>final</name> <name>DataOutputStream</name> <name>os</name> <operator>=</operator> <operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><call><name><name>socket</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</init> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"accepted classic bluetooth connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>boolean</name></type> <name>ack</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numMessages</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numMessages</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>msgLength</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>msg</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>msgLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <try>try <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <init>= <expr><operator>new</operator> <call><name>Transaction</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if>if <condition>(<expr><operator>!</operator><call><name>handleTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                                <block type="pseudo"><expr_stmt><expr><name>ack</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
                        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ProtocolException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"cannot decode message received via bluetooth"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>ack</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></for>

                    <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>ack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"exception in bluetooth accept loop"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch>
            }</block></while>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>PaymentProtocolThread</name> <super><extends>extends <name>AcceptBluetoothThread</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>PaymentProtocolThread</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>adapter</name><operator>.</operator><name>listenUsingInsecureRfcommWithServiceRecord</name></name><argument_list>(<argument><expr><name><name>Bluetooth</name><operator>.</operator><name>BIP70_PAYMENT_PROTOCOL_NAME</name></name></expr></argument>,
                    <argument><expr><name><name>Bluetooth</name><operator>.</operator><name>BIP70_PAYMENT_PROTOCOL_UUID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><call><name><name>running</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <try>try <init>( <comment type="line">// start a blocking call, and return only on success or exception</comment>
                        <decl><type><specifier>final</specifier> <name>BluetoothSocket</name></type> <name>socket</name> <init>= <expr><call><name><name>listeningSocket</name><operator>.</operator><name>accept</name></name><argument_list>()</argument_list></call></expr></init></decl>;
                        <expr><name>final</name> <name>DataInputStream</name> <name>is</name> <operator>=</operator> <operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><call><name><name>socket</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
                        <expr><name>final</name> <name>DataOutputStream</name> <name>os</name> <operator>=</operator> <operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><call><name><name>socket</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</init> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"accepted payment protocol bluetooth connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>boolean</name></type> <name>ack</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>Payment</name></name></type> <name>payment</name> <init>= <expr><call><name><name>Protos</name><operator>.</operator><name>Payment</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"got payment message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <range>: <expr><call><name><name>PaymentProtocol</name>
                            <operator>.</operator><name>parseTransactionsFromPaymentMessage</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>payment</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
                        <if>if <condition>(<expr><operator>!</operator><call><name>handleTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>ack</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
                    }</block></for>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>memo</name> <init>= <expr><ternary><condition><expr><name>ack</name></expr> ?</condition><then> <expr><literal type="string">"ack"</literal></expr> </then><else>: <expr><literal type="string">"nack"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"sending {} via bluetooth"</literal></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>PaymentACK</name></type> <name>paymentAck</name> <init>= <expr><call><name><name>PaymentProtocol</name><operator>.</operator><name>createPaymentAck</name></name><argument_list>(<argument><expr><name>payment</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>paymentAck</name><operator>.</operator><name>writeDelimitedTo</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"exception in bluetooth accept loop"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch>
            }</block></while>
        }</block></function>
    }</block></class>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>stopAccepting</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>running</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>listeningSocket</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// swallow</comment>
        }</block></catch></try>
    }</block></function>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>handleTx</name><parameter_list>(<parameter><decl><type><name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>offline</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoin</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>Protos</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoin</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>Protos</name><operator>.</operator><name>Payment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Bluetooth</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothDevice</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothSocket</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>CacheControl</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Call</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>MediaType</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>RequestBody</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Response</name></name>;</import>
<import>import <name><name>okio</name><operator>.</operator><name>BufferedSink</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DirectPaymentTask</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>callbackHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DirectPaymentTask</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <interface><specifier>public</specifier> interface <name>ResultCallback</name> <block>{
        <function_decl><type><name>void</name></type> <name>onResult</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>ack</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onFail</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <constructor><specifier>public</specifier> <name>DirectPaymentTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backgroundHandler</name></name> <operator>=</operator> <name>backgroundHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callbackHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resultCallback</name></name> <operator>=</operator> <name>resultCallback</name></expr>;</expr_stmt>
    }</block></constructor>

    <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>HttpPaymentTask</name> <super><extends>extends <name>DirectPaymentTask</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>url</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
        <specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>userAgent</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>HttpPaymentTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>url</name></decl></parameter>,
                <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>userAgent</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><name>resultCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userAgent</name></name> <operator>=</operator> <name>userAgent</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>send</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Payment</name></type> <name>payment</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"trying to send tx to {}"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Request</name><operator>.</operator><name>Builder</name></name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>url</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>cacheControl</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>CacheControl</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>noCache</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"Accept"</literal></expr></argument>, <argument><expr><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENTACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"User-Agent"</literal></expr></argument>, <argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>RequestBody</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>MediaType</name></type> <name>contentType</name><parameter_list>()</parameter_list> <block>{
                            <return>return <expr><call><name><name>MediaType</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
                        }</block></function>

                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>long</name></type> <name>contentLength</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                            <return>return <expr><call><name><name>payment</name><operator>.</operator><name>getSerializedSize</name></name><argument_list>()</argument_list></call></expr>;</return>
                        }</block></function>

                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BufferedSink</name></type> <name>sink</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                            <expr_stmt><expr><call><name><name>payment</name><operator>.</operator><name>writeTo</name></name><argument_list>(<argument><expr><call><name><name>sink</name><operator>.</operator><name>outputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>Call</name></type> <name>call</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>HTTP_CLIENT</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <try>try <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Response</name></type> <name>response</name> <init>= <expr><call><name><name>call</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>response</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"tx sent via http"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>byteStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>PaymentACK</name></name></type> <name>paymentAck</name> <init>= <expr><call><name><name>Protos</name><operator>.</operator><name>PaymentACK</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ack</name> <init>= <expr><operator>!</operator><literal type="string">"nack"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>PaymentProtocol</name><operator>.</operator><name>parsePaymentAck</name></name><argument_list>(<argument><expr><name>paymentAck</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMemo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"received {} via http"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>ack</name></expr> ?</condition><then> <expr><literal type="string">"ack"</literal></expr> </then><else>: <expr><literal type="string">"nack"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name>onResult</name><argument_list>(<argument><expr><name>ack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>responseCode</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>code</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>responseMessage</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>message</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got http error {}: {}"</literal></expr></argument>, <argument><expr><name>responseCode</name></expr></argument>, <argument><expr><name>responseMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_http</name></name></expr></argument>, <argument><expr><name>responseCode</name></expr></argument>, <argument><expr><name>responseMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem sending"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_io</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>BluetoothPaymentTask</name> <super><extends>extends <name>DirectPaymentTask</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>bluetoothMac</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>BluetoothPaymentTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>bluetoothMac</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><name>resultCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothAdapter</name></name> <operator>=</operator> <name>bluetoothAdapter</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothMac</name></name> <operator>=</operator> <name>bluetoothMac</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>send</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Payment</name></type> <name>payment</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"trying to send tx via bluetooth {}"</literal></expr></argument>, <argument><expr><name>bluetoothMac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><call><name><name>payment</name><operator>.</operator><name>getTransactionsCount</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
                        <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"wrong transactions count"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>BluetoothDevice</name></type> <name>device</name> <init>= <expr><call><name><name>bluetoothAdapter</name>
                            <operator>.</operator><name>getRemoteDevice</name></name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>decompressMac</name></name><argument_list>(<argument><expr><name>bluetoothMac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <try>try <init>(<decl><type><specifier>final</specifier> <name>BluetoothSocket</name></type> <name>socket</name> <init>= <expr><call><name><name>device</name>
                            <operator>.</operator><name>createInsecureRfcommSocketToServiceRecord</name></name><argument_list>(<argument><expr><name><name>Bluetooth</name><operator>.</operator><name>BIP70_PAYMENT_PROTOCOL_UUID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;
                            <expr><name>final</name> <name>DataOutputStream</name> <name>os</name> <operator>=</operator> <operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><call><name><name>socket</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
                            <expr><name>final</name> <name>DataInputStream</name> <name>is</name> <operator>=</operator> <operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><call><name><name>socket</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</init> <block>{
                        <expr_stmt><expr><call><name><name>socket</name><operator>.</operator><name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"connected to payment protocol {}"</literal></expr></argument>, <argument><expr><name>bluetoothMac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>payment</name><operator>.</operator><name>writeDelimitedTo</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"tx sent via bluetooth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>PaymentACK</name></name></type> <name>paymentAck</name> <init>= <expr><call><name><name>Protos</name><operator>.</operator><name>PaymentACK</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ack</name> <init>= <expr><literal type="string">"ack"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>PaymentProtocol</name><operator>.</operator><name>parsePaymentAck</name></name><argument_list>(<argument><expr><name>paymentAck</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMemo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"received {} via bluetooth"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>ack</name></expr> ?</condition><then> <expr><literal type="string">"ack"</literal></expr> </then><else>: <expr><literal type="string">"nack"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>onResult</name><argument_list>(<argument><expr><name>ack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem sending"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_io</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>send</name><parameter_list>(<parameter><decl><type><name>Payment</name></type> <name>payment</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>onResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ack</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>resultCallback</name><operator>.</operator><name>onResult</name></name><argument_list>(<argument><expr><name>ack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>onFail</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>resultCallback</name><operator>.</operator><name>onFail</name></name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Block</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>BlockChain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>CheckpointManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>FilteredBlock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Peer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>PeerGroup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>StoredBlock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionConfidence</name><operator>.</operator><name>ConfidenceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>listeners</name><operator>.</operator><name>AbstractPeerDataEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>listeners</name><operator>.</operator><name>PeerConnectedEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>listeners</name><operator>.</operator><name>PeerDataEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>listeners</name><operator>.</operator><name>PeerDisconnectedEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>net</name><operator>.</operator><name>discovery</name><operator>.</operator><name>MultiplexingDiscovery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>net</name><operator>.</operator><name>discovery</name><operator>.</operator><name>PeerDiscovery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>net</name><operator>.</operator><name>discovery</name><operator>.</operator><name>PeerDiscoveryException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>store</name><operator>.</operator><name>BlockStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>store</name><operator>.</operator><name>BlockStoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>store</name><operator>.</operator><name>SPVBlockStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Threading</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletCoinsReceivedEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletCoinsSentEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Stopwatch</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletBalanceWidgetProvider</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookDao</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRate</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>SelectedExchangeRateLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>TimeLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletBalanceLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainState</name><operator>.</operator><name>Impediment</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>WalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>CrashReporter</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlarmManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentCallbacks2</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>OnSharedPreferenceChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectivityManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>NetworkInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Binder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name><operator>.</operator><name>WakeLock</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LifecycleService</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>localbroadcastmanager</name><operator>.</operator><name>content</name><operator>.</operator><name>LocalBroadcastManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BlockchainService</name> <super><extends>extends <name>LifecycleService</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AddressBookDao</name></type> <name>addressBookDao</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletLiveData</name></type> <name>wallet</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>BlockStore</name></type> <name>blockStore</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>File</name></type> <name>blockChainFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BlockChain</name></type> <name>blockChain</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>PeerGroup</name></type> <name>peerGroup</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>delayHandler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WakeLock</name></type> <name>wakeLock</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>PeerConnectivityListener</name></type> <name>peerConnectivityListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>NotificationManager</name></type> <name>nm</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ImpedimentsLiveData</name></type> <name>impediments</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>notificationCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Coin</name></type> <name>notificationAccumulatedAmount</name> <init>= <expr><name><name>Coin</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>notificationAddresses</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AtomicInteger</name></type> <name>transactionsReceived</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>serviceCreatedAt</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>resetBlockchainOnShutdown</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MIN_COLLECT_HISTORY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IDLE_BLOCK_TIMEOUT_MIN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IDLE_TRANSACTION_TIMEOUT_MIN</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_HISTORY_SIZE</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>IDLE_TRANSACTION_TIMEOUT_MIN</name></expr></argument>, <argument><expr><name>IDLE_BLOCK_TIMEOUT_MIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>BLOCKCHAIN_STATE_BROADCAST_THROTTLE_MS</name> <init>= <expr><name><name>DateUtils</name><operator>.</operator><name>SECOND_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_PEER_STATE</name> <init>= <expr><call><name><name>BlockchainService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".peer_state"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_PEER_STATE_NUM_PEERS</name> <init>= <expr><literal type="string">"num_peers"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_BLOCKCHAIN_STATE</name> <init>= <expr><call><name><name>BlockchainService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">".blockchain_state"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_CANCEL_COINS_RECEIVED</name> <init>= <expr><call><name><name>BlockchainService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">".cancel_coins_received"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_RESET_BLOCKCHAIN</name> <init>= <expr><call><name><name>BlockchainService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">".reset_blockchain"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_BROADCAST_TRANSACTION</name> <init>= <expr><call><name><name>BlockchainService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">".broadcast_transaction"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_BROADCAST_TRANSACTION_HASH</name> <init>= <expr><literal type="string">"hash"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>cancelCoinsReceived</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>cancelCoinsReceived</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startService</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>ACTION_CANCEL_COINS_RECEIVED</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startService</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>stop</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>stopService</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>scheduleStart</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>lastUsedAgo</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getLastUsedAgo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// apply some backoff</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>alarmInterval</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>lastUsedAgo</name> <operator>&lt;</operator> <name><name>Constants</name><operator>.</operator><name>LAST_USAGE_THRESHOLD_JUST_MS</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>alarmInterval</name> <operator>=</operator> <name><name>AlarmManager</name><operator>.</operator><name>INTERVAL_FIFTEEN_MINUTES</name></name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>lastUsedAgo</name> <operator>&lt;</operator> <name><name>Constants</name><operator>.</operator><name>LAST_USAGE_THRESHOLD_RECENTLY_MS</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>alarmInterval</name> <operator>=</operator> <name><name>AlarmManager</name><operator>.</operator><name>INTERVAL_HALF_DAY</name></name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>alarmInterval</name> <operator>=</operator> <name><name>AlarmManager</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>;</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"last used {} minutes ago, rescheduling blockchain sync in roughly {} minutes"</literal></expr></argument>,
                <argument><expr><name>lastUsedAgo</name> <operator>/</operator> <name><name>DateUtils</name><operator>.</operator><name>MINUTE_IN_MILLIS</name></name></expr></argument>, <argument><expr><name>alarmInterval</name> <operator>/</operator> <name><name>DateUtils</name><operator>.</operator><name>MINUTE_IN_MILLIS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AlarmManager</name></type> <name>alarmManager</name> <init>= <expr><operator>(</operator><name>AlarmManager</name><operator>)</operator> <call><name><name>application</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ALARM_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PendingIntent</name></type> <name>alarmIntent</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getService</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>alarmManager</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name>alarmIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// workaround for no inexact set() before KitKat</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>alarmManager</name><operator>.</operator><name>setInexactRepeating</name></name><argument_list>(<argument><expr><name><name>AlarmManager</name><operator>.</operator><name>RTC_WAKEUP</name></name></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <name>alarmInterval</name></expr></argument>, <argument><expr><name><name>AlarmManager</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr></argument>,
                <argument><expr><name>alarmIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>resetBlockchain</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// implicitly stops blockchain service</comment>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startService</name></name><argument_list>(
                <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>ACTION_RESET_BLOCKCHAIN</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>broadcastTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>ACTION_BROADCAST_TRANSACTION</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
                <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>ACTION_BROADCAST_TRANSACTION_HASH</name></name></expr></argument>, <argument><expr><call><name><name>tx</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startService</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>NewTransactionLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>NewTransactionLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <name>wallet</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addCoinsReceivedEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addCoinsSentEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeCoinsSentEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeCoinsReceivedEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletListener</name></type> <name>walletListener</name> <init>= <expr><operator>new</operator> <call><name>WalletListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <class><specifier>private</specifier> class <name>WalletListener</name> <super><implements>implements <name>WalletCoinsReceivedEventListener</name>, <name>WalletCoinsSentEventListener</name></implements></super> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCoinsReceived</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>prevBalance</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>newBalance</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCoinsSent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>prevBalance</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>newBalance</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class>
    }</block></class>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>notifyCoinsReceived</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>transactionHash</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>notificationCount</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>notificationAccumulatedAmount</name> <operator>=</operator> <call><name><name>notificationAccumulatedAmount</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>notificationAddresses</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>notificationAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>btcFormat</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>packageFlavor</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>applicationPackageFlavor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>msgSuffix</name> <init>= <expr><ternary><condition><expr><name>packageFlavor</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">" ["</literal> <operator>+</operator> <name>packageFlavor</name> <operator>+</operator> <literal type="string">"]"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="line">// summary notification</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>summaryNotification</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                <argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_CHANNEL_ID_RECEIVED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>summaryNotification</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_GROUP_KEY_RECEIVED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>summaryNotification</name><operator>.</operator><name>setGroupSummary</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>summaryNotification</name><operator>.</operator><name>setGroupAlertBehavior</name></name><argument_list>(<argument><expr><name><name>NotificationCompat</name><operator>.</operator><name>GROUP_ALERT_CHILDREN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>summaryNotification</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>summaryNotification</name><operator>.</operator><name>setSmallIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>stat_notify_received_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>summaryNotification</name><operator>.</operator><name>setContentTitle</name></name><argument_list>(
                <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_coins_received_msg</name></name></expr></argument>, <argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>notificationAccumulatedAmount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>+</operator> <name>msgSuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>notificationAddresses</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>text</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Address</name></type> <name>notificationAddress</name> <range>: <expr><name>notificationAddresses</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>addressStr</name> <init>= <expr><call><name><name>notificationAddress</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name> <init>= <expr><call><name><name>addressBookDao</name><operator>.</operator><name>resolveLabel</name></name><argument_list>(<argument><expr><name>addressStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>label</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>label</name></expr> </then><else>: <expr><name>addressStr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>summaryNotification</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>summaryNotification</name>
                <operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WalletActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_COINS_RECEIVED</name></name></expr></argument>, <argument><expr><call><name><name>summaryNotification</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// child notification</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>childNotification</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                <argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_CHANNEL_ID_RECEIVED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>childNotification</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_GROUP_KEY_RECEIVED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>childNotification</name><operator>.</operator><name>setGroupAlertBehavior</name></name><argument_list>(<argument><expr><name><name>NotificationCompat</name><operator>.</operator><name>GROUP_ALERT_CHILDREN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>childNotification</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>childNotification</name><operator>.</operator><name>setSmallIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>stat_notify_received_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>msg</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_coins_received_msg</name></name></expr></argument>, <argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>msgSuffix</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>childNotification</name><operator>.</operator><name>setTicker</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>childNotification</name><operator>.</operator><name>setContentTitle</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>addressStr</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>addressLabel</name> <init>= <expr><call><name><name>addressBookDao</name><operator>.</operator><name>resolveLabel</name></name><argument_list>(<argument><expr><name>addressStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>addressLabel</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>childNotification</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><name>addressLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name><name>childNotification</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><name>addressStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>childNotification</name>
                <operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WalletActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>childNotification</name><operator>.</operator><name>setSound</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"android.resource://"</literal> <operator>+</operator> <call><name>getPackageName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>coins_received</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><call><name><name>transactionHash</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_COINS_RECEIVED</name></name></expr></argument>, <argument><expr><call><name><name>childNotification</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>private</specifier> <specifier>final</specifier> class <name>PeerConnectivityListener</name>
            <super><implements>implements <name>PeerConnectedEventListener</name>, <name>PeerDisconnectedEventListener</name>, <name>OnSharedPreferenceChangeListener</name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>peerCount</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>AtomicBoolean</name></type> <name>stopped</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>PeerConnectivityListener</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>registerOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>stopped</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>unregisterOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_CONNECTED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onPeerConnected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Peer</name></type> <name>peer</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>peerCount</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>peerCount</name></name> <operator>=</operator> <name>peerCount</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>changed</name><argument_list>(<argument><expr><name>peerCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onPeerDisconnected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Peer</name></type> <name>peer</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>peerCount</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>peerCount</name></name> <operator>=</operator> <name>peerCount</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>changed</name><argument_list>(<argument><expr><name>peerCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onSharedPreferenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>sharedPreferences</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_CONNECTIVITY_NOTIFICATION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>changed</name><argument_list>(<argument><expr><name>peerCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>numPeers</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>stopped</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return;</return></block></then></if>

            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>connectivityNotificationEnabled</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getConnectivityNotificationEnabled</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><operator>!</operator><name>connectivityNotificationEnabled</name> <operator>||</operator> <name>numPeers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>stopForeground</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(
                                <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_CHANNEL_ID_ONGOING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setSmallIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>stat_notify_peers</name></name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>numPeers</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setContentTitle</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_peers_connected_msg</name></name></expr></argument>, <argument><expr><name>numPeers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>WalletActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setOngoing</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>startForeground</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_CONNECTED</name></name></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>

                    <comment type="line">// send broadcast</comment>
                    <expr_stmt><expr><call><name>broadcastPeerState</name><argument_list>(<argument><expr><name>numPeers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>PeerDataEventListener</name></type> <name>blockchainDownloadListener</name> <init>= <expr><operator>new</operator> <class><super><name>AbstractPeerDataEventListener</name></super><argument_list>()</argument_list> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AtomicLong</name></type> <name>lastMessageTime</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onBlocksDownloaded</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Peer</name></type> <name>peer</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Block</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>FilteredBlock</name></type> <name>filteredBlock</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>blocksLeft</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>delayHandler</name><operator>.</operator><name>removeCallbacksAndMessages</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>now</name> <operator>-</operator> <call><name><name>lastMessageTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>BLOCKCHAIN_STATE_BROADCAST_THROTTLE_MS</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>delayHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name><name>delayHandler</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr><name>BLOCKCHAIN_STATE_BROADCAST_THROTTLE_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></function>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Runnable</name></type> <name>runnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>lastMessageTime</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>maybeIncrementBestChainHeightEver</name></name><argument_list>(<argument><expr><call><name><name>blockChain</name><operator>.</operator><name>getChainHead</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>broadcastBlockchainState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
    }</block></class></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ImpedimentsLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Impediment</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ConnectivityManager</name></type> <name>connectivityManager</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Impediment</name></argument>&gt;</argument_list></name></type> <name>impediments</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>noneOf</name></name><argument_list>(<argument><expr><name><name>Impediment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ImpedimentsLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <name>application</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>connectivityManager</name></name> <operator>=</operator> <operator>(</operator><name>ConnectivityManager</name><operator>)</operator> <call><name><name>application</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CONNECTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>impediments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>IntentFilter</name></type> <name>intentFilter</name> <init>= <expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>intentFilter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name><name>ConnectivityManager</name><operator>.</operator><name>CONNECTIVITY_ACTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>intentFilter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_DEVICE_STORAGE_LOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>intentFilter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_DEVICE_STORAGE_OK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// implicitly start PeerGroup</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>connectivityReceiver</name></expr></argument>, <argument><expr><name>intentFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>intent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>handleIntent</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>connectivityReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BroadcastReceiver</name></type> <name>connectivityReceiver</name> <init>= <expr><operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>handleIntent</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>handleIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>action</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>ConnectivityManager</name><operator>.</operator><name>CONNECTIVITY_ACTION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>NetworkInfo</name></type> <name>networkInfo</name> <init>= <expr><call><name><name>connectivityManager</name><operator>.</operator><name>getActiveNetworkInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasConnectivity</name> <init>= <expr><name>networkInfo</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>networkInfo</name><operator>.</operator><name>isConnected</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>hasConnectivity</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>impediments</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>Impediment</name><operator>.</operator><name>NETWORK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>impediments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Impediment</name><operator>.</operator><name>NETWORK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

                <if>if <condition>(<expr><call><name><name>log</name><operator>.</operator><name>isInfoEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"active network is "</literal></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>hasConnectivity</name></expr> ?</condition><then> <expr><literal type="string">"up"</literal></expr> </then><else>: <expr><literal type="string">"down"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>networkInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", type: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>networkInfo</name><operator>.</operator><name>getTypeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", state: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>networkInfo</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>networkInfo</name><operator>.</operator><name>getDetailedState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>extraInfo</name> <init>= <expr><call><name><name>networkInfo</name><operator>.</operator><name>getExtraInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>extraInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", extraInfo: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>extraInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>reason</name> <init>= <expr><call><name><name>networkInfo</name><operator>.</operator><name>getReason</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>reason</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", reason: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_DEVICE_STORAGE_LOW</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>impediments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Impediment</name><operator>.</operator><name>STORAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"device storage low"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_DEVICE_STORAGE_OK</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>impediments</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>Impediment</name><operator>.</operator><name>STORAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"device storage ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>impediments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> class <name>LocalBinder</name> <super><extends>extends <name>Binder</name></extends></super> <block>{
        <function><specifier>public</specifier> <type><name>BlockchainService</name></type> <name>getService</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>BlockchainService</name><operator>.</operator><name>this</name></name></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>IBinder</name></type> <name>mBinder</name> <init>= <expr><operator>new</operator> <call><name>LocalBinder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>IBinder</name></type> <name>onBind</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">".onBind()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>mBinder</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onUnbind</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">".onUnbind()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onUnbind</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>serviceCreatedAt</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">".onCreate()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nm</name> <operator>=</operator> <operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PowerManager</name></type> <name>pm</name> <init>= <expr><operator>(</operator><name>PowerManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>POWER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>wakeLock</name> <operator>=</operator> <call><name><name>pm</name><operator>.</operator><name>newWakeLock</name></name><argument_list>(<argument><expr><name><name>PowerManager</name><operator>.</operator><name>PARTIAL_WAKE_LOCK</name></name></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>application</name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name>getApplication</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>addressBookDao</name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockChainFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getDir</name><argument_list>(<argument><expr><literal type="string">"blockstore"</literal></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>BLOCKCHAIN_FILENAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>peerConnectivityListener</name> <operator>=</operator> <operator>new</operator> <call><name>PeerConnectivityListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>broadcastPeerState</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>WalletBalanceLiveData</name></type> <name>walletBalance</name> <init>= <expr><operator>new</operator> <call><name>WalletBalanceLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>SelectedExchangeRateLiveData</name></type> <name>exchangeRate</name> <init>= <expr><operator>new</operator> <call><name>SelectedExchangeRateLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>walletBalance</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>walletBalance</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>WalletBalanceWidgetProvider</name><operator>.</operator><name>updateWidgets</name></name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>walletBalance</name></expr></argument>,
                        <argument><expr><call><name><name>exchangeRate</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>exchangeRate</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name></decl></parameter>)</parameter_list> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name> <init>= <expr><call><name><name>walletBalance</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>balance</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>WalletBalanceWidgetProvider</name><operator>.</operator><name>updateWidgets</name></name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>balance</name></expr></argument>, <argument><expr><name>exchangeRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>wallet</name> <operator>=</operator> <operator>new</operator> <call><name>WalletLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>this</name><operator>.</operator><name>wallet</name><operator>.</operator><name>removeObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>blockChainFileExists</name> <init>= <expr><call><name><name>blockChainFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>blockChainFileExists</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"blockchain does not exist, resetting wallet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <try>try <block>{
                    <expr_stmt><expr><name>blockStore</name> <operator>=</operator> <operator>new</operator> <call><name>SPVBlockStore</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>blockChainFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>blockStore</name><operator>.</operator><name>getChainHead</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// detect corruptions as early as possible</comment>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>earliestKeyCreationTime</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getEarliestKeyCreationTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><operator>!</operator><name>blockChainFileExists</name> <operator>&amp;&amp;</operator> <name>earliestKeyCreationTime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <try>try <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>checkpointsInputStream</name> <init>= <expr><call><name>getAssets</name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>open</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>CHECKPOINTS_FILENAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>CheckpointManager</name><operator>.</operator><name>checkpoint</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>checkpointsInputStream</name></expr></argument>,
                                    <argument><expr><name>blockStore</name></expr></argument>, <argument><expr><name>earliestKeyCreationTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"checkpoints loaded from '{}', took {}"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>CHECKPOINTS_FILENAME</name></name></expr></argument>,
                                    <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"problem reading checkpoints, continuing without"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></then></if>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BlockStoreException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>blockChainFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"blockstore cannot be created"</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><operator>new</operator> <call><name>Error</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>

                <try>try <block>{
                    <expr_stmt><expr><name>blockChain</name> <operator>=</operator> <operator>new</operator> <call><name>BlockChain</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>blockStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BlockStoreException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <throw>throw <expr><operator>new</operator> <call><name>Error</name><argument_list>(<argument><expr><literal type="string">"blockchain cannot be created"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>

                <expr_stmt><expr><call><name>observeLiveDatasThatAreDependentOnWalletAndBlockchain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>observeLiveDatasThatAreDependentOnWalletAndBlockchain</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>NewTransactionLiveData</name></type> <name>newTransaction</name> <init>= <expr><operator>new</operator> <call><name>NewTransactionLiveData</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newTransaction</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>BlockchainService</name><operator>.</operator><name>this</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>transactionsReceived</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>amount</name><operator>.</operator><name>isPositive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>WalletUtils</name><operator>.</operator><name>getWalletAddressOfReceived</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>ConfidenceType</name></type> <name>confidenceType</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfidenceType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>hash</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>replaying</name> <init>= <expr><call><name><name>blockChain</name><operator>.</operator><name>getBestChainHeight</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>config</name><operator>.</operator><name>getBestChainHeightEver</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isReplayedTx</name> <init>= <expr><name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>BUILDING</name></name> <operator>&amp;&amp;</operator> <name>replaying</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><operator>!</operator><name>isReplayedTx</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name>notifyCoinsReceived</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></then></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TimeLiveData</name></type> <name>time</name> <init>= <expr><operator>new</operator> <call><name>TimeLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>time</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Date</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>lastChainHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ActivityHistoryEntry</name></argument>&gt;</argument_list></name></type> <name>activityHistory</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>ActivityHistoryEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>chainHeight</name> <init>= <expr><call><name><name>blockChain</name><operator>.</operator><name>getBestChainHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>lastChainHeight</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numBlocksDownloaded</name> <init>= <expr><name>chainHeight</name> <operator>-</operator> <name>lastChainHeight</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numTransactionsReceived</name> <init>= <expr><call><name><name>transactionsReceived</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// push history</comment>
                    <expr_stmt><expr><call><name><name>activityHistory</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ActivityHistoryEntry</name><argument_list>(<argument><expr><name>numTransactionsReceived</name></expr></argument>, <argument><expr><name>numBlocksDownloaded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// trim</comment>
                    <while>while <condition>(<expr><call><name><name>activityHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_HISTORY_SIZE</name></expr>)</condition>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>activityHistory</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>activityHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>

                    <comment type="line">// print</comment>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>ActivityHistoryEntry</name></type> <name>entry</name> <range>: <expr><name>activityHistory</name></expr></range></decl></init>)</control> <block>{
                        <if>if <condition>(<expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"History of transactions/blocks: "</literal> <operator>+</operator> <name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// determine if block and transaction activity is idling</comment>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>isIdle</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>activityHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>MIN_COLLECT_HISTORY</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>isIdle</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>activityHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>ActivityHistoryEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>activityHistory</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>blocksActive</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>numBlocksDownloaded</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>IDLE_BLOCK_TIMEOUT_MIN</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>transactionsActive</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>numTransactionsReceived</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
                                    <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>IDLE_TRANSACTION_TIMEOUT_MIN</name></expr></init></decl>;</decl_stmt>

                            <if>if <condition>(<expr><name>blocksActive</name> <operator>||</operator> <name>transactionsActive</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>isIdle</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                                <break>break;</break>
                            }</block></then></if>
                        }</block></for>
                    }</block></then></if>

                    <comment type="line">// if idling, shutdown service</comment>
                    <if>if <condition>(<expr><name>isIdle</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"idling detected, stopping service"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>stopSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <expr_stmt><expr><name>lastChainHeight</name> <operator>=</operator> <name>chainHeight</name></expr>;</expr_stmt>
            }</block></function>

            <class><specifier>final</specifier> class <name>ActivityHistoryEntry</name> <block>{
                <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>numTransactionsReceived</name></decl>;</decl_stmt>
                <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>numBlocksDownloaded</name></decl>;</decl_stmt>

                <constructor><specifier>public</specifier> <name>ActivityHistoryEntry</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>numTransactionsReceived</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>numBlocksDownloaded</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numTransactionsReceived</name></name> <operator>=</operator> <name>numTransactionsReceived</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numBlocksDownloaded</name></name> <operator>=</operator> <name>numBlocksDownloaded</name></expr>;</expr_stmt>
                }</block></constructor>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
                    <return>return <expr><name>numTransactionsReceived</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>numBlocksDownloaded</name></expr>;</return>
                }</block></function>
            }</block></class>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>impediments</name> <operator>=</operator> <operator>new</operator> <call><name>ImpedimentsLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>impediments</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Impediment</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Impediment</name></argument>&gt;</argument_list></name></type> <name>impediments</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>impediments</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>peerGroup</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>Constants</name><operator>.</operator><name>ENABLE_BLOCKCHAIN_SYNC</name></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>startup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>impediments</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>peerGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
                <expr_stmt><expr><call><name>broadcastBlockchainState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><specifier>private</specifier> <type><name>void</name></type> <name>startup</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"acquiring wakelock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>BlockchainService</name><operator>.</operator><name>this</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// consistency check</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>walletLastBlockSeenHeight</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getLastBlockSeenHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bestChainHeight</name> <init>= <expr><call><name><name>blockChain</name><operator>.</operator><name>getBestChainHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>walletLastBlockSeenHeight</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>walletLastBlockSeenHeight</name> <operator>!=</operator> <name>bestChainHeight</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> <init>= <expr><literal type="string">"wallet/blockchain out of sync: "</literal> <operator>+</operator> <name>walletLastBlockSeenHeight</name> <operator>+</operator> <literal type="string">"/"</literal>
                            <operator>+</operator> <name>bestChainHeight</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>CrashReporter</name><operator>.</operator><name>saveBackgroundTrace</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name>peerGroup</name> <operator>=</operator> <operator>new</operator> <call><name>PeerGroup</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>blockChain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"creating {}"</literal></expr></argument>, <argument><expr><name>peerGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>setDownloadTxDependencies</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// recursive implementation causes StackOverflowError</comment>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>addWallet</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>setUserAgent</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>USER_AGENT</name></name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><name>versionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>addConnectedEventListener</name></name><argument_list>(<argument><expr><name>peerConnectivityListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>addDisconnectedEventListener</name></name><argument_list>(<argument><expr><name>peerConnectivityListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxConnectedPeers</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>maxConnectedPeers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>trustedPeerHost</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getTrustedPeerHost</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasTrustedPeer</name> <init>= <expr><name>trustedPeerHost</name> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>connectTrustedPeerOnly</name> <init>= <expr><name>hasTrustedPeer</name> <operator>&amp;&amp;</operator> <call><name><name>config</name><operator>.</operator><name>getTrustedPeerOnly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>setMaxConnections</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>connectTrustedPeerOnly</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>maxConnectedPeers</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>setConnectTimeoutMillis</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PEER_TIMEOUT_MS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>setPeerDiscoveryTimeoutMillis</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PEER_DISCOVERY_TIMEOUT_MS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>addPeerDiscovery</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>PeerDiscovery</name></super><argument_list>()</argument_list> <block>{
                    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>PeerDiscovery</name></type> <name>normalPeerDiscovery</name> <init>= <expr><call><name><name>MultiplexingDiscovery</name>
                            <operator>.</operator><name>forServices</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name><name>InetSocketAddress</name><index>[]</index></name></type> <name>getPeers</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>services</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>timeoutValue</name></decl></parameter>,
                            <parameter><decl><type><specifier>final</specifier> <name>TimeUnit</name></type> <name>timeoutUnit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PeerDiscoveryException</name></expr></argument></throws> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>InetSocketAddress</name></argument>&gt;</argument_list></name></type> <name>peers</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>InetSocketAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>boolean</name></type> <name>needsTrimPeersWorkaround</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

                        <if>if <condition>(<expr><name>hasTrustedPeer</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(
                                    <argument><expr><literal type="string">"trusted peer '"</literal> <operator>+</operator> <name>trustedPeerHost</name> <operator>+</operator> <literal type="string">"'"</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>connectTrustedPeerOnly</name></expr> ?</condition><then> <expr><literal type="string">" only"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt><decl><type><specifier>final</specifier> <name>InetSocketAddress</name></type> <name>addr</name> <init>= <expr><operator>new</operator> <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name>trustedPeerHost</name></expr></argument>,
                                    <argument><expr><call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><call><name><name>addr</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name><name>peers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>needsTrimPeersWorkaround</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then></if>

                        <if>if <condition>(<expr><operator>!</operator><name>connectTrustedPeerOnly</name></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>peers</name><operator>.</operator><name>addAll</name></name><argument_list>(
                                    <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>normalPeerDiscovery</name><operator>.</operator><name>getPeers</name></name><argument_list>(<argument><expr><name>services</name></expr></argument>, <argument><expr><name>timeoutValue</name></expr></argument>, <argument><expr><name>timeoutUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

                        <comment type="line">// workaround because PeerGroup will shuffle peers</comment>
                        <if>if <condition>(<expr><name>needsTrimPeersWorkaround</name></expr>)</condition><then>
                            <block type="pseudo"><while>while <condition>(<expr><call><name><name>peers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxConnectedPeers</name></expr>)</condition>
                                <block type="pseudo"><expr_stmt><expr><call><name><name>peers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>peers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while></block></then></if>

                        <return>return <expr><call><name><name>peers</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>InetSocketAddress</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>normalPeerDiscovery</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// start peergroup</comment>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"starting {} asynchronously"</literal></expr></argument>, <argument><expr><name>peerGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>startAsync</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>startBlockChainDownload</name></name><argument_list>(<argument><expr><name>blockchainDownloadListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><specifier>private</specifier> <type><name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>BlockchainService</name><operator>.</operator><name>this</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>removeDisconnectedEventListener</name></name><argument_list>(<argument><expr><name>peerConnectivityListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>removeConnectedEventListener</name></name><argument_list>(<argument><expr><name>peerConnectivityListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>removeWallet</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"stopping {} asynchronously"</literal></expr></argument>, <argument><expr><name>peerGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>stopAsync</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>peerGroup</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"releasing wakelock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>onStartCommand</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>startId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStartCommand</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>startId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>intent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"service start command: "</literal> <operator>+</operator> <name>intent</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>intent</name><operator>.</operator><name>hasExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_ALARM_COUNT</name></name></expr></argument>)</argument_list></call></expr>
                    ?</condition><then> <expr><literal type="string">" (alarm count: "</literal> <operator>+</operator> <call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_ALARM_COUNT</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>action</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>BlockchainService</name><operator>.</operator><name>ACTION_CANCEL_COINS_RECEIVED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>notificationCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>notificationAccumulatedAmount</name> <operator>=</operator> <name><name>Coin</name><operator>.</operator><name>ZERO</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notificationAddresses</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_COINS_RECEIVED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>BlockchainService</name><operator>.</operator><name>ACTION_RESET_BLOCKCHAIN</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"will remove blockchain on service shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>resetBlockchainOnShutdown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stopSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>BlockchainService</name><operator>.</operator><name>ACTION_BROADCAST_TRANSACTION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>hash</name> <init>= <expr><call><name><name>Sha256Hash</name>
                        <operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getByteArrayExtra</name></name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>ACTION_BROADCAST_TRANSACTION_HASH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTransaction</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>peerGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"broadcasting transaction "</literal> <operator>+</operator> <call><name><name>tx</name><operator>.</operator><name>getHashAsString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>broadcastTransaction</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"peergroup not available, not broadcasting transaction "</literal> <operator>+</operator> <call><name><name>tx</name><operator>.</operator><name>getHashAsString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if></elseif></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"service restart, although it was started as non-sticky"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>START_NOT_STICKY</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">".onDestroy()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>peerGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>removeDisconnectedEventListener</name></name><argument_list>(<argument><expr><name>peerConnectivityListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>removeConnectedEventListener</name></name><argument_list>(<argument><expr><name>peerConnectivityListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>removeWallet</name></name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>peerGroup</name><operator>.</operator><name>stopAsync</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"stopping {} asynchronously"</literal></expr></argument>, <argument><expr><name>peerGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>peerConnectivityListener</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>delayHandler</name><operator>.</operator><name>removeCallbacksAndMessages</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>blockStore</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>blockStore</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BlockStoreException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>autosaveWalletNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>wakeLock</name><operator>.</operator><name>isHeld</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"wakelock still held, releasing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>resetBlockchainOnShutdown</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"removing blockchain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>blockChainFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>scheduleStart</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>stopForeground</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"service was up for "</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>serviceCreatedAt</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>+</operator> <literal type="string">" minutes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTrimMemory</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"onTrimMemory({}) called"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name><name>ComponentCallbacks2</name><operator>.</operator><name>TRIM_MEMORY_BACKGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"low memory detected, stopping service"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stopSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>BlockchainState</name></type> <name>getBlockchainState</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>blockChain</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>StoredBlock</name></type> <name>chainHead</name> <init>= <expr><call><name><name>blockChain</name><operator>.</operator><name>getChainHead</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Date</name></type> <name>bestChainDate</name> <init>= <expr><call><name><name>chainHead</name><operator>.</operator><name>getHeader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bestChainHeight</name> <init>= <expr><call><name><name>chainHead</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>replaying</name> <init>= <expr><call><name><name>chainHead</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>config</name><operator>.</operator><name>getBestChainHeightEver</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>BlockchainState</name><argument_list>(<argument><expr><name>bestChainDate</name></expr></argument>, <argument><expr><name>bestChainHeight</name></expr></argument>, <argument><expr><name>replaying</name></expr></argument>, <argument><expr><call><name><name>impediments</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Peer</name></argument>&gt;</argument_list></name></type> <name>getConnectedPeers</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>peerGroup</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

        <return>return <expr><call><name><name>peerGroup</name><operator>.</operator><name>getConnectedPeers</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>StoredBlock</name></argument>&gt;</argument_list></name></type> <name>getRecentBlocks</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxBlocks</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>blockChain</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StoredBlock</name></argument>&gt;</argument_list></name></type> <name>blocks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>StoredBlock</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>maxBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>StoredBlock</name></type> <name>block</name> <init>= <expr><call><name><name>blockChain</name><operator>.</operator><name>getChainHead</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>block</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>blocks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>blocks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxBlocks</name></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>block</name> <operator>=</operator> <call><name><name>block</name><operator>.</operator><name>getPrev</name></name><argument_list>(<argument><expr><name>blockStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>blocks</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BlockStoreException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>broadcastPeerState</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>numPeers</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>broadcast</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>ACTION_PEER_STATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>broadcast</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>ACTION_PEER_STATE_NUM_PEERS</name></expr></argument>, <argument><expr><name>numPeers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sendBroadcast</name><argument_list>(<argument><expr><name>broadcast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>broadcastBlockchainState</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>broadcast</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>ACTION_BLOCKCHAIN_STATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name> <init>= <expr><call><name>getBlockchainState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>blockchainState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>blockchainState</name><operator>.</operator><name>putExtras</name></name><argument_list>(<argument><expr><name>broadcast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sendBroadcast</name><argument_list>(<argument><expr><name>broadcast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BlockchainState</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_BEST_CHAIN_DATE</name> <init>= <expr><literal type="string">"best_chain_date"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_BEST_CHAIN_HEIGHT</name> <init>= <expr><literal type="string">"best_chain_height"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_REPLAYING</name> <init>= <expr><literal type="string">"replaying"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_IMPEDIMENTS</name> <init>= <expr><literal type="string">"impediment"</literal></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>Impediment</name> <block>{
        <decl><name>STORAGE</name></decl>, <decl><name>NETWORK</name></decl>
    }</block></enum>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Date</name></type> <name>bestChainDate</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>bestChainHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>replaying</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Impediment</name></argument>&gt;</argument_list></name></type> <name>impediments</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BlockchainState</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>bestChainDate</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>bestChainHeight</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>replaying</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Impediment</name></argument>&gt;</argument_list></name></type> <name>impediments</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bestChainDate</name></name> <operator>=</operator> <name>bestChainDate</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bestChainHeight</name></name> <operator>=</operator> <name>bestChainHeight</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replaying</name></name> <operator>=</operator> <name>replaying</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>impediments</name></name> <operator>=</operator> <call><name><name>EnumSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>impediments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>BlockchainState</name></type> <name>fromIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Date</name></type> <name>bestChainDate</name> <init>= <expr><operator>(</operator><name>Date</name><operator>)</operator> <call><name><name>intent</name><operator>.</operator><name>getSerializableExtra</name></name><argument_list>(<argument><expr><name>EXTRA_BEST_CHAIN_DATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bestChainHeight</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name>EXTRA_BEST_CHAIN_HEIGHT</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>replaying</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>EXTRA_REPLAYING</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
        <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Impediment</name></argument>&gt;</argument_list></name></type> <name>impediments</name> <init>= <expr><operator>(</operator><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Impediment</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>intent</name><operator>.</operator><name>getSerializableExtra</name></name><argument_list>(<argument><expr><name>EXTRA_IMPEDIMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bestChainDate</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>bestChainHeight</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>impediments</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>BlockchainState</name><argument_list>(<argument><expr><name>bestChainDate</name></expr></argument>, <argument><expr><name>bestChainHeight</name></expr></argument>, <argument><expr><name>replaying</name></expr></argument>, <argument><expr><name>impediments</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>putExtras</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_BEST_CHAIN_DATE</name></expr></argument>, <argument><expr><name>bestChainDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_BEST_CHAIN_HEIGHT</name></expr></argument>, <argument><expr><name>bestChainHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_REPLAYING</name></expr></argument>, <argument><expr><name>replaying</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_IMPEDIMENTS</name></expr></argument>, <argument><expr><name>impediments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BootstrapReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BootstrapReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got broadcast: "</literal> <operator>+</operator> <name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name> <init>= <expr><operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>bootCompleted</name> <init>= <expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_BOOT_COMPLETED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>packageReplaced</name> <init>= <expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_MY_PACKAGE_REPLACED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>packageReplaced</name> <operator>||</operator> <name>bootCompleted</name></expr>)</condition><then> <block>{
            <comment type="line">// make sure wallet is upgraded to HD</comment>
            <if>if <condition>(<expr><name>packageReplaced</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>UpgradeWalletService</name><operator>.</operator><name>startUpgrade</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

            <comment type="line">// make sure there is always an alarm scheduled</comment>
            <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>scheduleStart</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// if the app hasn't been used for a while and contains coins, maybe show reminder</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>config</name><operator>.</operator><name>remindBalance</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>config</name><operator>.</operator><name>hasBeenUsed</name></name><argument_list>()</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>config</name><operator>.</operator><name>getLastUsedAgo</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>LAST_USAGE_THRESHOLD_INACTIVE_MS</name></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>InactivityNotificationService</name><operator>.</operator><name>startMaybeShowNotification</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2016 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>BalanceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>WalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>FeeCategory</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>SendCoinsActivity</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>IntentService</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This service is responsible for showing a notification if the user hasn't used the app for a longer time.
 *
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>InactivityNotificationService</name> <super><extends>extends <name>IntentService</name></extends></super> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startMaybeShowNotification</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ContextCompat</name><operator>.</operator><name>startForegroundService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>InactivityNotificationService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>NotificationManager</name></type> <name>nm</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_DISMISS</name> <init>= <expr><call><name><name>InactivityNotificationService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">".dismiss"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_DISMISS_FOREVER</name> <init>= <expr><call><name><name>InactivityNotificationService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">".dismiss_forever"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_DONATE</name> <init>= <expr><call><name><name>InactivityNotificationService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".donate"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>InactivityNotificationService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>InactivityNotificationService</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>InactivityNotificationService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setIntentRedelivery</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>nm</name> <operator>=</operator> <operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>application</name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name>getApplication</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>O</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                    <argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_CHANNEL_ID_ONGOING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setSmallIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>stat_notify_received_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setOngoing</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>startForeground</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_MAINTENANCE</name></name></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onHandleIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>ACTION_DISMISS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>handleDismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><call><name><name>ACTION_DISMISS_FOREVER</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>handleDismissForever</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><call><name><name>ACTION_DONATE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>handleDonate</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>handleMaybeShowNotification</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleMaybeShowNotification</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>estimatedBalance</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>ESTIMATED_SPENDABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>estimatedBalance</name><operator>.</operator><name>isPositive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"detected balance, showing inactivity notification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>availableBalance</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>AVAILABLE_SPENDABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>canDonate</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>DONATION_ADDRESS</name></name> <operator>!=</operator> <literal type="null">null</literal>
                    <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>availableBalance</name><operator>.</operator><name>isLessThan</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>SOME_BALANCE_THRESHOLD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>btcFormat</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>title</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_inactivity_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>text</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_inactivity_message</name></name></expr></argument>, <argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>estimatedBalance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>canDonate</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_inactivity_message_donate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>dismissIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>InactivityNotificationService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dismissIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_DISMISS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>dismissForeverIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>InactivityNotificationService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dismissForeverIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_DISMISS_FOREVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>donateIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>InactivityNotificationService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>donateIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_DONATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                    <argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_CHANNEL_ID_IMPORTANT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>BigTextStyle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bigText</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setSmallIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>stat_notify_received_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setContentTitle</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notification</name>
                    <operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WalletActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setAutoCancel</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>canDonate</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Action</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
                        <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_inactivity_action_dismiss</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getService</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dismissIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Action</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_inactivity_action_dismiss_forever</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getService</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dismissForeverIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>canDonate</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>notification</name>
                        <operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Action</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_options_donate</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getService</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>donateIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_INACTIVITY</name></name></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleDismiss</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"dismissing inactivity notification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_INACTIVITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleDismissForever</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"dismissing inactivity notification forever"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setRemindBalance</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_INACTIVITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleDonate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>AVAILABLE_SPENDABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>SendCoinsActivity</name><operator>.</operator><name>startDonate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>balance</name></expr></argument>, <argument><expr><name><name>FeeCategory</name><operator>.</operator><name>ECONOMIC</name></name></expr></argument>,
                <argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name> <operator>|</operator> <name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_CLEAR_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_INACTIVITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sendBroadcast</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_CLOSE_SYSTEM_DIALOGS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>IntentService</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This service upgrades the wallet to an HD wallet. Use {@link #startUpgrade(Context)} to start the process.
 * 
 * It will upgrade and then hand over to {@Link BlockchainService} to pre-generate the look-ahead keys. If the
 * wallet is already upgraded, it will do nothing.
 * 
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>UpgradeWalletService</name> <super><extends>extends <name>IntentService</name></extends></super> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startUpgrade</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ContextCompat</name><operator>.</operator><name>startForegroundService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>UpgradeWalletService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>UpgradeWalletService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>UpgradeWalletService</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>UpgradeWalletService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setIntentRedelivery</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>application</name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name>getApplication</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>O</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                    <argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_CHANNEL_ID_ONGOING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setSmallIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>stat_notify_received_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setOngoing</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>startForeground</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NOTIFICATION_ID_MAINTENANCE</name></name></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onHandleIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>isDeterministicUpgradeRequired</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"detected non-HD wallet, upgrading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// upgrade wallet to HD</comment>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>upgradeToDeterministic</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// let other service pre-generate look-ahead keys</comment>
            <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>maybeUpgradeToSecureChain</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeUpgradeToSecureChain</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>doMaintenance</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// let other service pre-generate look-ahead keys</comment>
            <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"failed doing wallet maintenance"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityManager</name><operator>.</operator><name>TaskDescription</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentActivity</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractWalletActivity</name> <super><extends>extends <name>FragmentActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AbstractWalletActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>application</name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name>getApplication</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>setTaskDescription</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TaskDescription</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>bg_action_bar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>WalletApplication</name></type> <name>getWalletApplication</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>application</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
            <expr_stmt><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>reportFullyDrawn</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>reportFullyDrawn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// work around bug in KitKat</comment>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>reportFullyDrawn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SecurityException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// swallow</comment>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setShowWhenLocked</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showWhenLocked</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>O_MR1</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setShowWhenLocked</name></name><argument_list>(<argument><expr><name>showWhenLocked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>showWhenLocked</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addFlags</name><argument_list>(<argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_SHOW_WHEN_LOCKED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clearFlags</name><argument_list>(<argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_SHOW_WHEN_LOCKED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>AddressFormatException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>NetworkParameters</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>AddressAndLabel</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AddressAndLabel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>AddressAndLabel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>NetworkParameters</name></type> <name>addressParams</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>AddressFormatException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name>addressParams</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AddressAndLabel</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>AddressAndLabel</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>label</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>AddressAndLabel</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>AddressAndLabel</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>AddressAndLabel</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>AddressAndLabel</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>AddressAndLabel</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>AddressAndLabel</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>AddressAndLabel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name><name>Address</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewPagerTabs</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentTransaction</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>viewpager</name><operator>.</operator><name>widget</name><operator>.</operator><name>PagerAdapter</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>viewpager</name><operator>.</operator><name>widget</name><operator>.</operator><name>ViewPager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>AddressBookActivity</name> <super><extends>extends <name>AbstractWalletActivity</name></extends></super> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>AddressBookActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletAddressesFragment</name></type> <name>walletAddressesFragment</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SendingAddressesFragment</name></type> <name>sendingAddressesFragment</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_LEFT</name> <init>= <expr><literal type="string">"wallet_addresses"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_RIGHT</name> <init>= <expr><literal type="string">"sending_addresses"</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>address_book_content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fragmentManager</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>walletAddressesFragment</name> <operator>=</operator> <operator>(</operator><name>WalletAddressesFragment</name><operator>)</operator> <call><name><name>fragmentManager</name><operator>.</operator><name>findFragmentByTag</name></name><argument_list>(<argument><expr><name>TAG_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sendingAddressesFragment</name> <operator>=</operator> <operator>(</operator><name>SendingAddressesFragment</name><operator>)</operator> <call><name><name>fragmentManager</name><operator>.</operator><name>findFragmentByTag</name></name><argument_list>(<argument><expr><name>TAG_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>FragmentTransaction</name></type> <name>removal</name> <init>= <expr><call><name><name>fragmentManager</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>walletAddressesFragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>walletAddressesFragment</name> <operator>=</operator> <operator>new</operator> <call><name>WalletAddressesFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>removal</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>walletAddressesFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

        <if>if <condition>(<expr><name>sendingAddressesFragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>sendingAddressesFragment</name> <operator>=</operator> <operator>new</operator> <call><name>SendingAddressesFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>removal</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>sendingAddressesFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>removal</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>removal</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragmentManager</name><operator>.</operator><name>executePendingTransactions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ViewPager</name></type> <name>pager</name> <init>= <expr><operator>(</operator><name>ViewPager</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>address_book_pager</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pager</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>TwoFragmentAdapter</name><argument_list>(<argument><expr><name>fragmentManager</name></expr></argument>, <argument><expr><name>walletAddressesFragment</name></expr></argument>, <argument><expr><name>sendingAddressesFragment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>ViewPagerTabs</name></type> <name>pagerTabs</name> <init>= <expr><operator>(</operator><name>ViewPagerTabs</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>address_book_pager_tabs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pagerTabs</name><operator>.</operator><name>addTabLabels</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_list_receiving_title</name></name></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_list_sending_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setOnPageChangeListener</name></name><argument_list>(<argument><expr><name>pagerTabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setCurrentItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setPageMargin</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setPageMarginDrawable</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>bg_less_bright</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>pagerTabs</name><operator>.</operator><name>onPageSelected</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pagerTabs</name><operator>.</operator><name>onPageScrolled</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>fragmentManager</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_addresses_fragment</name></name></expr></argument>, <argument><expr><name>walletAddressesFragment</name></expr></argument>, <argument><expr><name>TAG_LEFT</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_fragment</name></name></expr></argument>, <argument><expr><name>sendingAddressesFragment</name></expr></argument>, <argument><expr><name>TAG_RIGHT</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>TwoFragmentAdapter</name> <super><extends>extends <name>PagerAdapter</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fragmentManager</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Fragment</name></type> <name>left</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Fragment</name></type> <name>right</name></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <type><name>FragmentTransaction</name></type> <name>currentTransaction</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>Fragment</name></type> <name>currentPrimaryItem</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>TwoFragmentAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fragmentManager</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fragmentManager</name></name> <operator>=</operator> <name>fragmentManager</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">2</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Object</name></type> <name>instantiateItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>currentTransaction</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>currentTransaction</name> <operator>=</operator> <call><name><name>fragmentManager</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>tag</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>position</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TAG_LEFT</name></expr> </then><else>: <expr><name>TAG_RIGHT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>fragment</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>position</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>left</name></expr> </then><else>: <expr><name>right</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>currentTransaction</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>container</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>fragment</name> <operator>!=</operator> <name>currentPrimaryItem</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setMenuVisibility</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setUserVisibleHint</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return>return <expr><name>fragment</name></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>destroyItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>setPrimaryItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>fragment</name> <init>= <expr><operator>(</operator><name>Fragment</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fragment</name> <operator>!=</operator> <name>currentPrimaryItem</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>currentPrimaryItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>currentPrimaryItem</name><operator>.</operator><name>setMenuVisibility</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>currentPrimaryItem</name><operator>.</operator><name>setUserVisibleHint</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>fragment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setMenuVisibility</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setUserVisibleHint</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>currentPrimaryItem</name> <operator>=</operator> <name>fragment</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>finishUpdate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>currentTransaction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>currentTransaction</name><operator>.</operator><name>commitAllowingStateLoss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>currentTransaction</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fragmentManager</name><operator>.</operator><name>executePendingTransactions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>isViewFromObject</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>(</operator><operator>(</operator><name>Fragment</name><operator>)</operator> <name>object</name><operator>)</operator><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call> <operator>==</operator> <name>view</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>SocketException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>SocketTimeoutException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Splitter</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>CrashReporter</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Installer</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>HandlerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Call</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>HttpUrl</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Response</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>AlertDialogsFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>AlertDialogsFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Fragment</name></type> <name>fragment</name> <init>= <expr><call><name><name>fm</name><operator>.</operator><name>findFragmentByTag</name></name><argument_list>(<argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fragment</name> <operator>=</operator> <operator>new</operator> <call><name>AlertDialogsFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fm</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>PackageManager</name></type> <name>packageManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>HttpUrl</name></type> <name>versionUrl</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>HandlerThread</name></type> <name>backgroundThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AlertDialogsFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>packageManager</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backgroundThread</name> <operator>=</operator> <operator>new</operator> <call><name>HandlerThread</name><argument_list>(<argument><expr><literal type="string">"backgroundThread"</literal></expr></argument>, <argument><expr><name><name>Process</name><operator>.</operator><name>THREAD_PRIORITY_BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backgroundHandler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>packageInfo</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>versionNameSplit</name> <init>= <expr><call><name><name>packageInfo</name><operator>.</operator><name>versionName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>HttpUrl</name><operator>.</operator><name>Builder</name></name></type> <name>url</name> <init>= <expr><call><name><name>HttpUrl</name>
                <operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>VERSION_URL</name></name>
                        <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>versionNameSplit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>packageInfo</name><operator>.</operator><name>versionName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>versionNameSplit</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>newBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>url</name><operator>.</operator><name>addEncodedQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"package"</literal></expr></argument>, <argument><expr><name><name>packageInfo</name><operator>.</operator><name>packageName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>installerPackageName</name> <init>= <expr><call><name><name>Installer</name><operator>.</operator><name>installerPackageName</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>installerPackageName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>url</name><operator>.</operator><name>addEncodedQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"installer"</literal></expr></argument>, <argument><expr><name>installerPackageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>url</name><operator>.</operator><name>addQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"sdk"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>url</name><operator>.</operator><name>addQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"current"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>packageInfo</name><operator>.</operator><name>versionCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>versionUrl</name> <operator>=</operator> <call><name><name>url</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"querying \"{}\"..."</literal></expr></argument>, <argument><expr><name>versionUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Request</name><operator>.</operator><name>Builder</name></name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>url</name></name><argument_list>(<argument><expr><name>versionUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"Accept-Charset"</literal></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>userAgent</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>httpUserAgent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"User-Agent"</literal></expr></argument>, <argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Call</name></type> <name>call</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>HTTP_CLIENT</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>abort</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Response</name></type> <name>response</name> <init>= <expr><call><name><name>call</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>response</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>serverTime</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>headers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDate</name><argument_list>(<argument><expr><literal type="string">"Date"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <try>try <init>(<decl><type><specifier>final</specifier> <name>BufferedReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
                            <expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>handleServerTime</name><argument_list>(<argument><expr><name>serverTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
                                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>line</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                                    <block type="pseudo"><break>break;</break></block></then></if>
                                <if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><then>
                                    <block type="pseudo"><continue>continue;</continue></block></then></if>

                                <decl_stmt><decl><type><specifier>final</specifier> <name>Splitter</name></type> <name>splitter</name> <init>= <expr><call><name><name>Splitter</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trimResults</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>split</name> <init>= <expr><call><name><name>splitter</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><operator>!</operator><call><name><name>split</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name> <init>= <expr><call><name><name>split</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><operator>!</operator><call><name><name>split</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>handleLine</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if>if <condition>(<expr><name>abort</name></expr>)</condition><then>
                                        <block type="pseudo"><break>break;</break></block></then></if>
                                    <continue>continue;</continue>
                                }</block></then></if>
                                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name> <init>= <expr><call><name><name>split</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><operator>!</operator><call><name><name>split</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>handleProperty</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if>if <condition>(<expr><name>abort</name></expr>)</condition><then>
                                        <block type="pseudo"><break>break;</break></block></then></if>
                                    <continue>continue;</continue>
                                }</block></then></if>
                                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring line: {}"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></while>
                        }</block></try>
                    }</block></then></if>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>handleException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
                <if>if <condition>(<expr><operator>!</operator><name>abort</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>handleCatchAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>handleLine</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>serverVersionCode</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\s+"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"according to \""</literal> <operator>+</operator> <name>versionUrl</name> <operator>+</operator> <literal type="string">"\", strongly recommended minimum app version is "</literal>
                <operator>+</operator> <name>serverVersionCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>serverVersionCode</name> <operator>&gt;</operator> <call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><name>versionCode</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <if>if <condition>(<expr><call><name>isAdded</name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name>createVersionAlertDialog</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>handleProperty</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"min.security_patch.bluetooth"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>minSecurityPatchLevel</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"according to \"{}\", minimum security patch level for bluetooth is {}"</literal></expr></argument>, <argument><expr><name>versionUrl</name></expr></argument>,
                    <argument><expr><name>minSecurityPatchLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name>
                    <operator>&amp;&amp;</operator> <call><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SECURITY_PATCH</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>minSecurityPatchLevel</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name> <init>= <expr><call><name><name>BluetoothAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>BluetoothAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <if>if <condition>(<expr><call><name>isAdded</name><argument_list>()</argument_list></call></expr>)</condition><then>
                                <block type="pseudo"><expr_stmt><expr><call><name>createInsecureBluetoothAlertDialog</name><argument_list>(<argument><expr><name>minSecurityPatchLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring key: {}"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>handleServerTime</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>serverTime</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>serverTime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>diffMinutes</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>serverTime</name><operator>)</operator> <operator>/</operator> <name><name>DateUtils</name><operator>.</operator><name>MINUTE_IN_MILLIS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>diffMinutes</name> <operator>&gt;=</operator> <literal type="number">60</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"according to \""</literal> <operator>+</operator> <name>versionUrl</name> <operator>+</operator> <literal type="string">"\", system clock is off by "</literal> <operator>+</operator> <name>diffMinutes</name> <operator>+</operator> <literal type="string">" minutes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                        <if>if <condition>(<expr><call><name>isAdded</name><argument_list>()</argument_list></call></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name>createTimeskewAlertDialog</name><argument_list>(<argument><expr><name>diffMinutes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>handleCatchAll</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>stickyIntent</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_DEVICE_STORAGE_LOW</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>stickyIntent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <if>if <condition>(<expr><call><name>isAdded</name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name>createLowStorageAlertDialog</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleException</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>UnknownHostException</name> <operator>||</operator> <name>x</name> <operator>instanceof</operator> <name>SocketException</name> <operator>||</operator> <name>x</name> <operator>instanceof</operator> <name>SocketTimeoutException</name></expr>)</condition><then> <block>{
            <comment type="line">// swallow</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"problem reading"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>CrashReporter</name><operator>.</operator><name>saveBackgroundTrace</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>versionUrl</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Dialog</name></type> <name>createTimeskewAlertDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>diffMinutes</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>settingsIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Settings</name><operator>.</operator><name>ACTION_DATE_SETTINGS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_timeskew_dialog_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_timeskew_dialog_msg</name></name></expr></argument>, <argument><expr><name>diffMinutes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>packageManager</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>settingsIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_settings</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>settingsIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>createSettingsFailedDialog</name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Dialog</name></type> <name>createVersionAlertDialog</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Installer</name></type> <name>installer</name> <init>= <expr><call><name><name>Installer</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>installer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>installer</name> <operator>=</operator> <name><name>Installer</name><operator>.</operator><name>F_DROID</name></name></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>marketIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>,
                <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>installer</name><operator>.</operator><name>appStorePageFor</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>binaryIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>BINARY_URL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_version_dialog_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>message</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(
                <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_version_dialog_msg</name></name></expr></argument>, <argument><expr><name><name>installer</name><operator>.</operator><name>displayName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Constants</name><operator>.</operator><name>SDK_DEPRECATED_BELOW</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_version_dialog_msg_deprecated</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>packageManager</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>marketIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>installer</name><operator>.</operator><name>displayName</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>marketIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>packageManager</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>binaryIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_version_dialog_button_binary</name></name></expr></argument>,
                    <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>binaryIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Dialog</name></type> <name>createInsecureBluetoothAlertDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>minSecurityPatch</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>settingsIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Settings</name><operator>.</operator><name>ACTION_BLUETOOTH_SETTINGS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>alert_dialogs_fragment_insecure_bluetooth_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>alert_dialogs_fragment_insecure_bluetooth_message</name></name></expr></argument>, <argument><expr><name>minSecurityPatch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>packageManager</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>settingsIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_settings</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>settingsIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>createSettingsFailedDialog</name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Dialog</name></type> <name>createLowStorageAlertDialog</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>settingsIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Settings</name><operator>.</operator><name>ACTION_MANAGE_APPLICATIONS_SETTINGS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_low_storage_dialog_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_low_storage_dialog_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>packageManager</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>settingsIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_low_storage_dialog_button_apps</name></name></expr></argument>,
                    <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                            <try>try <block>{
                                <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>settingsIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                                <expr_stmt><expr><call><name>createSettingsFailedDialog</name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            }</block></catch></try>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Dialog</name></type> <name>createSettingsFailedDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>exceptionMessage</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>alert_dialogs_fragment_settings_failed_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>exceptionMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BitmapFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>BitmapFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_BITMAP</name> <init>= <expr><literal type="string">"bitmap"</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>instance</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>BitmapFragment</name></type> <name>instance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BitmapFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>BitmapFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_BITMAP</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>fragment</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BitmapFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BitmapDrawable</name></type> <name>bitmap</name> <init>= <expr><operator>new</operator> <call><name>BitmapDrawable</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>Bitmap</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name>KEY_BITMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>setFilterBitmap</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Dialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>Dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>requestWindowFeature</name></name><argument_list>(<argument><expr><name><name>Window</name><operator>.</operator><name>FEATURE_NO_TITLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setContentView</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>bitmap_dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setCanceledOnTouchOutside</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ImageView</name></type> <name>imageView</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>dialog</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bitmap_dialog_image</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>imageView</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>imageView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>dismissAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Path</name><operator>.</operator><name>Direction</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>RectF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>CircularProgressView</name> <super><extends>extends <name>View</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>progress</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>maxProgress</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>maxSize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Path</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>fillPaint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>strokePaint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CircularProgressView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>density</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>density</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>fillPaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fillPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#44ff44"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fillPaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>strokePaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>strokePaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>DKGRAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>strokePaint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <name>density</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>strokePaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fillPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>strokePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setColors</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>fillColor</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>strokeColor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fillPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>fillColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>strokePaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>strokeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setProgress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name>progress</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updatePath</name><argument_list>(<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setMaxProgress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxProgress</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxProgress</name></name> <operator>=</operator> <name>maxProgress</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updatePath</name><argument_list>(<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setSize</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updatePath</name><argument_list>(<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setMaxSize</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxSize</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxSize</name></name> <operator>=</operator> <name>maxSize</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updatePath</name><argument_list>(<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onSizeChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>oldw</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>oldh</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>updatePath</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSizeChanged</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>oldw</name></expr></argument>, <argument><expr><name>oldh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updatePath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>maxAbsSize</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2f</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>absSize</name> <init>= <expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <name>maxSize</name></expr> ?</condition><then> <expr><name>maxAbsSize</name> <operator>*</operator> <name>size</name> <operator>/</operator> <name>maxSize</name></expr> </then><else>: <expr><name>maxAbsSize</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>progress</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>progress</name> <operator>&lt;</operator> <name>maxProgress</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>angle</name> <init>= <expr><name>progress</name> <operator>*</operator> <literal type="number">360</literal> <operator>/</operator> <name>maxProgress</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>x</name> <init>= <expr><name>w</name> <operator>/</operator> <literal type="number">2f</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>y</name> <init>= <expr><name>h</name> <operator>/</operator> <literal type="number">2f</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>arcTo</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>absSize</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>absSize</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>absSize</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>absSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">270</literal></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>addCircle</name></name><argument_list>(<argument><expr><name>w</name> <operator>/</operator> <literal type="number">2f</literal></expr></argument>, <argument><expr><name>h</name> <operator>/</operator> <literal type="number">2f</literal></expr></argument>, <argument><expr><name>absSize</name></expr></argument>, <argument><expr><name><name>Direction</name><operator>.</operator><name>CW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>wMeasureSpec</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>hMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>wMode</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getMode</name></name><argument_list>(<argument><expr><name>wMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>wSize</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>wMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>wMode</name> <operator>==</operator> <name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>width</name> <operator>=</operator> <name>wSize</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>wMode</name> <operator>==</operator> <name><name>MeasureSpec</name><operator>.</operator><name>AT_MOST</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>width</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>wSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>hMode</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getMode</name></name><argument_list>(<argument><expr><name>hMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>hSize</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>hMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>hMode</name> <operator>==</operator> <name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>height</name> <operator>=</operator> <name>hSize</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>hMode</name> <operator>==</operator> <name><name>MeasureSpec</name><operator>.</operator><name>AT_MOST</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>hSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>

        <expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getBaseline</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getMeasuredHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Monetary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>GenericUtils</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>MonetarySpannable</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>InputType</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CurrencyAmountView</name> <super><extends>extends <name>FrameLayout</name></extends></super> <block>{
    <interface><specifier>public</specifier> <specifier>static</specifier> interface <name>Listener</name> <block>{
        <function_decl><type><name>void</name></type> <name>changed</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>focusChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>significantColor</name></decl>, <decl><type ref="prev"/><name>lessSignificantColor</name></decl>, <decl><type ref="prev"/><name>errorColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Drawable</name></type> <name>deleteButtonDrawable</name></decl>, <decl><type ref="prev"/><name>contextButtonDrawable</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Drawable</name></type> <name>currencySymbolDrawable</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>localCurrencyCode</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MonetaryFormat</name></type> <name>inputFormat</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Monetary</name></type> <name>hint</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MonetaryFormat</name></type> <name>hintFormat</name> <init>= <expr><operator>new</operator> <call><name>MonetaryFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>noCode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>amountSigned</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>validateAmount</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>textView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>contextButton</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Listener</name></type> <name>listener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>OnClickListener</name></type> <name>contextButtonClickListener</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CurrencyAmountView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CurrencyAmountView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Resources</name></type> <name>resources</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>significantColor</name> <operator>=</operator> <call><name><name>resources</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_significant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lessSignificantColor</name> <operator>=</operator> <call><name><name>resources</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errorColor</name> <operator>=</operator> <call><name><name>resources</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>deleteButtonDrawable</name> <operator>=</operator> <call><name><name>resources</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_clear_grey600_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onFinishInflate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onFinishInflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>textView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name>getChildAt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_NUMBER</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_NUMBER_FLAG_DECIMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setHintTextColor</name></name><argument_list>(<argument><expr><name>lessSignificantColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setHorizontalFadingEdgeEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setSingleLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setValidateAmount</name><argument_list>(<argument><expr><name>textView</name> <operator>instanceof</operator> <name>EditText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textViewListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setOnFocusChangeListener</name></name><argument_list>(<argument><expr><name>textViewListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contextButton</name> <operator>=</operator> <operator>new</operator> <class><super><name>View</name></super><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>wMeasureSpec</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>hMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><call><name><name>textView</name><operator>.</operator><name>getCompoundPaddingRight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>textView</name><operator>.</operator><name>getMeasuredHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>LayoutParams</name></type> <name>chooseViewParams</name> <init>= <expr><operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>,
                <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>chooseViewParams</name><operator>.</operator><name>gravity</name></name> <operator>=</operator> <name><name>Gravity</name><operator>.</operator><name>RIGHT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>contextButton</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>chooseViewParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>contextButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateAppearance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCurrencySymbol</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>currencyCode</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>MonetaryFormat</name><operator>.</operator><name>CODE_BTC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>currencySymbolDrawable</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>currency_symbol_btc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>localCurrencyCode</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>MonetaryFormat</name><operator>.</operator><name>CODE_MBTC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>currencySymbolDrawable</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>currency_symbol_mbtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>localCurrencyCode</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>MonetaryFormat</name><operator>.</operator><name>CODE_UBTC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>currencySymbolDrawable</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>currency_symbol_ubtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>localCurrencyCode</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>currencyCode</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <comment type="line">// fiat</comment>
        <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencySymbol</name> <init>= <expr><call><name><name>GenericUtils</name><operator>.</operator><name>currencySymbol</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>textSize</name> <init>= <expr><call><name><name>textView</name><operator>.</operator><name>getTextSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>smallerTextSize</name> <init>= <expr><name>textSize</name> <operator>*</operator> <operator>(</operator><literal type="number">20f</literal> <operator>/</operator> <literal type="number">24f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>currencySymbolDrawable</name> <operator>=</operator> <operator>new</operator> <call><name>CurrencySymbolDrawable</name><argument_list>(<argument><expr><name>currencySymbol</name></expr></argument>, <argument><expr><name>smallerTextSize</name></expr></argument>, <argument><expr><name>lessSignificantColor</name></expr></argument>,
                    <argument><expr><name>textSize</name> <operator>*</operator> <literal type="number">0.37f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>localCurrencyCode</name> <operator>=</operator> <name>currencyCode</name></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><name>currencySymbolDrawable</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>localCurrencyCode</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>updateAppearance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setInputFormat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>inputFormat</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inputFormat</name></name> <operator>=</operator> <call><name><name>inputFormat</name><operator>.</operator><name>noCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setHintFormat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>hintFormat</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hintFormat</name></name> <operator>=</operator> <call><name><name>hintFormat</name><operator>.</operator><name>noCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateAppearance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setHint</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Monetary</name></type> <name>hint</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hint</name></name> <operator>=</operator> <name>hint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateAppearance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAmountSigned</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>amountSigned</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>amountSigned</name></name> <operator>=</operator> <name>amountSigned</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setValidateAmount</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>validateAmount</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>validateAmount</name></name> <operator>=</operator> <name>validateAmount</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setContextButton</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>contextButtonResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>OnClickListener</name></type> <name>contextButtonClickListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contextButtonDrawable</name></name> <operator>=</operator> <call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><name>contextButtonResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contextButtonClickListener</name></name> <operator>=</operator> <name>contextButtonClickListener</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateAppearance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Listener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Monetary</name></type> <name>getAmount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>isValidAmount</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>amountStr</name> <init>= <expr><call><name><name>textView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>localCurrencyCode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>inputFormat</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>amountStr</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><call><name><name>inputFormat</name><operator>.</operator><name>parseFiat</name></name><argument_list>(<argument><expr><name>localCurrencyCode</name></expr></argument>, <argument><expr><name>amountStr</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAmount</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Monetary</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>fireListener</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><name>fireListener</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>textViewListener</name><operator>.</operator><name>setFire</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <if>if <condition>(<expr><name>amount</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MonetarySpannable</name><argument_list>(<argument><expr><name>inputFormat</name></expr></argument>, <argument><expr><name>amountSigned</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

        <if>if <condition>(<expr><operator>!</operator><name>fireListener</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>textViewListener</name><operator>.</operator><name>setFire</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setEnabled</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateAppearance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTextColor</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>significantColor</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateAppearance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setStrikeThru</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>strikeThru</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>strikeThru</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setPaintFlags</name></name><argument_list>(<argument><expr><call><name><name>textView</name><operator>.</operator><name>getPaintFlags</name></name><argument_list>()</argument_list></call> <operator>|</operator> <name><name>Paint</name><operator>.</operator><name>STRIKE_THRU_TEXT_FLAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setPaintFlags</name></name><argument_list>(<argument><expr><call><name><name>textView</name><operator>.</operator><name>getPaintFlags</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name><name>Paint</name><operator>.</operator><name>STRIKE_THRU_TEXT_FLAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>TextView</name></type> <name>getTextView</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>textView</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNextFocusId</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>nextFocusId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setNextFocusDownId</name></name><argument_list>(<argument><expr><name>nextFocusId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setNextFocusForwardId</name></name><argument_list>(<argument><expr><name>nextFocusId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isValidAmount</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>zeroIsValid</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name> <init>= <expr><call><name><name>textView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name><name>str</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Monetary</name></type> <name>amount</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>localCurrencyCode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>amount</name> <operator>=</operator> <call><name><name>inputFormat</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>Coin</name><operator>)</operator> <name>amount</name><operator>)</operator><operator>.</operator><call><name>isGreaterThan</name><argument_list>(<argument><expr><call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getMaxMoney</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>amount</name> <operator>=</operator> <call><name><name>inputFormat</name><operator>.</operator><name>parseFiat</name></name><argument_list>(<argument><expr><name>localCurrencyCode</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line">// exactly zero</comment>
                <return>return <expr><name>zeroIsValid</name> <operator>||</operator> <call><name><name>amount</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
            }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        }</block></catch></try>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OnClickListener</name></type> <name>deleteClickListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setAmount</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateAppearance</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>enabled</name> <init>= <expr><call><name><name>textView</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>contextButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>amount</name> <init>= <expr><call><name><name>textView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>enabled</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>amount</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setCompoundDrawablesWithIntrinsicBounds</name></name><argument_list>(<argument><expr><name>currencySymbolDrawable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>deleteButtonDrawable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>contextButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>deleteClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>enabled</name> <operator>&amp;&amp;</operator> <name>contextButtonDrawable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setCompoundDrawablesWithIntrinsicBounds</name></name><argument_list>(<argument><expr><name>currencySymbolDrawable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>contextButtonDrawable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>contextButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>contextButtonClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setCompoundDrawablesWithIntrinsicBounds</name></name><argument_list>(<argument><expr><name>currencySymbolDrawable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>contextButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>contextButton</name><operator>.</operator><name>requestLayout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><name>validateAmount</name> <operator>||</operator> <call><name>isValidAmount</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>significantColor</name></expr> </then><else>: <expr><name>errorColor</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Spannable</name></type> <name>hintSpannable</name> <init>= <expr><operator>new</operator> <call><name>MonetarySpannable</name><argument_list>(<argument><expr><name>hintFormat</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hint</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>hint</name></expr> </then><else>: <expr><name><name>Coin</name><operator>.</operator><name>ZERO</name></name></expr></else></ternary></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>applyMarkup</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>MonetarySpannable</name><operator>.</operator><name>STANDARD_INSIGNIFICANT_SPANS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><name>hintSpannable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>Parcelable</name></type> <name>onSaveInstanceState</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"super_state"</literal></expr></argument>, <argument><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"child_textview"</literal></expr></argument>, <argument><expr><call><name><name>textView</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>, <argument><expr><call><name>getAmount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onRestoreInstanceState</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcelable</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>state</name> <operator>instanceof</operator> <name>Bundle</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>(</operator><name>Bundle</name><operator>)</operator> <name>state</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><literal type="string">"super_state"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><literal type="string">"child_textview"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setAmount</name><argument_list>(<argument><expr><operator>(</operator><name>Monetary</name><operator>)</operator> <call><name><name>bundle</name><operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextViewListener</name></type> <name>textViewListener</name> <init>= <expr><operator>new</operator> <call><name>TextViewListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>final</specifier> class <name>TextViewListener</name> <super><implements>implements <name>TextWatcher</name>, <name>OnFocusChangeListener</name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>fire</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>setFire</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>fire</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fire</name></name> <operator>=</operator> <name>fire</name></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// workaround for German keyboards</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>original</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>replaced</name> <init>= <expr><call><name><name>original</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>replaced</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>replaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>MonetarySpannable</name><operator>.</operator><name>applyMarkup</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>MonetarySpannable</name><operator>.</operator><name>STANDARD_SIGNIFICANT_SPANS</name></name></expr></argument>,
                    <argument><expr><name><name>MonetarySpannable</name><operator>.</operator><name>STANDARD_INSIGNIFICANT_SPANS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>updateAppearance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>fire</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>changed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onFocusChange</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><operator>!</operator><name>hasFocus</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Monetary</name></type> <name>amount</name> <init>= <expr><call><name>getAmount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>amount</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>setAmount</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></then></if>

            <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>fire</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>focusChanged</name></name><argument_list>(<argument><expr><name>hasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fiat</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>CurrencyAmountView</name><operator>.</operator><name>Listener</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CurrencyCalculatorLink</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrencyAmountView</name></type> <name>btcAmountView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrencyAmountView</name></type> <name>localAmountView</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Listener</name></type> <name>listener</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>enabled</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ExchangeRate</name></type> <name>exchangeRate</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>exchangeDirection</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>CurrencyAmountView</name><operator>.</operator><name>Listener</name></name></type> <name>btcAmountViewListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>CurrencyAmountView</name><operator>.</operator><name>Listener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>btcAmountView</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>setExchangeDirection</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

            <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>changed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>focusChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>focusChanged</name></name><argument_list>(<argument><expr><name>hasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>CurrencyAmountView</name><operator>.</operator><name>Listener</name></name></type> <name>localAmountViewListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>CurrencyAmountView</name><operator>.</operator><name>Listener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>localAmountView</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>setExchangeDirection</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

            <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>changed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>focusChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>focusChanged</name></name><argument_list>(<argument><expr><name>hasFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CurrencyCalculatorLink</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CurrencyAmountView</name></type> <name>btcAmountView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CurrencyAmountView</name></type> <name>localAmountView</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>btcAmountView</name></name> <operator>=</operator> <name>btcAmountView</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>btcAmountView</name><operator>.</operator><name>setListener</name></name><argument_list>(<argument><expr><name>btcAmountViewListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localAmountView</name></name> <operator>=</operator> <name>localAmountView</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>localAmountView</name><operator>.</operator><name>setListener</name></name><argument_list>(<argument><expr><name>localAmountViewListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Listener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setEnabled</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setExchangeRate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exchangeRate</name></name> <operator>=</operator> <name>exchangeRate</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ExchangeRate</name></type> <name>getExchangeRate</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>exchangeRate</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Coin</name></type> <name>getAmount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>exchangeDirection</name></expr>)</condition><then> <block>{
            <return>return <expr><operator>(</operator><name>Coin</name><operator>)</operator> <call><name><name>btcAmountView</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>exchangeRate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>localAmount</name> <init>= <expr><operator>(</operator><name>Fiat</name><operator>)</operator> <call><name><name>localAmountView</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>localAmount</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
            <try>try <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>btcAmount</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>fiatToCoin</name></name><argument_list>(<argument><expr><name>localAmount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>Coin</name><operator>)</operator> <name>btcAmount</name><operator>)</operator><operator>.</operator><call><name>isGreaterThan</name><argument_list>(<argument><expr><call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getMaxMoney</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>ArithmeticException</name><argument_list>()</argument_list></call></expr>;</throw></block></then></if>
                <return>return <expr><name>btcAmount</name></expr>;</return>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ArithmeticException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></catch></try>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAmount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getAmount</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>update</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>exchangeRate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setCurrencySymbol</name></name><argument_list>(<argument><expr><name><name>exchangeRate</name><operator>.</operator><name>fiat</name><operator>.</operator><name>currencyCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>exchangeDirection</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>btcAmount</name> <init>= <expr><operator>(</operator><name>Coin</name><operator>)</operator> <call><name><name>btcAmountView</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>btcAmount</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <try>try <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>localAmount</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>coinToFiat</name></name><argument_list>(<argument><expr><name>btcAmount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><name>localAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ArithmeticException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>localAmount</name> <init>= <expr><operator>(</operator><name>Fiat</name><operator>)</operator> <call><name><name>localAmountView</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>localAmount</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <try>try <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>btcAmount</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>fiatToCoin</name></name><argument_list>(<argument><expr><name>localAmount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>Coin</name><operator>)</operator> <name>btcAmount</name><operator>)</operator><operator>.</operator><call><name>isGreaterThan</name><argument_list>(<argument><expr><call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getMaxMoney</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>ArithmeticException</name><argument_list>()</argument_list></call></expr>;</throw></block></then></if>
                        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><name>btcAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ArithmeticException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then></if>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setExchangeDirection</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>exchangeDirection</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exchangeDirection</name></name> <operator>=</operator> <name>exchangeDirection</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getExchangeDirection</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>exchangeDirection</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>View</name></type> <name>activeTextView</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>exchangeDirection</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>btcAmountView</name><operator>.</operator><name>getTextView</name></name><argument_list>()</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><call><name><name>localAmountView</name><operator>.</operator><name>getTextView</name></name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>requestFocus</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>activeTextView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>requestFocus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setBtcAmount</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Listener</name></type> <name>listener</name> <init>= <expr><name><name>this</name><operator>.</operator><name>listener</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNextFocusId</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>nextFocusId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setNextFocusId</name></name><argument_list>(<argument><expr><name>nextFocusId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setNextFocusId</name></name><argument_list>(<argument><expr><name>nextFocusId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>ColorFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CurrencySymbolDrawable</name> <super><extends>extends <name>Drawable</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>paint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>symbol</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>y</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CurrencySymbolDrawable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>symbol</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>textSize</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>textSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>symbol</name></name> <operator>=</operator> <name>symbol</name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>CHAR_HAIR_SPACE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>draw</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><name>symbol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getIntrinsicWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>paint</name><operator>.</operator><name>measureText</name></name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getOpacity</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setAlpha</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setColorFilter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ColorFilter</name></type> <name>cf</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Monetary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>MonetarySpannable</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>ForegroundColorSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>RelativeSizeSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>ScaleXSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CurrencyTextView</name> <super><extends>extends <name>TextView</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>Monetary</name></type> <name>amount</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MonetaryFormat</name></type> <name>format</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>alwaysSigned</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>RelativeSizeSpan</name></type> <name>prefixRelativeSizeSpan</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ScaleXSpan</name></type> <name>prefixScaleXSpan</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ForegroundColorSpan</name></type> <name>prefixColorSpan</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>RelativeSizeSpan</name></type> <name>insignificantRelativeSizeSpan</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CurrencyTextView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CurrencyTextView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAmount</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Monetary</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>amount</name></name> <operator>=</operator> <name>amount</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setFormat</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>format</name></name> <operator>=</operator> <ternary><condition><expr><name>format</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>format</name><operator>.</operator><name>codeSeparator</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CHAR_HAIR_SPACE</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAlwaysSigned</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>alwaysSigned</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>alwaysSigned</name></name> <operator>=</operator> <name>alwaysSigned</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setStrikeThru</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>strikeThru</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>strikeThru</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>setPaintFlags</name><argument_list>(<argument><expr><call><name>getPaintFlags</name><argument_list>()</argument_list></call> <operator>|</operator> <name><name>Paint</name><operator>.</operator><name>STRIKE_THRU_TEXT_FLAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>setPaintFlags</name><argument_list>(<argument><expr><call><name>getPaintFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name><name>Paint</name><operator>.</operator><name>STRIKE_THRU_TEXT_FLAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setInsignificantRelativeSize</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>insignificantRelativeSize</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>insignificantRelativeSize</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefixRelativeSizeSpan</name></name> <operator>=</operator> <operator>new</operator> <call><name>RelativeSizeSpan</name><argument_list>(<argument><expr><name>insignificantRelativeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>insignificantRelativeSizeSpan</name></name> <operator>=</operator> <operator>new</operator> <call><name>RelativeSizeSpan</name><argument_list>(<argument><expr><name>insignificantRelativeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefixRelativeSizeSpan</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>insignificantRelativeSizeSpan</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setPrefixColor</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>prefixColor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefixColorSpan</name></name> <operator>=</operator> <operator>new</operator> <call><name>ForegroundColorSpan</name><argument_list>(<argument><expr><name>prefixColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setPrefixScaleX</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>prefixScaleX</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefixScaleXSpan</name></name> <operator>=</operator> <operator>new</operator> <call><name>ScaleXSpan</name><argument_list>(<argument><expr><name>prefixScaleX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onFinishInflate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onFinishInflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setPrefixColor</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPrefixScaleX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setInsignificantRelativeSize</name><argument_list>(<argument><expr><literal type="number">0.85f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSingleLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>MonetarySpannable</name></type> <name>text</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>amount</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>text</name> <operator>=</operator> <operator>new</operator> <call><name>MonetarySpannable</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>alwaysSigned</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyMarkup</name><argument_list>(
                    <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>prefixRelativeSizeSpan</name></expr>, <expr><name>prefixScaleXSpan</name></expr>, <expr><name>prefixColorSpan</name></expr> }</block></expr></argument>,
                    <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>insignificantRelativeSizeSpan</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>DialogBuilder</name> <super><extends>extends <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>customTitle</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ImageView</name></type> <name>iconView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>titleView</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>DialogBuilder</name></type> <name>warn</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>titleResId</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_warning_grey600_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name>titleResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>

    <constructor><specifier>public</specifier> <name>DialogBuilder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr> ?</condition><then> <expr><name><name>AlertDialog</name><operator>.</operator><name>THEME_HOLO_LIGHT</name></name></expr>
                </then><else>: <expr><name><name>AlertDialog</name><operator>.</operator><name>THEME_DEVICE_DEFAULT_LIGHT</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>customTitle</name></name> <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>dialog_title</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iconView</name></name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>customTitle</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>titleView</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>customTitle</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>DialogBuilder</name></type> <name>setIcon</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Drawable</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>icon</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setCustomTitle</name><argument_list>(<argument><expr><name>customTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iconView</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iconView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>DialogBuilder</name></type> <name>setIcon</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>iconResId</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>iconResId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setCustomTitle</name><argument_list>(<argument><expr><name>customTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iconView</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name>iconResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iconView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>DialogBuilder</name></type> <name>setTitle</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>title</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setCustomTitle</name><argument_list>(<argument><expr><name>customTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>titleView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>DialogBuilder</name></type> <name>setTitle</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>titleResId</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>titleResId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setCustomTitle</name><argument_list>(<argument><expr><name>customTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>titleView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>titleResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>DialogBuilder</name></type> <name>setMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>DialogBuilder</name></type> <name>setMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>DialogBuilder</name></type> <name>singleDismissButton</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>OnClickListener</name></type> <name>dismissListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setNeutralButton</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><name>dismissListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<class><specifier>public</specifier> class <name>DividerItemDecoration</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ItemDecoration</name></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>ATTRS</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>listDivider</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>HORIZONTAL_LIST</name> <init>= <expr><name><name>LinearLayoutManager</name><operator>.</operator><name>HORIZONTAL</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VERTICAL_LIST</name> <init>= <expr><name><name>LinearLayoutManager</name><operator>.</operator><name>VERTICAL</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Drawable</name></type> <name>mDivider</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mOrientation</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DividerItemDecoration</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>orientation</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>TypedArray</name></type> <name>a</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>obtainStyledAttributes</name></name><argument_list>(<argument><expr><name>ATTRS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mDivider</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOrientation</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOrientation</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>orientation</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>orientation</name> <operator>!=</operator> <name>HORIZONTAL_LIST</name> <operator>&amp;&amp;</operator> <name>orientation</name> <operator>!=</operator> <name>VERTICAL_LIST</name></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"invalid orientation"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

        <expr_stmt><expr><name>mOrientation</name> <operator>=</operator> <name>orientation</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Canvas</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mOrientation</name> <operator>==</operator> <name>VERTICAL_LIST</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>drawVertical</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>drawHorizontal</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>drawVertical</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Canvas</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>left</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>right</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>parent</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childCount</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>childCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>RecyclerView</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>(</operator><name><name>RecyclerView</name><operator>.</operator><name>LayoutParams</name></name><operator>)</operator> <call><name><name>child</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>top</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getBottom</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>params</name><operator>.</operator><name>bottomMargin</name></name> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getTranslationY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bottom</name> <init>= <expr><name>top</name> <operator>+</operator> <call><name><name>mDivider</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mDivider</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDivider</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>drawHorizontal</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Canvas</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>top</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getPaddingTop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bottom</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>parent</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childCount</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>childCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>RecyclerView</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>(</operator><name><name>RecyclerView</name><operator>.</operator><name>LayoutParams</name></name><operator>)</operator> <call><name><name>child</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>left</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getRight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>params</name><operator>.</operator><name>rightMargin</name></name> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getTranslationX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>right</name> <init>= <expr><name>left</name> <operator>+</operator> <call><name><name>mDivider</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mDivider</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDivider</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>getItemOffsets</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Rect</name></type> <name>outRect</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>itemPosition</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mOrientation</name> <operator>==</operator> <name>VERTICAL_LIST</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>outRect</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>mDivider</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>outRect</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>mDivider</name><operator>.</operator><name>getIntrinsicWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookDao</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>EditAddressBookEntryFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>EditAddressBookEntryFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ADDRESS</name> <init>= <expr><literal type="string">"address"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_SUGGESTED_ADDRESS_LABEL</name> <init>= <expr><literal type="string">"suggested_address_label"</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>edit</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>edit</name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>edit</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>suggestedAddressLabel</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><call><name><name>EditAddressBookEntryFragment</name><operator>.</operator><name>instance</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>suggestedAddressLabel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>EditAddressBookEntryFragment</name></type> <name>instance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>suggestedAddressLabel</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>EditAddressBookEntryFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>EditAddressBookEntryFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_ADDRESS</name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_SUGGESTED_ADDRESS_LABEL</name></expr></argument>, <argument><expr><name>suggestedAddressLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>fragment</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AddressBookDao</name></type> <name>addressBookDao</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Wallet</name></type> <name>wallet</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>EditAddressBookEntryFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBookDao</name></name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><call><name><name>args</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>suggestedAddressLabel</name> <init>= <expr><call><name><name>args</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_SUGGESTED_ADDRESS_LABEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name> <init>= <expr><call><name><name>addressBookDao</name><operator>.</operator><name>resolveLabel</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isAdd</name> <init>= <expr><name>label</name> <operator>==</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isOwn</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>isPubKeyHashMine</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getHash160</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>isOwn</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isAdd</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>edit_address_book_entry_dialog_title_add_receive</name></name></expr>
                    </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>edit_address_book_entry_dialog_title_edit_receive</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isAdd</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>edit_address_book_entry_dialog_title_add</name></name></expr>
                    </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>edit_address_book_entry_dialog_title_edit</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>edit_address_book_entry_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>viewAddress</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>edit_address_book_entry_address</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>viewAddress</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>WalletUtils</name><operator>.</operator><name>formatAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_GROUP_SIZE</name></name></expr></argument>,
                <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_LINE_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>viewLabel</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>edit_address_book_entry_label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>viewLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>label</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>label</name></expr> </then><else>: <expr><name>suggestedAddressLabel</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></type> <name>onClickListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>which</name> <operator>==</operator> <name><name>DialogInterface</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>newLabel</name> <init>= <expr><call><name><name>viewLabel</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>newLabel</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>addressBookDao</name><operator>.</operator><name>insertOrUpdate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AddressBookEntry</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                    <elseif>else <if>if <condition>(<expr><operator>!</operator><name>isAdd</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>addressBookDao</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>which</name> <operator>==</operator> <name><name>DialogInterface</name><operator>.</operator><name>BUTTON_NEUTRAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>addressBookDao</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>

                <expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isAdd</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_add</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>edit_address_book_entry_dialog_button_edit</name></name></expr></else></ternary></expr></argument>,
                <argument><expr><name>onClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>isAdd</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_delete</name></name></expr></argument>, <argument><expr><name>onClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>dismissAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyCrypterException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyCrypterScrypt</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>params</name><operator>.</operator><name>KeyParameter</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Strings</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnShowListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>HandlerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>EncryptKeysDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>EncryptKeysDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>EncryptKeysDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Wallet</name></type> <name>wallet</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>oldPasswordGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>oldPasswordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>newPasswordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>badPasswordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>passwordStrengthView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>showView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>positiveButton</name></decl>, <decl><type ref="prev"/><name>negativeButton</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>HandlerThread</name></type> <name>backgroundThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>

    <enum><specifier>private</specifier> enum <name>State</name> <block>{
        <decl><name>INPUT</name></decl>, <decl><name>CRYPTING</name></decl>, <decl><name>DONE</name></decl>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><name>State</name></type> <name>state</name> <init>= <expr><name><name>State</name><operator>.</operator><name>INPUT</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>EncryptKeysDialogFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextWatcher</name></type> <name>textWatcher</name> <init>= <expr><operator>new</operator> <class><super><name>TextWatcher</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>badPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backgroundThread</name> <operator>=</operator> <operator>new</operator> <call><name>HandlerThread</name><argument_list>(<argument><expr><literal type="string">"backgroundThread"</literal></expr></argument>, <argument><expr><name><name>Process</name><operator>.</operator><name>THREAD_PRIORITY_BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backgroundHandler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>encrypt_keys_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>oldPasswordGroup</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>encrypt_keys_dialog_password_old_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>oldPasswordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>encrypt_keys_dialog_password_old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oldPasswordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>newPasswordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>encrypt_keys_dialog_password_new</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newPasswordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>badPasswordView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>encrypt_keys_dialog_bad_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>passwordStrengthView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>encrypt_keys_dialog_password_strength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>showView</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>encrypt_keys_dialog_show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// dummies, just to make buttons show</comment>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_ok</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setCanceledOnTouchOutside</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOnShowListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnShowListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onShow</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name>positiveButton</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>negativeButton</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_NEGATIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>handleGo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>dismissAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>oldPasswordView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>newPasswordView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>showView</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>dialog</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>encrypt_keys_dialog_show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>showView</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowPasswordCheckListener</name><argument_list>(<argument><expr><name>newPasswordView</name></expr></argument>, <argument><expr><name>oldPasswordView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>showView</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>EncryptKeysDialogFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <name>dialog</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDismiss</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>oldPasswordView</name><operator>.</operator><name>removeTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newPasswordView</name><operator>.</operator><name>removeTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>showView</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>wipePasswords</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDismiss</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleGo</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>oldPassword</name> <init>= <expr><call><name><name>Strings</name><operator>.</operator><name>emptyToNull</name></name><argument_list>(<argument><expr><call><name><name>oldPasswordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>newPassword</name> <init>= <expr><call><name><name>Strings</name><operator>.</operator><name>emptyToNull</name></name><argument_list>(<argument><expr><call><name><name>newPasswordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>oldPassword</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>newPassword</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"changing spending password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>newPassword</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"setting spending password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name>oldPassword</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"removing spending password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block></else></if>

        <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>CRYPTING</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <comment type="line">// For the old key, we use the key crypter that was used to derive the password in the first</comment>
                <comment type="line">// place.</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>oldKey</name> <init>= <expr><ternary><condition><expr><name>oldPassword</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>wallet</name><operator>.</operator><name>getKeyCrypter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deriveKey</name><argument_list>(<argument><expr><name>oldPassword</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <comment type="line">// For the new key, we create a new key crypter according to the desired parameters.</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>KeyCrypterScrypt</name></type> <name>keyCrypter</name> <init>= <expr><operator>new</operator> <call><name>KeyCrypterScrypt</name><argument_list>(<argument><expr><call><name><name>application</name><operator>.</operator><name>scryptIterationsTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>newKey</name> <init>= <expr><ternary><condition><expr><name>newPassword</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>keyCrypter</name><operator>.</operator><name>deriveKey</name></name><argument_list>(<argument><expr><name>newPassword</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                        <if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><name>oldKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"wallet is encrypted, but did not provide spending password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>oldPasswordView</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else>else <block>{
                                <try>try <block>{
                                    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>decrypt</name></name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>DONE</name></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"wallet successfully decrypted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyCrypterException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"wallet decryption failed: "</literal> <operator>+</operator> <call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>badPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>oldPasswordView</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                }</block></catch></try>
                            }</block></else></if>
                        }</block></then></if>

                        <if>if <condition>(<expr><name>newKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>encrypt</name></name><argument_list>(<argument><expr><name>keyCrypter</name></expr></argument>, <argument><expr><name>newKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(
                                    <argument><expr><literal type="string">"wallet successfully encrypted, using key derived by new spending password ({} scrypt iterations)"</literal></expr></argument>,
                                    <argument><expr><call><name><name>keyCrypter</name><operator>.</operator><name>getScryptParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getN</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>DONE</name></name></expr>;</expr_stmt>
                        }</block></then></if>

                        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>DONE</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>WalletUtils</name><operator>.</operator><name>autoBackupWallet</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// trigger load manually because of missing callbacks for encryption state</comment>
                            <expr_stmt><expr><call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletActivityViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>walletEncrypted</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>delayedDismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></function>

                    <function><specifier>private</specifier> <type><name>void</name></type> <name>delayedDismiss</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                            <function><annotation>@<name>Override</name></annotation>
                            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                                <expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            }</block></function>
                        }</block></class></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>wipePasswords</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>oldPasswordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newPasswordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>dialog</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasOldPassword</name> <init>= <expr><operator>!</operator><call><name><name>oldPasswordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasPassword</name> <init>= <expr><operator>!</operator><call><name><name>newPasswordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>oldPasswordGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oldPasswordView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>newPasswordView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>passwordLength</name> <init>= <expr><call><name><name>newPasswordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name> <operator>&amp;&amp;</operator> <name>passwordLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>passwordLength</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_password_strength_weak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_password_strength_weak</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>passwordLength</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_password_strength_fair</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_password_strength_fair</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>passwordLength</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_password_strength_good</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_password_strength_strong</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_password_strength_strong</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>showView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>hasPassword</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_edit</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_remove</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>hasOldPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>hasPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>CRYPTING</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>newPasswordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>
                    ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_state_decrypting</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_state_encrypting</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>DONE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_state_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkState</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name><name>Event</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>T</name></type> <name>content</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>hasBeenHandled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>simple</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <constructor><specifier>public</specifier> <name>Event</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>T</name></type> <name>content</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>content</name></name> <operator>=</operator> <name>content</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasBeenHandled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>hasBeenHandled</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>T</name></type> <name>getContentOrThrow</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkState</name><argument_list>(<argument><expr><operator>!</operator><name>hasBeenHandled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>hasBeenHandled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><name>content</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>T</name></type> <name>getContentIfNotHandled</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>hasBeenHandled</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>hasBeenHandled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><name>content</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name><name>Observer</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super><implements>implements <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></implements></super> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Event</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name><name>event</name><operator>.</operator><name>hasBeenHandled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>onEvent</name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getContentOrThrow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>

        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>T</name></type> <name>content</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright 2012-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ExchangeRatesActivity</name> <super><extends>extends <name>AbstractWalletActivity</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>exchange_rates_content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fiat</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRate</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRatesProvider</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainState</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>DiffUtil</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListAdapter</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ExchangeRatesAdapter</name> <super><extends>extends <name><name>ListAdapter</name><argument_list type="generic">&lt;<argument><name><name>ExchangeRatesAdapter</name><operator>.</operator><name>ListItem</name></name></argument>, <argument><name><name>ExchangeRatesAdapter</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></extends></super> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></type> <name>buildListItems</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Cursor</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>defaultCurrency</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>rateBase</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToPosition</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name> <init>= <expr><call><name><name>ExchangeRatesProvider</name><operator>.</operator><name>getExchangeRate</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>baseRateAsFiat</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>rate</name><operator>.</operator><name>coinToFiat</name></name><argument_list>(<argument><expr><name>rateBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>baseRateMinDecimals</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name><name>rateBase</name><operator>.</operator><name>isLessThan</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>balanceAsFiat</name> <init>= <expr><ternary><condition><expr><name>balance</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>blockchainState</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><name><name>blockchainState</name><operator>.</operator><name>replaying</name></name><operator>)</operator></expr>
                    ?</condition><then> <expr><call><name><name>exchangeRate</name><operator>.</operator><name>rate</name><operator>.</operator><name>coinToFiat</name></name><argument_list>(<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isDefaultCurrency</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>defaultCurrency</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>ListItem</name><argument_list>(<argument><expr><name>exchangeRate</name></expr></argument>, <argument><expr><name>baseRateAsFiat</name></expr></argument>, <argument><expr><name>baseRateMinDecimals</name></expr></argument>, <argument><expr><name>balanceAsFiat</name></expr></argument>, <argument><expr><name>isDefaultCurrency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>items</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ListItem</name> <block>{
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Fiat</name></type> <name>baseRateAsFiat</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>baseRateMinDecimals</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Fiat</name></type> <name>balanceAsFiat</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>isSelected</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ListItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>baseRateAsFiat</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>baseRateMinDecimals</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>balanceAsFiat</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isSelected</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currencyCode</name></name> <operator>=</operator> <call><name><name>exchangeRate</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseRateAsFiat</name></name> <operator>=</operator> <name>baseRateAsFiat</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseRateMinDecimals</name></name> <operator>=</operator> <name>baseRateMinDecimals</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>balanceAsFiat</name></name> <operator>=</operator> <name>balanceAsFiat</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSelected</name></name> <operator>=</operator> <name>isSelected</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><specifier>final</specifier> <name>OnClickListener</name></type> <name>onClickListener</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ExchangeRatesAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>OnClickListener</name></type> <name>onClickListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>DiffUtil</name><operator>.</operator><name><name>ItemCallback</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>areItemsTheSame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>oldItem</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>newItem</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name><name>oldItem</name><operator>.</operator><name>currencyCode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>newItem</name><operator>.</operator><name>currencyCode</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>areContentsTheSame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>oldItem</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>newItem</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldItem</name><operator>.</operator><name>baseRateAsFiat</name></name></expr></argument>, <argument><expr><name><name>newItem</name><operator>.</operator><name>baseRateAsFiat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldItem</name><operator>.</operator><name>baseRateMinDecimals</name></name></expr></argument>, <argument><expr><name><name>newItem</name><operator>.</operator><name>baseRateMinDecimals</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldItem</name><operator>.</operator><name>balanceAsFiat</name></name></expr></argument>, <argument><expr><name><name>newItem</name><operator>.</operator><name>balanceAsFiat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldItem</name><operator>.</operator><name>isSelected</name></name></expr></argument>, <argument><expr><name><name>newItem</name><operator>.</operator><name>isSelected</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inflater</name></name> <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onClickListener</name></name> <operator>=</operator> <name>onClickListener</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>ViewHolder</name></type> <name>onCreateViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>ViewHolder</name><argument_list>(<argument><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>exchange_rate_row</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBindViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewHolder</name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>listItem</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>itemView</name><operator>.</operator><name>setBackgroundResource</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>bg_list_selected</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>bg_list</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>defaultView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>currencyCodeView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>listItem</name><operator>.</operator><name>currencyCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>rateView</name><operator>.</operator><name>setFormat</name></name><argument_list>(<argument><expr><call><name><name>Constants</name><operator>.</operator><name>LOCAL_FORMAT</name><operator>.</operator><name>minDecimals</name></name><argument_list>(<argument><expr><name><name>listItem</name><operator>.</operator><name>baseRateMinDecimals</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>rateView</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name><name>listItem</name><operator>.</operator><name>baseRateAsFiat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>walletView</name><operator>.</operator><name>setFormat</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>LOCAL_FORMAT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>listItem</name><operator>.</operator><name>balanceAsFiat</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>walletView</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name><name>listItem</name><operator>.</operator><name>balanceAsFiat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>walletView</name><operator>.</operator><name>setStrikeThru</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>walletView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>walletView</name><operator>.</operator><name>setStrikeThru</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>OnClickListener</name></type> <name>onClickListener</name> <init>= <expr><name><name>this</name><operator>.</operator><name>onClickListener</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>onClickListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>menuView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>onClickListener</name><operator>.</operator><name>onExchangeRateMenuClick</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>listItem</name><operator>.</operator><name>currencyCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <interface><specifier>public</specifier> interface <name>OnClickListener</name> <block>{
        <function_decl><type><name>void</name></type> <name>onExchangeRateMenuClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>currencyCode</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ViewHolder</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>defaultView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>currencyCodeView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrencyTextView</name></type> <name>rateView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrencyTextView</name></type> <name>walletView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ImageButton</name></type> <name>menuView</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>defaultView</name> <operator>=</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>exchange_rate_row_default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currencyCodeView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>exchange_rate_row_currency_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rateView</name> <operator>=</operator> <operator>(</operator><name>CurrencyTextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>exchange_rate_row_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>walletView</name> <operator>=</operator> <operator>(</operator><name>CurrencyTextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>exchange_rate_row_balance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>menuView</name> <operator>=</operator> <operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>exchange_rate_row_menu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Strings</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRatesProvider</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainState</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>OnSharedPreferenceChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>PopupMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>SearchView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>SearchView</name><operator>.</operator><name>OnQueryTextListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ViewAnimator</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ExchangeRatesFragment</name> <super><extends>extends <name>Fragment</name></extends>
        <implements>implements <name>OnSharedPreferenceChangeListener</name>, <name><name>ExchangeRatesAdapter</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewAnimator</name></type> <name>viewGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type> <name>recyclerView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ExchangeRatesAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ExchangeRatesViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>ExchangeRatesViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getExchangeRates</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
                    <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>query</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setDisplayedChild</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>query</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setDisplayedChild</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></elseif> <else>else <block>{
                        <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setDisplayedChild</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>defaultCurrency</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getExchangeCurrencyCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>defaultCurrency</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToPosition</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                                <if>if <condition>(<expr><call><name><name>cursor</name>
                                        <operator>.</operator><name>getString</name></name><argument_list>(
                                                <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ExchangeRatesProvider</name><operator>.</operator><name>KEY_CURRENCY_CODE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>defaultCurrency</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>scrollToPosition</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                }</block></then></if>
                            }</block></while>
                        }</block></then></if>

                        <if>if <condition>(<expr><name>activity</name> <operator>instanceof</operator> <name>ExchangeRatesActivity</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToPosition</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name> <init>= <expr><call><name><name>ExchangeRatesProvider</name><operator>.</operator><name>getExchangeRate</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>.</operator><name>source</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>getActionBar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSubtitle</name><argument_list>(
                                    <argument><expr><ternary><condition><expr><name>source</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>exchange_rates_fragment_source</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getBlockchainState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>BlockchainState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>ExchangeRatesAdapter</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>registerOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>exchange_rates_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>viewGroup</name> <operator>=</operator> <operator>(</operator><name>ViewAnimator</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>exchange_rates_list_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>recyclerView</name> <operator>=</operator> <operator>(</operator><name>RecyclerView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>exchange_rates_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinearLayoutManager</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>addItemDecoration</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DividerItemDecoration</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DividerItemDecoration</name><operator>.</operator><name>VERTICAL_LIST</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>unregisterOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeSubmitList</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Cursor</name></type> <name>exchangeRates</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getExchangeRates</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>exchangeRates</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>submitList</name></name><argument_list>(<argument><expr><call><name><name>ExchangeRatesAdapter</name><operator>.</operator><name>buildListItems</name></name><argument_list>(<argument><expr><name>exchangeRates</name></expr></argument>, <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>getBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>getBlockchainState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>config</name><operator>.</operator><name>getExchangeCurrencyCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>config</name><operator>.</operator><name>getBtcBase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onExchangeRateMenuClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PopupMenu</name></type> <name>popupMenu</name> <init>= <expr><operator>new</operator> <call><name>PopupMenu</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>exchange_rates_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>setOnMenuItemClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PopupMenu</name><operator>.</operator><name>OnMenuItemClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onMenuItemClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>exchange_rates_context_set_as_default</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setExchangeCurrencyCode</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></then> <else>else <block>{
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                }</block></else></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>exchange_rates_fragment_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>searchMenuItem</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>exchange_rates_options_search</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>SearchView</name></type> <name>searchView</name> <init>= <expr><operator>(</operator><name>SearchView</name><operator>)</operator> <call><name><name>searchMenuItem</name><operator>.</operator><name>getActionView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setOnQueryTextListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnQueryTextListener</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>boolean</name></type> <name>onQueryTextChange</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>newText</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>query</name></name> <operator>=</operator> <call><name><name>Strings</name><operator>.</operator><name>emptyToNull</name></name><argument_list>(<argument><expr><call><name><name>newText</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getExchangeRates</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setQuery</name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>boolean</name></type> <name>onQueryTextSubmit</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Workaround for not being able to style the SearchView</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name> <init>= <expr><call><name><name>searchView</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentifier</name><argument_list>(<argument><expr><literal type="string">"android:id/search_src_text"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>searchInput</name> <init>= <expr><call><name><name>searchView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>searchInput</name> <operator>instanceof</operator> <name>EditText</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>EditText</name><operator>)</operator> <name>searchInput</name><operator>)</operator><operator>.</operator><call><name>setTextColor</name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>searchMenuItem</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSharedPreferenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>sharedPreferences</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_EXCHANGE_CURRENCY</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><call><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_BTC_PRECISION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Strings</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>BlockchainStateLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRatesProvider</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletBalanceLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>loader</name><operator>.</operator><name>content</name><operator>.</operator><name>CursorLoader</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ExchangeRatesViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ExchangeRatesLiveData</name></type> <name>exchangeRates</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletBalanceLiveData</name></type> <name>balance</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BlockchainStateLiveData</name></type> <name>blockchainState</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>query</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ExchangeRatesViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>ExchangeRatesLiveData</name></type> <name>getExchangeRates</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>exchangeRates</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>exchangeRates</name> <operator>=</operator> <operator>new</operator> <call><name>ExchangeRatesLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>exchangeRates</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>WalletBalanceLiveData</name></type> <name>getBalance</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>balance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>balance</name> <operator>=</operator> <operator>new</operator> <call><name>WalletBalanceLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>balance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>BlockchainStateLiveData</name></type> <name>getBlockchainState</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>blockchainState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>blockchainState</name> <operator>=</operator> <operator>new</operator> <call><name>BlockchainStateLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>blockchainState</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ExchangeRatesLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CursorLoader</name></type> <name>loader</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ExchangeRatesLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loader</name></name> <operator>=</operator> <operator>new</operator> <class><super><name>CursorLoader</name></super><argument_list>(<argument><expr><name>application</name></expr></argument>,
                    <argument><expr><call><name><name>ExchangeRatesProvider</name><operator>.</operator><name>contentUri</name></name><argument_list>(<argument><expr><call><name><name>application</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                    <argument><expr><name><name>ExchangeRatesProvider</name><operator>.</operator><name>QUERY_PARAM_Q</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">""</literal></expr> }</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>deliverResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
                    <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></function>
            }</block></class></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>startLoading</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>stopLoading</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>setQuery</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>setSelectionArgs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>Strings</name><operator>.</operator><name>nullToEmpty</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>loader</name><operator>.</operator><name>forceLoad</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>ListFragment</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>FancyListFragment</name> <super><extends>extends <name>ListFragment</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fancy_list_content</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setEmptyText</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>emptyView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>empty</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>emptyView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>HelpDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>HelpDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_MESSAGE</name> <init>= <expr><literal type="string">"message"</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>page</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><call><name><name>HelpDialogFragment</name><operator>.</operator><name>instance</name></name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>HelpDialogFragment</name></type> <name>instance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>HelpDialogFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>HelpDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>KEY_MESSAGE</name></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>fragment</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>HelpDialogFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name> <init>= <expr><call><name><name>args</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_MESSAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>KeyStore</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>KeyStoreException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoin</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>Protos</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>AddressFormatException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>DumpedPrivateKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VerificationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionedChecksummedBytes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>WrongNetworkException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BIP38PrivateKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>TrustStoreLoader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocol</name><operator>.</operator><name>PkiVerificationData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentSession</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>uri</name><operator>.</operator><name>BitcoinURI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>uri</name><operator>.</operator><name>BitcoinURIParseException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>Hashing</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteStreams</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UninitializedMessageException</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Qr</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>InputParser</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>InputParser</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>StringInputParser</name> <super><extends>extends <name>InputParser</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>input</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>StringInputParser</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"BITCOIN:-"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>serializedPaymentRequest</name> <init>= <expr><call><name><name>Qr</name><operator>.</operator><name>decodeBinary</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>parseAndHandlePaymentRequest</name><argument_list>(<argument><expr><name>serializedPaymentRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"i/o error while fetching payment request"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_io_error</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>PaymentProtocolException</name><operator>.</operator><name>PkiVerificationException</name></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got unverifyable payment request"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_unverifyable_paymentrequest</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentProtocolException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got invalid payment request"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_invalid_paymentrequest</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"bitcoin:"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>BitcoinURI</name></type> <name>bitcoinUri</name> <init>= <expr><operator>new</operator> <call><name>BitcoinURI</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>bitcoinUri</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>BitcoinURIParseException</name><argument_list>(<argument><expr><literal type="string">"mismatched network"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

                    <expr_stmt><expr><call><name>handlePaymentIntent</name><argument_list>(<argument><expr><call><name><name>PaymentIntent</name><operator>.</operator><name>fromBitcoinUri</name></name><argument_list>(<argument><expr><name>bitcoinUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BitcoinURIParseException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got invalid bitcoin uri: '"</literal> <operator>+</operator> <name>input</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_invalid_bitcoin_uri</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>PATTERN_TRANSACTION</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <init>= <expr><operator>new</operator> <call><name>Transaction</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>,
                            <argument><expr><call><name><name>Qr</name><operator>.</operator><name>decodeDecompressBinary</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>handleDirectTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"i/o error while fetching transaction"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_invalid_transaction</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ProtocolException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got invalid transaction"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_invalid_transaction</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if></elseif> <else>else <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>handlePrivateKey</name><argument_list>(<argument><expr><call><name><name>DumpedPrivateKey</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AddressFormatException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name>handlePrivateKey</name><argument_list>(<argument><expr><call><name><name>BIP38PrivateKey</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AddressFormatException</name></type> <name>x2</name></decl></parameter>)</parameter_list> <block>{
                        <try>try <block>{
                            <expr_stmt><expr><call><name>handlePaymentIntent</name><argument_list>(<argument><expr><call><name><name>PaymentIntent</name>
                                    <operator>.</operator><name>fromAddress</name></name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>WrongNetworkException</name></type> <name>x3</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"detected address, but wrong network: "</literal> <operator>+</operator> <name><name>x3</name><operator>.</operator><name>verCode</name></name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_invalid_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>AddressFormatException</name></type> <name>x3</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name>cannotClassify</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></catch></try>
                }</block></catch></try>
            }</block></else></if>
        }</block></function>

        <function><specifier>protected</specifier> <type><name>void</name></type> <name>handlePrivateKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VersionedChecksummedBytes</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><operator>new</operator> <call><name>Address</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>,
                    <argument><expr><operator>(</operator><operator>(</operator><name>DumpedPrivateKey</name><operator>)</operator> <name>key</name><operator>)</operator><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPubKeyHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>handlePaymentIntent</name><argument_list>(<argument><expr><call><name><name>PaymentIntent</name><operator>.</operator><name>fromAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>BinaryInputParser</name> <super><extends>extends <name>InputParser</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>inputType</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>input</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>BinaryInputParser</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>inputType</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inputType</name></name> <operator>=</operator> <name>inputType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>Constants</name><operator>.</operator><name>MIMETYPE_TRANSACTION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>inputType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <init>= <expr><operator>new</operator> <call><name>Transaction</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>handleDirectTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VerificationException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got invalid transaction"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_invalid_transaction</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENTREQUEST</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>inputType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>parseAndHandlePaymentRequest</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>PaymentProtocolException</name><operator>.</operator><name>PkiVerificationException</name></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got unverifyable payment request"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_unverifyable_paymentrequest</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentProtocolException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got invalid payment request"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_invalid_paymentrequest</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name>cannotClassify</name><argument_list>(<argument><expr><name>inputType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>handleDirectTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>StreamInputParser</name> <super><extends>extends <name>InputParser</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>inputType</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>StreamInputParser</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>inputType</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inputType</name></name> <operator>=</operator> <name>inputType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>is</name></name> <operator>=</operator> <name>is</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENTREQUEST</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>inputType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <init>(<decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{
                    <expr_stmt><expr><call><name><name>ByteStreams</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>parseAndHandlePaymentRequest</name><argument_list>(<argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"i/o error while fetching payment request"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_io_error</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>PaymentProtocolException</name><operator>.</operator><name>PkiVerificationException</name></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got unverifyable payment request"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_unverifyable_paymentrequest</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentProtocolException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got invalid payment request"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_invalid_paymentrequest</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <finally>finally <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>x</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></finally>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>cannotClassify</name><argument_list>(<argument><expr><name>inputType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>handleDirectTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>()</parameter_list>;</function_decl>

    <function><specifier>protected</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>parseAndHandlePaymentRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>serializedPaymentRequest</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>PaymentProtocolException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name> <init>= <expr><call><name>parsePaymentRequest</name><argument_list>(<argument><expr><name>serializedPaymentRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>handlePaymentIntent</name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PaymentIntent</name></type> <name>parsePaymentRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>serializedPaymentRequest</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>PaymentProtocolException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <if>if <condition>(<expr><name><name>serializedPaymentRequest</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">50000</literal></expr>)</condition><then>
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>PaymentProtocolException</name><argument_list>(<argument><expr><literal type="string">"payment request too big: "</literal> <operator>+</operator> <name><name>serializedPaymentRequest</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>PaymentRequest</name></name></type> <name>paymentRequest</name> <init>= <expr><call><name><name>Protos</name><operator>.</operator><name>PaymentRequest</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>serializedPaymentRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>pkiName</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>pkiCaName</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><literal type="string">"none"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>paymentRequest</name><operator>.</operator><name>getPkiType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>KeyStore</name></type> <name>keystore</name> <init>= <expr><operator>new</operator> <call><name><name>TrustStoreLoader</name><operator>.</operator><name>DefaultTrustStoreLoader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKeyStore</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>PkiVerificationData</name></type> <name>verificationData</name> <init>= <expr><call><name><name>PaymentProtocol</name><operator>.</operator><name>verifyPaymentRequestPki</name></name><argument_list>(<argument><expr><name>paymentRequest</name></expr></argument>,
                        <argument><expr><name>keystore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>pkiName</name> <operator>=</operator> <name><name>verificationData</name><operator>.</operator><name>displayName</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>pkiCaName</name> <operator>=</operator> <name><name>verificationData</name><operator>.</operator><name>rootAuthorityName</name></name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>pkiName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>pkiCaName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            }</block></else></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>PaymentSession</name></type> <name>paymentSession</name> <init>= <expr><call><name><name>PaymentProtocol</name><operator>.</operator><name>parsePaymentRequest</name></name><argument_list>(<argument><expr><name>paymentRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>paymentSession</name><operator>.</operator><name>isExpired</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name><name>PaymentProtocolException</name><operator>.</operator><name>Expired</name></name><argument_list>(<argument><expr><literal type="string">"payment details expired: current time "</literal> <operator>+</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call>
                        <operator>+</operator> <literal type="string">" after expiry time "</literal> <operator>+</operator> <call><name><name>paymentSession</name><operator>.</operator><name>getExpires</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

            <if>if <condition>(<expr><operator>!</operator><call><name><name>paymentSession</name><operator>.</operator><name>getNetworkParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name><name>PaymentProtocolException</name><operator>.</operator><name>InvalidNetwork</name></name><argument_list>(
                        <argument><expr><literal type="string">"cannot handle payment request network: "</literal> <operator>+</operator> <call><name><name>paymentSession</name><operator>.</operator><name>getNetworkParameters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>PaymentIntent</name><operator>.</operator><name>Output</name></name></argument>&gt;</argument_list></name></type> <name>outputs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>PaymentIntent</name><operator>.</operator><name>Output</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>PaymentProtocol</name><operator>.</operator><name>Output</name></name></type> <name>output</name> <range>: <expr><call><name><name>paymentSession</name><operator>.</operator><name>getOutputs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name><name>outputs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>PaymentIntent</name><operator>.</operator><name>Output</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>memo</name> <init>= <expr><call><name><name>paymentSession</name><operator>.</operator><name>getMemo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>paymentUrl</name> <init>= <expr><call><name><name>paymentSession</name><operator>.</operator><name>getPaymentUrl</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>merchantData</name> <init>= <expr><call><name><name>paymentSession</name><operator>.</operator><name>getMerchantData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequestHash</name> <init>= <expr><call><name><name>Hashing</name><operator>.</operator><name>sha256</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashBytes</name><argument_list>(<argument><expr><name>serializedPaymentRequest</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asBytes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name> <init>= <expr><operator>new</operator> <call><name>PaymentIntent</name><argument_list>(<argument><expr><name><name>PaymentIntent</name><operator>.</operator><name>Standard</name><operator>.</operator><name>BIP70</name></name></expr></argument>, <argument><expr><name>pkiName</name></expr></argument>, <argument><expr><name>pkiCaName</name></expr></argument>,
                    <argument><expr><call><name><name>outputs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PaymentIntent</name><operator>.</operator><name>Output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>memo</name></expr></argument>, <argument><expr><name>paymentUrl</name></expr></argument>, <argument><expr><name>merchantData</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                    <argument><expr><name>paymentRequestHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>paymentIntent</name><operator>.</operator><name>hasPaymentUrl</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>paymentIntent</name><operator>.</operator><name>isSupportedPaymentUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name><name>PaymentProtocolException</name><operator>.</operator><name>InvalidPaymentURL</name></name><argument_list>(
                        <argument><expr><literal type="string">"cannot handle payment url: "</literal> <operator>+</operator> <name><name>paymentIntent</name><operator>.</operator><name>paymentUrl</name></name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

            <return>return <expr><name>paymentIntent</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InvalidProtocolBufferException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>PaymentProtocolException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>UninitializedMessageException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>PaymentProtocolException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileNotFoundException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyStoreException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>handleDirectTransaction</name><parameter_list>(<parameter><decl><type><name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws>;</function_decl>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>cannotClassify</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"cannot classify: '{}'"</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>input_parser_cannot_classify</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>dialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>OnClickListener</name></type> <name>dismissListener</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>titleResId</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>titleResId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name>titleResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><name>dismissListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>PATTERN_TRANSACTION</name> <init>= <expr><call><name><name>Pattern</name>
            <operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"[0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ$\\*\\+\\-\\.\\/\\:]{100,}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>MaintenanceDialogFragment</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>MaybeMaintenanceFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>MaybeMaintenanceFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Fragment</name></type> <name>fragment</name> <init>= <expr><call><name><name>fm</name><operator>.</operator><name>findFragmentByTag</name></name><argument_list>(<argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fragment</name> <operator>=</operator> <operator>new</operator> <call><name>MaybeMaintenanceFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fm</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>MaybeMaintenanceViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>MaybeMaintenanceViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name><name>viewModel</name><operator>.</operator><name>getDialogWasShown</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>MaintenanceDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>setDialogWasShown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>DeterministicUpgradeRequiresPassword</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AbstractWalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>BlockchainStateLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainState</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MediatorLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>MaybeMaintenanceViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletMaintenanceRecommendedLiveData</name></type> <name>walletMaintenanceRecommended</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BlockchainStateLiveData</name></type> <name>blockchainState</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MediatorLiveData</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MediatorLiveData</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>dialogWasShown</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MaybeMaintenanceViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>walletMaintenanceRecommended</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletMaintenanceRecommendedLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blockchainState</name></name> <operator>=</operator> <operator>new</operator> <call><name>BlockchainStateLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>showDialog</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>walletMaintenanceRecommended</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Boolean</name></type> <name>maintenanceRecommended</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeShowDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>showDialog</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>blockchainState</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>BlockchainState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeShowDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeShowDialog</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name> <init>= <expr><call><name><name>MaybeMaintenanceViewModel</name><operator>.</operator><name>this</name><operator>.</operator><name>blockchainState</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Boolean</name></type> <name>maintenanceRecommended</name> <init>= <expr><call><name><name>MaybeMaintenanceViewModel</name><operator>.</operator><name>this</name><operator>.</operator><name>walletMaintenanceRecommended</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>blockchainState</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>blockchainState</name><operator>.</operator><name>replaying</name></name> <operator>&amp;&amp;</operator> <name>maintenanceRecommended</name> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <name>maintenanceRecommended</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>showDialog</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setDialogWasShown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>dialogWasShown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getDialogWasShown</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>dialogWasShown</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WalletMaintenanceRecommendedLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>WalletMaintenanceRecommendedLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <try>try <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>doMaintenance</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DeterministicUpgradeRequiresPassword</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch></try>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ProgressDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ProgressDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Observer</name> <super><implements>implements <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Observer</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fm</name></name> <operator>=</operator> <name>fm</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>message</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ProgressDialogFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>ProgressDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_MESSAGE</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>fragment</name> <init>= <expr><operator>(</operator><name>DialogFragment</name><operator>)</operator> <call><name><name>fm</name><operator>.</operator><name>findFragmentByTag</name></name><argument_list>(<argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>fragment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></else></if>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>ProgressDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_MESSAGE</name> <init>= <expr><literal type="string">"message"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setCancelable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> <init>= <expr><call><name><name>args</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_MESSAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>ProgressDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>CrashReporter</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>ShareCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>content</name><operator>.</operator><name>FileProvider</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ReportIssueDialogBuilder</name> <super><extends>extends <name>DialogBuilder</name></extends> <implements>implements <name>OnClickListener</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>viewDescription</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>viewCollectDeviceInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>viewCollectInstalledPackages</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>viewCollectApplicationLog</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>viewCollectWalletDump</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ReportIssueDialogBuilder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ReportIssueDialogBuilder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>titleResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>report_issue_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>report_issue_dialog_message</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewDescription</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>report_issue_dialog_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewCollectDeviceInfo</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>report_issue_dialog_collect_device_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>viewCollectInstalledPackages</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name>
                <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>report_issue_dialog_collect_installed_packages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>viewCollectApplicationLog</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>report_issue_dialog_collect_application_log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>viewCollectWalletDump</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>report_issue_dialog_collect_wallet_dump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name>titleResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setView</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPositiveButton</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>report_issue_dialog_report</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNegativeButton</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>text</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>attachments</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>cacheDir</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getCacheDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>reportDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>cacheDir</name></expr></argument>, <argument><expr><literal type="string">"report"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reportDir</name><operator>.</operator><name>mkdir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>viewDescription</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>contextualData</name> <init>= <expr><call><name>collectContextualData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>contextualData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n\n=== contextual data ===\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>contextualData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n\n=== application info ===\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>applicationInfo</name> <init>= <expr><call><name>collectApplicationInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>applicationInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>stackTrace</name> <init>= <expr><call><name>collectStackTrace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>stackTrace</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n\n=== stack trace ===\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n\n=== stack trace ===\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <if>if <condition>(<expr><call><name><name>viewCollectDeviceInfo</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n\n=== device info ===\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>deviceInfo</name> <init>= <expr><call><name>collectDeviceInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>deviceInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>viewCollectInstalledPackages</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n\n=== installed packages ===\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>CrashReporter</name><operator>.</operator><name>appendInstalledPackages</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>viewCollectApplicationLog</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>logDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>logDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>File</name></type> <name>logFile</name> <range>: <expr><call><name><name>logDir</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                    <block type="pseudo"><if>if <condition>(<expr><call><name><name>logFile</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>logFile</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>attachments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FileProvider</name><operator>.</operator><name>getUriForFile</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                                <argument><expr><call><name><name>activity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".file_attachment"</literal></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>viewCollectWalletDump</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>walletDump</name> <init>= <expr><call><name>collectWalletDump</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>walletDump</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name> <init>= <expr><call><name><name>File</name><operator>.</operator><name>createTempFile</name></name><argument_list>(<argument><expr><literal type="string">"wallet-dump."</literal></expr></argument>, <argument><expr><literal type="string">".txt"</literal></expr></argument>, <argument><expr><name>reportDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>Writer</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>walletDump</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>attachments</name><operator>.</operator><name>add</name></name><argument_list>(
                            <argument><expr><call><name><name>FileProvider</name><operator>.</operator><name>getUriForFile</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><call><name><name>activity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".file_attachment"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem writing attachment"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>

        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>savedBackgroundTraces</name> <init>= <expr><call><name><name>File</name><operator>.</operator><name>createTempFile</name></name><argument_list>(<argument><expr><literal type="string">"background-traces."</literal></expr></argument>, <argument><expr><literal type="string">".txt"</literal></expr></argument>, <argument><expr><name>reportDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>CrashReporter</name><operator>.</operator><name>collectSavedBackgroundTraces</name></name><argument_list>(<argument><expr><name>savedBackgroundTraces</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>attachments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FileProvider</name><operator>.</operator><name>getUriForFile</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><call><name><name>activity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".file_attachment"</literal></expr></argument>,
                        <argument><expr><name>savedBackgroundTraces</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>savedBackgroundTraces</name><operator>.</operator><name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem writing attachment"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\nPUT ADDITIONAL COMMENTS TO THE TOP. DOWN HERE NOBODY WILL NOTICE."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startSend</name><argument_list>(<argument><expr><call><name>subject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>startSend</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>subject</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>attachments</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ShareCompat</name><operator>.</operator><name>IntentBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>ShareCompat</name><operator>.</operator><name>IntentBuilder</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>attachment</name> <range>: <expr><name>attachments</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addStream</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addEmailTo</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>REPORT_EMAIL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>subject</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSubject</name></name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setChooserTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>report_issue_dialog_mail_intent_chooser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startChooser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"invoked chooser for sending issue report"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function_decl><annotation>@<name>Nullable</name></annotation>
    <specifier>protected</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>subject</name><parameter_list>()</parameter_list>;</function_decl>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectApplicationInfo</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectStackTrace</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectDeviceInfo</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectContextualData</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectWalletDump</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Formatter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>GregorianCalendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Joiner</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Strings</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Bluetooth</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>CrashReporter</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Installer</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>admin</name><operator>.</operator><name>DevicePolicyManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnShowListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ReportIssueDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>ReportIssueDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TITLE</name> <init>= <expr><literal type="string">"title"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_MESSAGE</name> <init>= <expr><literal type="string">"message"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_SUBJECT</name> <init>= <expr><literal type="string">"subject"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_CONTEXTUAL_DATA</name> <init>= <expr><literal type="string">"contextual_data"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>TimeZone</name></type> <name>UTC</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>titleResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>subject</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>contextualData</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>ReportIssueDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>KEY_TITLE</name></expr></argument>, <argument><expr><name>titleResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>KEY_MESSAGE</name></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_SUBJECT</name></expr></argument>, <argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_CONTEXTUAL_DATA</name></expr></argument>, <argument><expr><name>contextualData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>positiveButton</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ReportIssueViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ReportIssueDialogFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>ReportIssueViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>titleResId</name> <init>= <expr><call><name><name>args</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_TITLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name> <init>= <expr><call><name><name>args</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_MESSAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>subject</name> <init>= <expr><call><name><name>args</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_SUBJECT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>contextualData</name> <init>= <expr><call><name><name>args</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_CONTEXTUAL_DATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ReportIssueDialogBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <class><super><name>ReportIssueDialogBuilder</name></super><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>titleResId</name></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>String</name></type> <name>subject</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>pi</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>WalletApplication</name><operator>.</operator><name>versionLine</name></name><argument_list>(<argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>installer</name> <init>= <expr><call><name><name>Installer</name><operator>.</operator><name>installerPackageName</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>installer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", installer "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>installer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", android "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>RELEASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SECURITY_PATCH</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>MANUFACTURER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>Build</name><operator>.</operator><name>BRAND</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>MANUFACTURER</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>BRAND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>MODEL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectApplicationInfo</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>applicationInfo</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>appendApplicationInfo</name><argument_list>(<argument><expr><name>applicationInfo</name></expr></argument>, <argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>applicationInfo</name></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectStackTrace</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>stackTrace</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>CrashReporter</name><operator>.</operator><name>appendSavedCrashTrace</name></name><argument_list>(<argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><ternary><condition><expr><call><name><name>stackTrace</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>stackTrace</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectDeviceInfo</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>deviceInfo</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>appendDeviceInfo</name><argument_list>(<argument><expr><name>deviceInfo</name></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>deviceInfo</name></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectContextualData</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>contextualData</name></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>CharSequence</name></type> <name>collectWalletDump</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOnShowListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnShowListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onShow</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name>positiveButton</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name><name>ReportIssueDialogFragment</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDismiss</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>CrashReporter</name><operator>.</operator><name>deleteSaveCrashTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDismiss</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>appendApplicationInfo</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>report</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>pi</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Configuration</name></type> <name>configuration</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Calendar</name></type> <name>calendar</name> <init>= <expr><operator>new</operator> <call><name>GregorianCalendar</name><argument_list>(<argument><expr><name>UTC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Version: "</literal> <operator>+</operator> <name><name>pi</name><operator>.</operator><name>versionName</name></name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name><name>pi</name><operator>.</operator><name>versionCode</name></name> <operator>+</operator> <literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Package: "</literal> <operator>+</operator> <name><name>pi</name><operator>.</operator><name>packageName</name></name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>installerPackageName</name> <init>= <expr><call><name><name>Installer</name><operator>.</operator><name>installerPackageName</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Installer</name></type> <name>installer</name> <init>= <expr><call><name><name>Installer</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>installerPackageName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>installer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Installer: "</literal> <operator>+</operator> <name><name>installer</name><operator>.</operator><name>displayName</name></name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>installerPackageName</name> <operator>+</operator> <literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Installer: unknown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Test/Prod: "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>Constants</name><operator>.</operator><name>TEST</name></name></expr> ?</condition><then> <expr><literal type="string">"test"</literal></expr> </then><else>: <expr><literal type="string">"prod"</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Timezone: "</literal> <operator>+</operator> <call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getID</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Time: "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%tF %tT %tZ"</literal></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name><name>WalletApplication</name><operator>.</operator><name>TIME_CREATE_APPLICATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(
                <argument><expr><literal type="string">"Time of launch: "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%tF %tT %tZ"</literal></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>lastUpdateTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(
                <argument><expr><literal type="string">"Time of last update: "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%tF %tT %tZ"</literal></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>firstInstallTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Time of first install: "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%tF %tT %tZ"</literal></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>)</argument_list></call>
                <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>lastBackupTime</name> <init>= <expr><call><name><name>configuration</name><operator>.</operator><name>getLastBackupTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>lastBackupTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Time of backup: "</literal>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>lastBackupTime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%tF %tT %tZ"</literal></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary><operator>)</operator>
                <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Network: "</literal> <operator>+</operator> <call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Encrypted: "</literal> <operator>+</operator> <call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Keychain size: "</literal> <operator>+</operator> <call><name><name>wallet</name><operator>.</operator><name>getKeyChainGroupSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getTransactions</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numInputs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numOutputs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numSpentOutputs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <range>: <expr><name>transactions</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><name>numInputs</name> <operator>+=</operator> <call><name><name>tx</name><operator>.</operator><name>getInputs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TransactionOutput</name></argument>&gt;</argument_list></name></type> <name>outputs</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getOutputs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>numOutputs</name> <operator>+=</operator> <call><name><name>outputs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>TransactionOutput</name></type> <name>txout</name> <range>: <expr><name>outputs</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name><name>txout</name><operator>.</operator><name>isAvailableForSpending</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>numSpentOutputs</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Transactions: "</literal> <operator>+</operator> <call><name><name>transactions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Inputs: "</literal> <operator>+</operator> <name>numInputs</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Outputs: "</literal> <operator>+</operator> <name>numOutputs</name> <operator>+</operator> <literal type="string">" (spent: "</literal> <operator>+</operator> <name>numSpentOutputs</name> <operator>+</operator> <literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(
                <argument><expr><literal type="string">"Last block seen: "</literal> <operator>+</operator> <call><name><name>wallet</name><operator>.</operator><name>getLastBlockSeenHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name><name>wallet</name><operator>.</operator><name>getLastBlockSeenHash</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Databases:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>db</name> <range>: <expr><call><name><name>application</name><operator>.</operator><name>databaseList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>filesDir</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nContents of FilesDir "</literal> <operator>+</operator> <name>filesDir</name> <operator>+</operator> <literal type="string">":\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendDir</name><argument_list>(<argument><expr><name>report</name></expr></argument>, <argument><expr><name>filesDir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>appendDir</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>report</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"  - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Formatter</name></type> <name>formatter</name> <init>= <expr><operator>new</operator> <call><name>Formatter</name><argument_list>(<argument><expr><name>report</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Calendar</name></type> <name>calendar</name> <init>= <expr><operator>new</operator> <call><name>GregorianCalendar</name><argument_list>(<argument><expr><name>UTC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>formatter</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%tF %tT %8d  %s\n"</literal></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>calendar</name></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>formatter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>File</name><index>[]</index></name></type> <name>files</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>files</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>File</name></type> <name>f</name> <range>: <expr><name>files</name></expr></range></decl></init>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name>appendDir</name><argument_list>(<argument><expr><name>report</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>appendDeviceInfo</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>report</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Resources</name></type> <name>res</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name></type> <name>config</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ActivityManager</name></type> <name>activityManager</name> <init>= <expr><operator>(</operator><name>ActivityManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ACTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DevicePolicyManager</name></type> <name>devicePolicyManager</name> <init>= <expr><operator>(</operator><name>DevicePolicyManager</name><operator>)</operator> <call><name><name>context</name>
                <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>DEVICE_POLICY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Manufacturer: "</literal> <operator>+</operator> <name><name>Build</name><operator>.</operator><name>MANUFACTURER</name></name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Device Model: "</literal> <operator>+</operator> <name><name>Build</name><operator>.</operator><name>MODEL</name></name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Android Version: "</literal> <operator>+</operator> <name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>RELEASE</name></name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Android security patch level: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SECURITY_PATCH</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"ABIs: "</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>skipNulls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>
                        ?</condition><then> <expr><call><name>supportedAbisLollipop</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>supportedAbisKitKat</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Board: "</literal> <operator>+</operator> <name><name>Build</name><operator>.</operator><name>BOARD</name></name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Brand: "</literal> <operator>+</operator> <name><name>Build</name><operator>.</operator><name>BRAND</name></name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Device: "</literal> <operator>+</operator> <name><name>Build</name><operator>.</operator><name>DEVICE</name></name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Product: "</literal> <operator>+</operator> <name><name>Build</name><operator>.</operator><name>PRODUCT</name></name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Configuration: "</literal> <operator>+</operator> <name>config</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Screen Layout:"</literal> <comment type="line">//</comment>
                <operator>+</operator> <literal type="string">" size "</literal> <operator>+</operator> <operator>(</operator><name><name>config</name><operator>.</operator><name>screenLayout</name></name> <operator>&amp;</operator> <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name><operator>.</operator><name>SCREENLAYOUT_SIZE_MASK</name></name><operator>)</operator> <comment type="line">//</comment>
                <operator>+</operator> <literal type="string">" long "</literal> <operator>+</operator> <operator>(</operator><name><name>config</name><operator>.</operator><name>screenLayout</name></name> <operator>&amp;</operator> <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name><operator>.</operator><name>SCREENLAYOUT_LONG_MASK</name></name><operator>)</operator> <comment type="line">//</comment>
                <operator>+</operator> <literal type="string">" layoutdir "</literal> <operator>+</operator> <operator>(</operator><name><name>config</name><operator>.</operator><name>screenLayout</name></name> <operator>&amp;</operator> <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name><operator>.</operator><name>SCREENLAYOUT_LAYOUTDIR_MASK</name></name><operator>)</operator> <comment type="line">//</comment>
                <operator>+</operator> <literal type="string">" round "</literal> <operator>+</operator> <operator>(</operator><name><name>config</name><operator>.</operator><name>screenLayout</name></name> <operator>&amp;</operator> <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name><operator>.</operator><name>SCREENLAYOUT_ROUND_MASK</name></name><operator>)</operator> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Display Metrics: "</literal> <operator>+</operator> <call><name><name>res</name><operator>.</operator><name>getDisplayMetrics</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Memory Class: "</literal> <operator>+</operator> <call><name><name>activityManager</name><operator>.</operator><name>getMemoryClass</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>activityManager</name><operator>.</operator><name>getLargeMemoryClass</name></name><argument_list>()</argument_list></call>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>activityManager</name><operator>.</operator><name>isLowRamDevice</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">" (low RAM device)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Storage Encryption Status: "</literal> <operator>+</operator> <call><name><name>devicePolicyManager</name><operator>.</operator><name>getStorageEncryptionStatus</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Bluetooth MAC: "</literal> <operator>+</operator> <call><name>bluetoothMac</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Runtime: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.vm.name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.vm.version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>bluetoothMac</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>Bluetooth</name><operator>.</operator><name>getAddress</name></name><argument_list>(<argument><expr><call><name><name>BluetoothAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <specifier>static</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>supportedAbisLollipop</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>Build</name><operator>.</operator><name>SUPPORTED_ABIS</name></name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <specifier>static</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>supportedAbisKitKat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>Strings</name><operator>.</operator><name>emptyToNull</name></name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>CPU_ABI</name></name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>Strings</name><operator>.</operator><name>emptyToNull</name></name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>CPU_ABI2</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ReportIssueViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WalletLiveData</name></type> <name>wallet</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ReportIssueViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>RequestCoinsActivity</name> <super><extends>extends <name>AbstractWalletActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>RequestCoinsActivityViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>request_coins_content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>RequestCoinsActivityViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showHelpDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>messageResId</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>HelpDialogFragment</name><operator>.</operator><name>page</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttachedToWindow</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setShowWhenLocked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>request_coins_activity_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_options_help</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showHelpDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>help_request_coins</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModel</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>RequestCoinsActivityViewModel</name> <super><extends>extends <name>ViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showHelpDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRate</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>offline</name><operator>.</operator><name>AcceptBluetoothService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>SendCoinsActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Bluetooth</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Nfc</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipboardManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NdefMessage</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NdefRecord</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NfcAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CompoundButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>cardview</name><operator>.</operator><name>widget</name><operator>.</operator><name>CardView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>ShareCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>RequestCoinsFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ClipboardManager</name></type> <name>clipboardManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>NfcAdapter</name></type> <name>nfcAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ImageView</name></type> <name>qrView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CardView</name></type> <name>qrCardView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>acceptBluetoothPaymentView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>initiateRequestView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CurrencyCalculatorLink</name></type> <name>amountCalculatorLink</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_ENABLE_BLUETOOTH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_RECEIVE_ADDRESS</name> <init>= <expr><literal type="string">"receive_address"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>RequestCoinsViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RequestCoinsFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clipboardManager</name></name> <operator>=</operator> <operator>(</operator><name>ClipboardManager</name><operator>)</operator> <call><name><name>activity</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothAdapter</name></name> <operator>=</operator> <call><name><name>BluetoothAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nfcAdapter</name></name> <operator>=</operator> <call><name><name>NfcAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>RequestCoinsViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>freshReceiveAddress</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"request coins address: {}"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>qrCode</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>qrCode</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>BitmapDrawable</name></type> <name>qrDrawable</name> <init>= <expr><operator>new</operator> <call><name>BitmapDrawable</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>qrCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>qrDrawable</name><operator>.</operator><name>setFilterBitmap</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>qrView</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><name>qrDrawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>qrCardView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBitmapDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>qrCode</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>paymentRequest</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequest</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>NfcAdapter</name></type> <name>nfcAdapter</name> <init>= <expr><name><name>RequestCoinsFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>nfcAdapter</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>SpannableStringBuilder</name></type> <name>initiateText</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>(
                        <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>request_coins_fragment_initiate_request_qr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>nfcAdapter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>nfcAdapter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>initiateText</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>request_coins_fragment_initiate_request_nfc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>nfcAdapter</name><operator>.</operator><name>setNdefPushMessage</name></name><argument_list>(<argument><expr><call><name>createNdefMessage</name><argument_list>(<argument><expr><name>paymentRequest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>initiateRequestView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>initiateText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>bitcoinUri</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>exchangeRate</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setExchangeRate</name></name><argument_list>(<argument><expr><name><name>exchangeRate</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBitmapDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>BitmapFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>restoreInstanceState</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>request_coins_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>qrView</name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_qr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>qrCardView</name> <operator>=</operator> <operator>(</operator><name>CardView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_qr_card</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>qrCardView</name><operator>.</operator><name>setCardBackgroundColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>qrCardView</name><operator>.</operator><name>setPreventCornerOverlap</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>qrCardView</name><operator>.</operator><name>setUseCompatPadding</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>qrCardView</name><operator>.</operator><name>setMaxCardElevation</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we're using Lollipop elevation</comment>

        <decl_stmt><decl><type><specifier>final</specifier> <name>CurrencyAmountView</name></type> <name>btcAmountView</name> <init>= <expr><operator>(</operator><name>CurrencyAmountView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_amount_btc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setCurrencySymbol</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>code</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setInputFormat</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getMaxPrecisionFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setHintFormat</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>CurrencyAmountView</name></type> <name>localAmountView</name> <init>= <expr><operator>(</operator><name>CurrencyAmountView</name><operator>)</operator> <call><name><name>view</name>
                <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_amount_local</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setInputFormat</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>LOCAL_FORMAT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setHintFormat</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>LOCAL_FORMAT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>amountCalculatorLink</name> <operator>=</operator> <operator>new</operator> <call><name>CurrencyCalculatorLink</name><argument_list>(<argument><expr><name>btcAmountView</name></expr></argument>, <argument><expr><name>localAmountView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name> <init>= <expr><name><name>this</name><operator>.</operator><name>bluetoothAdapter</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>acceptBluetoothPaymentView</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_accept_bluetooth_payment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>acceptBluetoothPaymentView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(
                <argument><expr><ternary><condition><expr><name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Bluetooth</name><operator>.</operator><name>getAddress</name></name><argument_list>(<argument><expr><name>bluetoothAdapter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>acceptBluetoothPaymentView</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>bluetoothAdapter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>acceptBluetoothPaymentView</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnCheckedChangeListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCheckedChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>isChecked</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>bluetoothAdapter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>maybeStartBluetoothListening</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <comment type="line">// ask for permission to enable bluetooth</comment>
                        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>BluetoothAdapter</name><operator>.</operator><name>ACTION_REQUEST_ENABLE</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>REQUEST_CODE_ENABLE_BLUETOOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>stopBluetoothListening</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>initiateRequestView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_fragment_initiate_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setExchangeDirection</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getLastExchangeDirection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>CurrencyAmountView</name><operator>.</operator><name>Listener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>amount</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>focusChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// focus linking</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>activeAmountViewId</name> <init>= <expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>activeTextView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>acceptBluetoothPaymentView</name><operator>.</operator><name>setNextFocusUpId</name></name><argument_list>(<argument><expr><name>activeAmountViewId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name> <init>= <expr><name><name>this</name><operator>.</operator><name>bluetoothAdapter</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>bluetoothAdapter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>acceptBluetoothPaymentView</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>maybeStartBluetoothListening</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setLastExchangeDirection</name></name><argument_list>(<argument><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>getExchangeDirection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>saveInstanceState</name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>saveInstanceState</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>receiveAddress</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>freshReceiveAddress</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>receiveAddress</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_RECEIVE_ADDRESS</name></expr></argument>, <argument><expr><call><name><name>receiveAddress</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>restoreInstanceState</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>savedInstanceState</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_RECEIVE_ADDRESS</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>freshReceiveAddress</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>,
                    <argument><expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_RECEIVE_ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_ENABLE_BLUETOOTH</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>started</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name> <operator>&amp;&amp;</operator> <name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>started</name> <operator>=</operator> <call><name>maybeStartBluetoothListening</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>acceptBluetoothPaymentView</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>started</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>maybeStartBluetoothListening</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>bluetoothAddress</name> <init>= <expr><call><name><name>Bluetooth</name><operator>.</operator><name>getAddress</name></name><argument_list>(<argument><expr><name>bluetoothAdapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bluetoothAddress</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>acceptBluetoothPaymentView</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>bluetoothServiceIntent</name></name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>AcceptBluetoothService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startService</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>bluetoothServiceIntent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>bluetoothMac</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>compressMac</name></name><argument_list>(<argument><expr><name>bluetoothAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>stopBluetoothListening</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>bluetoothServiceIntent</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>stopService</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>bluetoothServiceIntent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>bluetoothServiceIntent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>bluetoothMac</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>request_coins_fragment_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasBitcoinUri</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_options_copy</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setEnabled</name><argument_list>(<argument><expr><name>hasBitcoinUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_options_share</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setEnabled</name><argument_list>(<argument><expr><name>hasBitcoinUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_options_local_app</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setEnabled</name><argument_list>(<argument><expr><name>hasBitcoinUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_options_copy</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleCopy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_options_share</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleShare</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>request_coins_options_local_app</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleLocalApp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleCopy</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>request</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clipboardManager</name><operator>.</operator><name>setPrimaryClip</name></name><argument_list>(<argument><expr><call><name><name>ClipData</name><operator>.</operator><name>newRawUri</name></name><argument_list>(<argument><expr><literal type="string">"Bitcoin payment request"</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"payment request copied to clipboard: {}"</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>Toast</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toast</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>request_coins_clipboard_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleShare</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>request</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ShareCompat</name><operator>.</operator><name>IntentBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>ShareCompat</name><operator>.</operator><name>IntentBuilder</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setChooserTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>request_coins_share_dialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startChooser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"payment request shared via intent: {}"</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleLocalApp</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ComponentName</name></type> <name>component</name> <init>= <expr><operator>new</operator> <call><name>ComponentName</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>SendCoinsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <comment type="line">// launch intent chooser with ourselves excluded</comment>
            <expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>setComponentEnabledSetting</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>, <argument><expr><name><name>PackageManager</name><operator>.</operator><name>COMPONENT_ENABLED_STATE_DISABLED</name></name></expr></argument>,
                    <argument><expr><name><name>PackageManager</name><operator>.</operator><name>DONT_KILL_APP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActivityNotFoundException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><operator>new</operator> <call><name>Toast</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>longToast</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>request_coins_no_local_app_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>setComponentEnabledSetting</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>, <argument><expr><name><name>PackageManager</name><operator>.</operator><name>COMPONENT_ENABLED_STATE_ENABLED</name></name></expr></argument>,
                    <argument><expr><name><name>PackageManager</name><operator>.</operator><name>DONT_KILL_APP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>NdefMessage</name></type> <name>createNdefMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequest</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paymentRequest</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>NdefMessage</name><argument_list>(
                    <argument><expr><operator>new</operator> <name><name>NdefRecord</name><index>[]</index></name> <block>{ <expr><call><name><name>Nfc</name><operator>.</operator><name>createMime</name></name><argument_list>(<argument><expr><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENTREQUEST</name></name></expr></argument>, <argument><expr><name>paymentRequest</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>uri</name><operator>.</operator><name>BitcoinURI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AbstractWalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ConfigOwnNameLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>SelectedExchangeRateLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Bluetooth</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Qr</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MediatorLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>RequestCoinsViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>FreshReceiveAddressLiveData</name></type> <name>freshReceiveAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ConfigOwnNameLiveData</name></type> <name>ownName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>SelectedExchangeRateLiveData</name></type> <name>exchangeRate</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>amount</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>bluetoothMac</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MediatorLiveData</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>qrCode</name> <init>= <expr><operator>new</operator> <call><name><name>MediatorLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MediatorLiveData</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>paymentRequest</name> <init>= <expr><operator>new</operator> <call><name><name>MediatorLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MediatorLiveData</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>bitcoinUri</name> <init>= <expr><operator>new</operator> <call><name><name>MediatorLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showBitmapDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Intent</name></type> <name>bluetoothServiceIntent</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RequestCoinsViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>freshReceiveAddress</name></name> <operator>=</operator> <operator>new</operator> <call><name>FreshReceiveAddressLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownName</name></name> <operator>=</operator> <operator>new</operator> <call><name>ConfigOwnNameLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exchangeRate</name></name> <operator>=</operator> <operator>new</operator> <call><name>SelectedExchangeRateLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>qrCode</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>freshReceiveAddress</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>receiveAddress</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateQrCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>qrCode</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>ownName</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateQrCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>qrCode</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateQrCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>qrCode</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>bluetoothMac</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>bluetoothMac</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateQrCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paymentRequest</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>freshReceiveAddress</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>receiveAddress</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGeneratePaymentRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paymentRequest</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>ownName</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGeneratePaymentRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paymentRequest</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGeneratePaymentRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paymentRequest</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>bluetoothMac</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>bluetoothMac</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGeneratePaymentRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>freshReceiveAddress</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>receiveAddress</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateBitcoinUri</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>ownName</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateBitcoinUri</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateBitcoinUri</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeGenerateQrCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>freshReceiveAddress</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>qrCode</name><operator>.</operator><name>postValue</name></name><argument_list>(
                            <argument><expr><call><name><name>Qr</name><operator>.</operator><name>bitmap</name></name><argument_list>(<argument><expr><call><name>uri</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><call><name><name>amount</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ownName</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bluetoothMac</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeGeneratePaymentRequest</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>freshReceiveAddress</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>bluetoothMac</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>bluetoothMac</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>paymentUrl</name> <init>= <expr><ternary><condition><expr><name>bluetoothMac</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"bt:"</literal> <operator>+</operator> <name>bluetoothMac</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>paymentRequest</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>PaymentProtocol</name><operator>.</operator><name>createPaymentRequest</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>,
                    <argument><expr><call><name><name>amount</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><call><name><name>ownName</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>paymentUrl</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeGenerateBitcoinUri</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>freshReceiveAddress</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>bitcoinUri</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>uri</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><call><name><name>amount</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ownName</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>uri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>bluetoothMac</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>uri</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name><name>BitcoinURI</name><operator>.</operator><name>convertToBitcoinURI</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bluetoothMac</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>uri</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>amount</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>label</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="char">'?'</literal></expr> </then><else>: <expr><literal type="char">'&amp;'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>uri</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>Bluetooth</name><operator>.</operator><name>MAC_URI_PARAM</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>bluetoothMac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FreshReceiveAddressLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>FreshReceiveAddressLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>maybeLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeLoad</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><call><name>getValue</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>freshReceiveAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class>
}</block></class>
<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VerificationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionedChecksummedBytes</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>InputParser</name><operator>.</operator><name>StringInputParser</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>scan</name><operator>.</operator><name>ScanActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>SendCoinsActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>SweepWalletActivity</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SendCoinsQrActivity</name> <super><extends>extends <name>Activity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_SCAN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>ScanActivity</name><operator>.</operator><name>startForResult</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>REQUEST_CODE_SCAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_SCAN</name> <operator>&amp;&amp;</operator> <name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>ScanActivity</name><operator>.</operator><name>INTENT_EXTRA_RESULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><operator>new</operator> <class><super><name>StringInputParser</name></super><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>SendCoinsActivity</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name><name>SendCoinsQrActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>SendCoinsQrActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>handlePrivateKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VersionedChecksummedBytes</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
                    <if>if <condition>(<expr><name><name>Constants</name><operator>.</operator><name>ENABLE_SWEEP_WALLET</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>SweepWalletActivity</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name><name>SendCoinsQrActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>SendCoinsQrActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>handlePrivateKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>handleDirectTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name> <init>= <expr><operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name>getApplication</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>processDirectTransaction</name></name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>SendCoinsQrActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name><name>SendCoinsQrActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>dismissListener</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OnClickListener</name></type> <name>dismissListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>SendCoinsQrActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></init></decl>;</decl_stmt>
            }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>AddressFormatException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VerificationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>uri</name><operator>.</operator><name>BitcoinURI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>uri</name><operator>.</operator><name>BitcoinURIParseException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookDao</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>InputParser</name><operator>.</operator><name>StringInputParser</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>scan</name><operator>.</operator><name>ScanActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>SendCoinsActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Qr</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Toast</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WholeStringBuilder</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipDescription</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ActionMode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SendingAddressesFragment</name> <super><extends>extends <name>FancyListFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AddressBookDao</name></type> <name>addressBookDao</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>adapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>SendingAddressesViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_SCAN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SendingAddressesFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBookDao</name></name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>SendingAddressesViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>addressesToExclude</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>addressesToExclude</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>addressBook</name></name> <operator>=</operator> <call><name><name>addressBookDao</name><operator>.</operator><name>getAllExcept</name></name><argument_list>(<argument><expr><name>addressesToExclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>addressBook</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name><name>SendingAddressesFragment</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setNotifyOnChange</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>addressBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setEmptyText</name><argument_list>(<argument><expr><call><name><name>WholeStringBuilder</name><operator>.</operator><name>bold</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_empty_text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>clip</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>ClipData</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ClipData</name></type> <name>clipData</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBitmapDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>BitmapFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEditAddressBookEntryDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>EditAddressBookEntryFragment</name><operator>.</operator><name>edit</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>view</name> <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>address_book_row</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <decl_stmt><decl><type><specifier>final</specifier> <name>AddressBookEntry</name></type> <name>entry</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>address_book_row_label</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>address_book_row_address</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>WalletUtils</name><operator>.</operator><name>formatHash</name></name><argument_list>(
                        <argument><expr><call><name><name>entry</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_GROUP_SIZE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_LINE_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>view</name></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setListAdapter</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_SCAN</name> <operator>&amp;&amp;</operator> <name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>ScanActivity</name><operator>.</operator><name>INTENT_EXTRA_RESULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><operator>new</operator> <class><super><name>StringInputParser</name></super><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                    <comment type="line">// workaround for "IllegalStateException: Can not perform this action after</comment>
                    <comment type="line">// onSaveInstanceState"</comment>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <if>if <condition>(<expr><call><name><name>paymentIntent</name><operator>.</operator><name>hasAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                                <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>paymentIntent</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>isPubKeyHashMine</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getHash160</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                                    <block type="pseudo"><expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEditAddressBookEntryDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                                <else>else
                                    <block type="pseudo"><expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_options_scan_title</name></name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_options_scan_own_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                            }</block></then> <else>else <block>{
                                <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_options_scan_title</name></name></expr></argument>,
                                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_options_scan_invalid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></function>
                    }</block></class></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>handleDirectTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws> <block>{
                    <expr_stmt><expr><call><name>cannotClassify</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_options_scan_title</name></name></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>sending_addresses_fragment_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_options_scan</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><call><name><name>pm</name><operator>.</operator><name>hasSystemFeature</name></name><argument_list>(<argument><expr><name><name>PackageManager</name><operator>.</operator><name>FEATURE_CAMERA</name></name></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>pm</name><operator>.</operator><name>hasSystemFeature</name></name><argument_list>(<argument><expr><name><name>PackageManager</name><operator>.</operator><name>FEATURE_CAMERA_FRONT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_options_paste</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setEnabled</name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>getAddressFromPrimaryClip</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_options_paste</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handlePasteClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_options_scan</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>ScanActivity</name><operator>.</operator><name>startForResult</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><name>REQUEST_CODE_SCAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handlePasteClipboard</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name>getAddressFromPrimaryClip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>address</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_options_paste_from_clipboard_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_options_paste_from_clipboard_invalid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>isPubKeyHashMine</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getHash160</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEditAddressBookEntryDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_options_paste_from_clipboard_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_options_paste_from_clipboard_own_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onListItemClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListView</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActionMode</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ActionMode</name><operator>.</operator><name>Callback</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateActionMode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>mode</name><operator>.</operator><name>getMenuInflater</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>sending_addresses_context</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onPrepareActionMode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name> <init>= <expr><call><name>getLabel</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onActionItemClicked</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
                <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_context_send</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleSend</name><argument_list>(<argument><expr><call><name>getAddress</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getLabel</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_context_edit</name></name></expr>:</case>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><call><name>getAddress</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEditAddressBookEntryDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_context_remove</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleRemove</name><argument_list>(<argument><expr><call><name>getAddress</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_context_show_qr</name></name></expr>:</case>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>uri</name> <init>= <expr><call><name><name>BitcoinURI</name><operator>.</operator><name>convertToBitcoinURI</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>,
                            <argument><expr><call><name>getAddress</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>getLabel</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBitmapDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Qr</name><operator>.</operator><name>bitmap</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sending_addresses_context_copy_to_clipboard</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleCopyToClipboard</name><argument_list>(<argument><expr><call><name>getAddress</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></switch>

                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyActionMode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActionMode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{
            }</block></function>

            <function><specifier>private</specifier> <type><name>String</name></type> <name>getAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>

            <function><specifier>private</specifier> <type><name>String</name></type> <name>getLabel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLabel</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleSend</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>SendCoinsActivity</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><call><name><name>PaymentIntent</name><operator>.</operator><name>fromAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleRemove</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>addressBookDao</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleCopyToClipboard</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>clip</name><operator>.</operator><name>setClipData</name></name><argument_list>(<argument><expr><call><name><name>ClipData</name><operator>.</operator><name>newPlainText</name></name><argument_list>(<argument><expr><literal type="string">"Bitcoin address"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"sending address copied to clipboard: {}"</literal></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>Toast</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toast</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_address_fragment_clipboard_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Address</name></type> <name>getAddressFromPrimaryClip</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClipData</name></type> <name>clip</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>clip</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>clip</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClipDescription</name></type> <name>clipDescription</name> <init>= <expr><call><name><name>clip</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>clipDescription</name><operator>.</operator><name>hasMimeType</name></name><argument_list>(<argument><expr><name><name>ClipDescription</name><operator>.</operator><name>MIMETYPE_TEXT_PLAIN</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>clipText</name> <init>= <expr><call><name><name>clip</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>clipText</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

            <try>try <block>{
                <return>return <expr><call><name><name>Address</name><operator>.</operator><name>fromBase58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><call><name><name>clipText</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AddressFormatException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></catch></try>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>clipDescription</name><operator>.</operator><name>hasMimeType</name></name><argument_list>(<argument><expr><name><name>ClipDescription</name><operator>.</operator><name>MIMETYPE_TEXT_URILIST</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>clipUri</name> <init>= <expr><call><name><name>clip</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUri</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>clipUri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
            <try>try <block>{
                <return>return <expr><operator>new</operator> <call><name>BitcoinURI</name><argument_list>(<argument><expr><call><name><name>clipUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr>;</return>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BitcoinURIParseException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></catch></try>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ECKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>DeterministicKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AbstractWalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipboardManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipboardManager</name><operator>.</operator><name>OnPrimaryClipChangedListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>SendingAddressesViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WalletLiveData</name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>AddressesToExcludeLiveData</name></type> <name>addressesToExclude</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>ClipLiveData</name></type> <name>clip</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showBitmapDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showEditAddressBookEntryDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SendingAddressesViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressesToExclude</name></name> <operator>=</operator> <operator>new</operator> <call><name>AddressesToExcludeLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clip</name></name> <operator>=</operator> <operator>new</operator> <call><name>ClipLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <class><specifier>public</specifier> class <name>AddressesToExcludeLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>AddressesToExcludeLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>loadAddressesToExclude</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>loadAddressesToExclude</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>derivedKeys</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getIssuedReceiveKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>derivedKeys</name></expr></argument>, <argument><expr><name><name>DeterministicKey</name><operator>.</operator><name>CHILDNUM_ORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>randomKeys</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getImportedKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>addresses</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>derivedKeys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>randomKeys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>ECKey</name></type> <name>key</name> <range>: <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>derivedKeys</name></expr></argument>, <argument><expr><name>randomKeys</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>addresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>toAddress</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toBase58</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
                    <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ClipLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>ClipData</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>OnPrimaryClipChangedListener</name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ClipboardManager</name></type> <name>clipboardManager</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ClipLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>clipboardManager</name> <operator>=</operator> <operator>(</operator><name>ClipboardManager</name><operator>)</operator> <call><name><name>application</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>clipboardManager</name><operator>.</operator><name>addPrimaryClipChangedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>onPrimaryClipChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>clipboardManager</name><operator>.</operator><name>removePrimaryClipChangedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onPrimaryClipChanged</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>clipboardManager</name><operator>.</operator><name>getPrimaryClip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>setClipData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ClipData</name></type> <name>clipData</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>clipboardManager</name><operator>.</operator><name>setPrimaryClip</name></name><argument_list>(<argument><expr><name>clipData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright 2012-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>PasswordTransformationMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>TransformationMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CompoundButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ShowPasswordCheckListener</name> <super><implements>implements <name>OnCheckedChangeListener</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>EditText</name><index>[]</index></name></type> <name>passwordViews</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ShowPasswordCheckListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>EditText</name><modifier>...</modifier></type> <name>passwordViews</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>passwordViews</name></name> <operator>=</operator> <name>passwordViews</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCheckedChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>TransformationMethod</name></type> <name>transformationMethod</name> <init>= <expr><ternary><condition><expr><name>isChecked</name></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>PasswordTransformationMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>EditText</name></type> <name>passwordView</name> <range>: <expr><name>passwordViews</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setTransformationMethod</name></name><argument_list>(<argument><expr><name>transformationMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>StickToTopLinearLayoutManager</name> <super><extends>extends <name>LinearLayoutManager</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>StickToTopLinearLayoutManager</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onItemsAdded</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>recyclerView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>positionStart</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>itemCount</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onItemsAdded</name></name><argument_list>(<argument><expr><name>recyclerView</name></expr></argument>, <argument><expr><name>positionStart</name></expr></argument>, <argument><expr><name>itemCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>positionStart</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>findFirstCompletelyVisibleItemPosition</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>itemCount</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>scrollToPosition</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
}</block></class>
<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name><operator>.</operator><name>Purpose</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionConfidence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionConfidence</name><operator>.</operator><name>ConfidenceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExchangeRate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fiat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>DefaultCoinSelector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>TransactionsAdapter</name><operator>.</operator><name>ListItem</name><operator>.</operator><name>TransactionItem</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>TransactionsAdapter</name><operator>.</operator><name>ListItem</name><operator>.</operator><name>WarningItem</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Formats</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannedString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>cardview</name><operator>.</operator><name>widget</name><operator>.</operator><name>CardView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>DefaultItemAnimator</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>DiffUtil</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListAdapter</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>TransactionsAdapter</name> <super><extends>extends <name><name>ListAdapter</name><argument_list type="generic">&lt;<argument><name><name>TransactionsAdapter</name><operator>.</operator><name>ListItem</name></name></argument>, <argument><name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></extends></super> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></type> <name>buildListItems</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>WarningType</name></type> <name>warning</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Wallet</name></type> <name>wallet</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxConnectedPeers</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Sha256Hash</name></type> <name>selectedTransaction</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>noCodeFormat</name> <init>= <expr><call><name><name>format</name><operator>.</operator><name>noCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>transactions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>warning</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ListItem</name><operator>.</operator><name>WarningItem</name></name><argument_list>(<argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <range>: <expr><name>transactions</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ListItem</name><operator>.</operator><name>TransactionItem</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>addressBook</name></expr></argument>, <argument><expr><name>noCodeFormat</name></expr></argument>, <argument><expr><name>maxConnectedPeers</name></expr></argument>,
                    <argument><expr><call><name><name>tx</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>selectedTransaction</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><name>items</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ListItem</name> <block>{
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>TransactionItem</name> <super><extends>extends <name>ListItem</name></extends></super> <block>{
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>transactionHash</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>confidenceCircularProgress</name></decl>, <decl><type ref="prev"/><name>confidenceCircularMaxProgress</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>confidenceCircularSize</name></decl>, <decl><type ref="prev"/><name>confidenceCircularMaxSize</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>confidenceCircularFillColor</name></decl>, <decl><type ref="prev"/><name>confidenceCircularStrokeColor</name></decl>;</decl_stmt>
            <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
            <specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>confidenceTextual</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>confidenceTextualColor</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>CharSequence</name></type> <name>time</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>timeColor</name></decl>;</decl_stmt>
            <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
            <specifier>public</specifier> <type><specifier>final</specifier> <name>Spanned</name></type> <name>address</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>addressColor</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Typeface</name></type> <name>addressTypeface</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>addressSingleLine</name></decl>;</decl_stmt>
            <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
            <specifier>public</specifier> <type><specifier>final</specifier> <name>Coin</name></type> <name>fee</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>feeFormat</name></decl>;</decl_stmt>
            <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
            <specifier>public</specifier> <type><specifier>final</specifier> <name>Coin</name></type> <name>value</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>valueFormat</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>valueColor</name></decl>;</decl_stmt>
            <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
            <specifier>public</specifier> <type><specifier>final</specifier> <name>Fiat</name></type> <name>fiat</name></decl>;</decl_stmt>
            <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
            <specifier>public</specifier> <type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>fiatFormat</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>fiatPrefixColor</name></decl>;</decl_stmt>
            <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
            <specifier>public</specifier> <type><specifier>final</specifier> <name>Spanned</name></type> <name>message</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>messageColor</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>messageSingleLine</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>isSelected</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>TransactionItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Wallet</name></type> <name>wallet</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxConnectedPeers</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isSelected</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>transactionHash</name></name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSelected</name></name> <operator>=</operator> <name>isSelected</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>Resources</name></type> <name>res</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>colorSignificant</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_significant</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>colorLessSignificant</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>colorInsignificant</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_insignificant</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>colorValuePositve</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_value_positive</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>colorValueNegative</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_value_negative</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>colorError</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_error</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>value</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>sent</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>self</name> <init>= <expr><call><name><name>WalletUtils</name><operator>.</operator><name>isEntirelySelf</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionConfidence</name></type> <name>confidence</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>ConfidenceType</name></type> <name>confidenceType</name> <init>= <expr><call><name><name>confidence</name><operator>.</operator><name>getConfidenceType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isOwn</name> <init>= <expr><call><name><name>confidence</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>TransactionConfidence</name><operator>.</operator><name>Source</name><operator>.</operator><name>SELF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Transaction</name><operator>.</operator><name>Purpose</name></name></type> <name>purpose</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getPurpose</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>memo</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>sanitizeMemo</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>getMemo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>textColor</name></decl>, <decl><type ref="prev"/><name>lessSignificantColor</name></decl>, <decl><type ref="prev"/><name>valueColor</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>DEAD</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>textColor</name> <operator>=</operator> <name>colorError</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lessSignificantColor</name> <operator>=</operator> <name>colorError</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>valueColor</name> <operator>=</operator> <name>colorError</name></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>DefaultCoinSelector</name><operator>.</operator><name>isSelectable</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>textColor</name> <operator>=</operator> <name>colorSignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lessSignificantColor</name> <operator>=</operator> <name>colorLessSignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>valueColor</name> <operator>=</operator> <ternary><condition><expr><name>sent</name></expr> ?</condition><then> <expr><name>colorValueNegative</name></expr> </then><else>: <expr><name>colorValuePositve</name></expr></else></ternary></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><name>textColor</name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lessSignificantColor</name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>valueColor</name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line">// confidence</comment>
                <if>if <condition>(<expr><name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>PENDING</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularProgress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxSize</name></name> <operator>=</operator> <name>maxConnectedPeers</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// magic value</comment>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularSize</name></name> <operator>=</operator> <call><name><name>confidence</name><operator>.</operator><name>numBroadcastPeers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularFillColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>TRANSPARENT</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextual</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextualColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>IN_CONFLICT</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextual</name></name> <operator>=</operator> <name>CONFIDENCE_SYMBOL_IN_CONFLICT</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextualColor</name></name> <operator>=</operator> <name>colorError</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularProgress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularFillColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>BUILDING</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name> <operator>=</operator> <ternary><condition><expr><call><name><name>tx</name><operator>.</operator><name>isCoinBase</name></name><argument_list>()</argument_list></call></expr>
                            ?</condition><then> <expr><call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getSpendableCoinbaseDepth</name></name><argument_list>()</argument_list></call></expr>
                            </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_NUM_CONFIRMATIONS</name></name></expr></else></ternary></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularProgress</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>confidence</name><operator>.</operator><name>getDepthInBlocks</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxSize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularSize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularFillColor</name></name> <operator>=</operator> <name>valueColor</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>TRANSPARENT</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextual</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextualColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>DEAD</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextual</name></name> <operator>=</operator> <name>CONFIDENCE_SYMBOL_DEAD</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextualColor</name></name> <operator>=</operator> <name>colorError</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularProgress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularFillColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextual</name></name> <operator>=</operator> <name>CONFIDENCE_SYMBOL_UNKNOWN</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextualColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularProgress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularMaxSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularFillColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line">// time</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Date</name></type> <name>time</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getUpdateTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>time</name></name> <operator>=</operator> <ternary><condition><expr><name>isSelected</name></expr>
                        ?</condition><then> <expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateTime</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>time</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><name><name>DateUtils</name><operator>.</operator><name>FORMAT_SHOW_DATE</name></name> <operator>|</operator> <name><name>DateUtils</name><operator>.</operator><name>FORMAT_SHOW_TIME</name></name></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><call><name><name>DateUtils</name><operator>.</operator><name>getRelativeTimeSpanString</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>time</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timeColor</name></name> <operator>=</operator> <name>textColor</name></expr>;</expr_stmt>

                <comment type="line">// address</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><ternary><condition><expr><name>sent</name></expr> ?</condition><then> <expr><call><name><name>WalletUtils</name><operator>.</operator><name>getToAddressOfSent</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><call><name><name>WalletUtils</name><operator>.</operator><name>getWalletAddressOfReceived</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>addressLabel</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>addressBook</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>address</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>addressLabel</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>AddressBookEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>addressBook</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>addressLabel</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><name>addressLabel</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block></else></if>
                }</block></else></if>
                <if>if <condition>(<expr><call><name><name>tx</name><operator>.</operator><name>isCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_fragment_coinbase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressColor</name></name> <operator>=</operator> <name>textColor</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressTypeface</name></name> <operator>=</operator> <name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>purpose</name> <operator>==</operator> <name><name>Purpose</name><operator>.</operator><name>RAISE_FEE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressTypeface</name></name> <operator>=</operator> <name><name>Typeface</name><operator>.</operator><name>DEFAULT</name></name></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>purpose</name> <operator>==</operator> <name><name>Purpose</name><operator>.</operator><name>KEY_ROTATION</name></name> <operator>||</operator> <name>self</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name><name>SpannedString</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>symbol_internal</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                            <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_fragment_internal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressColor</name></name> <operator>=</operator> <name>lessSignificantColor</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressTypeface</name></name> <operator>=</operator> <name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>addressLabel</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name><name>SpannedString</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>addressLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressColor</name></name> <operator>=</operator> <name>textColor</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressTypeface</name></name> <operator>=</operator> <name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>memo</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>memo</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name><name>SpannedString</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>memo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressColor</name></name> <operator>=</operator> <name>textColor</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressTypeface</name></name> <operator>=</operator> <name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name><name>WalletUtils</name><operator>.</operator><name>formatAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_GROUP_SIZE</name></name></expr></argument>,
                            <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_LINE_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressColor</name></name> <operator>=</operator> <name>lessSignificantColor</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressTypeface</name></name> <operator>=</operator> <name><name>Typeface</name><operator>.</operator><name>DEFAULT</name></name></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name><name>SpannedString</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressColor</name></name> <operator>=</operator> <name>lessSignificantColor</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressTypeface</name></name> <operator>=</operator> <name><name>Typeface</name><operator>.</operator><name>DEFAULT</name></name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressSingleLine</name></name> <operator>=</operator> <operator>!</operator><name>isSelected</name></expr>;</expr_stmt>

                <comment type="line">// fee</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>fee</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getFee</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showFee</name> <init>= <expr><name>sent</name> <operator>&amp;&amp;</operator> <name>fee</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>fee</name><operator>.</operator><name>isZero</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>feeFormat</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fee</name></name> <operator>=</operator> <ternary><condition><expr><name>isSelected</name> <operator>&amp;&amp;</operator> <name>showFee</name></expr> ?</condition><then> <expr><call><name><name>fee</name><operator>.</operator><name>negate</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>

                <comment type="line">// value</comment>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueFormat</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>purpose</name> <operator>==</operator> <name><name>Purpose</name><operator>.</operator><name>RAISE_FEE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name><name>fee</name><operator>.</operator><name>negate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>isZero</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueColor</name></name> <operator>=</operator> <name>valueColor</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <ternary><condition><expr><name>showFee</name></expr> ?</condition><then> <expr><call><name><name>value</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fee</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line">// fiat value</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getExchangeRate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>exchangeRate</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>value</name><operator>.</operator><name>isZero</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fiat</name></name> <operator>=</operator> <call><name><name>exchangeRate</name><operator>.</operator><name>coinToFiat</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fiatFormat</name></name> <operator>=</operator> <call><name><name>Constants</name><operator>.</operator><name>LOCAL_FORMAT</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
                            <argument><expr><name><name>Constants</name><operator>.</operator><name>PREFIX_ALMOST_EQUAL_TO</name></name> <operator>+</operator> <call><name><name>exchangeRate</name><operator>.</operator><name>fiat</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fiatPrefixColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fiat</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fiatFormat</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fiatPrefixColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line">// message</comment>
                <if>if <condition>(<expr><name>purpose</name> <operator>==</operator> <name><name>Purpose</name><operator>.</operator><name>KEY_ROTATION</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>Html</name>
                            <operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_purpose_key_rotation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorSignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>purpose</name> <operator>==</operator> <name><name>Purpose</name><operator>.</operator><name>RAISE_FEE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_purpose_raise_fee</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>isOwn</name> <operator>&amp;&amp;</operator> <name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>PENDING</name></name> <operator>&amp;&amp;</operator> <call><name><name>confidence</name><operator>.</operator><name>numBroadcastPeers</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_own_unbroadcasted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>isOwn</name> <operator>&amp;&amp;</operator> <name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>PENDING</name></name> <operator>&amp;&amp;</operator> <call><name><name>confidence</name><operator>.</operator><name>numBroadcastPeers</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_received_direct</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>sent</name> <operator>&amp;&amp;</operator> <call><name><name>value</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>Transaction</name><operator>.</operator><name>MIN_NONDUST_OUTPUT</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_received_dust</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>sent</name> <operator>&amp;&amp;</operator> <name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>PENDING</name></name>
                        <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>tx</name><operator>.</operator><name>getUpdateTime</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>wallet</name><operator>.</operator><name>getLastBlockSeenTimeSecs</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000</literal>
                                <operator>-</operator> <call><name><name>tx</name><operator>.</operator><name>getUpdateTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>DELAYED_TRANSACTION_THRESHOLD_MS</name></name><operator>)</operator></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_received_unconfirmed_delayed</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>sent</name> <operator>&amp;&amp;</operator> <name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>PENDING</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_received_unconfirmed_unlocked</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>sent</name> <operator>&amp;&amp;</operator> <name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>IN_CONFLICT</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_received_in_conflict</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>sent</name> <operator>&amp;&amp;</operator> <name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>DEAD</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_received_dead</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorError</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>sent</name> <operator>&amp;&amp;</operator> <call><name><name>WalletUtils</name><operator>.</operator><name>isPayToManyTransaction</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_received_pay_to_many</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>sent</name> <operator>&amp;&amp;</operator> <call><name><name>tx</name><operator>.</operator><name>isOptInFullRBF</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name>
                            <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>transaction_row_message_received_rbf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>memo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <call><name><name>SpannedString</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>memo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <name>colorInsignificant</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <name>isSelected</name></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageColor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageSingleLine</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></constructor>
        }</block></class>

        <class><specifier>public</specifier> <specifier>static</specifier> class <name>WarningItem</name> <super><extends>extends <name>ListItem</name></extends></super> <block>{
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WarningType</name></type> <name>type</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>WarningItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WarningType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            }</block></constructor>
        }</block></class>
    }</block></class>

    <enum><specifier>public</specifier> enum <name>WarningType</name> <block>{
        <decl><name>BACKUP</name></decl>, <decl><name>STORAGE_ENCRYPTION</name></decl>, <decl><name>CHAIN_FORKING</name></decl>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><specifier>final</specifier> <name>OnClickListener</name></type> <name>onClickListener</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CONFIDENCE_SYMBOL_IN_CONFLICT</name> <init>= <expr><literal type="string">"\u26A0"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// warning sign</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CONFIDENCE_SYMBOL_DEAD</name> <init>= <expr><literal type="string">"\u271D"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// latin cross</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CONFIDENCE_SYMBOL_UNKNOWN</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VIEW_TYPE_TRANSACTION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VIEW_TYPE_WARNING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <enum><specifier>private</specifier> enum <name>ChangeType</name> <block>{
        <decl><name>CONFIDENCE</name></decl>, <decl><name>TIME</name></decl>, <decl><name>ADDRESS</name></decl>, <decl><name>FEE</name></decl>, <decl><name>VALUE</name></decl>, <decl><name>FIAT</name></decl>, <decl><name>MESSAGE</name></decl>, <decl><name>IS_SELECTED</name></decl>
    }</block></enum>

    <constructor><specifier>public</specifier> <name>TransactionsAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxConnectedPeers</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>OnClickListener</name></type> <name>onClickListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>DiffUtil</name><operator>.</operator><name><name>ItemCallback</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>areItemsTheSame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>oldItem</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>newItem</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>oldItem</name> <operator>instanceof</operator> <name>TransactionItem</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newItem</name> <operator>instanceof</operator> <name>TransactionItem</name><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TransactionItem</name><operator>)</operator> <name>oldItem</name><operator>)</operator><operator>.</operator><name>transactionHash</name></expr></argument>,
                            <argument><expr><operator>(</operator><operator>(</operator><name>TransactionItem</name><operator>)</operator> <name>newItem</name><operator>)</operator><operator>.</operator><name>transactionHash</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newItem</name> <operator>instanceof</operator> <name>WarningItem</name><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>WarningItem</name><operator>)</operator> <name>oldItem</name><operator>)</operator><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>WarningItem</name><operator>)</operator> <name>newItem</name><operator>)</operator><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></else></if>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>areContentsTheSame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>oldItem</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>newItem</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>oldItem</name> <operator>instanceof</operator> <name>TransactionItem</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>oldTransactionItem</name> <init>= <expr><operator>(</operator><name>TransactionItem</name><operator>)</operator> <name>oldItem</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>newTransactionItem</name> <init>= <expr><operator>(</operator><name>TransactionItem</name><operator>)</operator> <name>newItem</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularProgress</name></name></expr></argument>,
                            <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularProgress</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name></expr></argument>,
                            <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularSize</name></name></expr></argument>,
                            <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularSize</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularMaxSize</name></name></expr></argument>,
                            <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularMaxSize</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularFillColor</name></name></expr></argument>,
                            <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularFillColor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name></expr></argument>,
                            <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceTextual</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceTextual</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceTextualColor</name></name></expr></argument>,
                            <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceTextualColor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>time</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>timeColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>timeColor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>addressColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>addressColor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>addressTypeface</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>addressTypeface</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>addressSingleLine</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>addressSingleLine</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>fee</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>fee</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>oldTransactionItem</name><operator>.</operator><name>feeFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>newTransactionItem</name><operator>.</operator><name>feeFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>oldTransactionItem</name><operator>.</operator><name>valueFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>newTransactionItem</name><operator>.</operator><name>valueFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>valueColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>valueColor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>fiat</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>fiat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(
                            <argument><expr><ternary><condition><expr><name><name>oldTransactionItem</name><operator>.</operator><name>fiatFormat</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>
                                    ?</condition><then> <expr><call><name><name>oldTransactionItem</name><operator>.</operator><name>fiatFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <argument><expr><ternary><condition><expr><name><name>newTransactionItem</name><operator>.</operator><name>fiatFormat</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>
                                    ?</condition><then> <expr><call><name><name>newTransactionItem</name><operator>.</operator><name>fiatFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>fiatPrefixColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>fiatPrefixColor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>message</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>messageColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>messageColor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>messageSingleLine</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>messageSingleLine</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>isSelected</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>isSelected</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></then> <else>else <block>{
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></else></if>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>Object</name></type> <name>getChangePayload</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>oldItem</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>newItem</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>ChangeType</name></argument>&gt;</argument_list></name></type> <name>changes</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>noneOf</name></name><argument_list>(<argument><expr><name><name>ChangeType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>oldItem</name> <operator>instanceof</operator> <name>TransactionItem</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>oldTransactionItem</name> <init>= <expr><operator>(</operator><name>TransactionItem</name><operator>)</operator> <name>oldItem</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>newTransactionItem</name> <init>= <expr><operator>(</operator><name>TransactionItem</name><operator>)</operator> <name>newItem</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularProgress</name></name></expr></argument>,
                            <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularProgress</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name></expr></argument>,
                                    <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularSize</name></name></expr></argument>,
                                    <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularSize</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularMaxSize</name></name></expr></argument>,
                                    <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularMaxSize</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularFillColor</name></name></expr></argument>,
                                    <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularFillColor</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name></expr></argument>,
                                    <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceTextual</name></name></expr></argument>,
                                    <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceTextual</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>confidenceTextualColor</name></name></expr></argument>,
                                    <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>confidenceTextualColor</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>changes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ChangeType</name><operator>.</operator><name>CONFIDENCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>time</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>timeColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>timeColor</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>changes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ChangeType</name><operator>.</operator><name>TIME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>addressColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>addressColor</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>addressTypeface</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>addressTypeface</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>addressSingleLine</name></name></expr></argument>,
                                    <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>addressSingleLine</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>changes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ChangeType</name><operator>.</operator><name>ADDRESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>fee</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>fee</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>oldTransactionItem</name><operator>.</operator><name>feeFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>newTransactionItem</name><operator>.</operator><name>feeFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>changes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ChangeType</name><operator>.</operator><name>FEE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>oldTransactionItem</name><operator>.</operator><name>valueFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>newTransactionItem</name><operator>.</operator><name>valueFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>valueColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>valueColor</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>changes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ChangeType</name><operator>.</operator><name>VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>fiat</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>fiat</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(
                                    <argument><expr><ternary><condition><expr><name><name>oldTransactionItem</name><operator>.</operator><name>fiatFormat</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>
                                            ?</condition><then> <expr><call><name><name>oldTransactionItem</name><operator>.</operator><name>fiatFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                    <argument><expr><ternary><condition><expr><name><name>newTransactionItem</name><operator>.</operator><name>fiatFormat</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>
                                            ?</condition><then> <expr><call><name><name>newTransactionItem</name><operator>.</operator><name>fiatFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Coin</name><operator>.</operator><name>COIN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>fiatPrefixColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>fiatPrefixColor</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>changes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ChangeType</name><operator>.</operator><name>FIAT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>message</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>messageColor</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>messageColor</name></name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>messageSingleLine</name></name></expr></argument>,
                                    <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>messageSingleLine</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>changes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ChangeType</name><operator>.</operator><name>MESSAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldTransactionItem</name><operator>.</operator><name>isSelected</name></name></expr></argument>, <argument><expr><name><name>newTransactionItem</name><operator>.</operator><name>isSelected</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>changes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ChangeType</name><operator>.</operator><name>IS_SELECTED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></then></if>
                <return>return <expr><name>changes</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inflater</name></name> <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onClickListener</name></name> <operator>=</operator> <name>onClickListener</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getItemViewType</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>listItem</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>listItem</name> <operator>instanceof</operator> <name><name>ListItem</name><operator>.</operator><name>WarningItem</name></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>VIEW_TYPE_WARNING</name></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><name>listItem</name> <operator>instanceof</operator> <name><name>ListItem</name><operator>.</operator><name>TransactionItem</name></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>VIEW_TYPE_TRANSACTION</name></expr>;</return></block></then></if></elseif>
        <else>else
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></type> <name>onCreateViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>viewType</name> <operator>==</operator> <name>VIEW_TYPE_TRANSACTION</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>CardView</name></type> <name>cardView</name> <init>= <expr><operator>(</operator><name>CardView</name><operator>)</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>transaction_row_card</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cardView</name><operator>.</operator><name>setPreventCornerOverlap</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cardView</name><operator>.</operator><name>setUseCompatPadding</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cardView</name><operator>.</operator><name>setMaxCardElevation</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we're using Lollipop elevation</comment>
            <return>return <expr><operator>new</operator> <call><name>TransactionViewHolder</name><argument_list>(<argument><expr><name>cardView</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>viewType</name> <operator>==</operator> <name>VIEW_TYPE_WARNING</name></expr>)</condition><then> <block>{
            <return>return <expr><operator>new</operator> <call><name>WarningViewHolder</name><argument_list>(<argument><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>transaction_row_warning</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"unknown type: "</literal> <operator>+</operator> <name>viewType</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBindViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>listItem</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>holder</name> <operator>instanceof</operator> <name>TransactionViewHolder</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionViewHolder</name></type> <name>transactionHolder</name> <init>= <expr><operator>(</operator><name>TransactionViewHolder</name><operator>)</operator> <name>holder</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>ListItem</name><operator>.</operator><name>TransactionItem</name></name></type> <name>transactionItem</name> <init>= <expr><operator>(</operator><name><name>ListItem</name><operator>.</operator><name>TransactionItem</name></name><operator>)</operator> <name>listItem</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>itemView</name><operator>.</operator><name>setActivated</name></name><argument_list>(<argument><expr><name><name>transactionItem</name><operator>.</operator><name>isSelected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>transactionItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>OnClickListener</name></type> <name>onClickListener</name> <init>= <expr><name><name>this</name><operator>.</operator><name>onClickListener</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>onClickListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>itemView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>onClickListener</name><operator>.</operator><name>onTransactionClick</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>transactionItem</name><operator>.</operator><name>transactionHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>menuView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>onClickListener</name><operator>.</operator><name>onTransactionMenuClick</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>transactionItem</name><operator>.</operator><name>transactionHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>holder</name> <operator>instanceof</operator> <name>WarningViewHolder</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>WarningViewHolder</name></type> <name>warningHolder</name> <init>= <expr><operator>(</operator><name>WarningViewHolder</name><operator>)</operator> <name>holder</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>ListItem</name><operator>.</operator><name>WarningItem</name></name></type> <name>warningItem</name> <init>= <expr><operator>(</operator><name><name>ListItem</name><operator>.</operator><name>WarningItem</name></name><operator>)</operator> <name>listItem</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>warningItem</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>WarningType</name><operator>.</operator><name>BACKUP</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>getItemCount</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> <comment type="block">/* 1 transaction, 1 warning */</comment>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>warningHolder</name><operator>.</operator><name>messageView</name><operator>.</operator><name>setCompoundDrawablesWithIntrinsicBounds</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>warningHolder</name><operator>.</operator><name>messageView</name>
                            <operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_row_warning_backup</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>warningHolder</name><operator>.</operator><name>messageView</name>
                            <operator>.</operator><name>setCompoundDrawablesWithIntrinsicBounds</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_warning_grey600_24dp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>warningHolder</name><operator>.</operator><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(
                            <argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_disclaimer_fragment_remind_backup</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><name><name>warningItem</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>WarningType</name><operator>.</operator><name>STORAGE_ENCRYPTION</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>warningHolder</name><operator>.</operator><name>messageView</name><operator>.</operator><name>setCompoundDrawablesWithIntrinsicBounds</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>warningHolder</name><operator>.</operator><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(
                        <argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_row_warning_storage_encryption</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>warningItem</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>WarningType</name><operator>.</operator><name>CHAIN_FORKING</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>warningHolder</name><operator>.</operator><name>messageView</name><operator>.</operator><name>setCompoundDrawablesWithIntrinsicBounds</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_warning_grey600_24dp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>warningHolder</name><operator>.</operator><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(
                        <argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_row_warning_chain_forking</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>OnClickListener</name></type> <name>onClickListener</name> <init>= <expr><name><name>this</name><operator>.</operator><name>onClickListener</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>onClickListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>warningHolder</name><operator>.</operator><name>itemView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>onClickListener</name><operator>.</operator><name>onWarningClick</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></elseif></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBindViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>payloads</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>payloads</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// Full bind</comment>
            <expr_stmt><expr><call><name>onBindViewHolder</name><argument_list>(<argument><expr><name>holder</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{ <comment type="line">// Partial bind</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>listItem</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionViewHolder</name></type> <name>transactionHolder</name> <init>= <expr><operator>(</operator><name>TransactionViewHolder</name><operator>)</operator> <name>holder</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>ListItem</name><operator>.</operator><name>TransactionItem</name></name></type> <name>transactionItem</name> <init>= <expr><operator>(</operator><name><name>ListItem</name><operator>.</operator><name>TransactionItem</name></name><operator>)</operator> <name>listItem</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>payload</name> <range>: <expr><name>payloads</name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>ChangeType</name></argument>&gt;</argument_list></name></type> <name>changes</name> <init>= <expr><operator>(</operator><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>ChangeType</name></argument>&gt;</argument_list></name><operator>)</operator> <name>payload</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><specifier>final</specifier> <name>ChangeType</name></type> <name>change</name> <range>: <expr><name>changes</name></expr></range></decl></init>)</control> <block>{
                    <if>if <condition>(<expr><name>change</name> <operator>==</operator> <name><name>ChangeType</name><operator>.</operator><name>CONFIDENCE</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>bindConfidence</name></name><argument_list>(<argument><expr><name>transactionItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                    <elseif>else <if>if <condition>(<expr><name>change</name> <operator>==</operator> <name><name>ChangeType</name><operator>.</operator><name>TIME</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>bindTime</name></name><argument_list>(<argument><expr><name>transactionItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                    <elseif>else <if>if <condition>(<expr><name>change</name> <operator>==</operator> <name><name>ChangeType</name><operator>.</operator><name>ADDRESS</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>bindAddress</name></name><argument_list>(<argument><expr><name>transactionItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                    <elseif>else <if>if <condition>(<expr><name>change</name> <operator>==</operator> <name><name>ChangeType</name><operator>.</operator><name>FEE</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>bindFee</name></name><argument_list>(<argument><expr><name>transactionItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                    <elseif>else <if>if <condition>(<expr><name>change</name> <operator>==</operator> <name><name>ChangeType</name><operator>.</operator><name>VALUE</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>bindValue</name></name><argument_list>(<argument><expr><name>transactionItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                    <elseif>else <if>if <condition>(<expr><name>change</name> <operator>==</operator> <name><name>ChangeType</name><operator>.</operator><name>FIAT</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>bindFiat</name></name><argument_list>(<argument><expr><name>transactionItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                    <elseif>else <if>if <condition>(<expr><name>change</name> <operator>==</operator> <name><name>ChangeType</name><operator>.</operator><name>MESSAGE</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>bindMessage</name></name><argument_list>(<argument><expr><name>transactionItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                    <elseif>else <if>if <condition>(<expr><name>change</name> <operator>==</operator> <name><name>ChangeType</name><operator>.</operator><name>IS_SELECTED</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>transactionHolder</name><operator>.</operator><name>bindIsSelected</name></name><argument_list>(<argument><expr><name>transactionItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
                }</block></for>
            }</block></for>
        }</block></else></if>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ItemAnimator</name> <super><extends>extends <name>DefaultItemAnimator</name></extends></super> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>canReuseUpdatedViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewHolder</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>payloads</name></decl></parameter>)</parameter_list> <block>{
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>payload</name> <range>: <expr><name>payloads</name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name><name>TransactionsAdapter</name><operator>.</operator><name>ChangeType</name></name></argument>&gt;</argument_list></name></type> <name>changes</name> <init>= <expr><operator>(</operator><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name><name>TransactionsAdapter</name><operator>.</operator><name>ChangeType</name></name></argument>&gt;</argument_list></name><operator>)</operator> <name>payload</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>changes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TransactionsAdapter</name><operator>.</operator><name>ChangeType</name><operator>.</operator><name>IS_SELECTED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            }</block></for>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>canReuseUpdatedViewHolder</name></name><argument_list>(<argument><expr><name>viewHolder</name></expr></argument>, <argument><expr><name>payloads</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <interface><specifier>public</specifier> interface <name>OnClickListener</name> <block>{
        <function_decl><type><name>void</name></type> <name>onTransactionClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Sha256Hash</name></type> <name>transactionHash</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onTransactionMenuClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Sha256Hash</name></type> <name>transactionHash</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onWarningClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TransactionViewHolder</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>colorBackground</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>colorBackgroundSelected</name></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>extendTimeView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>fullTimeView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>extendAddressView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CircularProgressView</name></type> <name>confidenceCircularNormalView</name></decl>, <decl><type ref="prev"/><name>confidenceCircularSelectedView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>confidenceTextualNormalView</name></decl>, <decl><type ref="prev"/><name>confidenceTextualSelectedView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>timeView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>addressView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrencyTextView</name></type> <name>valueView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrencyTextView</name></type> <name>fiatView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>extendFeeView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrencyTextView</name></type> <name>feeView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>extendMessageView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>messageView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ImageButton</name></type> <name>menuView</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>TransactionViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Resources</name></type> <name>res</name> <init>= <expr><call><name><name>itemView</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colorBackground</name></name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>bg_bright</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colorBackgroundSelected</name></name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>bg_panel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extendTimeView</name></name> <operator>=</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_extend_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fullTimeView</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_full_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extendAddressView</name></name> <operator>=</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_extend_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularNormalView</name></name> <operator>=</operator> <operator>(</operator><name>CircularProgressView</name><operator>)</operator> <call><name><name>itemView</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_confidence_circular</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceCircularSelectedView</name></name> <operator>=</operator> <operator>(</operator><name>CircularProgressView</name><operator>)</operator> <call><name><name>itemView</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_confidence_circular_selected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextualNormalView</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_confidence_textual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confidenceTextualSelectedView</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_confidence_textual_selected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timeView</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressView</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueView</name></name> <operator>=</operator> <operator>(</operator><name>CurrencyTextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fiatView</name></name> <operator>=</operator> <operator>(</operator><name>CurrencyTextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_fiat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extendFeeView</name></name> <operator>=</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_extend_fee</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>feeView</name></name> <operator>=</operator> <operator>(</operator><name>CurrencyTextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_fee</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extendMessageView</name></name> <operator>=</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_extend_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageView</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>menuView</name></name> <operator>=</operator> <operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_menu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>bind</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>bindConfidence</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindTime</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindAddress</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindFee</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindValue</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindFiat</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindMessage</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindIsSelected</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>bindConfidence</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name>confidenceCircularNormalView</name></expr> </then><else>: <expr><name>confidenceCircularSelectedView</name></expr></else></ternary><operator>)</operator>
                    <operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name>confidenceTextualNormalView</name></expr> </then><else>: <expr><name>confidenceTextualSelectedView</name></expr></else></ternary><operator>)</operator><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>CircularProgressView</name></type> <name>confidenceCircularView</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name>confidenceCircularSelectedView</name></expr>
                    </then><else>: <expr><name>confidenceCircularNormalView</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>confidenceTextualView</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name>confidenceTextualSelectedView</name></expr>
                    </then><else>: <expr><name>confidenceTextualNormalView</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>confidenceCircularView</name>
                    <operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>item</name><operator>.</operator><name>confidenceCircularMaxSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
                            ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>confidenceCircularView</name><operator>.</operator><name>setMaxProgress</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>confidenceCircularMaxProgress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>confidenceCircularView</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>confidenceCircularProgress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>confidenceCircularView</name><operator>.</operator><name>setMaxSize</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>confidenceCircularMaxSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>confidenceCircularView</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>confidenceCircularSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>confidenceCircularView</name><operator>.</operator><name>setColors</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>confidenceCircularFillColor</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>confidenceCircularStrokeColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>confidenceTextualView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>confidenceTextual</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>confidenceTextualView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>confidenceTextual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>confidenceTextualView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>confidenceTextualColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>bindTime</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name>extendTimeView</name></expr> </then><else>: <expr><name>timeView</name></expr></else></ternary><operator>)</operator><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name>timeView</name></expr> </then><else>: <expr><name>extendTimeView</name></expr></else></ternary><operator>)</operator><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>timeView</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name><name>this</name><operator>.</operator><name>fullTimeView</name></name></expr> </then><else>: <expr><name><name>this</name><operator>.</operator><name>timeView</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>timeView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>timeView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>timeColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>bindAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>extendAddressView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>address</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>addressView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>addressView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>addressColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>addressView</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>addressTypeface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>addressView</name><operator>.</operator><name>setSingleLine</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>addressSingleLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>bindFee</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>extendFeeView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>fee</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>feeView</name><operator>.</operator><name>setAlwaysSigned</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>feeView</name><operator>.</operator><name>setFormat</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>feeFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>feeView</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>fee</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>item</name><operator>.</operator><name>fee</name><operator>.</operator><name>negate</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>bindValue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>valueView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>value</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>valueView</name><operator>.</operator><name>setAlwaysSigned</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>valueView</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>valueView</name><operator>.</operator><name>setFormat</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>valueFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>valueView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>valueColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>bindFiat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>fiatView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>fiat</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fiatView</name><operator>.</operator><name>setAlwaysSigned</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fiatView</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>fiat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fiatView</name><operator>.</operator><name>setFormat</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>fiatFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fiatView</name><operator>.</operator><name>setPrefixColor</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>fiatPrefixColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>bindMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>extendMessageView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>message</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>messageColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setSingleLine</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>messageSingleLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>bindIsSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>itemView</name> <operator>instanceof</operator> <name>CardView</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>CardView</name><operator>)</operator> <name>itemView</name><operator>)</operator>
                        <operator>.</operator><call><name>setCardBackgroundColor</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name>colorBackgroundSelected</name></expr> </then><else>: <expr><name>colorBackground</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>menuView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>isSelected</name></name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindConfidence</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindTime</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bindAddress</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WarningViewHolder</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>messageView</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>WarningViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>messageView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row_warning_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>CheatSheet</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewParent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>WalletActionsFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>WalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>wallet_actions_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>requestButton</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_actions_request</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>requestButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>handleRequestCoins</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>sendButton</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_actions_send</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>handleSendCoins</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>sendQrButton</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_actions_send_qr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sendQrButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>handleScan</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CheatSheet</name><operator>.</operator><name>setup</name></name><argument_list>(<argument><expr><name>sendQrButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showActions</name> <init>= <expr><operator>!</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>wallet_actions_top</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ViewParent</name></type> <name>parent</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>fragment</name> <init>= <expr><ternary><condition><expr><name>parent</name> <operator>instanceof</operator> <name>FrameLayout</name></expr> ?</condition><then> <expr><operator>(</operator><name>FrameLayout</name><operator>)</operator> <name>parent</name></expr> </then><else>: <expr><name>view</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>showActions</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VerificationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionedChecksummedBytes</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>InputParser</name><operator>.</operator><name>BinaryInputParser</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>InputParser</name><operator>.</operator><name>StringInputParser</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupWalletDialogFragment</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name><operator>.</operator><name>RestoreWalletDialogFragment</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>monitor</name><operator>.</operator><name>NetworkMonitorActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>scan</name><operator>.</operator><name>ScanActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>SendCoinsActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>SweepWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>CrashReporter</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Nfc</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>OnFirstPreDraw</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimatorInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimatorListenerAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimatorSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>ObjectAnimator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>ValueAnimator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>LayerDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NdefMessage</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NfcAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>DecelerateInterpolator</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>WalletActivity</name> <super><extends>extends <name>AbstractWalletActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletActivityViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AnimatorSet</name></type> <name>enterAnimation</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>contentView</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_SCAN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>application</name> <operator>=</operator> <call><name>getWalletApplication</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletActivityViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>wallet_content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>contentView</name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>OnFirstPreDraw</name><operator>.</operator><name>listen</name></name><argument_list>(<argument><expr><name>contentView</name></expr></argument>, <argument><expr><name>viewModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>enterAnimation</name> <operator>=</operator> <call><name>buildEnterAnimation</name><argument_list>(<argument><expr><name>contentView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>walletEncrypted</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Boolean</name></type> <name>isEncrypted</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>invalidateOptionsMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showHelpDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>messageResId</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>HelpDialogFragment</name><operator>.</operator><name>page</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBackupWalletDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>BackupWalletDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showRestoreWalletDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>RestoreWalletDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEncryptKeysDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>EncryptKeysDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showReportIssueDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>ReportIssueDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>report_issue_dialog_title_issue</name></name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>report_issue_dialog_message_issue</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>REPORT_SUBJECT_ISSUE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showReportCrashDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>ReportIssueDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>report_issue_dialog_title_crash</name></name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>report_issue_dialog_message_crash</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>REPORT_SUBJECT_CRASH</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>enterAnimation</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>WalletActivityViewModel</name><operator>.</operator><name>EnterAnimationState</name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>WalletActivityViewModel</name><operator>.</operator><name>EnterAnimationState</name></name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>WalletActivityViewModel</name><operator>.</operator><name>EnterAnimationState</name><operator>.</operator><name>WAITING</name></name></expr>)</condition><then> <block>{
                    <comment type="line">// API level 26: enterAnimation.setCurrentPlayTime(0);</comment>
                    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Animator</name></type> <name>animation</name> <range>: <expr><call><name><name>enterAnimation</name><operator>.</operator><name>getChildAnimations</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                        <block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>ValueAnimator</name><operator>)</operator> <name>animation</name><operator>)</operator><operator>.</operator><call><name>setCurrentPlayTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>WalletActivityViewModel</name><operator>.</operator><name>EnterAnimationState</name><operator>.</operator><name>ANIMATING</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>reportFullyDrawn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>enterAnimation</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>enterAnimation</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AnimatorListenerAdapter</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Animator</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>animationFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>WalletActivityViewModel</name><operator>.</operator><name>EnterAnimationState</name><operator>.</operator><name>FINISHED</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDecorView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setBackground</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>animateWhenLoadingFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>animationFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>exchangeRatesFragment</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_main_twopanes_exchange_rates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>exchangeRatesFragment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>exchangeRatesFragment</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>CrashReporter</name><operator>.</operator><name>hasSavedCrashTrace</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showReportCrashDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>simple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>touchLastUsed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>handleIntent</name><argument_list>(<argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fragmentManager</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>MaybeMaintenanceFragment</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fragmentManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>AlertDialogsFragment</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fragmentManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <comment type="line">// delayed start so that UI has enough time to initialize</comment>
                <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>removeCallbacksAndMessages</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>AnimatorSet</name></type> <name>buildEnterAnimation</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>contentView</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Drawable</name></type> <name>background</name> <init>= <expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDecorView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBackground</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>duration</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>config_mediumAnimTime</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Animator</name></type> <name>splashFadeOut</name> <init>= <expr><call><name><name>AnimatorInflater</name><operator>.</operator><name>loadAnimator</name></name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_out_drawable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>splashFadeOut</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>LayerDrawable</name><operator>)</operator> <name>background</name><operator>)</operator><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>splashFadeOut</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if> <comment type="line">// skip this animation, as there is no splash icon</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AnimatorSet</name></type> <name>fragmentEnterAnimation</name> <init>= <expr><operator>new</operator> <call><name>AnimatorSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>AnimatorSet</name><operator>.</operator><name>Builder</name></name></type> <name>fragmentEnterAnimationBuilder</name> <init>= <expr><call><name><name>fragmentEnterAnimation</name><operator>.</operator><name>play</name></name><argument_list>(<argument><expr><name>splashFadeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>slideInLeftView</name> <init>= <expr><call><name><name>contentView</name><operator>.</operator><name>findViewWithTag</name></name><argument_list>(<argument><expr><literal type="string">"slide_in_left"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>slideInLeftView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ValueAnimator</name></type> <name>slide</name> <init>= <expr><call><name><name>ValueAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>addUpdateListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ValueAnimator</name><operator>.</operator><name>AnimatorUpdateListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationUpdate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ValueAnimator</name></type> <name>animator</name></decl></parameter>)</parameter_list> <block>{
                    <decl_stmt><decl><type><name>float</name></type> <name>animatedValue</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>animator</name><operator>.</operator><name>getAnimatedValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>slideInLeftView</name><operator>.</operator><name>setTranslationX</name></name><argument_list>(
                            <argument><expr><name>animatedValue</name> <operator>*</operator> <operator>(</operator><call><name><name>slideInLeftView</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>slideInLeftView</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecelerateInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><name>slideInLeftView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Animator</name></type> <name>fadeIn</name> <init>= <expr><call><name><name>AnimatorInflater</name><operator>.</operator><name>loadAnimator</name></name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_in_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fadeIn</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><name>slideInLeftView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragmentEnterAnimationBuilder</name><operator>.</operator><name>before</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>before</name><argument_list>(<argument><expr><name>fadeIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>slideInRightView</name> <init>= <expr><call><name><name>contentView</name><operator>.</operator><name>findViewWithTag</name></name><argument_list>(<argument><expr><literal type="string">"slide_in_right"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>slideInRightView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ValueAnimator</name></type> <name>slide</name> <init>= <expr><call><name><name>ValueAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>addUpdateListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ValueAnimator</name><operator>.</operator><name>AnimatorUpdateListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationUpdate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ValueAnimator</name></type> <name>animator</name></decl></parameter>)</parameter_list> <block>{
                    <decl_stmt><decl><type><name>float</name></type> <name>animatedValue</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>animator</name><operator>.</operator><name>getAnimatedValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>slideInRightView</name><operator>.</operator><name>setTranslationX</name></name><argument_list>(
                            <argument><expr><name>animatedValue</name> <operator>*</operator> <operator>(</operator><call><name><name>slideInRightView</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>slideInRightView</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecelerateInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><name>slideInRightView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Animator</name></type> <name>fadeIn</name> <init>= <expr><call><name><name>AnimatorInflater</name><operator>.</operator><name>loadAnimator</name></name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_in_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fadeIn</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><name>slideInRightView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragmentEnterAnimationBuilder</name><operator>.</operator><name>before</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>before</name><argument_list>(<argument><expr><name>fadeIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>slideInTopView</name> <init>= <expr><call><name><name>contentView</name><operator>.</operator><name>findViewWithTag</name></name><argument_list>(<argument><expr><literal type="string">"slide_in_top"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>slideInTopView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ValueAnimator</name></type> <name>slide</name> <init>= <expr><call><name><name>ValueAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>addUpdateListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ValueAnimator</name><operator>.</operator><name>AnimatorUpdateListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationUpdate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ValueAnimator</name></type> <name>animator</name></decl></parameter>)</parameter_list> <block>{
                    <decl_stmt><decl><type><name>float</name></type> <name>animatedValue</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>animator</name><operator>.</operator><name>getAnimatedValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>slideInTopView</name><operator>.</operator><name>setTranslationY</name></name><argument_list>(
                            <argument><expr><name>animatedValue</name> <operator>*</operator> <operator>(</operator><call><name><name>slideInTopView</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>slideInTopView</name><operator>.</operator><name>getPaddingTop</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecelerateInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><name>slideInTopView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Animator</name></type> <name>fadeIn</name> <init>= <expr><call><name><name>AnimatorInflater</name><operator>.</operator><name>loadAnimator</name></name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_in_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fadeIn</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><name>slideInTopView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragmentEnterAnimationBuilder</name><operator>.</operator><name>before</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>before</name><argument_list>(<argument><expr><name>fadeIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>slideInBottomView</name> <init>= <expr><call><name><name>contentView</name><operator>.</operator><name>findViewWithTag</name></name><argument_list>(<argument><expr><literal type="string">"slide_in_bottom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>slideInBottomView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ValueAnimator</name></type> <name>slide</name> <init>= <expr><call><name><name>ValueAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>addUpdateListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ValueAnimator</name><operator>.</operator><name>AnimatorUpdateListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationUpdate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ValueAnimator</name></type> <name>animator</name></decl></parameter>)</parameter_list> <block>{
                    <decl_stmt><decl><type><name>float</name></type> <name>animatedValue</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>animator</name><operator>.</operator><name>getAnimatedValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>slideInBottomView</name><operator>.</operator><name>setTranslationY</name></name><argument_list>(
                            <argument><expr><name>animatedValue</name> <operator>*</operator> <operator>(</operator><call><name><name>slideInBottomView</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>slideInBottomView</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecelerateInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>slide</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><name>slideInBottomView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Animator</name></type> <name>fadeIn</name> <init>= <expr><call><name><name>AnimatorInflater</name><operator>.</operator><name>loadAnimator</name></name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_in_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fadeIn</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><name>slideInBottomView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragmentEnterAnimationBuilder</name><operator>.</operator><name>before</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>before</name><argument_list>(<argument><expr><name>fadeIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>levitate</name> <init>= <expr><call><name><name>contentView</name><operator>.</operator><name>findViewWithTag</name></name><argument_list>(<argument><expr><literal type="string">"levitate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>levitate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ObjectAnimator</name></type> <name>elevate</name> <init>= <expr><call><name><name>ObjectAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><name>levitate</name></expr></argument>, <argument><expr><literal type="string">"elevation"</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>,
                        <argument><expr><call><name><name>levitate</name><operator>.</operator><name>getElevation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>elevate</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fragmentEnterAnimationBuilder</name><operator>.</operator><name>before</name></name><argument_list>(<argument><expr><name>elevate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Drawable</name></type> <name>levitateBackground</name> <init>= <expr><call><name><name>levitate</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Animator</name></type> <name>fadeIn</name> <init>= <expr><call><name><name>AnimatorInflater</name><operator>.</operator><name>loadAnimator</name></name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>animator</name><operator>.</operator><name>fade_in_drawable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fadeIn</name><operator>.</operator><name>setTarget</name></name><argument_list>(<argument><expr><name>levitateBackground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragmentEnterAnimationBuilder</name><operator>.</operator><name>before</name></name><argument_list>(<argument><expr><name>fadeIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>fragmentEnterAnimation</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onNewIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>handleIntent</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>action</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>NfcAdapter</name><operator>.</operator><name>ACTION_NDEF_DISCOVERED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>inputType</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>NdefMessage</name></type> <name>ndefMessage</name> <init>= <expr><operator>(</operator><name>NdefMessage</name><operator>)</operator> <call><name><name>intent</name>
                    <operator>.</operator><name>getParcelableArrayExtra</name></name><argument_list>(<argument><expr><name><name>NfcAdapter</name><operator>.</operator><name>EXTRA_NDEF_MESSAGES</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>input</name> <init>= <expr><call><name><name>Nfc</name><operator>.</operator><name>extractMimePayload</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIMETYPE_TRANSACTION</name></name></expr></argument>, <argument><expr><name>ndefMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><operator>new</operator> <class><super><name>BinaryInputParser</name></super><argument_list>(<argument><expr><name>inputType</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>cannotClassify</name><argument_list>(<argument><expr><name>inputType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_SCAN</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>ScanActivity</name><operator>.</operator><name>INTENT_EXTRA_RESULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><operator>new</operator> <class><super><name>StringInputParser</name></super><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>SendCoinsActivity</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>handlePrivateKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VersionedChecksummedBytes</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
                        <if>if <condition>(<expr><name><name>Constants</name><operator>.</operator><name>ENABLE_SWEEP_WALLET</name></name></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>SweepWalletActivity</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                        <else>else
                            <block type="pseudo"><expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>handlePrivateKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>handleDirectTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws> <block>{
                        <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>processDirectTransaction</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name><name>WalletActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_scan</name></name></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>wallet_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Resources</name></type> <name>res</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showExchangeRatesOption</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name>
                <operator>&amp;&amp;</operator> <call><name><name>res</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>show_exchange_rates_option</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_exchange_rates</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name>showExchangeRatesOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_sweep_wallet</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ENABLE_SWEEP_WALLET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>externalStorageState</name> <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStorageState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>enableRestoreWalletOption</name> <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>MEDIA_MOUNTED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>externalStorageState</name></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>Environment</name><operator>.</operator><name>MEDIA_MOUNTED_READ_ONLY</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>externalStorageState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_restore_wallet</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setEnabled</name><argument_list>(<argument><expr><name>enableRestoreWalletOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Boolean</name></type> <name>isEncrypted</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>walletEncrypted</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>isEncrypted</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>encryptKeysOption</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_encrypt_keys</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>encryptKeysOption</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isEncrypted</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_options_encrypt_keys_change</name></name></expr>
                    </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_options_encrypt_keys_set</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>encryptKeysOption</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_request</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleRequestCoins</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_send</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleSendCoins</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_scan</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleScan</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_address_book</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>AddressBookActivity</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_exchange_rates</name></name></expr>:</case>
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ExchangeRatesActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_sweep_wallet</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>SweepWalletActivity</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_network_monitor</name></name></expr>:</case>
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>NetworkMonitorActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_restore_wallet</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showRestoreWalletDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>simple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_backup_wallet</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBackupWalletDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>simple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_encrypt_keys</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEncryptKeysDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>simple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_preferences</name></name></expr>:</case>
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>PreferenceActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_safety</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showHelpDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>help_safety</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_technical_notes</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showHelpDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>help_technical_notes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_report_issue</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showReportIssueDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>simple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_options_help</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showHelpDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>help_wallet</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>handleRequestCoins</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>RequestCoinsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>handleSendCoins</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>SendCoinsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>handleScan</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>clickView</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// The animation must be ended because of several graphical glitching that happens when the</comment>
        <comment type="line">// Camera/SurfaceView is used while the animation is running.</comment>
        <expr_stmt><expr><call><name><name>enterAnimation</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ScanActivity</name><operator>.</operator><name>startForResult</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>clickView</name></expr></argument>, <argument><expr><name><name>WalletActivity</name><operator>.</operator><name>REQUEST_CODE_SCAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AbstractWalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>OnFirstPreDraw</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletActivityViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends> <implements>implements <name><name>OnFirstPreDraw</name><operator>.</operator><name>Callback</name></name></implements></super> <block>{
    <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>EnterAnimationState</name> <block>{
        <decl><name>WAITING</name></decl>, <decl><name>ANIMATING</name></decl>, <decl><name>FINISHED</name></decl>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WalletEncryptedLiveData</name></type> <name>walletEncrypted</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showHelpDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showBackupWalletDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showRestoreWalletDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showEncryptKeysDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showReportIssueDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showReportCrashDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>EnterAnimationState</name></argument>&gt;</argument_list></name></type> <name>enterAnimation</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>doAnimation</name></decl>, <decl><type ref="prev"/><name>globalLayoutFinished</name></decl>, <decl><type ref="prev"/><name>balanceLoadingFinished</name></decl>, <decl><type ref="prev"/><name>addressLoadingFinished</name></decl>,
            <decl><type ref="prev"/><name>transactionsLoadingFinished</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WalletActivityViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>walletEncrypted</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletEncryptedLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>animateWhenLoadingFinished</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>doAnimation</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeToggleState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onFirstPreDraw</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>globalLayoutFinished</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeToggleState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>balanceLoadingFinished</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>balanceLoadingFinished</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeToggleState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addressLoadingFinished</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>addressLoadingFinished</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeToggleState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>transactionsLoadingFinished</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>transactionsLoadingFinished</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeToggleState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>animationFinished</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>enterAnimation</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name><name>EnterAnimationState</name><operator>.</operator><name>FINISHED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeToggleState</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>enterAnimation</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>doAnimation</name> <operator>&amp;&amp;</operator> <name>globalLayoutFinished</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>enterAnimation</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name><name>EnterAnimationState</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>enterAnimation</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>EnterAnimationState</name><operator>.</operator><name>WAITING</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>balanceLoadingFinished</name> <operator>&amp;&amp;</operator> <name>addressLoadingFinished</name> <operator>&amp;&amp;</operator> <name>transactionsLoadingFinished</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>enterAnimation</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name><name>EnterAnimationState</name><operator>.</operator><name>ANIMATING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if></elseif></if>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WalletEncryptedLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>WalletEncryptedLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright 2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>uri</name><operator>.</operator><name>BitcoinURI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Qr</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>ShareCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletAddressDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>WalletAddressDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ADDRESS</name> <init>= <expr><literal type="string">"address"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ADDRESS_LABEL</name> <init>= <expr><literal type="string">"address_label"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>WalletAddressDialogFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>addressLabel</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>instance</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>addressLabel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>WalletAddressDialogFragment</name></type> <name>instance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>addressLabel</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>WalletAddressDialogFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>WalletAddressDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name>KEY_ADDRESS</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>addressLabel</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_ADDRESS_LABEL</name></expr></argument>, <argument><expr><name>addressLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>fragment</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><operator>(</operator><name>Address</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name>KEY_ADDRESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>addressStr</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>addressLabel</name> <init>= <expr><call><name><name>args</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_ADDRESS_LABEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Dialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>Dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>requestWindowFeature</name></name><argument_list>(<argument><expr><name><name>Window</name><operator>.</operator><name>FEATURE_NO_TITLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setContentView</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>wallet_address_dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setCanceledOnTouchOutside</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>uri</name> <init>= <expr><call><name><name>BitcoinURI</name><operator>.</operator><name>convertToBitcoinURI</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>addressLabel</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BitmapDrawable</name></type> <name>bitmap</name> <init>= <expr><operator>new</operator> <call><name>BitmapDrawable</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Qr</name><operator>.</operator><name>bitmap</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>setFilterBitmap</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ImageView</name></type> <name>imageView</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>dialog</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_address_dialog_image</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>imageView</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>labelButtonView</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_address_dialog_label_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>labelView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>dialog</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_address_dialog_label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>label</name> <init>= <expr><call><name><name>WalletUtils</name><operator>.</operator><name>formatHash</name></name><argument_list>(<argument><expr><name>addressStr</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_GROUP_SIZE</name></name></expr></argument>,
                <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_LINE_SIZE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>labelView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>labelButtonView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>labelButtonView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>ShareCompat</name><operator>.</operator><name>IntentBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>ShareCompat</name><operator>.</operator><name>IntentBuilder</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>addressStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setChooserTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>bitmap_fragment_share</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startChooser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"wallet address shared via intent: {}"</literal></expr></argument>, <argument><expr><name>addressStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>hintView</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_address_dialog_hint</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(
                <argument><expr><ternary><condition><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>show_wallet_address_dialog_hint</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>dialogView</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_address_dialog_group</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialogView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>dismissAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NdefMessage</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NdefRecord</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NfcAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>cardview</name><operator>.</operator><name>widget</name><operator>.</operator><name>CardView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>WalletAddressFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>NfcAdapter</name></type> <name>nfcAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ImageView</name></type> <name>currentAddressQrView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CardView</name></type> <name>currentAddressQrCardView</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletAddressViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>WalletAddressFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>WalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nfcAdapter</name></name> <operator>=</operator> <call><name><name>NfcAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletAddressViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>qrCode</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>qrCode</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>BitmapDrawable</name></type> <name>qrDrawable</name> <init>= <expr><operator>new</operator> <call><name>BitmapDrawable</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>qrCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>qrDrawable</name><operator>.</operator><name>setFilterBitmap</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>currentAddressQrView</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><name>qrDrawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>currentAddressQrCardView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showWalletAddressDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>simple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>bitcoinUri</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>NfcAdapter</name></type> <name>nfcAdapter</name> <init>= <expr><name><name>WalletAddressFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>nfcAdapter</name></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>nfcAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>nfcAdapter</name><operator>.</operator><name>setNdefPushMessage</name></name><argument_list>(<argument><expr><call><name>createNdefMessage</name><argument_list>(<argument><expr><call><name><name>bitcoinUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletActivityViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressLoadingFinished</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showWalletAddressDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>currentAddress</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>WalletAddressDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>ownName</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Current address enlarged: {}"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>wallet_address_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentAddressQrView</name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bitcoin_address_qr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>currentAddressQrCardView</name> <operator>=</operator> <operator>(</operator><name>CardView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bitcoin_address_qr_card</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>currentAddressQrCardView</name><operator>.</operator><name>setCardBackgroundColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>currentAddressQrCardView</name><operator>.</operator><name>setPreventCornerOverlap</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>currentAddressQrCardView</name><operator>.</operator><name>setUseCompatPadding</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>currentAddressQrCardView</name><operator>.</operator><name>setMaxCardElevation</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we're using Lollipop elevation</comment>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>NdefMessage</name></type> <name>createNdefMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>NdefMessage</name><argument_list>(<argument><expr><operator>new</operator> <name><name>NdefRecord</name><index>[]</index></name> <block>{ <expr><call><name><name>NdefRecord</name><operator>.</operator><name>createUri</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>uri</name><operator>.</operator><name>BitcoinURI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Threading</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletChangeEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletCoinsReceivedEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletCoinsSentEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletReorganizeEventListener</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AbstractWalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ConfigOwnNameLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Qr</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MediatorLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletAddressViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>CurrentAddressLiveData</name></type> <name>currentAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>ConfigOwnNameLiveData</name></type> <name>ownName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MediatorLiveData</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>qrCode</name> <init>= <expr><operator>new</operator> <call><name><name>MediatorLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MediatorLiveData</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>bitcoinUri</name> <init>= <expr><operator>new</operator> <call><name><name>MediatorLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showWalletAddressDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WalletAddressViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentAddress</name></name> <operator>=</operator> <operator>new</operator> <call><name>CurrentAddressLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownName</name></name> <operator>=</operator> <operator>new</operator> <call><name>ConfigOwnNameLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>qrCode</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>currentAddress</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>currentAddress</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateQrCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>qrCode</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>ownName</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateQrCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>currentAddress</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>currentAddress</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateBitcoinUri</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bitcoinUri</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>ownName</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeGenerateBitcoinUri</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeGenerateQrCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>currentAddress</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>qrCode</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name><name>Qr</name><operator>.</operator><name>bitmap</name></name><argument_list>(<argument><expr><call><name>uri</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><call><name><name>ownName</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeGenerateBitcoinUri</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>currentAddress</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>bitcoinUri</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>uri</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><call><name><name>ownName</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>uri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>BitcoinURI</name><operator>.</operator><name>convertToBitcoinURI</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>CurrentAddressLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>CurrentAddressLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>addWalletListener</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletInactive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>removeWalletListener</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>addWalletListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addCoinsReceivedEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addCoinsSentEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addReorganizeEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addChangeEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>removeWalletListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeChangeEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeReorganizeEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeCoinsSentEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeCoinsReceivedEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>currentReceiveAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletListener</name></type> <name>walletListener</name> <init>= <expr><operator>new</operator> <call><name>WalletListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <class><specifier>private</specifier> class <name>WalletListener</name> <super><implements>implements <name>WalletCoinsReceivedEventListener</name>, <name>WalletCoinsSentEventListener</name>,
                <name>WalletReorganizeEventListener</name>, <name>WalletChangeEventListener</name></implements></super> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCoinsReceived</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>prevBalance</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>newBalance</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCoinsSent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>prevBalance</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>newBalance</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onReorganize</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onWalletChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></class>
<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ECKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletAddressesAdapter</name> <super><extends>extends <name>BaseAdapter</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>colorSignificant</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>colorInsignificant</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>colorLessSignificant</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>derivedKeys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>randomKeys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>Wallet</name></type> <name>wallet</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WalletAddressesAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Resources</name></type> <name>res</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>colorSignificant</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_significant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>colorInsignificant</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_insignificant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>colorLessSignificant</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>inflater</name> <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>replaceDerivedKeys</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>derivedKeys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>derivedKeys</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>replaceRandomKeys</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>randomKeys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>randomKeys</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setWallet</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <name>wallet</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAddressBook</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBook</name></name> <operator>=</operator> <name>addressBook</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>derivedKeys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>randomKeys</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name><name>randomKeys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>count</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Object</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numDerivedKeys</name> <init>= <expr><call><name><name>derivedKeys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name>numDerivedKeys</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>derivedKeys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><name>position</name> <operator>==</operator> <name>numDerivedKeys</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if></elseif>
        <else>else
            <block type="pseudo"><return>return <expr><call><name><name>randomKeys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name> <operator>-</operator> <name>numDerivedKeys</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>key</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>key</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getViewTypeCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">2</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getItemViewType</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numDerivedKeys</name> <init>= <expr><call><name><name>derivedKeys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name>numDerivedKeys</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><name>position</name> <operator>==</operator> <name>numDerivedKeys</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if></elseif>
        <else>else
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>hasStableIds</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getItemViewType</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name>rowKey</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><call><name>rowSeparator</name><argument_list>(<argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>View</name></type> <name>rowKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ECKey</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>ECKey</name><operator>)</operator> <call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>toAddress</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><name><name>this</name><operator>.</operator><name>wallet</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isRotateKey</name> <init>= <expr><name>wallet</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>wallet</name><operator>.</operator><name>isKeyRotating</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>row</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>address_book_row</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>addressView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>address_book_row_address</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>addressView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>WalletUtils</name><operator>.</operator><name>formatAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_GROUP_SIZE</name></name></expr></argument>,
                <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_LINE_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addressView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isRotateKey</name></expr> ?</condition><then> <expr><name>colorInsignificant</name></expr> </then><else>: <expr><name>colorSignificant</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>labelView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>address_book_row_label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name> <init>= <expr><name><name>this</name><operator>.</operator><name>addressBook</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>addressBook</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>AddressBookEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>addressBook</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>labelView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isRotateKey</name></expr> ?</condition><then> <expr><name>colorInsignificant</name></expr> </then><else>: <expr><name>colorLessSignificant</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>labelView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_unlabeled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name>colorInsignificant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>labelView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_unlabeled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>labelView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name>colorInsignificant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>messageView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>address_book_row_message</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isRotateKey</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>row</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>View</name></type> <name>rowSeparator</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>row</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>row_separator</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>textView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>text1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_list_receiving_random</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>row</name></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ECKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>uri</name><operator>.</operator><name>BitcoinURI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookDao</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Qr</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Toast</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WholeStringBuilder</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipboardManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ActionMode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>WalletAddressesFragment</name> <super><extends>extends <name>FancyListFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AddressBookDao</name></type> <name>addressBookDao</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ClipboardManager</name></type> <name>clipboardManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletAddressesAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletAddressesViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>WalletAddressesFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBookDao</name></name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clipboardManager</name></name> <operator>=</operator> <operator>(</operator><name>ClipboardManager</name><operator>)</operator> <call><name><name>activity</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletAddressesViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>issuedReceiveKeys</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>issuedReceiveKeys</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>replaceDerivedKeys</name></name><argument_list>(<argument><expr><name>issuedReceiveKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>importedKeys</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>importedKeys</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>replaceRandomKeys</name></name><argument_list>(<argument><expr><name>importedKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setWallet</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>addressBook</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setAddressBook</name></name><argument_list>(<argument><expr><call><name><name>AddressBookEntry</name><operator>.</operator><name>asMap</name></name><argument_list>(<argument><expr><name>addressBook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>ownName</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>ownName</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBitmapDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>BitmapFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEditAddressBookEntryDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>EditAddressBookEntryFragment</name><operator>.</operator><name>edit</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>WalletAddressesAdapter</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setListAdapter</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setEmptyText</name><argument_list>(<argument><expr><call><name><name>WholeStringBuilder</name><operator>.</operator><name>bold</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_book_empty_text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>wallet_addresses_fragment_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onListItemClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListView</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActionMode</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ActionMode</name><operator>.</operator><name>Callback</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateActionMode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>mode</name><operator>.</operator><name>getMenuInflater</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>wallet_addresses_context</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_addresses_context_browse</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ENABLE_BROWSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onPrepareActionMode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ECKey</name></type> <name>key</name> <init>= <expr><call><name>getKey</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>toAddress</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toBase58</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name> <init>= <expr><call><name><name>addressBookDao</name><operator>.</operator><name>resolveLabel</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>label</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>label</name></expr>
                        </then><else>: <expr><call><name><name>WalletUtils</name><operator>.</operator><name>formatHash</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_GROUP_SIZE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onActionItemClicked</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
                <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_addresses_context_edit</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEditAddressBookEntryDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getAddress</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_addresses_context_show_qr</name></name></expr>:</case>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>uri</name> <init>= <expr><call><name><name>BitcoinURI</name><operator>.</operator><name>convertToBitcoinURI</name></name><argument_list>(<argument><expr><call><name>getAddress</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                            <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>ownName</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBitmapDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Qr</name><operator>.</operator><name>bitmap</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_addresses_context_copy_to_clipboard</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleCopyToClipboard</name><argument_list>(<argument><expr><call><name>getAddress</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_addresses_context_browse</name></name></expr>:</case>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name> <init>= <expr><call><name>getAddress</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toBase58</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>blockExplorerUri</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBlockExplorer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Viewing address {} on {}"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>blockExplorerUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>,
                            <argument><expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name>blockExplorerUri</name></expr></argument>, <argument><expr><literal type="string">"address/"</literal> <operator>+</operator> <name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></switch>

                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyActionMode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ActionMode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{
            }</block></function>

            <function><specifier>private</specifier> <type><name>ECKey</name></type> <name>getKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><operator>(</operator><name>ECKey</name><operator>)</operator> <call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><specifier>private</specifier> <type><name>Address</name></type> <name>getAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name>getKey</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toAddress</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><specifier>private</specifier> <type><name>void</name></type> <name>handleCopyToClipboard</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>clipboardManager</name><operator>.</operator><name>setPrimaryClip</name></name><argument_list>(<argument><expr><call><name><name>ClipData</name><operator>.</operator><name>newPlainText</name></name><argument_list>(<argument><expr><literal type="string">"Bitcoin address"</literal></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"wallet address copied to clipboard: {}"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>new</operator> <call><name>Toast</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toast</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_address_fragment_clipboard_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ECKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Threading</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>KeyChainEventListener</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AbstractWalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ConfigOwnNameLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletAddressesViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>IssuedReceiveKeysLiveData</name></type> <name>issuedReceiveKeys</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>ImportedKeysLiveData</name></type> <name>importedKeys</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WalletLiveData</name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>ConfigOwnNameLiveData</name></type> <name>ownName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showBitmapDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showEditAddressBookEntryDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WalletAddressesViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>issuedReceiveKeys</name></name> <operator>=</operator> <operator>new</operator> <call><name>IssuedReceiveKeysLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>importedKeys</name></name> <operator>=</operator> <operator>new</operator> <call><name>ImportedKeysLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBook</name></name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ownName</name></name> <operator>=</operator> <operator>new</operator> <call><name>ConfigOwnNameLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>IssuedReceiveKeysLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends>
            <implements>implements <name>KeyChainEventListener</name></implements></super> <block>{
        <constructor><specifier>public</specifier> <name>IssuedReceiveKeysLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addKeyChainEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>loadKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletInactive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeKeyChainEventListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onKeysAdded</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>loadKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>loadKeys</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>getIssuedReceiveKeys</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ImportedKeysLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends>
            <implements>implements <name>KeyChainEventListener</name></implements></super> <block>{
        <constructor><specifier>public</specifier> <name>ImportedKeysLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addKeyChainEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>loadKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletInactive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeKeyChainEventListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onKeysAdded</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>loadKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>loadKeys</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></type> <name>importedKeys</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getImportedKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>importedKeys</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>ECKey</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ECKey</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ECKey</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>lhsRotating</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>isKeyRotating</name></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>rhsRotating</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>isKeyRotating</name></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if>if <condition>(<expr><name>lhsRotating</name> <operator>!=</operator> <name>rhsRotating</name></expr>)</condition><then>
                                <block type="pseudo"><return>return <expr><ternary><condition><expr><name>lhsRotating</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></then></if>
                            <if>if <condition>(<expr><call><name><name>lhs</name><operator>.</operator><name>getCreationTimeSeconds</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>rhs</name><operator>.</operator><name>getCreationTimeSeconds</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                                <block type="pseudo"><return>return <expr><ternary><condition><expr><call><name><name>lhs</name><operator>.</operator><name>getCreationTimeSeconds</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>rhs</name><operator>.</operator><name>getCreationTimeSeconds</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></then></if>
                            <return>return <expr><literal type="number">0</literal></expr>;</return>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><name>importedKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Fiat</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRate</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainState</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>FeeCategory</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>SendCoinsActivity</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>WalletBalanceFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>viewBalance</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CurrencyTextView</name></type> <name>viewBalanceBtc</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>viewBalanceWarning</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CurrencyTextView</name></type> <name>viewBalanceLocal</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>viewProgress</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>showLocalBalance</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletBalanceViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>BLOCKCHAIN_UPTODATE_THRESHOLD_MS</name> <init>= <expr><name><name>DateUtils</name><operator>.</operator><name>HOUR_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>WalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>showLocalBalance</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>show_local_balance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletBalanceViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getBlockchainState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>BlockchainState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletActivityViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>balanceLoadingFinished</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getExchangeRate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>wallet_balance_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showExchangeRatesOption</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name>
                <operator>&amp;&amp;</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>show_exchange_rates_option</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>viewBalance</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_balance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>showExchangeRatesOption</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewBalance</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ExchangeRatesActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>viewBalance</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>viewBalanceBtc</name> <operator>=</operator> <operator>(</operator><name>CurrencyTextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_balance_btc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewBalanceBtc</name><operator>.</operator><name>setPrefixScaleX</name></name><argument_list>(<argument><expr><literal type="number">0.9f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewBalanceWarning</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_balance_warning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewBalanceLocal</name> <operator>=</operator> <operator>(</operator><name>CurrencyTextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_balance_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewBalanceLocal</name><operator>.</operator><name>setInsignificantRelativeSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewBalanceLocal</name><operator>.</operator><name>setStrikeThru</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewProgress</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_balance_progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>wallet_balance_fragment_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasSomeBalance</name> <init>= <expr><name>balance</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>balance</name><operator>.</operator><name>isLessThan</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>SOME_BALANCE_THRESHOLD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_balance_options_donate</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DONATION_ADDRESS</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>hasSomeBalance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_balance_options_donate</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleDonate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleDonate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>SendCoinsActivity</name><operator>.</operator><name>startDonate</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>FeeCategory</name><operator>.</operator><name>ECONOMIC</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getBlockchainState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getExchangeRate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showProgress</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>blockchainState</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>blockchainState</name><operator>.</operator><name>bestChainDate</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>blockchainLag</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>blockchainState</name><operator>.</operator><name>bestChainDate</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>blockchainUptodate</name> <init>= <expr><name>blockchainLag</name> <operator>&lt;</operator> <name>BLOCKCHAIN_UPTODATE_THRESHOLD_MS</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>noImpediments</name> <init>= <expr><call><name><name>blockchainState</name><operator>.</operator><name>impediments</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>showProgress</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>blockchainUptodate</name> <operator>||</operator> <operator>!</operator><name><name>blockchainState</name><operator>.</operator><name>replaying</name></name><operator>)</operator></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>downloading</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><ternary><condition><expr><name>noImpediments</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>blockchain_state_progress_downloading</name></name></expr>
                    </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>blockchain_state_progress_stalled</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>blockchainLag</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>DAY_IN_MILLIS</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>hours</name> <init>= <expr><name>blockchainLag</name> <operator>/</operator> <name><name>DateUtils</name><operator>.</operator><name>HOUR_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>viewProgress</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>blockchain_state_progress_hours</name></name></expr></argument>, <argument><expr><name>downloading</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>blockchainLag</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>WEEK_IN_MILLIS</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>days</name> <init>= <expr><name>blockchainLag</name> <operator>/</operator> <name><name>DateUtils</name><operator>.</operator><name>DAY_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>viewProgress</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>blockchain_state_progress_days</name></name></expr></argument>, <argument><expr><name>downloading</name></expr></argument>, <argument><expr><name>days</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>blockchainLag</name> <operator>&lt;</operator> <literal type="number">90</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>DAY_IN_MILLIS</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>weeks</name> <init>= <expr><name>blockchainLag</name> <operator>/</operator> <name><name>DateUtils</name><operator>.</operator><name>WEEK_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>viewProgress</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>blockchain_state_progress_weeks</name></name></expr></argument>, <argument><expr><name>downloading</name></expr></argument>, <argument><expr><name>weeks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>months</name> <init>= <expr><name>blockchainLag</name> <operator>/</operator> <operator>(</operator><literal type="number">30</literal> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>DAY_IN_MILLIS</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>viewProgress</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>blockchain_state_progress_months</name></name></expr></argument>, <argument><expr><name>downloading</name></expr></argument>, <argument><expr><name>months</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>showProgress</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><operator>!</operator><name>showProgress</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewBalance</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><operator>!</operator><name>showLocalBalance</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>viewBalanceLocal</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

            <if>if <condition>(<expr><name>balance</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewBalanceBtc</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewBalanceBtc</name><operator>.</operator><name>setFormat</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewBalanceBtc</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>showLocalBalance</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>exchangeRate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Fiat</name></type> <name>localValue</name> <init>= <expr><call><name><name>exchangeRate</name><operator>.</operator><name>rate</name><operator>.</operator><name>coinToFiat</name></name><argument_list>(<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>viewBalanceLocal</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>viewBalanceLocal</name><operator>.</operator><name>setFormat</name></name><argument_list>(<argument><expr><call><name><name>Constants</name><operator>.</operator><name>LOCAL_FORMAT</name><operator>.</operator><name>code</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
                                <argument><expr><name><name>Constants</name><operator>.</operator><name>PREFIX_ALMOST_EQUAL_TO</name></name> <operator>+</operator> <call><name><name>exchangeRate</name><operator>.</operator><name>getCurrencyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>viewBalanceLocal</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name>localValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>viewBalanceLocal</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>viewBalanceLocal</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>viewBalanceBtc</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>balance</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>balance</name><operator>.</operator><name>isGreaterThan</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TOO_MUCH_BALANCE_THRESHOLD</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewBalanceWarning</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewBalanceWarning</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_balance_fragment_too_much</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewBalanceWarning</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewBalanceWarning</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_balance_fragment_insecure_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name><name>viewBalanceWarning</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>viewProgress</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>viewProgress</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewBalance</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>BlockchainStateLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>SelectedExchangeRateLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletBalanceLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletBalanceViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BlockchainStateLiveData</name></type> <name>blockchainState</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletBalanceLiveData</name></type> <name>balance</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SelectedExchangeRateLiveData</name></type> <name>exchangeRate</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WalletBalanceViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>BlockchainStateLiveData</name></type> <name>getBlockchainState</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>blockchainState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>blockchainState</name> <operator>=</operator> <operator>new</operator> <call><name>BlockchainStateLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>blockchainState</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>WalletBalanceLiveData</name></type> <name>getBalance</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>balance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>balance</name> <operator>=</operator> <operator>new</operator> <call><name>WalletBalanceLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>balance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>SelectedExchangeRateLiveData</name></type> <name>getExchangeRate</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>exchangeRate</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>exchangeRate</name> <operator>=</operator> <operator>new</operator> <call><name>SelectedExchangeRateLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>exchangeRate</name></expr>;</return>
    }</block></function>
}</block></class>
<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainState</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainState</name><operator>.</operator><name>Impediment</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewParent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>WalletDisclaimerFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>messageView</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletDisclaimerViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletDisclaimerViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getBlockchainState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>BlockchainState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getDisclaimerEnabled</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Boolean</name></type> <name>disclaimerEnabled</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>messageView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>wallet_disclaimer_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>WalletActivityViewModel</name></type> <name>viewModel</name> <init>= <expr><call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletActivityViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showHelpDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>help_safety</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>messageView</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getBlockchainState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showDisclaimer</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getDisclaimerEnabled</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>progressResId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>blockchainState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Impediment</name></argument>&gt;</argument_list></name></type> <name>impediments</name> <init>= <expr><name><name>blockchainState</name><operator>.</operator><name>impediments</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>impediments</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Impediment</name><operator>.</operator><name>STORAGE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>progressResId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>blockchain_state_progress_problem_storage</name></name></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><call><name><name>impediments</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Impediment</name><operator>.</operator><name>NETWORK</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>progressResId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>blockchain_state_progress_problem_network</name></name></expr>;</expr_stmt></block></then></if></elseif></if>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>SpannableStringBuilder</name></type> <name>text</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>progressResId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name>progressResId</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;/b&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>progressResId</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>showDisclaimer</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>showDisclaimer</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_disclaimer_fragment_remind_safety</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ViewParent</name></type> <name>parent</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>fragment</name> <init>= <expr><ternary><condition><expr><name>parent</name> <operator>instanceof</operator> <name>FrameLayout</name></expr> ?</condition><then> <expr><operator>(</operator><name>FrameLayout</name><operator>)</operator> <name>parent</name></expr> </then><else>: <expr><name>view</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>BlockchainStateLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>OnSharedPreferenceChangeListener</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletDisclaimerViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BlockchainStateLiveData</name></type> <name>blockchainState</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>DisclaimerEnabledLiveData</name></type> <name>disclaimerEnabled</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WalletDisclaimerViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>BlockchainStateLiveData</name></type> <name>getBlockchainState</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>blockchainState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>blockchainState</name> <operator>=</operator> <operator>new</operator> <call><name>BlockchainStateLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>blockchainState</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>DisclaimerEnabledLiveData</name></type> <name>getDisclaimerEnabled</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>disclaimerEnabled</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>disclaimerEnabled</name> <operator>=</operator> <operator>new</operator> <call><name>DisclaimerEnabledLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>disclaimerEnabled</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>DisclaimerEnabledLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></extends>
            <implements>implements <name>OnSharedPreferenceChangeListener</name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>DisclaimerEnabledLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>registerOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getDisclaimerEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>unregisterOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onSharedPreferenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>sharedPreferences</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_DISCLAIMER</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getDisclaimerEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>
    }</block></class>
}</block></class>
<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ScriptException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name><operator>.</operator><name>Purpose</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookDao</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>TransactionsAdapter</name><operator>.</operator><name>ListItem</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>TransactionsAdapter</name><operator>.</operator><name>WarningType</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name><operator>.</operator><name>RaiseFeeDialogFragment</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Qr</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>admin</name><operator>.</operator><name>DevicePolicyManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Settings</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>StyleSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>PopupMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>PopupMenu</name><operator>.</operator><name>OnMenuItemClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ViewAnimator</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletTransactionsFragment</name> <super><extends>extends <name>Fragment</name></extends> <implements>implements <name><name>TransactionsAdapter</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AddressBookDao</name></type> <name>addressBookDao</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>DevicePolicyManager</name></type> <name>devicePolicyManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewAnimator</name></type> <name>viewGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>emptyView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type> <name>recyclerView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TransactionsAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MenuItem</name></type> <name>filterMenuItem</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletTransactionsViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Uri</name></type> <name>KEY_ROTATION_URI</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://bitcoin.org/en/alert/2013-08-11-android"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SHOW_QR_THRESHOLD_BYTES</name> <init>= <expr><literal type="number">2500</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>WalletTransactionsFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBookDao</name></name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>devicePolicyManager</name></name> <operator>=</operator> <operator>(</operator><name>DevicePolicyManager</name><operator>)</operator> <call><name><name>application</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>DEVICE_POLICY_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletTransactionsViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>direction</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name></name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>transactions</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>transactions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setDisplayedChild</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name></name></type> <name>direction</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>direction</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>WarningType</name></type> <name>warning</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>warning</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>SpannableStringBuilder</name></type> <name>emptyText</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>(
                            <argument><expr><call><name>getString</name><argument_list>(<argument><expr><ternary><condition><expr><name>direction</name> <operator>==</operator> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name><operator>.</operator><name>SENT</name></name></expr>
                                    ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_fragment_empty_text_sent</name></name></expr>
                                    </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_fragment_empty_text_received</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>emptyText</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StyleSpan</name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>emptyText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name><name>SpannableStringBuilder</name><operator>.</operator><name>SPAN_POINT_MARK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>direction</name> <operator>!=</operator> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name><operator>.</operator><name>SENT</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>emptyText</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_fragment_empty_text_howto</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><name>warning</name> <operator>==</operator> <name><name>WarningType</name><operator>.</operator><name>BACKUP</name></name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name> <init>= <expr><call><name><name>emptyText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>emptyText</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_fragment_empty_remind_backup</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>emptyText</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StyleSpan</name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><call><name><name>emptyText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><name><name>SpannableStringBuilder</name><operator>.</operator><name>SPAN_POINT_MARK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>emptyView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>emptyText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setDisplayedChild</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>list</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></type> <name>listItems</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>submitList</name></name><argument_list>(<argument><expr><name>listItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletActivityViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>transactionsLoadingFinished</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBitmapDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>BitmapFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEditAddressBookEntryDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>EditAddressBookEntryFragment</name><operator>.</operator><name>edit</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showReportIssueDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>contextualData</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>ReportIssueDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>report_issue_dialog_title_transaction</name></name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>report_issue_dialog_message_issue</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>REPORT_SUBJECT_ISSUE</name></name></expr></argument>, <argument><expr><name>contextualData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionsAdapter</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>maxConnectedPeers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>wallet_transactions_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>viewGroup</name> <operator>=</operator> <operator>(</operator><name>ViewAnimator</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setDisplayedChild</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// don't show progress</comment>

        <expr_stmt><expr><name>emptyView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>recyclerView</name> <operator>=</operator> <operator>(</operator><name>RecyclerView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setHasFixedSize</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StickToTopLinearLayoutManager</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setItemAnimator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>TransactionsAdapter</name><operator>.</operator><name>ItemAnimator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>addItemDecoration</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>RecyclerView</name><operator>.</operator><name>ItemDecoration</name></name></super><argument_list>()</argument_list> <block>{
            <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PADDING</name> <init>= <expr><literal type="number">2</literal>
                    <operator>*</operator> <call><name><name>activity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelOffset</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>card_padding_vertical</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>getItemOffsets</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Rect</name></type> <name>outRect</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>parent</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <name><name>RecyclerView</name><operator>.</operator><name>State</name></name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>getItemOffsets</name></name><argument_list>(<argument><expr><name>outRect</name></expr></argument>, <argument><expr><name>view</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAdapterPosition</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>outRect</name><operator>.</operator><name>top</name></name> <operator>+=</operator> <name>PADDING</name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name>position</name> <operator>==</operator> <call><name><name>parent</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemCount</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>outRect</name><operator>.</operator><name>bottom</name></name> <operator>+=</operator> <name>PADDING</name></expr>;</expr_stmt></block></then></if></elseif></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>setWarning</name></name><argument_list>(<argument><expr><call><name>warning</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>wallet_transactions_fragment_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filterMenuItem</name> <operator>=</operator> <call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_options_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name></name></type> <name>direction</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>direction</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>direction</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_options_filter_all</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maybeSetFilterMenuItemIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_filter_list_white_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name><operator>.</operator><name>RECEIVED</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_options_filter_received</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maybeSetFilterMenuItemIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>transactions_list_filter_received</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name><operator>.</operator><name>SENT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_options_filter_sent</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maybeSetFilterMenuItemIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>transactions_list_filter_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>itemId</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name></name></type> <name>direction</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>itemId</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_options_filter_all</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>direction</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maybeSetFilterMenuItemIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_filter_list_white_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>itemId</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_options_filter_received</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>direction</name> <operator>=</operator> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name><operator>.</operator><name>RECEIVED</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maybeSetFilterMenuItemIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>transactions_list_filter_received</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>itemId</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_options_filter_sent</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>direction</name> <operator>=</operator> <name><name>WalletTransactionsViewModel</name><operator>.</operator><name>Direction</name><operator>.</operator><name>SENT</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maybeSetFilterMenuItemIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>transactions_list_filter_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>setDirection</name></name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeSetFilterMenuItemIcon</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>iconResId</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Older Android versions can't deal with width and height in XML layer-list items.</comment>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>filterMenuItem</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>iconResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTransactionMenuClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>transactionHash</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getTransaction</name></name><argument_list>(<argument><expr><name>transactionHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>txSent</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>signum</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>txAddress</name> <init>= <expr><ternary><condition><expr><name>txSent</name></expr> ?</condition><then> <expr><call><name><name>WalletUtils</name><operator>.</operator><name>getToAddressOfSent</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><call><name><name>WalletUtils</name><operator>.</operator><name>getWalletAddressOfReceived</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>txSerialized</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>unsafeBitcoinSerialize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>txRotation</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getPurpose</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Purpose</name><operator>.</operator><name>KEY_ROTATION</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PopupMenu</name></type> <name>popupMenu</name> <init>= <expr><operator>new</operator> <call><name>PopupMenu</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>wallet_transactions_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>editAddressMenuItem</name> <init>= <expr><call><name><name>popupMenu</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>findItem</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_context_edit_address</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>txRotation</name> <operator>&amp;&amp;</operator> <name>txAddress</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>editAddressMenuItem</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isAdd</name> <init>= <expr><call><name><name>addressBookDao</name><operator>.</operator><name>resolveLabel</name></name><argument_list>(<argument><expr><call><name><name>txAddress</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isOwn</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>isPubKeyHashMine</name></name><argument_list>(<argument><expr><call><name><name>txAddress</name><operator>.</operator><name>getHash160</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>isOwn</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>editAddressMenuItem</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isAdd</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>edit_address_book_entry_dialog_title_add_receive</name></name></expr>
                        </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>edit_address_book_entry_dialog_title_edit_receive</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name><name>editAddressMenuItem</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isAdd</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>edit_address_book_entry_dialog_title_add</name></name></expr>
                        </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>edit_address_book_entry_dialog_title_edit</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>editAddressMenuItem</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findItem</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_context_show_qr</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>txRotation</name> <operator>&amp;&amp;</operator> <name><name>txSerialized</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name>SHOW_QR_THRESHOLD_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findItem</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_context_raise_fee</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><call><name><name>RaiseFeeDialogFragment</name><operator>.</operator><name>feeCanLikelyBeRaised</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findItem</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_context_browse</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ENABLE_BROWSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>setOnMenuItemClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnMenuItemClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onMenuItemClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
                <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_context_edit_address</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showEditAddressBookEntryDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>txAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_context_show_qr</name></name></expr>:</case>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>qrCodeBitmap</name> <init>= <expr><call><name><name>Qr</name><operator>.</operator><name>bitmap</name></name><argument_list>(<argument><expr><call><name><name>Qr</name><operator>.</operator><name>encodeCompressBinary</name></name><argument_list>(<argument><expr><name>txSerialized</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBitmapDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>qrCodeBitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_context_raise_fee</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>RaiseFeeDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_context_report_issue</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleReportIssue</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>

                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_transactions_context_browse</name></name></expr>:</case>
                    <if>if <condition>(<expr><operator>!</operator><name>txRotation</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>txHash</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getHashAsString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>blockExplorerUri</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getBlockExplorer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Viewing transaction {} on {}"</literal></expr></argument>, <argument><expr><name>txHash</name></expr></argument>, <argument><expr><name>blockExplorerUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>startActivity</name><argument_list>(
                                <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name>blockExplorerUri</name></expr></argument>, <argument><expr><literal type="string">"tx/"</literal> <operator>+</operator> <name>txHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><name>KEY_ROTATION_URI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></switch>

                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></function>

            <function><specifier>private</specifier> <type><name>void</name></type> <name>handleReportIssue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>contextualData</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>contextualData</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toFriendlyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" total value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ScriptException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>contextualData</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
                <expr_stmt><expr><call><name><name>contextualData</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>tx</name><operator>.</operator><name>hasConfidence</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>contextualData</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"  confidence: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>contextualData</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showReportIssueDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>contextualData</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTransactionClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>transactionHash</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>setSelectedTransaction</name></name><argument_list>(<argument><expr><name>transactionHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onWarningClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name>warning</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name>BACKUP</name></expr>:</case>
            <decl_stmt><decl><type><specifier>final</specifier> <name>WalletActivityViewModel</name></type> <name>viewModel</name> <init>= <expr><call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WalletActivityViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showBackupWalletDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>simple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>STORAGE_ENCRYPTION</name></expr>:</case>
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Settings</name><operator>.</operator><name>ACTION_SECURITY_SETTINGS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></switch>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>TransactionsAdapter</name><operator>.</operator><name>WarningType</name></name></type> <name>warning</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>storageEncryptionStatus</name> <init>= <expr><call><name><name>devicePolicyManager</name><operator>.</operator><name>getStorageEncryptionStatus</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>config</name><operator>.</operator><name>remindBackup</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>TransactionsAdapter</name><operator>.</operator><name>WarningType</name><operator>.</operator><name>BACKUP</name></name></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name>
                <operator>&amp;&amp;</operator> <operator>(</operator><name>storageEncryptionStatus</name> <operator>==</operator> <name><name>DevicePolicyManager</name><operator>.</operator><name>ENCRYPTION_STATUS_INACTIVE</name></name>
                        <operator>||</operator> <name>storageEncryptionStatus</name> <operator>==</operator> <name><name>DevicePolicyManager</name><operator>.</operator><name>ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY</name></name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>TransactionsAdapter</name><operator>.</operator><name>WarningType</name><operator>.</operator><name>STORAGE_ENCRYPTION</name></name></expr>;</return></block></then></if></elseif>
        <else>else
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name><operator>.</operator><name>Purpose</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionConfidence</name><operator>.</operator><name>ConfidenceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>listeners</name><operator>.</operator><name>TransactionConfidenceEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>Threading</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletChangeEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletCoinsReceivedEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletCoinsSentEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>listeners</name><operator>.</operator><name>WalletReorganizeEventListener</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AbstractWalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ConfigFormatLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MediatorLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletTransactionsViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <enum><specifier>public</specifier> enum <name>Direction</name> <block>{
        <decl><name>RECEIVED</name></decl>, <decl><name>SENT</name></decl>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>TransactionsLiveData</name></type> <name>transactions</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WalletLiveData</name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TransactionsConfidenceLiveData</name></type> <name>transactionsConfidence</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ConfigFormatLiveData</name></type> <name>configFormat</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>direction</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>Sha256Hash</name></argument>&gt;</argument_list></name></type> <name>selectedTransaction</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>TransactionsAdapter</name><operator>.</operator><name>WarningType</name></name></argument>&gt;</argument_list></name></type> <name>warning</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MediatorLiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>TransactionsAdapter</name><operator>.</operator><name>ListItem</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>MediatorLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showBitmapDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showEditAddressBookEntryDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showReportIssueDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WalletTransactionsViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>transactions</name></name> <operator>=</operator> <operator>new</operator> <call><name>TransactionsLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>transactionsConfidence</name></name> <operator>=</operator> <operator>new</operator> <call><name>TransactionsConfidenceLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBook</name></name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>configFormat</name></name> <operator>=</operator> <operator>new</operator> <call><name>ConfigFormatLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>list</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>transactions</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybePostList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>list</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybePostList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>list</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>transactionsConfidence</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybePostList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>list</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>addressBook</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybePostList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>list</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Direction</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybePostList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>list</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>selectedTransaction</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Sha256Hash</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>selectedTransaction</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybePostList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>list</name><operator>.</operator><name>addSource</name></name><argument_list>(<argument><expr><name>configFormat</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>MonetaryFormat</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybePostList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setDirection</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Direction</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>direction</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Sha256Hash</name></type> <name>getSelectedTransaction</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>selectedTransaction</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setSelectedTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>selectedTransaction</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>selectedTransaction</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>selectedTransaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setWarning</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>TransactionsAdapter</name><operator>.</operator><name>WarningType</name></name></type> <name>warning</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>warning</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybePostList</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name> <init>= <expr><call><name><name>WalletTransactionsViewModel</name><operator>.</operator><name>this</name><operator>.</operator><name>transactions</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name> <init>= <expr><call><name><name>configFormat</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name> <init>= <expr><call><name><name>AddressBookEntry</name>
                        <operator>.</operator><name>asMap</name></name><argument_list>(<argument><expr><call><name><name>WalletTransactionsViewModel</name><operator>.</operator><name>this</name><operator>.</operator><name>addressBook</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>transactions</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>format</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>addressBook</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>filteredTransactions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>transactions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Direction</name></type> <name>direction</name> <init>= <expr><call><name><name>WalletTransactionsViewModel</name><operator>.</operator><name>this</name><operator>.</operator><name>direction</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <range>: <expr><name>transactions</name></expr></range></decl></init>)</control> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>sent</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>signum</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isInternal</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getPurpose</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Purpose</name><operator>.</operator><name>KEY_ROTATION</name></name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><operator>(</operator><name>direction</name> <operator>==</operator> <name><name>Direction</name><operator>.</operator><name>RECEIVED</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sent</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isInternal</name><operator>)</operator> <operator>||</operator> <name>direction</name> <operator>==</operator> <literal type="null">null</literal>
                                <operator>||</operator> <operator>(</operator><name>direction</name> <operator>==</operator> <name><name>Direction</name><operator>.</operator><name>SENT</name></name> <operator>&amp;&amp;</operator> <name>sent</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isInternal</name><operator>)</operator></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>filteredTransactions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></for>

                    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>filteredTransactions</name></expr></argument>, <argument><expr><name>TRANSACTION_COMPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name><name>TransactionsAdapter</name><operator>.</operator><name>buildListItems</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><name>filteredTransactions</name></expr></argument>,
                            <argument><expr><call><name><name>warning</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>addressBook</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>maxConnectedPeers</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>selectedTransaction</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>TRANSACTION_COMPARATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx1</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx2</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>pending1</name> <init>= <expr><call><name><name>tx1</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfidenceType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>PENDING</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>pending2</name> <init>= <expr><call><name><name>tx2</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfidenceType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>PENDING</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pending1</name> <operator>!=</operator> <name>pending2</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><ternary><condition><expr><name>pending1</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>Date</name></type> <name>updateTime1</name> <init>= <expr><call><name><name>tx1</name><operator>.</operator><name>getUpdateTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>time1</name> <init>= <expr><ternary><condition><expr><name>updateTime1</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>updateTime1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Date</name></type> <name>updateTime2</name> <init>= <expr><call><name><name>tx2</name><operator>.</operator><name>getUpdateTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>time2</name> <init>= <expr><ternary><condition><expr><name>updateTime2</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>updateTime2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>time1</name> <operator>!=</operator> <name>time2</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><ternary><condition><expr><name>time1</name> <operator>&gt;</operator> <name>time2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></then></if>

            <return>return <expr><call><name><name>tx1</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TransactionsLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>THROTTLE_MS</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>TransactionsLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><name>THROTTLE_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>addWalletListener</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletInactive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>removeWalletListener</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>addWalletListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addCoinsReceivedEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addCoinsSentEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addReorganizeEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addChangeEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>removeWalletListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeChangeEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeReorganizeEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeCoinsSentEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeCoinsReceivedEventListener</name></name><argument_list>(<argument><expr><name>walletListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>getTransactions</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletListener</name></type> <name>walletListener</name> <init>= <expr><operator>new</operator> <call><name>WalletListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <class><specifier>private</specifier> class <name>WalletListener</name> <super><implements>implements <name>WalletCoinsReceivedEventListener</name>, <name>WalletCoinsSentEventListener</name>,
                <name>WalletReorganizeEventListener</name>, <name>WalletChangeEventListener</name></implements></super> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCoinsReceived</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>prevBalance</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>newBalance</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCoinsSent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>prevBalance</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>newBalance</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onReorganize</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onWalletChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>TransactionsConfidenceLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></extends>
            <implements>implements <name>TransactionConfidenceEventListener</name></implements></super> <block>{
        <constructor><specifier>public</specifier> <name>TransactionsConfidenceLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>addTransactionConfidenceEventListener</name></name><argument_list>(<argument><expr><name><name>Threading</name><operator>.</operator><name>SAME_THREAD</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletInactive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>removeTransactionConfidenceEventListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onTransactionConfidenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>triggerLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkState</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Protos</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletProtobufSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>ShowPasswordCheckListener</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Crypto</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Iso8601Format</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnShowListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BackupWalletDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>BackupWalletDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>BackupWalletDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>passwordView</name></decl>, <decl><type ref="prev"/><name>passwordAgainView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>passwordStrengthView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>passwordMismatchView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>showView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>warningView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>positiveButton</name></decl>, <decl><type ref="prev"/><name>negativeButton</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>BackupWalletViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_CREATE_DOCUMENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BackupWalletDialogFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextWatcher</name></type> <name>textWatcher</name> <init>= <expr><operator>new</operator> <class><super><name>TextWatcher</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>password</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>BackupWalletViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>backup_wallet_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>passwordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>backup_wallet_dialog_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>passwordAgainView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>backup_wallet_dialog_password_again</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passwordAgainView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>passwordStrengthView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>backup_wallet_dialog_password_strength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>passwordMismatchView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>backup_wallet_dialog_password_mismatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>showView</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>backup_wallet_dialog_show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>warningView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>backup_wallet_dialog_warning_encrypted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>export_keys_dialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// dummies, just to make buttons show</comment>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_ok</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOnShowListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnShowListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onShow</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name>positiveButton</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>handleGo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>negativeButton</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_NEGATIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>dismissAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>passwordAgainView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>showView</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowPasswordCheckListener</name><argument_list>(<argument><expr><name>passwordView</name></expr></argument>, <argument><expr><name>passwordAgainView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name><name>BackupWalletDialogFragment</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>warningView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>password</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name><name>BackupWalletDialogFragment</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>passwordMismatchView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>passwordLength</name> <init>= <expr><call><name><name>password</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>passwordLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>passwordLength</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_password_strength_weak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>passwordStrengthView</name>
                                    <operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_password_strength_weak</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <elseif>else <if>if <condition>(<expr><name>passwordLength</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_password_strength_fair</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>passwordStrengthView</name>
                                    <operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_password_strength_fair</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>passwordLength</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_password_strength_good</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if></elseif> <else>else <block>{
                            <expr_stmt><expr><call><name><name>passwordStrengthView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypt_keys_dialog_password_strength_strong</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>passwordStrengthView</name>
                                    <operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_password_strength_strong</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>

                        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasPassword</name> <init>= <expr><operator>!</operator><call><name><name>password</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasPasswordAgain</name> <init>= <expr><operator>!</operator><call><name><name>passwordAgainView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>positiveButton</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>positiveButton</name>
                                    <operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>hasPassword</name> <operator>&amp;&amp;</operator> <name>hasPasswordAgain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDismiss</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>removeTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passwordAgainView</name><operator>.</operator><name>removeTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>showView</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>wipePasswords</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDismiss</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleGo</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name> <init>= <expr><call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>passwordAgain</name> <init>= <expr><call><name><name>passwordAgainView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>passwordAgain</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>backupWallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>passwordMismatchView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>wipePasswords</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passwordAgainView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>backupWallet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passwordAgainView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DateFormat</name></type> <name>dateFormat</name> <init>= <expr><call><name><name>Iso8601Format</name><operator>.</operator><name>newDateFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dateFormat</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>filename</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>EXTERNAL_WALLET_BACKUP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>filename</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filename</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>dateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_CREATE_DOCUMENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addCategory</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>CATEGORY_OPENABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MIMETYPE_WALLET_BACKUP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_TITLE</name></name></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>REQUEST_CODE_CREATE_DOCUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_CREATE_DOCUMENT</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name><name>BackupWalletDialogFragment</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>removeObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>targetUri</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name> <init>= <expr><call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>checkState</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>password</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>wipePasswords</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>Wallet</name></name></type> <name>walletProto</name> <init>= <expr><operator>new</operator> <call><name>WalletProtobufSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>walletToProto</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <try>try <init>(<decl><type><specifier>final</specifier> <name>Writer</name></type> <name>cipherOut</name> <init>= <expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(
                                <argument><expr><call><name><name>activity</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openOutputStream</name><argument_list>(<argument><expr><name>targetUri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>walletProto</name><operator>.</operator><name>writeTo</name></name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>baos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>plainBytes</name> <init>= <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name><name>cipherOut</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>Crypto</name><operator>.</operator><name>encrypt</name></name><argument_list>(<argument><expr><name>plainBytes</name></expr></argument>, <argument><expr><call><name><name>password</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>cipherOut</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>disarmBackupReminder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>target</name> <init>= <expr><call><name>uriToTarget</name><argument_list>(<argument><expr><name>targetUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"backed up wallet to: '"</literal> <operator>+</operator> <name>targetUri</name> <operator>+</operator> <literal type="string">"'"</literal>
                                    <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>target</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">" ("</literal> <operator>+</operator> <name>target</name> <operator>+</operator> <literal type="string">")"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>SuccessDialogFragment</name><operator>.</operator><name>showDialog</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><ternary><condition><expr><name>target</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>target</name></expr> </then><else>: <expr><call><name><name>targetUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"problem backing up wallet"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>ErrorDialogFragment</name><operator>.</operator><name>showDialog</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"cancelled backing up wallet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>passwordAgainView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>uriToTarget</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>host</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getHost</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><literal type="string">"com.google.android.apps.docs.storage"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">"Google Drive"</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><literal type="string">"com.android.providers.downloads.documents"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">"internal storage"</literal></expr>;</return></block></then></if>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SuccessDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>SuccessDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TARGET</name> <init>= <expr><literal type="string">"target"</literal></expr></init></decl>;</decl_stmt>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>SuccessDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_TARGET</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>target</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>KEY_TARGET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>export_keys_dialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>export_keys_dialog_success</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ErrorDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>ErrorDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_EXCEPTION_MESSAGE</name> <init>= <expr><literal type="string">"exception_message"</literal></expr></init></decl>;</decl_stmt>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>exceptionMessage</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>ErrorDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_EXCEPTION_MESSAGE</name></expr></argument>, <argument><expr><name>exceptionMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>exceptionMessage</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>KEY_EXCEPTION_MESSAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_export_keys_dialog_failure_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>export_keys_dialog_failure</name></name></expr></argument>, <argument><expr><name>exceptionMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BackupWalletViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WalletLiveData</name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>password</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BackupWalletViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>

<comment type="block">/*
 * Copyright 2012-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>FileAdapter</name> <super><extends>extends <name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FileAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>inflater</name> <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setFiles</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name> <range>: <expr><name>files</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>row</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>spinner_item</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>textView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>text1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>row</name></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2012-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ImportDialogButtonEnablerListener</name> <super><implements>implements <name>TextWatcher</name>, <name>OnItemSelectedListener</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>passwordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ImportDialogButtonEnablerListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>passwordView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>passwordView</name></name> <operator>=</operator> <name>passwordView</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <name>dialog</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onNothingSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>handle</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>needsPassword</name> <init>= <expr><call><name>needsPassword</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasPassword</name> <init>= <expr><operator>!</operator><call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasFile</name> <init>= <expr><call><name>hasFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Button</name></type> <name>button</name> <init>= <expr><call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>hasFile</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>needsPassword</name> <operator>||</operator> <name>hasPassword</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>hasFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>needsPassword</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>CharStreams</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>ShowPasswordCheckListener</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Crypto</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnCancelListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnShowListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Spinner</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>RestoreWalletDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>RestoreWalletDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>RestoreWalletDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>FragmentManager</name></type> <name>fragmentManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>messageView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Spinner</name></type> <name>fileView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>passwordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>showView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>replaceWarningView</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>RestoreWalletViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_RESTORE_WALLET</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RestoreWalletDialogFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fragmentManager</name></name> <operator>=</operator> <call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>RestoreWalletViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showSuccessDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Boolean</name></type> <name>showEncryptedMessage</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>SuccessDialogFragment</name><operator>.</operator><name>showDialog</name></name><argument_list>(<argument><expr><name>fragmentManager</name></expr></argument>, <argument><expr><name>showEncryptedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showFailureDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>FailureDialogFragment</name><operator>.</operator><name>showDialog</name></name><argument_list>(<argument><expr><name>fragmentManager</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"missing {}, requesting"</literal></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>requestPermissions</name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr> }</block></expr></argument>, <argument><expr><name>REQUEST_CODE_RESTORE_WALLET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_RESTORE_WALLET</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>grantResults</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>grantResults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"missing {}, showing error"</literal></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>PermissionDeniedDialogFragment</name><operator>.</operator><name>showDialog</name></name><argument_list>(<argument><expr><name>fragmentManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>restore_wallet_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>messageView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>restore_wallet_dialog_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fileView</name> <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>import_keys_from_storage_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>passwordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>import_keys_from_storage_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>showView</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>import_keys_from_storage_show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>replaceWarningView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>restore_wallet_from_storage_dialog_replace_warning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_button_import</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name> <init>= <expr><operator>(</operator><name>File</name><operator>)</operator> <call><name><name>fileView</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name> <init>= <expr><call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// get rid of it asap</comment>

                <if>if <condition>(<expr><call><name><name>WalletUtils</name><operator>.</operator><name>BACKUP_FILE_FILTER</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>restoreWalletFromProtobuf</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><call><name><name>Crypto</name><operator>.</operator><name>OPENSSL_FILE_FILTER</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>restoreWalletFromEncrypted</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// get rid of it asap</comment>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setOnCancelListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnCancelListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// get rid of it asap</comment>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>fileView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FileAdapter</name></super><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>View</name></type> <name>getDropDownView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isExternal</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>EXTERNAL_WALLET_BACKUP_DIR</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isEncrypted</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>OPENSSL_FILE_FILTER</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>row</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>restore_wallet_file_row</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

                <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>filenameView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_import_keys_file_row_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>filenameView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>securityView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_import_keys_file_row_security</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encryptedStr</name> <init>= <expr><call><name><name>context</name>
                        <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isEncrypted</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_file_security_encrypted</name></name></expr>
                                </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_file_security_unencrypted</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>storageStr</name> <init>= <expr><call><name><name>context</name>
                        <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isExternal</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_file_security_external</name></name></expr>
                                </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_file_security_internal</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>securityView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>encryptedStr</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>storageStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>createdView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wallet_import_keys_file_row_created</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>createdView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(
                        <argument><expr><ternary><condition><expr><name>isExternal</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_file_created_manual</name></name></expr>
                                </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_file_created_automatic</name></name></expr></else></ternary></expr></argument>,
                        <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>getRelativeTimeSpanString</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>row</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOnShowListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnShowListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onShow</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ImportDialogButtonEnablerListener</name></type> <name>dialogButtonEnabler</name> <init>= <expr><operator>new</operator> <class><super><name>ImportDialogButtonEnablerListener</name></super><argument_list>(
                        <argument><expr><name>passwordView</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>)</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>boolean</name></type> <name>hasFile</name><parameter_list>()</parameter_list> <block>{
                        <return>return <expr><call><name><name>fileView</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>boolean</name></type> <name>needsPassword</name><parameter_list>()</parameter_list> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>selectedFile</name> <init>= <expr><operator>(</operator><name>File</name><operator>)</operator> <call><name><name>fileView</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <return>return <expr><ternary><condition><expr><name>selectedFile</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Crypto</name><operator>.</operator><name>OPENSSL_FILE_FILTER</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>selectedFile</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return>
                    }</block></function>
                }</block></class></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>dialogButtonEnabler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fileView</name><operator>.</operator><name>setOnItemSelectedListener</name></name><argument_list>(<argument><expr><name>dialogButtonEnabler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>balance</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name><name>RestoreWalletDialogFragment</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name></decl></parameter>)</parameter_list> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasCoins</name> <init>= <expr><call><name><name>balance</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>replaceWarningView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>hasCoins</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>path</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>backupPath</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>EXTERNAL_WALLET_BACKUP_DIR</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>storagePath</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>EXTERNAL_STORAGE_DIR</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>backupPath</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>storagePath</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>backupPath</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>storagePath</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>path</name> <operator>=</operator> <name>backupPath</name></expr>;</expr_stmt></block></else></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// external storage</comment>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"looking for backup files in '{}'"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>EXTERNAL_WALLET_BACKUP_DIR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>File</name><index>[]</index></name></type> <name>externalFiles</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>EXTERNAL_WALLET_BACKUP_DIR</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>externalFiles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name> <range>: <expr><name>externalFiles</name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>looksLikeBackup</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>OPENSSL_FILE_FILTER</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"  {}{}"</literal></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>looksLikeBackup</name></expr> ?</condition><then> <expr><literal type="string">" -- looks like backup file"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>looksLikeBackup</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></for>
        }</block></then></if>

        <comment type="line">// app-private storage</comment>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"adding backup files from app-private storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>filename</name> <range>: <expr><call><name><name>activity</name><operator>.</operator><name>fileList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_KEY_BACKUP_PROTOBUF</name></name> <operator>+</operator> <literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"  {}"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <comment type="line">// sort</comment>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name><name>lhs</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareToIgnoreCase</name><argument_list>(<argument><expr><call><name><name>rhs</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(
                <argument><expr><ternary><condition><expr><operator>!</operator><call><name><name>files</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_message</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restore_wallet_dialog_message_empty</name></name></expr></else></ternary></expr></argument>,
                <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>fileView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><call><name><name>files</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>FileAdapter</name></type> <name>adapter</name> <init>= <expr><operator>(</operator><name>FileAdapter</name><operator>)</operator> <call><name><name>fileView</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><call><name><name>files</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>showView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><call><name><name>files</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>showView</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowPasswordCheckListener</name><argument_list>(<argument><expr><name>passwordView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>restoreWalletFromEncrypted</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>BufferedReader</name></type> <name>cipherIn</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>cipherText</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>CharStreams</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>cipherIn</name></expr></argument>, <argument><expr><name>cipherText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cipherIn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>plainText</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>decryptBytes</name></name><argument_list>(<argument><expr><call><name><name>cipherText</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>password</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>plainText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>restoreWallet</name><argument_list>(<argument><expr><call><name><name>WalletUtils</name><operator>.</operator><name>restoreWalletFromProtobuf</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"successfully restored encrypted wallet: {}"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showFailureDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem restoring wallet: "</literal> <operator>+</operator> <name>file</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>restoreWalletFromProtobuf</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(<decl><type><specifier>final</specifier> <name>FileInputStream</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <expr_stmt><expr><call><name>restoreWallet</name><argument_list>(<argument><expr><call><name><name>WalletUtils</name><operator>.</operator><name>restoreWalletFromProtobuf</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"successfully restored unencrypted wallet: {}"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showFailureDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem restoring unencrypted wallet: "</literal> <operator>+</operator> <name>file</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>restoreWallet</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>restoredWallet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>replaceWallet</name></name><argument_list>(<argument><expr><name>restoredWallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>disarmBackupReminder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showSuccessDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>restoredWallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SuccessDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>SuccessDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_SHOW_ENCRYPTED_MESSAGE</name> <init>= <expr><literal type="string">"show_encrypted_message"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showEncryptedMessage</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>SuccessDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>KEY_SHOW_ENCRYPTED_MESSAGE</name></expr></argument>, <argument><expr><name>showEncryptedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showEncryptedMessage</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name>KEY_SHOW_ENCRYPTED_MESSAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>message</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restore_wallet_dialog_success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restore_wallet_dialog_success_replay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>showEncryptedMessage</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restore_wallet_dialog_success_encrypted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_ok</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>resetBlockchain</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FailureDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>FailureDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_EXCEPTION_MESSAGE</name> <init>= <expr><literal type="string">"exception_message"</literal></expr></init></decl>;</decl_stmt>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>exceptionMessage</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>FailureDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_EXCEPTION_MESSAGE</name></expr></argument>, <argument><expr><name>exceptionMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>exceptionMessage</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>KEY_EXCEPTION_MESSAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_export_keys_dialog_failure_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_failure</name></name></expr></argument>, <argument><expr><name>exceptionMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_retry</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>RestoreWalletDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>PermissionDeniedDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>PermissionDeniedDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>PermissionDeniedDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restore_wallet_permission_dialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restore_wallet_permission_dialog_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>fragment</name> <init>= <expr><operator>(</operator><name>DialogFragment</name><operator>)</operator> <call><name>getFragmentManager</name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name><name>RestoreWalletDialogFragment</name><operator>.</operator><name>FRAGMENT_TAG</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>RestoreWalletFromExternalActivity</name> <super><extends>extends <name>AbstractWalletActivity</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>RestoreWalletFromExternalDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>CharStreams</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>ShowPasswordCheckListener</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Crypto</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnCancelListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnShowListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>RestoreWalletFromExternalDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>RestoreWalletFromExternalDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_BACKUP_URI</name> <init>= <expr><literal type="string">"backup_uri"</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>backupUri</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>RestoreWalletFromExternalDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_BACKUP_URI</name></expr></argument>, <argument><expr><name>backupUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ContentResolver</name></type> <name>contentResolver</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Uri</name></type> <name>backupUri</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>passwordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>showView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>replaceWarningView</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>RestoreWalletViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RestoreWalletFromExternalDialogFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contentResolver</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backupUri</name></name> <operator>=</operator> <operator>(</operator><name>Uri</name><operator>)</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><name>KEY_BACKUP_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>RestoreWalletViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>restore_wallet_from_external_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>passwordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>import_keys_from_content_dialog_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>showView</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>import_keys_from_content_dialog_show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>replaceWarningView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>restore_wallet_from_content_dialog_replace_warning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_button_import</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name> <init>= <expr><call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// get rid of it asap</comment>
                <expr_stmt><expr><call><name>handleRestore</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// get rid of it asap</comment>
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setOnCancelListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnCancelListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// get rid of it asap</comment>
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOnShowListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnShowListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onShow</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>ImportDialogButtonEnablerListener</name></type> <name>dialogButtonEnabler</name> <init>= <expr><operator>new</operator> <class><super><name>ImportDialogButtonEnablerListener</name></super><argument_list>(
                        <argument><expr><name>passwordView</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>)</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>boolean</name></type> <name>hasFile</name><parameter_list>()</parameter_list> <block>{
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    }</block></function>
                }</block></class></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>dialogButtonEnabler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>showView</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowPasswordCheckListener</name><argument_list>(<argument><expr><name>passwordView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>balance</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name><name>RestoreWalletFromExternalDialogFragment</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>balance</name></decl></parameter>)</parameter_list> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasCoins</name> <init>= <expr><call><name><name>balance</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>replaceWarningView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>hasCoins</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleRestore</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>contentResolver</name><operator>.</operator><name>openInputStream</name></name><argument_list>(<argument><expr><name>backupUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>restoredWallet</name> <init>= <expr><call><name>restoreWalletFromEncrypted</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>replaceWallet</name></name><argument_list>(<argument><expr><name>restoredWallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>disarmBackupReminder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SuccessDialogFragment</name><operator>.</operator><name>showDialog</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>restoredWallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"successfully restored encrypted wallet from external source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>FailureDialogFragment</name><operator>.</operator><name>showDialog</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>backupUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem restoring wallet"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Wallet</name></type> <name>restoreWalletFromEncrypted</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>cipher</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BufferedReader</name></type> <name>cipherIn</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>cipherText</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>CharStreams</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>cipherIn</name></expr></argument>, <argument><expr><name>cipherText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cipherIn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>plainText</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>decryptBytes</name></name><argument_list>(<argument><expr><call><name><name>cipherText</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>password</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>plainText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>WalletUtils</name><operator>.</operator><name>restoreWalletFromProtobuf</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SuccessDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>SuccessDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_SHOW_ENCRYPTED_MESSAGE</name> <init>= <expr><literal type="string">"show_encrypted_message"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showEncryptedMessage</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>SuccessDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>KEY_SHOW_ENCRYPTED_MESSAGE</name></expr></argument>, <argument><expr><name>showEncryptedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showEncryptedMessage</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name>KEY_SHOW_ENCRYPTED_MESSAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>message</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restore_wallet_dialog_success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restore_wallet_dialog_success_replay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>showEncryptedMessage</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restore_wallet_dialog_success_encrypted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_ok</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>resetBlockchain</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FailureDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>FailureDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_EXCEPTION_MESSAGE</name> <init>= <expr><literal type="string">"exception_message"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_BACKUP_URI</name> <init>= <expr><literal type="string">"backup_uri"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>exceptionMessage</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>backupUri</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>FailureDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_EXCEPTION_MESSAGE</name></expr></argument>, <argument><expr><name>exceptionMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_BACKUP_URI</name></expr></argument>, <argument><expr><name>backupUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>exceptionMessage</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>KEY_EXCEPTION_MESSAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>backupUri</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><name>KEY_BACKUP_URI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_export_keys_dialog_failure_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>import_keys_dialog_failure</name></name></expr></argument>, <argument><expr><name>exceptionMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOnCancelListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnCancelListener</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_retry</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>RestoreWalletFromExternalDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>backupUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>backup</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletBalanceLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>Event</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>RestoreWalletViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WalletBalanceLiveData</name></type> <name>balance</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showSuccessDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showFailureDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RestoreWalletViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>balance</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletBalanceLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>monitor</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>StoredBlock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name><operator>.</operator><name>Purpose</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>CurrencyTextView</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>DiffUtil</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListAdapter</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BlockListAdapter</name> <super><extends>extends <name><name>ListAdapter</name><argument_list type="generic">&lt;<argument><name><name>BlockListAdapter</name><operator>.</operator><name>ListItem</name></name></argument>, <argument><name><name>BlockListAdapter</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></extends></super> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></type> <name>buildListItems</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StoredBlock</name></argument>&gt;</argument_list></name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>time</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Wallet</name></type> <name>wallet</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>blocks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>StoredBlock</name></type> <name>block</name> <range>: <expr><name>blocks</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ListItem</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>transactions</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>addressBook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><name>items</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ListItem</name> <block>{
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>blockHash</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>time</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>isMiningRewardHalvingPoint</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>isDifficultyTransitionPoint</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ListTransaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ListItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>StoredBlock</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Wallet</name></type> <name>wallet</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blockHash</name></name> <operator>=</operator> <call><name><name>block</name><operator>.</operator><name>getHeader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name><name>block</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>timeMs</name> <init>= <expr><call><name><name>block</name><operator>.</operator><name>getHeader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeSeconds</name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>DateUtils</name><operator>.</operator><name>SECOND_IN_MILLIS</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>timeMs</name> <operator>&lt;</operator> <call><name><name>time</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>DateUtils</name><operator>.</operator><name>MINUTE_IN_MILLIS</name></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name><name>DateUtils</name><operator>.</operator><name>getRelativeDateTimeString</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>timeMs</name></expr></argument>, <argument><expr><name><name>DateUtils</name><operator>.</operator><name>MINUTE_IN_MILLIS</name></name></expr></argument>,
                        <argument><expr><name><name>DateUtils</name><operator>.</operator><name>WEEK_IN_MILLIS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>block_row_now</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isMiningRewardHalvingPoint</name></name> <operator>=</operator> <call><name>isMiningRewardHalvingPoint</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDifficultyTransitionPoint</name></name> <operator>=</operator> <call><name>isDifficultyTransitionPoint</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>transactions</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>transactions</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>wallet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <range>: <expr><name>transactions</name></expr></range></decl></init>)</control> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Sha256Hash</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>appearsInHashes</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getAppearsInHashes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>appearsInHashes</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>appearsInHashes</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>blockHash</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>transactions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ListTransaction</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>addressBook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></for>
            }</block></then></if>
        }</block></constructor>

        <function><specifier>private</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isMiningRewardHalvingPoint</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StoredBlock</name></type> <name>storedPrev</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>(</operator><operator>(</operator><call><name><name>storedPrev</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">210000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
        }</block></function>

        <function><specifier>private</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isDifficultyTransitionPoint</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StoredBlock</name></type> <name>storedPrev</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>(</operator><operator>(</operator><call><name><name>storedPrev</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>getInterval</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
        }</block></function>

        <class><specifier>public</specifier> <specifier>static</specifier> class <name>ListTransaction</name> <block>{
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>fromTo</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Coin</name></type> <name>value</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>ListTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>,
                    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isCoinBase</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>isCoinBase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isInternal</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getPurpose</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Purpose</name><operator>.</operator><name>KEY_ROTATION</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>sent</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>self</name> <init>= <expr><call><name><name>WalletUtils</name><operator>.</operator><name>isEntirelySelf</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>sent</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name><name>WalletUtils</name><operator>.</operator><name>getToAddressOfSent</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name><name>WalletUtils</name><operator>.</operator><name>getWalletAddressOfReceived</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

                <if>if <condition>(<expr><name>isInternal</name> <operator>||</operator> <name>self</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>fromTo</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>symbol_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name>sent</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>fromTo</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>symbol_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>fromTo</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>symbol_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

                <if>if <condition>(<expr><name>isCoinBase</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_fragment_coinbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>isInternal</name> <operator>||</operator> <name>self</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_transactions_fragment_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>addressBook</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>AddressBookEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>addressBook</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block></else></if>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></constructor>
        }</block></class>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ROW_BASE_CHILD_COUNT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ROW_INSERT_INDEX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><specifier>final</specifier> <name>OnClickListener</name></type> <name>onClickListener</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BlockListAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>OnClickListener</name></type> <name>onClickListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>DiffUtil</name><operator>.</operator><name><name>ItemCallback</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>areItemsTheSame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>oldItem</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>newItem</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name><name>oldItem</name><operator>.</operator><name>blockHash</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>newItem</name><operator>.</operator><name>blockHash</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>areContentsTheSame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>oldItem</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>newItem</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldItem</name><operator>.</operator><name>time</name></name></expr></argument>, <argument><expr><name><name>newItem</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>inflater</name> <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onClickListener</name></name> <operator>=</operator> <name>onClickListener</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>ViewHolder</name></type> <name>onCreateViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>ViewHolder</name><argument_list>(<argument><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>block_row</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBindViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewHolder</name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>listItem</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>heightView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>listItem</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>timeView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>listItem</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>miningRewardAdjustmentView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>isMiningRewardHalvingPoint</name></name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>miningDifficultyAdjustmentView</name>
                <operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>isDifficultyTransitionPoint</name></name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>hashView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>WalletUtils</name><operator>.</operator><name>formatHash</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>listItem</name><operator>.</operator><name>blockHash</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>transactionChildCount</name> <init>= <expr><call><name><name>holder</name><operator>.</operator><name>transactionsViewGroup</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>ROW_BASE_CHILD_COUNT</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iTransactionView</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>BlockListAdapter</name><operator>.</operator><name>ListItem</name><operator>.</operator><name>ListTransaction</name></name></type> <name>tx</name> <range>: <expr><name><name>listItem</name><operator>.</operator><name>transactions</name></name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>iTransactionView</name> <operator>&lt;</operator> <name>transactionChildCount</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>view</name> <operator>=</operator> <call><name><name>holder</name><operator>.</operator><name>transactionsViewGroup</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>ROW_INSERT_INDEX</name> <operator>+</operator> <name>iTransactionView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>view</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>block_row_transaction</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>transactionsViewGroup</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>ROW_INSERT_INDEX</name> <operator>+</operator> <name>iTransactionView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>bindTransactionView</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name><name>listItem</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>iTransactionView</name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>leftoverTransactionViews</name> <init>= <expr><name>transactionChildCount</name> <operator>-</operator> <name>iTransactionView</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>leftoverTransactionViews</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>transactionsViewGroup</name><operator>.</operator><name>removeViews</name></name><argument_list>(<argument><expr><name>ROW_INSERT_INDEX</name> <operator>+</operator> <name>iTransactionView</name></expr></argument>, <argument><expr><name>leftoverTransactionViews</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>OnClickListener</name></type> <name>onClickListener</name> <init>= <expr><name><name>this</name><operator>.</operator><name>onClickListener</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>onClickListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>menuView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>onClickListener</name><operator>.</operator><name>onBlockMenuClick</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>listItem</name><operator>.</operator><name>blockHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>bindTransactionView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>ListItem</name><operator>.</operator><name>ListTransaction</name></name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// receiving or sending</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>rowFromTo</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_row_transaction_fromto</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rowFromTo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>fromTo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// address</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>rowAddress</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_row_transaction_address</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rowAddress</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>tx</name><operator>.</operator><name>label</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>tx</name><operator>.</operator><name>label</name></name></expr> </then><else>: <expr><call><name><name>tx</name><operator>.</operator><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rowAddress</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>tx</name><operator>.</operator><name>label</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT</name></name></expr> </then><else>: <expr><name><name>Typeface</name><operator>.</operator><name>MONOSPACE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// value</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>CurrencyTextView</name></type> <name>rowValue</name> <init>= <expr><operator>(</operator><name>CurrencyTextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_row_transaction_value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rowValue</name><operator>.</operator><name>setAlwaysSigned</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rowValue</name><operator>.</operator><name>setFormat</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rowValue</name><operator>.</operator><name>setAmount</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <interface><specifier>public</specifier> interface <name>OnClickListener</name> <block>{
        <function_decl><type><name>void</name></type> <name>onBlockMenuClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Sha256Hash</name></type> <name>blockHash</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ViewHolder</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ViewGroup</name></type> <name>transactionsViewGroup</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>miningRewardAdjustmentView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>miningDifficultyAdjustmentView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>heightView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>timeView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>hashView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ImageButton</name></type> <name>menuView</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>ViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transactionsViewGroup</name> <operator>=</operator> <operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list_row_transactions_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>miningRewardAdjustmentView</name> <operator>=</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list_row_mining_reward_adjustment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>miningDifficultyAdjustmentView</name> <operator>=</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list_row_mining_difficulty_adjustment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>heightView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list_row_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>timeView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list_row_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>hashView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list_row_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>menuView</name> <operator>=</operator> <operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list_row_menu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>monitor</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>StoredBlock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DividerItemDecoration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>StickToTopLinearLayoutManager</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>PopupMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>PopupMenu</name><operator>.</operator><name>OnMenuItemClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ViewAnimator</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>BlockListFragment</name> <super><extends>extends <name>Fragment</name></extends> <implements>implements <name><name>BlockListAdapter</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewAnimator</name></type> <name>viewGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type> <name>recyclerView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BlockListAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>BlockListViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BlockListFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>BlockListViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getBlocks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>StoredBlock</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StoredBlock</name></argument>&gt;</argument_list></name></type> <name>blocks</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setDisplayedChild</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getTransactions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>loadTransactions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getTransactions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Date</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>BlockListAdapter</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>block_list_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>viewGroup</name> <operator>=</operator> <operator>(</operator><name>ViewAnimator</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>recyclerView</name> <operator>=</operator> <operator>(</operator><name>RecyclerView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StickToTopLinearLayoutManager</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>addItemDecoration</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DividerItemDecoration</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DividerItemDecoration</name><operator>.</operator><name>VERTICAL_LIST</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeSubmitList</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StoredBlock</name></argument>&gt;</argument_list></name></type> <name>blocks</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getBlocks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>blocks</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name> <init>= <expr><call><name><name>AddressBookEntry</name><operator>.</operator><name>asMap</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>addressBook</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>submitList</name></name><argument_list>(<argument><expr><call><name><name>BlockListAdapter</name><operator>.</operator><name>buildListItems</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>getTransactions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>addressBook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBlockMenuClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>blockHash</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PopupMenu</name></type> <name>popupMenu</name> <init>= <expr><operator>new</operator> <call><name>PopupMenu</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>blocks_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findItem</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>blocks_context_browse</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ENABLE_BROWSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>setOnMenuItemClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnMenuItemClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onMenuItemClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
                <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>blocks_context_browse</name></name></expr>:</case>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>blockExplorerUri</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getBlockExplorer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Viewing block {} on {}"</literal></expr></argument>, <argument><expr><name>blockHash</name></expr></argument>, <argument><expr><name>blockExplorerUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>,
                            <argument><expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name>blockExplorerUri</name></expr></argument>, <argument><expr><literal type="string">"block/"</literal> <operator>+</operator> <name>blockHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></switch>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popupMenu</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>monitor</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>StoredBlock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AbstractWalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>TimeLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ServiceConnection</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>localbroadcastmanager</name><operator>.</operator><name>content</name><operator>.</operator><name>LocalBroadcastManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BlockListViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BlocksLiveData</name></type> <name>blocks</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TransactionsLiveData</name></type> <name>transactions</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletLiveData</name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TimeLiveData</name></type> <name>time</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_BLOCKS</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BlockListViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBook</name></name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>BlocksLiveData</name></type> <name>getBlocks</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>blocks</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>blocks</name> <operator>=</operator> <operator>new</operator> <call><name>BlocksLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>blocks</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>TransactionsLiveData</name></type> <name>getTransactions</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>transactions</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>transactions</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionsLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>transactions</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>WalletLiveData</name></type> <name>getWallet</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>wallet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>wallet</name> <operator>=</operator> <operator>new</operator> <call><name>WalletLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>wallet</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>TimeLiveData</name></type> <name>getTime</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>time</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>time</name> <operator>=</operator> <operator>new</operator> <call><name>TimeLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>time</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>BlocksLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>StoredBlock</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends> <implements>implements <name>ServiceConnection</name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LocalBroadcastManager</name></type> <name>broadcastManager</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>BlockchainService</name></type> <name>blockchainService</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>BlocksLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <name>application</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>broadcastManager</name></name> <operator>=</operator> <call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>broadcastManager</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>broadcastReceiver</name></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>ACTION_BLOCKCHAIN_STATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>bindService</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>BIND_AUTO_CREATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>unbindService</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>broadcastManager</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>broadcastReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onServiceConnected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ComponentName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>IBinder</name></type> <name>service</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>blockchainService</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>BlockchainService</name><operator>.</operator><name>LocalBinder</name></name><operator>)</operator> <name>service</name><operator>)</operator><operator>.</operator><call><name>getService</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>blockchainService</name><operator>.</operator><name>getRecentBlocks</name></name><argument_list>(<argument><expr><name>MAX_BLOCKS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onServiceDisconnected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ComponentName</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>blockchainService</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BroadcastReceiver</name></type> <name>broadcastReceiver</name> <init>= <expr><operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>blockchainService</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>blockchainService</name><operator>.</operator><name>getRecentBlocks</name></name><argument_list>(<argument><expr><name>MAX_BLOCKS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TransactionsLiveData</name> <super><extends>extends <name><name>AbstractWalletLiveData</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{
        <constructor><specifier>private</specifier> <name>TransactionsLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onWalletActive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>loadTransactions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>loadTransactions</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name>getWallet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>wallet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><return>return;</return></block></then></if>
            <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getTransactions</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>filteredTransactions</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>transactions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <range>: <expr><name>transactions</name></expr></range></decl></init>)</control> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Sha256Hash</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>appearsIn</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>getAppearsInHashes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>appearsIn</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>appearsIn</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <comment type="line">// TODO filter by updateTime</comment>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>filteredTransactions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></for>
                    <expr_stmt><expr><call><name>postValue</name><argument_list>(<argument><expr><name>filteredTransactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>monitor</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewPagerTabs</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentStatePagerAdapter</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>viewpager</name><operator>.</operator><name>widget</name><operator>.</operator><name>ViewPager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>NetworkMonitorActivity</name> <super><extends>extends <name>AbstractWalletActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>PeerListFragment</name></type> <name>peerListFragment</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BlockListFragment</name></type> <name>blockListFragment</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>network_monitor_content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ViewPager</name></type> <name>pager</name> <init>= <expr><operator>(</operator><name>ViewPager</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>network_monitor_pager</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>pager</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ViewPagerTabs</name></type> <name>pagerTabs</name> <init>= <expr><operator>(</operator><name>ViewPagerTabs</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>network_monitor_pager_tabs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pagerTabs</name><operator>.</operator><name>addTabLabels</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>network_monitor_peer_list_title</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>network_monitor_block_list_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>PagerAdapter</name></type> <name>pagerAdapter</name> <init>= <expr><operator>new</operator> <call><name>PagerAdapter</name><argument_list>(<argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>pagerAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setOnPageChangeListener</name></name><argument_list>(<argument><expr><name>pagerTabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setPageMargin</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setPageMarginDrawable</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>bg_less_bright</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>peerListFragment</name> <operator>=</operator> <operator>new</operator> <call><name>PeerListFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>blockListFragment</name> <operator>=</operator> <operator>new</operator> <call><name>BlockListFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>peerListFragment</name> <operator>=</operator> <operator>(</operator><name>PeerListFragment</name><operator>)</operator> <call><name><name>fm</name><operator>.</operator><name>findFragmentById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>peer_list_fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>blockListFragment</name> <operator>=</operator> <operator>(</operator><name>BlockListFragment</name><operator>)</operator> <call><name><name>fm</name><operator>.</operator><name>findFragmentById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>block_list_fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <class><specifier>private</specifier> class <name>PagerAdapter</name> <super><extends>extends <name>FragmentStatePagerAdapter</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>PagerAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">2</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Fragment</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>peerListFragment</name></expr>;</return></block></then>
            <else>else
                <block type="pseudo"><return>return <expr><name>blockListFragment</name></expr>;</return></block></else></if>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>monitor</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Peer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionMessage</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>DiffUtil</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListAdapter</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>PeerListAdapter</name> <super><extends>extends <name><name>ListAdapter</name><argument_list type="generic">&lt;<argument><name><name>PeerListAdapter</name><operator>.</operator><name>ListItem</name></name></argument>, <argument><name><name>PeerListAdapter</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></extends></super> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></type> <name>buildListItems</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Peer</name></argument>&gt;</argument_list></name></type> <name>peers</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hostnames</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>peers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Peer</name></type> <name>peer</name> <range>: <expr><name>peers</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ListItem</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>hostnames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><name>items</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ListItem</name> <block>{
        <constructor><specifier>public</specifier> <name>ListItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Peer</name></type> <name>peer</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hostnames</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ip</name></name> <operator>=</operator> <call><name><name>peer</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hostname</name></name> <operator>=</operator> <call><name><name>hostnames</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name><name>peer</name><operator>.</operator><name>getBestHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>VersionMessage</name></type> <name>versionMessage</name> <init>= <expr><call><name><name>peer</name><operator>.</operator><name>getPeerVersionMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>versionMessage</name><operator>.</operator><name>subVer</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>protocol</name></name> <operator>=</operator> <literal type="string">"protocol: "</literal> <operator>+</operator> <name><name>versionMessage</name><operator>.</operator><name>clientVersion</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>pingTime</name> <init>= <expr><call><name><name>peer</name><operator>.</operator><name>getPingTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ping</name></name> <operator>=</operator> <ternary><condition><expr><name>pingTime</name> <operator>&lt;</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>peer_list_row_ping_time</name></name></expr></argument>, <argument><expr><name>pingTime</name></expr></argument>)</argument_list></call></expr>
                    </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDownloading</name></name> <operator>=</operator> <call><name><name>peer</name><operator>.</operator><name>isDownloadData</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>InetAddress</name></type> <name>ip</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>hostname</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>height</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>version</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>protocol</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ping</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>isDownloading</name></decl>;</decl_stmt>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PeerListAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>DiffUtil</name><operator>.</operator><name><name>ItemCallback</name><argument_list type="generic">&lt;<argument><name>ListItem</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>areItemsTheSame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>oldItem</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>newItem</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name><name>oldItem</name><operator>.</operator><name>ip</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>newItem</name><operator>.</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>areContentsTheSame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>oldItem</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>newItem</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldItem</name><operator>.</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>newItem</name><operator>.</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldItem</name><operator>.</operator><name>ping</name></name></expr></argument>, <argument><expr><name><name>newItem</name><operator>.</operator><name>ping</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>oldItem</name><operator>.</operator><name>isDownloading</name></name></expr></argument>, <argument><expr><name><name>newItem</name><operator>.</operator><name>isDownloading</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inflater</name></name> <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>ViewHolder</name></type> <name>onCreateViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>ViewHolder</name><argument_list>(<argument><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>peer_list_row</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBindViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewHolder</name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ListItem</name></type> <name>listItem</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>ipView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>hostname</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>listItem</name><operator>.</operator><name>hostname</name></name></expr> </then><else>: <expr><call><name><name>listItem</name><operator>.</operator><name>ip</name><operator>.</operator><name>getHostAddress</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>heightView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>listItem</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="string">" blocks"</literal></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>heightView</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>isDownloading</name></name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr> </then><else>: <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>versionView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>listItem</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>versionView</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>isDownloading</name></name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr> </then><else>: <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>protocolView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>listItem</name><operator>.</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>protocolView</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>isDownloading</name></name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr> </then><else>: <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>pingView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>listItem</name><operator>.</operator><name>ping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>pingView</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>listItem</name><operator>.</operator><name>isDownloading</name></name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr> </then><else>: <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ViewHolder</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>ipView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>heightView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>versionView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>protocolView</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>pingView</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>ViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ipView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>peer_list_row_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>heightView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>peer_list_row_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>versionView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>peer_list_row_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>protocolView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>peer_list_row_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pingView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>peer_list_row_ping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
}</block></class>
<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>monitor</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Peer</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DividerItemDecoration</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ViewAnimator</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>PeerListFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewAnimator</name></type> <name>viewGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type> <name>recyclerView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>PeerListAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>PeerListViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>PeerListViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getPeers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Peer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Peer</name></argument>&gt;</argument_list></name></type> <name>peers</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setDisplayedChild</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>peers</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>peers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>peers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>Peer</name></type> <name>peer</name> <range>: <expr><name>peers</name></expr></range></decl></init>)</control>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getHostnames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reverseLookup</name><argument_list>(<argument><expr><call><name><name>peer</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getHostnames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hostnames</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>maybeSubmitList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>PeerListAdapter</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>peer_list_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>viewGroup</name> <operator>=</operator> <operator>(</operator><name>ViewAnimator</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>peer_list_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>recyclerView</name> <operator>=</operator> <operator>(</operator><name>RecyclerView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>peer_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinearLayoutManager</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>addItemDecoration</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DividerItemDecoration</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DividerItemDecoration</name><operator>.</operator><name>VERTICAL_LIST</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeSubmitList</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Peer</name></argument>&gt;</argument_list></name></type> <name>peers</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getPeers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>peers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>submitList</name></name><argument_list>(<argument><expr><call><name><name>PeerListAdapter</name><operator>.</operator><name>buildListItems</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>peers</name></expr></argument>, <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>getHostnames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>monitor</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Peer</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ServiceConnection</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>localbroadcastmanager</name><operator>.</operator><name>content</name><operator>.</operator><name>LocalBroadcastManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>PeerListViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>PeersLiveData</name></type> <name>peers</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>HostnamesLiveData</name></type> <name>hostnames</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PeerListViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>PeersLiveData</name></type> <name>getPeers</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>peers</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>peers</name> <operator>=</operator> <operator>new</operator> <call><name>PeersLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>peers</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>HostnamesLiveData</name></type> <name>getHostnames</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>hostnames</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>hostnames</name> <operator>=</operator> <operator>new</operator> <call><name>HostnamesLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>hostnames</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>PeersLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Peer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends> <implements>implements <name>ServiceConnection</name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>LocalBroadcastManager</name></type> <name>broadcastManager</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>BlockchainService</name></type> <name>blockchainService</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>PeersLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <name>application</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>broadcastManager</name></name> <operator>=</operator> <call><name><name>LocalBroadcastManager</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onActive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>broadcastManager</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>broadcastReceiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>BlockchainService</name><operator>.</operator><name>ACTION_PEER_STATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>bindService</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><name><name>BlockchainService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>BIND_AUTO_CREATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onInactive</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>unbindService</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>broadcastManager</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>broadcastReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onServiceConnected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ComponentName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>IBinder</name></type> <name>service</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>blockchainService</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>BlockchainService</name><operator>.</operator><name>LocalBinder</name></name><operator>)</operator> <name>service</name><operator>)</operator><operator>.</operator><call><name>getService</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>blockchainService</name><operator>.</operator><name>getConnectedPeers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onServiceDisconnected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ComponentName</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>blockchainService</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BroadcastReceiver</name></type> <name>broadcastReceiver</name> <init>= <expr><operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>blockchainService</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>blockchainService</name><operator>.</operator><name>getConnectedPeers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>HostnamesLiveData</name> <super><extends>extends <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>HostnamesLiveData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>reverseLookup</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InetAddress</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hostnames</name> <init>= <expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>hostnames</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>hostname</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>getCanonicalHostName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                            <function><annotation>@<name>Override</name></annotation>
                            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                                <expr_stmt><expr><call><name><name>hostnames</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>hostnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></function>
                        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class>
}</block></class>
<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>preference</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionMessage</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Installer</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceFragment</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>AboutFragment</name> <super><extends>extends <name>PreferenceFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>PackageManager</name></type> <name>packageManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ABOUT_VERSION</name> <init>= <expr><literal type="string">"about_version"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ABOUT_MARKET_APP</name> <init>= <expr><literal type="string">"about_market_app"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ABOUT_CREDITS_BITCOINJ</name> <init>= <expr><literal type="string">"about_credits_bitcoinj"</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name><name>activity</name><operator>.</operator><name>getApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>packageManager</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>preference_about</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>packageInfo</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>packageInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>findPreference</name><argument_list>(<argument><expr><name>KEY_ABOUT_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setSummary</name><argument_list>(<argument><expr><call><name><name>WalletApplication</name><operator>.</operator><name>versionLine</name></name><argument_list>(<argument><expr><name>packageInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Installer</name></type> <name>installer</name> <init>= <expr><call><name><name>Installer</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>installer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>installer</name> <operator>=</operator> <name><name>Installer</name><operator>.</operator><name>F_DROID</name></name></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Preference</name></type> <name>marketPref</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><name>KEY_ABOUT_MARKET_APP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>marketPref</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>about_market_app_title</name></name></expr></argument>, <argument><expr><name><name>installer</name><operator>.</operator><name>displayName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>marketIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>,
                <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>installer</name><operator>.</operator><name>appStorePageFor</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>packageManager</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><name>marketIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>marketPref</name><operator>.</operator><name>setIntent</name></name><argument_list>(<argument><expr><name>marketIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>marketPref</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>findPreference</name><argument_list>(<argument><expr><name>KEY_ABOUT_CREDITS_BITCOINJ</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>about_credits_bitcoinj_title</name></name></expr></argument>, <argument><expr><name><name>VersionMessage</name><operator>.</operator><name>BITCOINJ_VERSION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>preference</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>DeterministicKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceScreen</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DiagnosticsFragment</name> <super><extends>extends <name>PreferenceFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_INITIATE_RESET</name> <init>= <expr><literal type="string">"initiate_reset"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_KEY_EXTENDED_PUBLIC_KEY</name> <init>= <expr><literal type="string">"extended_public_key"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DiagnosticsFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name><name>activity</name><operator>.</operator><name>getApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>preference_diagnostics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onPreferenceTreeClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PreferenceScreen</name></type> <name>preferenceScreen</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Preference</name></type> <name>preference</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name> <init>= <expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>PREFS_KEY_INITIATE_RESET</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleInitiateReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>PREFS_KEY_EXTENDED_PUBLIC_KEY</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleExtendedPublicKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if></elseif></if>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleInitiateReset</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>preferences_initiate_reset_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>preferences_initiate_reset_dialog_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>preferences_initiate_reset_dialog_positive</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"manually initiated blockchain reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>resetBlockchain</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO doesn't fully finish prefs on single pane layouts</comment>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleExtendedPublicKey</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DeterministicKey</name></type> <name>extendedKey</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWatchingKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>xpub</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%s?c=%d&amp;h=bip32"</literal></expr></argument>,
                <argument><expr><call><name><name>extendedKey</name><operator>.</operator><name>serializePubB58</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>extendedKey</name><operator>.</operator><name>getCreationTimeSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ExtendedPublicKeyFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>CharSequence</name><operator>)</operator> <name>xpub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>preference</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Qr</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>ShareCompat</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ExtendedPublicKeyFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>ExtendedPublicKeyFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_XPUB</name> <init>= <expr><literal type="string">"xpub"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ExtendedPublicKeyFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>xpub</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>instance</name><argument_list>(<argument><expr><name>xpub</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>ExtendedPublicKeyFragment</name></type> <name>instance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>xpub</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ExtendedPublicKeyFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>ExtendedPublicKeyFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putCharSequence</name></name><argument_list>(<argument><expr><name>KEY_XPUB</name></expr></argument>, <argument><expr><name>xpub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>fragment</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>xpub</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCharSequence</name><argument_list>(<argument><expr><name>KEY_XPUB</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>extended_public_key_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>BitmapDrawable</name></type> <name>bitmap</name> <init>= <expr><operator>new</operator> <call><name>BitmapDrawable</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Qr</name><operator>.</operator><name>bitmap</name></name><argument_list>(<argument><expr><name>xpub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>setFilterBitmap</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ImageView</name></type> <name>imageView</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>extended_public_key_dialog_image</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>imageView</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>dismissAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_share</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>ShareCompat</name><operator>.</operator><name>IntentBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>ShareCompat</name><operator>.</operator><name>IntentBuilder</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>xpub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSubject</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>extended_public_key_fragment_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setChooserTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>extended_public_key_fragment_share</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startChooser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"xpub shared via intent: {}"</literal></expr></argument>, <argument><expr><name>xpub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>preference</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>PreferenceActivity</name> <super><extends>extends <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceActivity</name></name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBuildHeaders</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Header</name></argument>&gt;</argument_list></name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>loadHeadersFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>preference_headers</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
            <expr_stmt><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>boolean</name></type> <name>isValidFragment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>fragmentName</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>SettingsFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>fragmentName</name></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>DiagnosticsFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>fragmentName</name></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>AboutFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>fragmentName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2016 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>preference</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ResolveDnsTask</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>callbackHandler</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ResolveDnsTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backgroundHandler</name></name> <operator>=</operator> <name>backgroundHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callbackHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>resolve</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>hostname</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>InetAddress</name></type> <name>address</name> <init>= <expr><call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// blocks on network</comment>

                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name>onSuccess</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>UnknownHostException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name>onUnknownHost</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>InetAddress</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onUnknownHost</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>preference</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>HandlerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name><operator>.</operator><name>OnPreferenceChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceFragment</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SettingsFragment</name> <super><extends>extends <name>PreferenceFragment</name></extends> <implements>implements <name>OnPreferenceChangeListener</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>PackageManager</name></type> <name>pm</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>HandlerThread</name></type> <name>backgroundThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Preference</name></type> <name>trustedPeerPreference</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Preference</name></type> <name>trustedPeerOnlyPreference</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SettingsFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <call><name><name>activity</name><operator>.</operator><name>getApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pm</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>preference_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backgroundThread</name> <operator>=</operator> <operator>new</operator> <call><name>HandlerThread</name><argument_list>(<argument><expr><literal type="string">"backgroundThread"</literal></expr></argument>, <argument><expr><name><name>Process</name><operator>.</operator><name>THREAD_PRIORITY_BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backgroundHandler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>trustedPeerPreference</name> <operator>=</operator> <call><name>findPreference</name><argument_list>(<argument><expr><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_TRUSTED_PEER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>EditTextPreference</name><operator>)</operator> <name>trustedPeerPreference</name><operator>)</operator><operator>.</operator><call><name>getEditText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSingleLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trustedPeerPreference</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>trustedPeerOnlyPreference</name> <operator>=</operator> <call><name>findPreference</name><argument_list>(<argument><expr><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_TRUSTED_PEER_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trustedPeerOnlyPreference</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Preference</name></type> <name>dataUsagePreference</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><name><name>Configuration</name><operator>.</operator><name>PREFS_KEY_DATA_USAGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dataUsagePreference</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>pm</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><call><name><name>dataUsagePreference</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateTrustedPeer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>trustedPeerOnlyPreference</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trustedPeerPreference</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// delay action because preference isn't persisted until after this method returns</comment>
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>preference</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>trustedPeerPreference</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>updateTrustedPeer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>preference</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>trustedPeerOnlyPreference</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateTrustedPeer</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>trustedPeer</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getTrustedPeerHost</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>trustedPeer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>trustedPeerPreference</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>preferences_trusted_peer_summary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>trustedPeerOnlyPreference</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>trustedPeerPreference</name><operator>.</operator><name>setSummary</name></name><argument_list>(
                    <argument><expr><name>trustedPeer</name> <operator>+</operator> <literal type="string">"\n["</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>preferences_trusted_peer_resolve_progress</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>trustedPeerOnlyPreference</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><operator>new</operator> <class><super><name>ResolveDnsTask</name></super><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InetAddress</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>trustedPeerPreference</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>trustedPeer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"trusted peer '{}' resolved to {}"</literal></expr></argument>, <argument><expr><name>trustedPeer</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>onUnknownHost</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>trustedPeerPreference</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>trustedPeer</name> <operator>+</operator> <literal type="string">"\n["</literal>
                            <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>preferences_trusted_peer_resolve_unknown_host</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>trustedPeer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>scan</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>PlanarYUVLuminanceSource</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>RectF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name><operator>.</operator><name>CameraInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name><operator>.</operator><name>PreviewCallback</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>TextureView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>CameraManager</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MIN_FRAME_SIZE</name> <init>= <expr><literal type="number">240</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_FRAME_SIZE</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MIN_PREVIEW_PIXELS</name> <init>= <expr><literal type="number">470</literal> <operator>*</operator> <literal type="number">320</literal></expr></init></decl>;</decl_stmt> <comment type="line">// normal screen</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_PREVIEW_PIXELS</name> <init>= <expr><literal type="number">1280</literal> <operator>*</operator> <literal type="number">720</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Camera</name></type> <name>camera</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CameraInfo</name></type> <name>cameraInfo</name> <init>= <expr><operator>new</operator> <call><name>CameraInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Camera</name><operator>.</operator><name>Size</name></name></type> <name>cameraResolution</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Rect</name></type> <name>frame</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>RectF</name></type> <name>framePreview</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CameraManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>Rect</name></type> <name>getFrame</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>frame</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>RectF</name></type> <name>getFramePreview</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>framePreview</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getFacing</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>cameraInfo</name><operator>.</operator><name>facing</name></name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getOrientation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>cameraInfo</name><operator>.</operator><name>orientation</name></name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Camera</name></type> <name>open</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TextureView</name></type> <name>textureView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>displayOrientation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>cameraId</name> <init>= <expr><call><name>determineCameraId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Camera</name><operator>.</operator><name>getCameraInfo</name></name><argument_list>(<argument><expr><name>cameraId</name></expr></argument>, <argument><expr><name>cameraInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening camera id {}: {}-facing, camera orientation: {}, display orientation: {}"</literal></expr></argument>, <argument><expr><name>cameraId</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>cameraInfo</name><operator>.</operator><name>facing</name></name> <operator>==</operator> <name><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_BACK</name></name></expr> ?</condition><then> <expr><literal type="string">"back"</literal></expr> </then><else>: <expr><literal type="string">"front"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>cameraInfo</name><operator>.</operator><name>orientation</name></name></expr></argument>,
                <argument><expr><name>displayOrientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>camera</name> <operator>=</operator> <call><name><name>Camera</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>cameraId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>cameraInfo</name><operator>.</operator><name>facing</name></name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_FRONT</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setDisplayOrientation</name></name><argument_list>(<argument><expr><operator>(</operator><literal type="number">720</literal> <operator>-</operator> <name>displayOrientation</name> <operator>-</operator> <name><name>cameraInfo</name><operator>.</operator><name>orientation</name></name><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>cameraInfo</name><operator>.</operator><name>facing</name></name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_BACK</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setDisplayOrientation</name></name><argument_list>(<argument><expr><operator>(</operator><literal type="number">720</literal> <operator>-</operator> <name>displayOrientation</name> <operator>+</operator> <name><name>cameraInfo</name><operator>.</operator><name>orientation</name></name><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"facing: "</literal> <operator>+</operator> <name><name>cameraInfo</name><operator>.</operator><name>facing</name></name></expr></argument>)</argument_list></call></expr>;</throw></block></else></if>

        <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setPreviewTexture</name></name><argument_list>(<argument><expr><call><name><name>textureView</name><operator>.</operator><name>getSurfaceTexture</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Parameters</name></name></type> <name>parameters</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>cameraResolution</name> <operator>=</operator> <call><name>findBestPreviewSizeValue</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>, <argument><expr><call><name><name>textureView</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>textureView</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name> <init>= <expr><call><name><name>textureView</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name> <init>= <expr><call><name><name>textureView</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>rawSize</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>height</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>frameSize</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>MIN_FRAME_SIZE</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>MAX_FRAME_SIZE</name></expr></argument>, <argument><expr><name>rawSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>leftOffset</name> <init>= <expr><operator>(</operator><name>width</name> <operator>-</operator> <name>frameSize</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>topOffset</name> <init>= <expr><operator>(</operator><name>height</name> <operator>-</operator> <name>frameSize</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>new</operator> <call><name>Rect</name><argument_list>(<argument><expr><name>leftOffset</name></expr></argument>, <argument><expr><name>topOffset</name></expr></argument>, <argument><expr><name>leftOffset</name> <operator>+</operator> <name>frameSize</name></expr></argument>, <argument><expr><name>topOffset</name> <operator>+</operator> <name>frameSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>height</name></expr>)</condition><then> <block>{ <comment type="line">// landscape</comment>
            <expr_stmt><expr><name>framePreview</name> <operator>=</operator> <operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name><name>frame</name><operator>.</operator><name>left</name></name> <operator>*</operator> <name><name>cameraResolution</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name>width</name></expr></argument>,
                    <argument><expr><name><name>frame</name><operator>.</operator><name>top</name></name> <operator>*</operator> <name><name>cameraResolution</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name>height</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>right</name></name> <operator>*</operator> <name><name>cameraResolution</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name>width</name></expr></argument>,
                    <argument><expr><name><name>frame</name><operator>.</operator><name>bottom</name></name> <operator>*</operator> <name><name>cameraResolution</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{ <comment type="line">// portrait</comment>
            <expr_stmt><expr><name>framePreview</name> <operator>=</operator> <operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name><name>frame</name><operator>.</operator><name>top</name></name> <operator>*</operator> <name><name>cameraResolution</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name>height</name></expr></argument>,
                    <argument><expr><name><name>frame</name><operator>.</operator><name>left</name></name> <operator>*</operator> <name><name>cameraResolution</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name>width</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>bottom</name></name> <operator>*</operator> <name><name>cameraResolution</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name>height</name></expr></argument>,
                    <argument><expr><name><name>frame</name><operator>.</operator><name>right</name></name> <operator>*</operator> <name><name>cameraResolution</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>savedParameters</name> <init>= <expr><ternary><condition><expr><name>parameters</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>parameters</name><operator>.</operator><name>flatten</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name>setDesiredCameraParameters</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>cameraResolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RuntimeException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>savedParameters</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Parameters</name></name></type> <name>parameters2</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>parameters2</name><operator>.</operator><name>unflatten</name></name><argument_list>(<argument><expr><name>savedParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setParameters</name></name><argument_list>(<argument><expr><name>parameters2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setDesiredCameraParameters</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>cameraResolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RuntimeException</name></type> <name>x2</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem setting camera parameters"</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>startPreview</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>camera</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RuntimeException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"something went wrong while starting camera preview"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>x</name></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>determineCameraId</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>cameraCount</name> <init>= <expr><call><name><name>Camera</name><operator>.</operator><name>getNumberOfCameras</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>CameraInfo</name></type> <name>cameraInfo</name> <init>= <expr><operator>new</operator> <call><name>CameraInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// prefer back-facing camera</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cameraCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name><name>Camera</name><operator>.</operator><name>getCameraInfo</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>cameraInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>cameraInfo</name><operator>.</operator><name>facing</name></name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_BACK</name></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
        }</block></for>

        <comment type="line">// fall back to front-facing camera</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cameraCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name><name>Camera</name><operator>.</operator><name>getCameraInfo</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>cameraInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>cameraInfo</name><operator>.</operator><name>facing</name></name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_FRONT</name></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
        }</block></for>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>camera</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>stopPreview</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RuntimeException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"something went wrong while stopping camera preview"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name><name>Camera</name><operator>.</operator><name>Size</name></name></argument>&gt;</argument_list></name></type> <name>numPixelComparator</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name><name>Camera</name><operator>.</operator><name>Size</name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Size</name></name></type> <name>size1</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Size</name></name></type> <name>size2</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>pixels1</name> <init>= <expr><name><name>size1</name><operator>.</operator><name>height</name></name> <operator>*</operator> <name><name>size1</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>pixels2</name> <init>= <expr><name><name>size2</name><operator>.</operator><name>height</name></name> <operator>*</operator> <name><name>size2</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>pixels1</name> <operator>&lt;</operator> <name>pixels2</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
            <elseif>else <if>if <condition>(<expr><name>pixels1</name> <operator>&gt;</operator> <name>pixels2</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if></elseif>
            <else>else
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Camera</name><operator>.</operator><name>Size</name></name></type> <name>findBestPreviewSizeValue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Parameters</name></name></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>width</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>temp</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>screenAspectRatio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>width</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>height</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Camera</name><operator>.</operator><name>Size</name></name></argument>&gt;</argument_list></name></type> <name>rawSupportedSizes</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>getSupportedPreviewSizes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rawSupportedSizes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>parameters</name><operator>.</operator><name>getPreviewSize</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>

        <comment type="line">// sort by size, descending</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Camera</name><operator>.</operator><name>Size</name></name></argument>&gt;</argument_list></name></type> <name>supportedPreviewSizes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Camera</name><operator>.</operator><name>Size</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rawSupportedSizes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>supportedPreviewSizes</name></expr></argument>, <argument><expr><name>numPixelComparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Camera</name><operator>.</operator><name>Size</name></name></type> <name>bestSize</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>diff</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Size</name></name></type> <name>supportedPreviewSize</name> <range>: <expr><name>supportedPreviewSizes</name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>realWidth</name> <init>= <expr><name><name>supportedPreviewSize</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>realHeight</name> <init>= <expr><name><name>supportedPreviewSize</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>realPixels</name> <init>= <expr><name>realWidth</name> <operator>*</operator> <name>realHeight</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>realPixels</name> <argument_list type="generic">&lt; <argument><name>MIN_PREVIEW_PIXELS</name> <operator>||</operator> <name>realPixels</name></argument> &gt;</argument_list></name> <name>MAX_PREVIEW_PIXELS</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isCandidatePortrait</name> <init>= <expr><name>realWidth</name> <operator>&lt;</operator> <name>realHeight</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maybeFlippedWidth</name> <init>= <expr><ternary><condition><expr><name>isCandidatePortrait</name></expr> ?</condition><then> <expr><name>realHeight</name></expr> </then><else>: <expr><name>realWidth</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maybeFlippedHeight</name> <init>= <expr><ternary><condition><expr><name>isCandidatePortrait</name></expr> ?</condition><then> <expr><name>realWidth</name></expr> </then><else>: <expr><name>realHeight</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>maybeFlippedWidth</name> <operator>==</operator> <name>width</name> <operator>&amp;&amp;</operator> <name>maybeFlippedHeight</name> <operator>==</operator> <name>height</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>supportedPreviewSize</name></expr>;</return></block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>aspectRatio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>maybeFlippedWidth</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>maybeFlippedHeight</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>newDiff</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>aspectRatio</name> <operator>-</operator> <name>screenAspectRatio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>newDiff</name> <operator>&lt;</operator> <name>diff</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>bestSize</name> <operator>=</operator> <name>supportedPreviewSize</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>newDiff</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><name>bestSize</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>bestSize</name></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><call><name><name>parameters</name><operator>.</operator><name>getPreviewSize</name></name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"InlinedApi"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setDesiredCameraParameters</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Size</name></name></type> <name>cameraResolution</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Parameters</name></name></type> <name>parameters</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>parameters</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedFocusModes</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>getSupportedFocusModes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>focusMode</name> <init>= <expr><call><name>findValue</name><argument_list>(<argument><expr><name>supportedFocusModes</name></expr></argument>, <argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_CONTINUOUS_PICTURE</name></name></expr></argument>,
                <argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_CONTINUOUS_VIDEO</name></name></expr></argument>, <argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_AUTO</name></name></expr></argument>,
                <argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_MACRO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>focusMode</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>setFocusMode</name></name><argument_list>(<argument><expr><name>focusMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>setPreviewSize</name></name><argument_list>(<argument><expr><name><name>cameraResolution</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cameraResolution</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setParameters</name></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>requestPreviewFrame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PreviewCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setOneShotPreviewCallback</name></name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RuntimeException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"problem requesting preview frame, callback won't be called"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PlanarYUVLuminanceSource</name></type> <name>buildLuminanceSource</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>PlanarYUVLuminanceSource</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>cameraResolution</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cameraResolution</name><operator>.</operator><name>height</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>framePreview</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>framePreview</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>framePreview</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>framePreview</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTorch</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>enabled</name> <operator>!=</operator> <call><name>getTorchEnabled</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>setTorchEnabled</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getTorchEnabled</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Parameters</name></name></type> <name>parameters</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>parameters</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>flashMode</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFlashMode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>flashMode</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FLASH_MODE_ON</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>flashMode</name></expr></argument>)</argument_list></call>
                    <operator>||</operator> <call><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FLASH_MODE_TORCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>flashMode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        }</block></then></if>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setTorchEnabled</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>Parameters</name></name></type> <name>parameters</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedFlashModes</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>getSupportedFlashModes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>supportedFlashModes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>flashMode</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>enabled</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>flashMode</name> <operator>=</operator> <call><name>findValue</name><argument_list>(<argument><expr><name>supportedFlashModes</name></expr></argument>, <argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FLASH_MODE_TORCH</name></name></expr></argument>,
                        <argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FLASH_MODE_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>flashMode</name> <operator>=</operator> <call><name>findValue</name><argument_list>(<argument><expr><name>supportedFlashModes</name></expr></argument>, <argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FLASH_MODE_OFF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

            <if>if <condition>(<expr><name>flashMode</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>cancelAutoFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// autofocus can cause conflict</comment>

                <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>setFlashMode</name></name><argument_list>(<argument><expr><name>flashMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setParameters</name></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>findValue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name><modifier>...</modifier></type> <name>valuesToFind</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>valueToFind</name> <range>: <expr><name>valuesToFind</name></expr></range></decl></init>)</control>
            <block type="pseudo"><if>if <condition>(<expr><call><name><name>values</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>valueToFind</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>valueToFind</name></expr>;</return></block></then></if></block></for>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>scan</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>BinaryBitmap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>DecodeHintType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>PlanarYUVLuminanceSource</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>ReaderException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>Result</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>ResultPoint</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>ResultPointCallback</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>common</name><operator>.</operator><name>HybridBinarizer</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>qrcode</name><operator>.</operator><name>QRCodeReader</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>OnFirstPreDraw</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimatorListenerAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityOptions</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ActivityInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>RectF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>SurfaceTexture</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ColorDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name><operator>.</operator><name>CameraInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name><operator>.</operator><name>PreviewCallback</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>HandlerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Vibrator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Surface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>TextureView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>TextureView</name><operator>.</operator><name>SurfaceTextureListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewAnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AccelerateInterpolator</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>ScanActivity</name> <super><extends>extends <name>AbstractWalletActivity</name></extends>
        <implements>implements <name>SurfaceTextureListener</name>, <name><name>ActivityCompat</name><operator>.</operator><name>OnRequestPermissionsResultCallback</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INTENT_EXTRA_SCENE_TRANSITION_X</name> <init>= <expr><literal type="string">"scene_transition_x"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INTENT_EXTRA_SCENE_TRANSITION_Y</name> <init>= <expr><literal type="string">"scene_transition_y"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INTENT_EXTRA_RESULT</name> <init>= <expr><literal type="string">"result"</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startForResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>View</name></type> <name>clickView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>clickView</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>clickViewLocation</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>clickView</name><operator>.</operator><name>getLocationOnScreen</name></name><argument_list>(<argument><expr><name>clickViewLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>ScanActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ScanActivity</name><operator>.</operator><name>INTENT_EXTRA_SCENE_TRANSITION_X</name></name></expr></argument>,
                    <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name><name>clickViewLocation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name><name>clickView</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ScanActivity</name><operator>.</operator><name>INTENT_EXTRA_SCENE_TRANSITION_Y</name></name></expr></argument>,
                    <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name><name>clickViewLocation</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name><name>clickView</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>ActivityOptions</name></type> <name>options</name> <init>= <expr><call><name><name>ActivityOptions</name><operator>.</operator><name>makeSceneTransitionAnimation</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>clickView</name></expr></argument>,
                    <argument><expr><literal type="string">"transition"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>toBundle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>startForResult</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startForResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>ScanActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startForResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>fragment</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>ScanActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>VIBRATE_DURATION</name> <init>= <expr><literal type="number">50L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>AUTO_FOCUS_INTERVAL_MS</name> <init>= <expr><literal type="number">2500L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CameraManager</name></type> <name>cameraManager</name> <init>= <expr><operator>new</operator> <call><name>CameraManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>contentView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ScannerView</name></type> <name>scannerView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextureView</name></type> <name>previewView</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>volatile</specifier> <name>boolean</name></type> <name>surfaceCreated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Animator</name></type> <name>sceneTransition</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Vibrator</name></type> <name>vibrator</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>HandlerThread</name></type> <name>cameraThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>volatile</specifier> <name>Handler</name></type> <name>cameraHandler</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ScanViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ScanActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>vibrator</name> <operator>=</operator> <operator>(</operator><name>Vibrator</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>VIBRATOR_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>ScanViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showPermissionWarnDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>WarnDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>scan_camera_permission_dialog_title</name></name></expr></argument>,
                        <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>scan_camera_permission_dialog_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showProblemWarnDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>WarnDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>scan_camera_problem_dialog_title</name></name></expr></argument>,
                        <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>scan_camera_problem_dialog_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Stick to the orientation the activity was started with. We cannot declare this in the</comment>
        <comment type="line">// AndroidManifest.xml, because it's not allowed in combination with the windowIsTranslucent=true</comment>
        <comment type="line">// theme attribute.</comment>
        <expr_stmt><expr><call><name>setRequestedOrientation</name><argument_list>(<argument><expr><name><name>ActivityInfo</name><operator>.</operator><name>SCREEN_ORIENTATION_LOCKED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Draw under navigation and status bars.</comment>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFlags</name><argument_list>(<argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_LAYOUT_NO_LIMITS</name></name></expr></argument>,
                    <argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_LAYOUT_NO_LIMITS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>scan_activity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>contentView</name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>scannerView</name> <operator>=</operator> <operator>(</operator><name>ScannerView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scan_activity_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>previewView</name> <operator>=</operator> <operator>(</operator><name>TextureView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scan_activity_preview</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>previewView</name><operator>.</operator><name>setSurfaceTextureListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>cameraThread</name> <operator>=</operator> <operator>new</operator> <call><name>HandlerThread</name><argument_list>(<argument><expr><literal type="string">"cameraThread"</literal></expr></argument>, <argument><expr><name><name>Process</name><operator>.</operator><name>THREAD_PRIORITY_BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cameraThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cameraHandler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>cameraThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>CAMERA</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"missing {}, requesting"</literal></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>CAMERA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ActivityCompat</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>CAMERA</name></name></expr> }</block></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_SCENE_TRANSITION_X</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>y</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_SCENE_TRANSITION_Y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>x</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>y</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <comment type="line">// Using alpha rather than visibility because 'invisible' will cause the surface view to never</comment>
                <comment type="line">// start up, so the animation will never start.</comment>
                <expr_stmt><expr><call><name><name>contentView</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>setBackgroundDrawable</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColorDrawable</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>transparent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>OnFirstPreDraw</name><operator>.</operator><name>listen</name></name><argument_list>(<argument><expr><name>contentView</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>OnFirstPreDraw</name><operator>.</operator><name>Callback</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>boolean</name></type> <name>onFirstPreDraw</name><parameter_list>()</parameter_list> <block>{
                        <decl_stmt><decl><type><name>float</name></type> <name>finalRadius</name> <init>= <expr><call>(<name>float</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>contentView</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>contentView</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>duration</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>config_mediumAnimTime</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>sceneTransition</name> <operator>=</operator> <call><name><name>ViewAnimationUtils</name><operator>.</operator><name>createCircularReveal</name></name><argument_list>(<argument><expr><name>contentView</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>finalRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>sceneTransition</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>sceneTransition</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AccelerateInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// TODO Here, the transition should start in a paused state, showing the first frame</comment>
                        <comment type="line">// of the animation. Sadly, RevealAnimator doesn't seem to support this, unlike</comment>
                        <comment type="line">// (subclasses of) ValueAnimator.</comment>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeTriggerSceneTransition</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>sceneTransition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>contentView</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sceneTransition</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AnimatorListenerAdapter</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>Animator</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>setBackgroundDrawable</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColorDrawable</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>black</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sceneTransition</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sceneTransition</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>maybeOpenCamera</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cameraHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>closeRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// cancel background thread</comment>
        <expr_stmt><expr><call><name><name>cameraHandler</name><operator>.</operator><name>removeCallbacksAndMessages</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cameraThread</name><operator>.</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>previewView</name><operator>.</operator><name>setSurfaceTextureListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// We're removing the requested orientation because if we don't, somehow the requested orientation is</comment>
        <comment type="line">// bleeding through to the calling activity, forcing it into a locked state until it is restarted.</comment>
        <expr_stmt><expr><call><name>setRequestedOrientation</name><argument_list>(<argument><expr><name><name>ActivityInfo</name><operator>.</operator><name>SCREEN_ORIENTATION_UNSPECIFIED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>grantResults</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>grantResults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>maybeOpenCamera</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"missing {}, showing error"</literal></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>CAMERA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showPermissionWarnDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>simple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeOpenCamera</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>surfaceCreated</name> <operator>&amp;&amp;</operator> <call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>CAMERA</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>cameraHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>openRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSurfaceTextureAvailable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SurfaceTexture</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>surfaceCreated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeOpenCamera</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onSurfaceTextureDestroyed</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SurfaceTexture</name></type> <name>surface</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>surfaceCreated</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSurfaceTextureSizeChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SurfaceTexture</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSurfaceTextureUpdated</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SurfaceTexture</name></type> <name>surface</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttachedToWindow</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setShowWhenLocked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>scannerView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_CANCELED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onKeyDown</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>keyCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>KeyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>keyCode</name></expr>)</condition> <block>{
        <case>case <expr><name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_FOCUS</name></name></expr>:</case>
        <case>case <expr><name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_CAMERA</name></name></expr>:</case>
            <comment type="line">// don't launch camera app</comment>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_VOLUME_DOWN</name></name></expr>:</case>
        <case>case <expr><name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_VOLUME_UP</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>cameraHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>cameraManager</name><operator>.</operator><name>setTorch</name></name><argument_list>(<argument><expr><name>keyCode</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_VOLUME_UP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onKeyDown</name></name><argument_list>(<argument><expr><name>keyCode</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>handleResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Result</name></type> <name>scanResult</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>vibrator</name><operator>.</operator><name>vibrate</name></name><argument_list>(<argument><expr><name>VIBRATE_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>scannerView</name><operator>.</operator><name>setIsResult</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_RESULT</name></expr></argument>, <argument><expr><call><name><name>scanResult</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>postFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>postFinish</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>postDelayed</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Runnable</name></type> <name>openRunnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Camera</name></type> <name>camera</name> <init>= <expr><call><name><name>cameraManager</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>previewView</name></expr></argument>, <argument><expr><call><name>displayRotation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>Rect</name></type> <name>framingRect</name> <init>= <expr><call><name><name>cameraManager</name><operator>.</operator><name>getFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>RectF</name></type> <name>framingRectInPreview</name> <init>= <expr><operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><call><name><name>cameraManager</name><operator>.</operator><name>getFramePreview</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>framingRectInPreview</name><operator>.</operator><name>offsetTo</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>cameraFlip</name> <init>= <expr><call><name><name>cameraManager</name><operator>.</operator><name>getFacing</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_FRONT</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>cameraRotation</name> <init>= <expr><call><name><name>cameraManager</name><operator>.</operator><name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>runOnUiThread</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>scannerView</name><operator>.</operator><name>setFraming</name></name><argument_list>(<argument><expr><name>framingRect</name></expr></argument>, <argument><expr><name>framingRectInPreview</name></expr></argument>, <argument><expr><call><name>displayRotation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cameraRotation</name></expr></argument>,
                                <argument><expr><name>cameraFlip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>focusMode</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFocusMode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>nonContinuousAutoFocus</name> <init>= <expr><call><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_AUTO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>focusMode</name></expr></argument>)</argument_list></call>
                        <operator>||</operator> <call><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_MACRO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>focusMode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>nonContinuousAutoFocus</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>cameraHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AutoFocusRunnable</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

                <expr_stmt><expr><call><name>maybeTriggerSceneTransition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cameraHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>fetchAndDecodeRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem opening camera"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showProblemWarnDialog</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>simple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><specifier>private</specifier> <type><name>int</name></type> <name>displayRotation</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>rotation</name> <init>= <expr><call><name>getWindowManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRotation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>rotation</name> <operator>==</operator> <name><name>Surface</name><operator>.</operator><name>ROTATION_0</name></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
            <elseif>else <if>if <condition>(<expr><name>rotation</name> <operator>==</operator> <name><name>Surface</name><operator>.</operator><name>ROTATION_90</name></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="number">90</literal></expr>;</return></block></then></if></elseif>
            <elseif>else <if>if <condition>(<expr><name>rotation</name> <operator>==</operator> <name><name>Surface</name><operator>.</operator><name>ROTATION_180</name></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="number">180</literal></expr>;</return></block></then></if></elseif>
            <elseif>else <if>if <condition>(<expr><name>rotation</name> <operator>==</operator> <name><name>Surface</name><operator>.</operator><name>ROTATION_270</name></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="number">270</literal></expr>;</return></block></then></if></elseif>
            <else>else
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"rotation: "</literal> <operator>+</operator> <name>rotation</name></expr></argument>)</argument_list></call></expr>;</throw></block></else></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Runnable</name></type> <name>closeRunnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>cameraHandler</name><operator>.</operator><name>removeCallbacksAndMessages</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cameraManager</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>final</specifier> class <name>AutoFocusRunnable</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Camera</name></type> <name>camera</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>AutoFocusRunnable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>camera</name></name> <operator>=</operator> <name>camera</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>autoFocus</name></name><argument_list>(<argument><expr><name>autoFocusCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem with auto-focus, will not schedule again"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Camera</name><operator>.</operator><name>AutoFocusCallback</name></name></type> <name>autoFocusCallback</name> <init>= <expr><operator>new</operator> <class><super><name><name>Camera</name><operator>.</operator><name>AutoFocusCallback</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAutoFocus</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>success</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// schedule again</comment>
                <expr_stmt><expr><call><name><name>cameraHandler</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><name><name>AutoFocusRunnable</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>AUTO_FOCUS_INTERVAL_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Runnable</name></type> <name>fetchAndDecodeRunnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>QRCodeReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>QRCodeReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>DecodeHintType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>hints</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>DecodeHintType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>DecodeHintType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>cameraManager</name><operator>.</operator><name>requestPreviewFrame</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>PreviewCallback</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onPreviewFrame</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>decode</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>PlanarYUVLuminanceSource</name></type> <name>source</name> <init>= <expr><call><name><name>cameraManager</name><operator>.</operator><name>buildLuminanceSource</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>BinaryBitmap</name></type> <name>bitmap</name> <init>= <expr><operator>new</operator> <call><name>BinaryBitmap</name><argument_list>(<argument><expr><operator>new</operator> <call><name>HybridBinarizer</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try <block>{
                <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>DecodeHintType</name><operator>.</operator><name>NEED_RESULT_POINT_CALLBACK</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ResultPointCallback</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>foundPossibleResultPoint</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ResultPoint</name></type> <name>dot</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>runOnUiThread</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                            <function><annotation>@<name>Override</name></annotation>
                            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                                <expr_stmt><expr><call><name><name>scannerView</name><operator>.</operator><name>addDot</name></name><argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></function>
                        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Result</name></type> <name>scanResult</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>runOnUiThread</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><call><name>handleResult</name><argument_list>(<argument><expr><name>scanResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ReaderException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// retry</comment>
                <expr_stmt><expr><call><name><name>cameraHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>fetchAndDecodeRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WarnDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>WarnDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>titleResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>WarnDialogFragment</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>WarnDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>titleResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>args</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>args</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>scan</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>Event</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModel</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ScanViewModel</name> <super><extends>extends <name>ViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showPermissionWarnDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showProblemWarnDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>scan</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>ResultPoint</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Matrix</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Matrix</name><operator>.</operator><name>ScaleToFit</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>RectF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ScannerView</name> <super><extends>extends <name>View</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>LASER_ANIMATION_DELAY_MS</name> <init>= <expr><literal type="number">100l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DOT_OPACITY</name> <init>= <expr><literal type="number">0xa0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DOT_TTL_MS</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>maskPaint</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>laserPaint</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>dotPaint</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isResult</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>maskColor</name></decl>, <decl><type ref="prev"/><name>maskResultColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>laserColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>dotColor</name></decl>, <decl><type ref="prev"/><name>dotResultColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>float</name><index>[]</index></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>dots</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>float</name><index>[]</index></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Rect</name></type> <name>frame</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Matrix</name></type> <name>matrix</name> <init>= <expr><operator>new</operator> <call><name>Matrix</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ScannerView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Resources</name></type> <name>res</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>maskColor</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>scan_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maskResultColor</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>scan_result_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>laserColor</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>scan_laser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dotColor</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>scan_dot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dotResultColor</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>scan_result_dots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>maskPaint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>maskPaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>laserPaint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>laserPaint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>scan_laser_width</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>laserPaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>dotPaint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dotPaint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>DOT_OPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dotPaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dotPaint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>getDimension</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>scan_dot_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dotPaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setFraming</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Rect</name></type> <name>frame</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>RectF</name></type> <name>framePreview</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>displayRotation</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>cameraRotation</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>cameraFlip</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>setRectToRect</name></name><argument_list>(<argument><expr><name>framePreview</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ScaleToFit</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>postRotate</name></name><argument_list>(<argument><expr><operator>-</operator><name>displayRotation</name></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>exactCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>exactCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>postScale</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>cameraFlip</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>exactCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>exactCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>postRotate</name></name><argument_list>(<argument><expr><name>cameraRotation</name></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>exactCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>exactCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setIsResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isResult</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isResult</name></name> <operator>=</operator> <name>isResult</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addDot</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ResultPoint</name></type> <name>dot</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dots</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><call><name><name>dot</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>dot</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr> }</block></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>frame</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name> <init>= <expr><call><name><name>canvas</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name> <init>= <expr><call><name><name>canvas</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>point</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw mask darkened</comment>
        <expr_stmt><expr><call><name><name>maskPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isResult</name></expr> ?</condition><then> <expr><name>maskResultColor</name></expr> </then><else>: <expr><name>maskColor</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>maskPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>maskPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name><name>frame</name><operator>.</operator><name>right</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>maskPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>maskPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>isResult</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>laserPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>dotResultColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>laserPaint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>dotPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>dotResultColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>laserPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>laserColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>laserPhase</name> <init>= <expr><operator>(</operator><name>now</name> <operator>/</operator> <literal type="number">600</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>laserPaint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>laserPhase</name></expr> ?</condition><then> <expr><literal type="number">160</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>dotPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>dotColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// schedule redraw</comment>
            <expr_stmt><expr><call><name>postInvalidateDelayed</name><argument_list>(<argument><expr><name>LASER_ANIMATION_DELAY_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>laserPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw points</comment>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>float</name><index>[]</index></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>i</name> <init>= <expr><call><name><name>dots</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>float</name><index>[]</index></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>age</name> <init>= <expr><name>now</name> <operator>-</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>age</name> <operator>&lt;</operator> <name>DOT_TTL_MS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>dotPaint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><operator>(</operator><name>DOT_TTL_MS</name> <operator>-</operator> <name>age</name><operator>)</operator> <operator>*</operator> <literal type="number">256</literal> <operator>/</operator> <name>DOT_TTL_MS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>mapPoints</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPoint</name></name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dotPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ECKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BIP38PrivateKey</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DecodePrivateKeyTask</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>callbackHandler</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DecodePrivateKeyTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backgroundHandler</name></name> <operator>=</operator> <name>backgroundHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callbackHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>decodePrivateKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BIP38PrivateKey</name></type> <name>encryptedKey</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>ECKey</name></type> <name>decryptedKey</name> <init>= <expr><call><name><name>encryptedKey</name><operator>.</operator><name>decrypt</name></name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// takes time</comment>

                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name>onSuccess</name><argument_list>(<argument><expr><name>decryptedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>BIP38PrivateKey</name><operator>.</operator><name>BadPassphraseException</name></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name>onBadPassphrase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>ECKey</name></type> <name>decryptedKey</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onBadPassphrase</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>
<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkState</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyCrypter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyCrypterException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyCrypterScrypt</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>params</name><operator>.</operator><name>KeyParameter</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DeriveKeyTask</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>callbackHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>scryptIterationsTarget</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DeriveKeyTask</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DeriveKeyTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>scryptIterationsTarget</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backgroundHandler</name></name> <operator>=</operator> <name>backgroundHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callbackHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scryptIterationsTarget</name></name> <operator>=</operator> <name>scryptIterationsTarget</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>deriveKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkState</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>KeyCrypter</name></type> <name>keyCrypter</name> <init>= <expr><call><name>checkNotNull</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>getKeyCrypter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Key derivation takes time.</comment>
                <decl_stmt><decl><type><name>KeyParameter</name></type> <name>key</name> <init>= <expr><call><name><name>keyCrypter</name><operator>.</operator><name>deriveKey</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>wasChanged</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

                <comment type="line">// If the key isn't derived using the desired parameters, derive a new key.</comment>
                <if>if <condition>(<expr><name>keyCrypter</name> <operator>instanceof</operator> <name>KeyCrypterScrypt</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>scryptIterations</name> <init>= <expr><operator>(</operator><operator>(</operator><name>KeyCrypterScrypt</name><operator>)</operator> <name>keyCrypter</name><operator>)</operator><operator>.</operator><call><name>getScryptParameters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getN</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><name>scryptIterations</name> <operator>!=</operator> <name>scryptIterationsTarget</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"upgrading scrypt iterations from {} to {}; re-encrypting wallet"</literal></expr></argument>, <argument><expr><name>scryptIterations</name></expr></argument>,
                                <argument><expr><name>scryptIterationsTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><specifier>final</specifier> <name>KeyCrypterScrypt</name></type> <name>newKeyCrypter</name> <init>= <expr><operator>new</operator> <call><name>KeyCrypterScrypt</name><argument_list>(<argument><expr><name>scryptIterationsTarget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>newKey</name> <init>= <expr><call><name><name>newKeyCrypter</name><operator>.</operator><name>deriveKey</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Re-encrypt wallet with new key.</comment>
                        <try>try <block>{
                            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>changeEncryptionKey</name></name><argument_list>(<argument><expr><name>newKeyCrypter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>newKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>key</name> <operator>=</operator> <name>newKey</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>wasChanged</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"scrypt upgrade succeeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyCrypterException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"scrypt upgrade failed: {}"</literal></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></then></if>
                }</block></then></if>

                <comment type="line">// Hand back the (possibly changed) encryption key.</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>keyToReturn</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>keyToReturnWasChanged</name> <init>= <expr><name>wasChanged</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><call><name>onSuccess</name><argument_list>(<argument><expr><name>keyToReturn</name></expr></argument>, <argument><expr><name>keyToReturnWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>KeyParameter</name></type> <name>encryptionKey</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>changed</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>

<comment type="block">/*
 * Copyright 2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<enum><specifier>public</specifier> enum <name>FeeCategory</name> <block>{
    <comment type="block" format="javadoc">/**
     * We don't care when it confirms, but it should confirm at some time. Can be days or weeks.
     */</comment>
    <decl><name>ECONOMIC</name></decl>,

    <comment type="block" format="javadoc">/**
     * Under normal network conditions, confirms within the next 15 minutes. Can take longer, but this should
     * be an exception. And it should not take days or weeks.
     */</comment>
    <decl><name>NORMAL</name></decl>,

    <comment type="block" format="javadoc">/**
     * Confirms within the next 15 minutes.
     */</comment>
    <decl><name>PRIORITY</name></decl>;
}</block></enum>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyCrypterException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>DeterministicUpgradeRequiresPassword</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>params</name><operator>.</operator><name>KeyParameter</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnShowListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>HandlerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>MaintenanceDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>MaintenanceDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Fragment</name></type> <name>fragment</name> <init>= <expr><call><name><name>fm</name><operator>.</operator><name>findFragmentByTag</name></name><argument_list>(<argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fragment</name> <operator>=</operator> <operator>new</operator> <call><name>MaintenanceDialogFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fm</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Wallet</name></type> <name>wallet</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>passwordGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>passwordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>badPasswordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>positiveButton</name></decl>, <decl><type ref="prev"/><name>negativeButton</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>HandlerThread</name></type> <name>backgroundThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>

    <enum><specifier>private</specifier> enum <name>State</name> <block>{
        <decl><name>INPUT</name></decl>, <decl><name>DECRYPTING</name></decl>, <decl><name>DONE</name></decl>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><name>State</name></type> <name>state</name> <init>= <expr><name><name>State</name><operator>.</operator><name>INPUT</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>MaintenanceDialogFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backgroundThread</name> <operator>=</operator> <operator>new</operator> <call><name>HandlerThread</name><argument_list>(<argument><expr><literal type="string">"backgroundThread"</literal></expr></argument>, <argument><expr><name><name>Process</name><operator>.</operator><name>THREAD_PRIORITY_BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backgroundHandler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>maintenance_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Coin</name></type> <name>value</name> <init>= <expr><name><name>Coin</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Coin</name></type> <name>fee</name> <init>= <expr><name><name>Coin</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <range>: <expr><call><name>determineMaintenanceTransactions</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>getValueSentFromMe</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fee</name> <operator>=</operator> <call><name><name>fee</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>getFee</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>messageView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>maintenance_dialog_message</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maintenance_dialog_message</name></name></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>fee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>passwordGroup</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>maintenance_dialog_password_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>passwordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>maintenance_dialog_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>badPasswordView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>maintenance_dialog_bad_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maintenance_dialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// dummies, just to make buttons show</comment>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maintenance_dialog_button_move</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setCanceledOnTouchOutside</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOnShowListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnShowListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onShow</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name>positiveButton</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>negativeButton</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_NEGATIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"user decided to do maintenance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>handleGo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"user decided to dismiss"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>dismissAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>MaintenanceDialogFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <name>dialog</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"showing maintenance dialog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDismiss</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>wipePasswords</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDismiss</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleGo</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>DECRYPTING</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>new</operator> <class><super><name>DeriveKeyTask</name></super><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>scryptIterationsTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>encryptionKey</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>wasChanged</name></decl></parameter>)</parameter_list> <block>{
                    <if>if <condition>(<expr><name>wasChanged</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>WalletUtils</name><operator>.</operator><name>autoBackupWallet</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name>doMaintenance</name><argument_list>(<argument><expr><name>encryptionKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class><operator>.</operator><call><name>deriveKey</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>doMaintenance</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>doMaintenance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>encryptionKey</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <try>try <block>{
                    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>doMaintenance</name></name><argument_list>(<argument><expr><name>encryptionKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>DONE</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name>delayedDismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyCrypterException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>badPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"bad spending password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>delayedDismiss</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>wipePasswords</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>dialog</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>needsPassword</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>passwordGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>needsPassword</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maintenance_dialog_button_move</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><operator>!</operator><name>needsPassword</name> <operator>||</operator> <call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>DECRYPTING</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maintenance_dialog_state_decrypting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>DONE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maintenance_dialog_state_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>determineMaintenanceTransactions</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>doMaintenance</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DeterministicUpgradeRequiresPassword</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextWatcher</name></type> <name>textWatcher</name> <init>= <expr><operator>new</operator> <class><super><name>TextWatcher</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>badPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyCrypterException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>KeyChain</name><operator>.</operator><name>KeyPurpose</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>SendRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>params</name><operator>.</operator><name>KeyParameter</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnShowListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>HandlerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>RaiseFeeDialogFragment</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FRAGMENT_TAG</name> <init>= <expr><call><name><name>RaiseFeeDialogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TRANSACTION</name> <init>= <expr><literal type="string">"transaction"</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FragmentManager</name></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>newFragment</name> <init>= <expr><call><name>instance</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>FRAGMENT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>RaiseFeeDialogFragment</name></type> <name>instance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>RaiseFeeDialogFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>RaiseFeeDialogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name>KEY_TRANSACTION</name></expr></argument>, <argument><expr><call><name><name>tx</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>fragment</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Wallet</name></type> <name>wallet</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Coin</name></type> <name>feeRaise</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Transaction</name></type> <name>transaction</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>messageView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>passwordGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>passwordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>badPasswordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>positiveButton</name></decl>, <decl><type ref="prev"/><name>negativeButton</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>RaiseFeeViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>HandlerThread</name></type> <name>backgroundThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>

    <enum><specifier>private</specifier> enum <name>State</name> <block>{
        <decl><name>INPUT</name></decl>, <decl><name>DECRYPTING</name></decl>, <decl><name>DONE</name></decl>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><name>State</name></type> <name>state</name> <init>= <expr><name><name>State</name><operator>.</operator><name>INPUT</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RaiseFeeDialogFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening dialog {}"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>RaiseFeeViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getDynamicFees</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>dynamicFees</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// We basically have to pay fee for two transactions:</comment>
                <comment type="line">// The transaction to raise the fee of and the CPFP transaction we're about to create.</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> <init>= <expr><call><name><name>transaction</name><operator>.</operator><name>getMessageSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">192</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>feeRaise</name> <operator>=</operator> <call><name><name>dynamicFees</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>FeeCategory</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>divide</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>args</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>txHash</name> <init>= <expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name>KEY_TRANSACTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>transaction</name> <operator>=</operator> <call><name>checkNotNull</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>getTransaction</name></name><argument_list>(<argument><expr><call><name><name>Sha256Hash</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>txHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backgroundThread</name> <operator>=</operator> <operator>new</operator> <call><name>HandlerThread</name><argument_list>(<argument><expr><literal type="string">"backgroundThread"</literal></expr></argument>, <argument><expr><name><name>Process</name><operator>.</operator><name>THREAD_PRIORITY_BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backgroundHandler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>raise_fee_dialog</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>messageView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>raise_fee_dialog_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>passwordGroup</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>raise_fee_dialog_password_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>passwordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>raise_fee_dialog_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>badPasswordView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>raise_fee_dialog_bad_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>DialogBuilder</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>raise_fee_dialog_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// dummies, just to make buttons show</comment>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>raise_fee_dialog_button_raise</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setCanceledOnTouchOutside</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOnShowListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnShowListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onShow</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name>positiveButton</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>negativeButton</name> <operator>=</operator> <call><name><name>dialog</name><operator>.</operator><name>getButton</name></name><argument_list>(<argument><expr><name><name>DialogInterface</name><operator>.</operator><name>BUTTON_NEGATIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>handleGo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>dismissAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>RaiseFeeDialogFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <name>dialog</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"showing raise fee dialog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDismiss</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>wipePasswords</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDismiss</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleGo</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>DECRYPTING</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>new</operator> <class><super><name>DeriveKeyTask</name></super><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>scryptIterationsTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>encryptionKey</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>wasChanged</name></decl></parameter>)</parameter_list> <block>{
                    <if>if <condition>(<expr><name>wasChanged</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>WalletUtils</name><operator>.</operator><name>autoBackupWallet</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name>doRaiseFee</name><argument_list>(<argument><expr><name>encryptionKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class><operator>.</operator><call><name>deriveKey</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>doRaiseFee</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>doRaiseFee</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>encryptionKey</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// construct child-pays-for-parent</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionOutput</name></type> <name>outputToSpend</name> <init>= <expr><call><name>checkNotNull</name><argument_list>(<argument><expr><call><name>findSpendableOutput</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>, <argument><expr><name>feeRaise</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transactionToSend</name> <init>= <expr><operator>new</operator> <call><name>Transaction</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>transactionToSend</name><operator>.</operator><name>addInput</name></name><argument_list>(<argument><expr><name>outputToSpend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>transactionToSend</name><operator>.</operator><name>addOutput</name></name><argument_list>(<argument><expr><call><name><name>outputToSpend</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>subtract</name><argument_list>(<argument><expr><name>feeRaise</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>wallet</name><operator>.</operator><name>freshAddress</name></name><argument_list>(<argument><expr><name><name>KeyPurpose</name><operator>.</operator><name>CHANGE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>transactionToSend</name><operator>.</operator><name>setPurpose</name></name><argument_list>(<argument><expr><name><name>Transaction</name><operator>.</operator><name>Purpose</name><operator>.</operator><name>RAISE_FEE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>SendRequest</name></type> <name>sendRequest</name> <init>= <expr><call><name><name>SendRequest</name><operator>.</operator><name>forTx</name></name><argument_list>(<argument><expr><name>transactionToSend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>aesKey</name></name> <operator>=</operator> <name>encryptionKey</name></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>signTransaction</name></name><argument_list>(<argument><expr><name>sendRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"raise fee: cpfp {}"</literal></expr></argument>, <argument><expr><name>transactionToSend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>commitTx</name></name><argument_list>(<argument><expr><name>transactionToSend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>broadcastTransaction</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>transactionToSend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>DONE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyCrypterException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>badPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"raise fee: bad spending password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>wipePasswords</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>dialog</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>needsPassword</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>feeRaise</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>raise_fee_dialog_determining_fee</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>passwordGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name>findSpendableOutput</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>, <argument><expr><name>feeRaise</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>raise_fee_dialog_cant_raise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>passwordGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>raise_fee_dialog_message</name></name></expr></argument>, <argument><expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>feeRaise</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>passwordGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>needsPassword</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>INPUT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>raise_fee_dialog_button_raise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>needsPassword</name> <operator>||</operator> <call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
                    <operator>&amp;&amp;</operator> <name>feeRaise</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>findSpendableOutput</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>, <argument><expr><name>feeRaise</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>DECRYPTING</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>raise_fee_dialog_state_decrypting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>DONE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>raise_fee_dialog_state_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>negativeButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextWatcher</name></type> <name>textWatcher</name> <init>= <expr><operator>new</operator> <class><super><name>TextWatcher</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>badPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>feeCanLikelyBeRaised</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>transaction</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDepthInBlocks</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <if>if <condition>(<expr><call><name><name>WalletUtils</name><operator>.</operator><name>isPayToManyTransaction</name></name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <comment type="line">// We don't know dynamic fees here, so we need to guess.</comment>
        <if>if <condition>(<expr><call><name>findSpendableOutput</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>, <argument><expr><name><name>Transaction</name><operator>.</operator><name>DEFAULT_TX_FEE</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>TransactionOutput</name></type> <name>findSpendableOutput</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>minimumOutputValue</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>TransactionOutput</name></type> <name>output</name> <range>: <expr><call><name><name>transaction</name><operator>.</operator><name>getOutputs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>output</name><operator>.</operator><name>isMine</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>output</name><operator>.</operator><name>isAvailableForSpending</name></name><argument_list>()</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>output</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isGreaterThan</name><argument_list>(<argument><expr><name>minimumOutputValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>output</name></expr>;</return></block></then></if>
        }</block></for>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>DynamicFeeLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>RaiseFeeViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>DynamicFeeLiveData</name></type> <name>dynamicFees</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RaiseFeeViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>DynamicFeeLiveData</name></type> <name>getDynamicFees</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>dynamicFees</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>dynamicFees</name> <operator>=</operator> <operator>new</operator> <call><name>DynamicFeeLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>dynamicFees</name></expr>;</return>
    }</block></function>
}</block></class>
<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>InputParser</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Bluetooth</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothDevice</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothSocket</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>CacheControl</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Call</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Response</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>RequestPaymentRequestTask</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>callbackHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RequestPaymentRequestTask</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <interface><specifier>public</specifier> interface <name>ResultCallback</name> <block>{
        <function_decl><type><name>void</name></type> <name>onPaymentIntent</name><parameter_list>(<parameter><decl><type><name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onFail</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <constructor><specifier>public</specifier> <name>RequestPaymentRequestTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backgroundHandler</name></name> <operator>=</operator> <name>backgroundHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callbackHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resultCallback</name></name> <operator>=</operator> <name>resultCallback</name></expr>;</expr_stmt>
    }</block></constructor>

    <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>HttpRequestTask</name> <super><extends>extends <name>RequestPaymentRequestTask</name></extends></super> <block>{
        <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
        <specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>userAgent</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>HttpRequestTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl></parameter>,
                <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>userAgent</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><name>resultCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userAgent</name></name> <operator>=</operator> <name>userAgent</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>requestPaymentRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"trying to request payment request from {}"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Request</name><operator>.</operator><name>Builder</name></name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>url</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>cacheControl</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>CacheControl</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>noCache</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"Accept"</literal></expr></argument>, <argument><expr><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENTREQUEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"User-Agent"</literal></expr></argument>, <argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>Call</name></type> <name>call</name> <init>= <expr><call><name><name>Constants</name><operator>.</operator><name>HTTP_CLIENT</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <try>try <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Response</name></type> <name>response</name> <init>= <expr><call><name><name>call</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>response</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>contentType</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>header</name></name><argument_list>(<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>byteStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><operator>new</operator> <class><super><name><name>InputParser</name><operator>.</operator><name>StreamInputParser</name></name></super><argument_list>(<argument><expr><name>contentType</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list> <block>{
                                <function><annotation>@<name>Override</name></annotation>
                                <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"received {} via http"</literal></expr></argument>, <argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt><expr><call><name>onPaymentIntent</name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></function>

                                <function><annotation>@<name>Override</name></annotation>
                                <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                                    <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></function>
                            }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>responseCode</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>code</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>responseMessage</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>message</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got http error {}: {}"</literal></expr></argument>, <argument><expr><name>responseCode</name></expr></argument>, <argument><expr><name>responseMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_http</name></name></expr></argument>, <argument><expr><name>responseCode</name></expr></argument>, <argument><expr><name>responseMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem sending"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_io</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>BluetoothRequestTask</name> <super><extends>extends <name>RequestPaymentRequestTask</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>BluetoothRequestTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><name>resultCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothAdapter</name></name> <operator>=</operator> <name>bluetoothAdapter</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>requestPaymentRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"trying to request payment request from {}"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>BluetoothDevice</name></type> <name>device</name> <init>= <expr><call><name><name>bluetoothAdapter</name>
                            <operator>.</operator><name>getRemoteDevice</name></name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>decompressMac</name></name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>getBluetoothMac</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <try>try <init>(<decl><type><specifier>final</specifier> <name>BluetoothSocket</name></type> <name>socket</name> <init>= <expr><call><name><name>device</name>
                            <operator>.</operator><name>createInsecureRfcommSocketToServiceRecord</name></name><argument_list>(<argument><expr><name><name>Bluetooth</name><operator>.</operator><name>PAYMENT_REQUESTS_UUID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;
                            <expr><name>final</name> <name>OutputStream</name> <name>os</name> <operator>=</operator> <call><name><name>socket</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr>;
                            <expr><name>final</name> <name>InputStream</name> <name>is</name> <operator>=</operator> <call><name><name>socket</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr>)</init> <block>{
                        <expr_stmt><expr><call><name><name>socket</name><operator>.</operator><name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"connected to {}"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><specifier>final</specifier> <name>CodedInputStream</name></type> <name>cis</name> <init>= <expr><call><name><name>CodedInputStream</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>CodedOutputStream</name></type> <name>cos</name> <init>= <expr><call><name><name>CodedOutputStream</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name><name>cos</name><operator>.</operator><name>writeInt32NoTag</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>cos</name><operator>.</operator><name>writeStringNoTag</name></name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>getBluetoothQuery</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>cos</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>responseCode</name> <init>= <expr><call><name><name>cis</name><operator>.</operator><name>readInt32</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if>if <condition>(<expr><name>responseCode</name> <operator>==</operator> <literal type="number">200</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><operator>new</operator> <class><super><name><name>InputParser</name><operator>.</operator><name>BinaryInputParser</name></name></super><argument_list>(<argument><expr><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENTREQUEST</name></name></expr></argument>,
                                    <argument><expr><call><name><name>cis</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
                                <function><annotation>@<name>Override</name></annotation>
                                <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"received {} via bluetooth"</literal></expr></argument>, <argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt><expr><call><name>onPaymentIntent</name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></function>

                                <function><annotation>@<name>Override</name></annotation>
                                <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                                    <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></function>
                            }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got bluetooth error {}"</literal></expr></argument>, <argument><expr><name>responseCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_bluetooth</name></name></expr></argument>, <argument><expr><name>responseCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem sending"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_io</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>requestPaymentRequest</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>onPaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>resultCallback</name><operator>.</operator><name>onPaymentIntent</name></name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>onFail</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>resultCallback</name><operator>.</operator><name>onFail</name></name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>Socket</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>cert</name><operator>.</operator><name>Certificate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>cert</name><operator>.</operator><name>CertificateException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>cert</name><operator>.</operator><name>X509Certificate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>SocketFactory</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>HttpsURLConnection</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLContext</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLHandshakeException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLSession</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLSocket</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLSocketFactory</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>TrustManager</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>X509TrustManager</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>UTXO</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>script</name><operator>.</operator><name>Script</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>script</name><operator>.</operator><name>ScriptBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Splitter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Strings</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>Hashing</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>moshi</name><operator>.</operator><name>JsonAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>moshi</name><operator>.</operator><name>JsonDataException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>moshi</name><operator>.</operator><name>Moshi</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>AssetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>
<import>import <name><name>okio</name><operator>.</operator><name>BufferedSink</name></name>;</import>
<import>import <name><name>okio</name><operator>.</operator><name>BufferedSource</name></name>;</import>
<import>import <name><name>okio</name><operator>.</operator><name>Okio</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>RequestWalletBalanceTask</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>callbackHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RequestWalletBalanceTask</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <interface><specifier>public</specifier> interface <name>ResultCallback</name> <block>{
        <function_decl><type><name>void</name></type> <name>onResult</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UTXO</name></argument>&gt;</argument_list></name></type> <name>utxos</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onFail</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <constructor><specifier>public</specifier> <name>RequestWalletBalanceTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ResultCallback</name></type> <name>resultCallback</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backgroundHandler</name></name> <operator>=</operator> <name>backgroundHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callbackHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resultCallback</name></name> <operator>=</operator> <name>resultCallback</name></expr>;</expr_stmt>
    }</block></constructor>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>JsonRpcRequest</name> <block>{
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>method</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>params</name></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <specifier>transient</specifier> <type><name>int</name></type> <name>idCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>JsonRpcRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>idCounter</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>method</name></name> <operator>=</operator> <name>method</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>JsonRpcResponse</name> <block>{
        <decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><name><name>Utxo</name><index>[]</index></name></type> <name>result</name></decl>;</decl_stmt>

        <class><specifier>public</specifier> <specifier>static</specifier> class <name>Utxo</name> <block>{
            <decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>tx_hash</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>tx_pos</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>value</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
        }</block></class>
    }</block></class>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>requestWalletBalance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AssetManager</name></type> <name>assets</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ElectrumServer</name></argument>&gt;</argument_list></name></type> <name>servers</name> <init>= <expr><call><name>loadElectrumServers</name><argument_list>(
                            <argument><expr><call><name><name>assets</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>ELECTRUM_SERVERS_FILENAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>ElectrumServer</name></type> <name>server</name> <init>= <expr><call><name><name>servers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>servers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"trying to request wallet balance from {}: {}"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>socketAddress</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Socket</name></type> <name>socket</name></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>ElectrumServer</name><operator>.</operator><name>Type</name><operator>.</operator><name>TLS</name></name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>SocketFactory</name></type> <name>sf</name> <init>= <expr><call><name>sslTrustAllCertificates</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>socket</name> <operator>=</operator> <call><name><name>sf</name><operator>.</operator><name>createSocket</name></name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>socketAddress</name><operator>.</operator><name>getHostName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name><operator>.</operator><name>socketAddress</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>SSLSession</name></type> <name>sslSession</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSLSocket</name><operator>)</operator> <name>socket</name><operator>)</operator><operator>.</operator><call><name>getSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Certificate</name></type> <name>certificate</name> <init>= <expr><call><name><name>sslSession</name><operator>.</operator><name>getPeerCertificates</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>certificateFingerprint</name> <init>= <expr><call><name>sslCertificateFingerprint</name><argument_list>(<argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>certificateFingerprint</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                            <comment type="line">// signed by CA</comment>
                            <if>if <condition>(<expr><operator>!</operator><call><name><name>HttpsURLConnection</name><operator>.</operator><name>getDefaultHostnameVerifier</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>verify</name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>socketAddress</name><operator>.</operator><name>getHostName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sslSession</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>SSLHandshakeException</name><argument_list>(<argument><expr><literal type="string">"Expected "</literal> <operator>+</operator> <call><name><name>server</name><operator>.</operator><name>socketAddress</name><operator>.</operator><name>getHostName</name></name><argument_list>()</argument_list></call>
                                        <operator>+</operator> <literal type="string">", got "</literal> <operator>+</operator> <call><name><name>sslSession</name><operator>.</operator><name>getPeerPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
                        }</block></then> <else>else <block>{
                            <comment type="line">// self-signed</comment>
                            <if>if <condition>(<expr><operator>!</operator><call><name><name>certificateFingerprint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>certificateFingerprint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>SSLHandshakeException</name><argument_list>(<argument><expr><literal type="string">"Expected "</literal> <operator>+</operator> <name><name>server</name><operator>.</operator><name>certificateFingerprint</name></name> <operator>+</operator> <literal type="string">", got "</literal>
                                        <operator>+</operator> <name>certificateFingerprint</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
                        }</block></else></if>
                    }</block></then> <elseif>else <if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>ElectrumServer</name><operator>.</operator><name>Type</name><operator>.</operator><name>TCP</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>socket</name> <operator>=</operator> <operator>new</operator> <call><name>Socket</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>socket</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>socketAddress</name></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></elseif> <else>else <block>{
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cannot handle: "</literal> <operator>+</operator> <name><name>server</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></else></if>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>BufferedSink</name></type> <name>sink</name> <init>= <expr><call><name><name>Okio</name><operator>.</operator><name>buffer</name></name><argument_list>(<argument><expr><call><name><name>Okio</name><operator>.</operator><name>sink</name></name><argument_list>(<argument><expr><name>socket</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>sink</name><operator>.</operator><name>timeout</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>timeout</name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>BufferedSource</name></type> <name>source</name> <init>= <expr><call><name><name>Okio</name><operator>.</operator><name>buffer</name></name><argument_list>(<argument><expr><call><name><name>Okio</name><operator>.</operator><name>source</name></name><argument_list>(<argument><expr><name>socket</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>source</name><operator>.</operator><name>timeout</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>timeout</name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Moshi</name></type> <name>moshi</name> <init>= <expr><operator>new</operator> <call><name><name>Moshi</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>JsonAdapter</name><argument_list type="generic">&lt;<argument><name>JsonRpcRequest</name></argument>&gt;</argument_list></name></type> <name>requestAdapter</name> <init>= <expr><call><name><name>moshi</name><operator>.</operator><name>adapter</name></name><argument_list>(<argument><expr><name><name>JsonRpcRequest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>JsonRpcRequest</name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name>JsonRpcRequest</name><argument_list>(<argument><expr><literal type="string">"blockchain.address.listunspent"</literal></expr></argument>,
                            <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>requestAdapter</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>sink</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sink</name><operator>.</operator><name>writeUtf8</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>JsonAdapter</name><argument_list type="generic">&lt;<argument><name>JsonRpcResponse</name></argument>&gt;</argument_list></name></type> <name>responseAdapter</name> <init>= <expr><call><name><name>moshi</name><operator>.</operator><name>adapter</name></name><argument_list>(<argument><expr><name><name>JsonRpcResponse</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>JsonRpcResponse</name></type> <name>response</name> <init>= <expr><call><name><name>responseAdapter</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>response</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>request</name><operator>.</operator><name>id</name></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name><name>response</name><operator>.</operator><name>result</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>JsonDataException</name><argument_list>(<argument><expr><literal type="string">"empty response"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>UTXO</name></argument>&gt;</argument_list></name></type> <name>utxos</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>JsonRpcResponse</name><operator>.</operator><name>Utxo</name></name></type> <name>responseUtxo</name> <range>: <expr><name><name>response</name><operator>.</operator><name>result</name></name></expr></range></decl></init>)</control> <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>utxoHash</name> <init>= <expr><call><name><name>Sha256Hash</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name><name>responseUtxo</name><operator>.</operator><name>tx_hash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>utxoIndex</name> <init>= <expr><name><name>responseUtxo</name><operator>.</operator><name>tx_pos</name></name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>utxoValue</name> <init>= <expr><call><name><name>Coin</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>responseUtxo</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>Script</name></type> <name>script</name> <init>= <expr><call><name><name>ScriptBuilder</name><operator>.</operator><name>createOutputScript</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>final</specifier> <name>UTXO</name></type> <name>utxo</name> <init>= <expr><operator>new</operator> <call><name>UTXO</name><argument_list>(<argument><expr><name>utxoHash</name></expr></argument>, <argument><expr><name>utxoIndex</name></expr></argument>, <argument><expr><name>utxoValue</name></expr></argument>, <argument><expr><name><name>responseUtxo</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                    <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>utxos</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>utxo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>

                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"fetched {} unspent outputs from {}"</literal></expr></argument>, <argument><expr><name><name>response</name><operator>.</operator><name>result</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>socketAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>onResult</name><argument_list>(<argument><expr><name>utxos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"id mismatch response:{} vs request:{}"</literal></expr></argument>, <argument><expr><name><name>response</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_parse</name></name></expr></argument>, <argument><expr><call><name><name>server</name><operator>.</operator><name>socketAddress</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>JsonDataException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem parsing json"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_parse</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem querying unspent outputs"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>onFail</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_io</name></name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>onResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>UTXO</name></argument>&gt;</argument_list></name></type> <name>utxos</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>resultCallback</name><operator>.</operator><name>onResult</name></name><argument_list>(<argument><expr><name>utxos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>onFail</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>resultCallback</name><operator>.</operator><name>onFail</name></name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ElectrumServer</name> <block>{
        <enum><specifier>public</specifier> enum <name>Type</name> <block>{
            <decl><name>TCP</name></decl>, <decl><name>TLS</name></decl>
        }</block></enum>

        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>InetSocketAddress</name></type> <name>socketAddress</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Type</name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>certificateFingerprint</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ElectrumServer</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>port</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>certificateFingerprint</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name><name>Type</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>port</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>socketAddress</name></name> <operator>=</operator> <call><name><name>InetSocketAddress</name><operator>.</operator><name>createUnresolved</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><literal type="string">"tcp"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>socketAddress</name></name> <operator>=</operator> <call><name><name>InetSocketAddress</name><operator>.</operator><name>createUnresolved</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>,
                        <argument><expr><name><name>Constants</name><operator>.</operator><name>ELECTRUM_SERVER_DEFAULT_PORT_TCP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <elseif>else <if>if <condition>(<expr><literal type="string">"tls"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>socketAddress</name></name> <operator>=</operator> <call><name><name>InetSocketAddress</name><operator>.</operator><name>createUnresolved</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>,
                        <argument><expr><name><name>Constants</name><operator>.</operator><name>ELECTRUM_SERVER_DEFAULT_PORT_TLS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <else>else
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cannot handle: "</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw></block></else></if>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>certificateFingerprint</name></name> <operator>=</operator> <name>certificateFingerprint</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ElectrumServer</name></argument>&gt;</argument_list></name></type> <name>loadElectrumServers</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Splitter</name></type> <name>splitter</name> <init>= <expr><call><name><name>Splitter</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trimResults</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ElectrumServer</name></argument>&gt;</argument_list></name></type> <name>servers</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><specifier>final</specifier> <name>BufferedReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
                <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>

                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>i</name> <init>= <expr><call><name><name>splitter</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>type</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>host</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Strings</name><operator>.</operator><name>emptyToNull</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>fingerprint</name> <init>= <expr><ternary><condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Strings</name><operator>.</operator><name>emptyToNull</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>servers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ElectrumServer</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>fingerprint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error while parsing: '"</literal> <operator>+</operator> <name>line</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally>
        <return>return <expr><name>servers</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>SSLSocketFactory</name></type> <name>sslTrustAllCertificates</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>SSLContext</name></type> <name>context</name> <init>= <expr><call><name><name>SSLContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SSL"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>TrustManager</name><index>[]</index></name> <block>{ <expr><name>TRUST_ALL_CERTIFICATES</name></expr> }</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>SSLSocketFactory</name></type> <name>socketFactory</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSocketFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>socketFactory</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>X509TrustManager</name></type> <name>TRUST_ALL_CERTIFICATES</name> <init>= <expr><operator>new</operator> <class><super><name>X509TrustManager</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>checkClientTrusted</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>X509Certificate</name><index>[]</index></name></type> <name>chain</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>authType</name></decl></parameter>)</parameter_list>
                <throws>throws <argument><expr><name>CertificateException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>checkServerTrusted</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>X509Certificate</name><index>[]</index></name></type> <name>chain</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>authType</name></decl></parameter>)</parameter_list>
                <throws>throws <argument><expr><name>CertificateException</name></expr></argument></throws> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>X509Certificate</name><index>[]</index></name></type> <name>getAcceptedIssuers</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>X509Certificate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>sslCertificateFingerprint</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Certificate</name></type> <name>certificate</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>Hashing</name><operator>.</operator><name>sha256</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newHasher</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBytes</name><argument_list>(<argument><expr><call><name><name>certificate</name><operator>.</operator><name>getEncoded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>hash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>HelpDialogFragment</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SendCoinsActivity</name> <super><extends>extends <name>AbstractWalletActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INTENT_EXTRA_PAYMENT_INTENT</name> <init>= <expr><literal type="string">"payment_intent"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INTENT_EXTRA_FEE_CATEGORY</name> <init>= <expr><literal type="string">"fee_category"</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>FeeCategory</name></type> <name>feeCategory</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>intentFlags</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>SendCoinsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_PAYMENT_INTENT</name></expr></argument>, <argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>feeCategory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_FEE_CATEGORY</name></expr></argument>, <argument><expr><name>feeCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>intentFlags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name>intentFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>paymentIntent</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startDonate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>FeeCategory</name></type> <name>feeCategory</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>intentFlags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>PaymentIntent</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DONATION_ADDRESS</name></name></expr></argument>,
                <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>wallet_donate_address_label</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>feeCategory</name></expr></argument>, <argument><expr><name>intentFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>SendCoinsActivityViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>send_coins_content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>SendCoinsActivityViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showHelpDialog</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Event</name><operator>.</operator><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>messageResId</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>HelpDialogFragment</name><operator>.</operator><name>page</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>send_coins_activity_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_help</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>showHelpDialog</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>help_send_coins</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>Event</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModel</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>SendCoinsActivityViewModel</name> <super><extends>extends <name>ViewModel</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Event</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>showHelpDialog</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoin</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>Protos</name><operator>.</operator><name>Payment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>AddressFormatException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>InsufficientMoneyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionConfidence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionConfidence</name><operator>.</operator><name>ConfidenceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VerificationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionedChecksummedBytes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>protocols</name><operator>.</operator><name>payments</name><operator>.</operator><name>PaymentProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>KeyChain</name><operator>.</operator><name>KeyPurpose</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>SendRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>BalanceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>CouldNotAdjustDownwards</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>DustySendRequested</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>params</name><operator>.</operator><name>KeyParameter</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Joiner</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookDao</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>ExchangeRate</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name><operator>.</operator><name>Standard</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>integration</name><operator>.</operator><name>android</name><operator>.</operator><name>BitcoinIntegration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>offline</name><operator>.</operator><name>DirectPaymentTask</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainState</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AddressAndLabel</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>CurrencyAmountView</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>CurrencyCalculatorLink</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>InputParser</name><operator>.</operator><name>BinaryInputParser</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>InputParser</name><operator>.</operator><name>StreamInputParser</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>InputParser</name><operator>.</operator><name>StringInputParser</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>ProgressDialogFragment</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>TransactionsAdapter</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>scan</name><operator>.</operator><name>ScanActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Bluetooth</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>Nfc</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>WalletUtils</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>RingtoneManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NdefMessage</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NfcAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>HandlerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnFocusChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AutoCompleteTextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CompoundButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Filter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SendCoinsFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AddressBookDao</name></type> <name>addressBookDao</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ContentResolver</name></type> <name>contentResolver</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>FragmentManager</name></type> <name>fragmentManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>BluetoothAdapter</name></type> <name>bluetoothAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>HandlerThread</name></type> <name>backgroundThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>payeeGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>payeeNameView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>payeeVerifiedByView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AutoCompleteTextView</name></type> <name>receivingAddressView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ReceivingAddressViewAdapter</name></type> <name>receivingAddressViewAdapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>receivingStaticView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>receivingStaticAddressView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>receivingStaticLabelView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>amountGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CurrencyCalculatorLink</name></type> <name>amountCalculatorLink</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>directPaymentEnableView</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>hintView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>directPaymentMessageView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type> <name>sentTransactionViewGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>TransactionsAdapter</name><operator>.</operator><name>TransactionViewHolder</name></name></type> <name>sentTransactionViewHolder</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>privateKeyPasswordViewGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>privateKeyPasswordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>privateKeyBadPasswordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>viewGo</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>viewCancel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_SCAN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_ENABLE_BLUETOOTH_FOR_PAYMENT_REQUEST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_ENABLE_BLUETOOTH_FOR_DIRECT_PAYMENT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>SendCoinsViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SendCoinsFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>final</specifier> class <name>ReceivingAddressListener</name>
            <super><implements>implements <name>OnFocusChangeListener</name>, <name>TextWatcher</name>, <name><name>AdapterView</name><operator>.</operator><name>OnItemClickListener</name></name></implements></super> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onFocusChange</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><operator>!</operator><name>hasFocus</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>validateReceivingAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>constraint</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>constraint</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>validateReceivingAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>AddressBookEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>receivingAddressViewAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name> <operator>=</operator> <operator>new</operator> <call><name>AddressAndLabel</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>entry</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Picked valid address from suggestions: {}"</literal></expr></argument>, <argument><expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AddressFormatException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// swallow</comment>
            }</block></catch></try>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ReceivingAddressListener</name></type> <name>receivingAddressListener</name> <init>= <expr><operator>new</operator> <call><name>ReceivingAddressListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>CurrencyAmountView</name><operator>.</operator><name>Listener</name></name></type> <name>amountsListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>CurrencyAmountView</name><operator>.</operator><name>Listener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>changed</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>dryrunRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>focusChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextWatcher</name></type> <name>privateKeyPasswordListener</name> <init>= <expr><operator>new</operator> <class><super><name>TextWatcher</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>privateKeyBadPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>TransactionConfidence</name><operator>.</operator><name>Listener</name></name></type> <name>sentTransactionConfidenceListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>TransactionConfidence</name><operator>.</operator><name>Listener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onConfidenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionConfidence</name></type> <name>confidence</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <name><name>TransactionConfidence</name><operator>.</operator><name>Listener</name><operator>.</operator><name>ChangeReason</name></name></type> <name>reason</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>runOnUiThread</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <if>if <condition>(<expr><operator>!</operator><call><name>isResumed</name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return;</return></block></then></if>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionConfidence</name></type> <name>confidence</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>ConfidenceType</name></type> <name>confidenceType</name> <init>= <expr><call><name><name>confidence</name><operator>.</operator><name>getConfidenceType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numBroadcastPeers</name> <init>= <expr><call><name><name>confidence</name><operator>.</operator><name>numBroadcastPeers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENDING</name></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>DEAD</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>FAILED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <elseif>else <if>if <condition>(<expr><name>numBroadcastPeers</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>BUILDING</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="line">// Auto-close the dialog after a short delay</comment>
                            <if>if <condition>(<expr><call><name><name>config</name><operator>.</operator><name>getSendCoinsAutoclose</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                                    <function><annotation>@<name>Override</name></annotation>
                                    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                                        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    }</block></function>
                                }</block></class></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then></if></elseif></if>
                    }</block></then></if>

                    <if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>ChangeReason</name><operator>.</operator><name>SEEN_PEERS</name></name> <operator>&amp;&amp;</operator> <name>confidenceType</name> <operator>==</operator> <name><name>ConfidenceType</name><operator>.</operator><name>PENDING</name></name></expr>)</condition><then> <block>{
                        <comment type="line">// play sound effect</comment>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>soundResId</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentifier</name><argument_list>(<argument><expr><literal type="string">"send_coins_broadcast_"</literal> <operator>+</operator> <name>numBroadcastPeers</name></expr></argument>,
                                <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><call><name><name>activity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>soundResId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>RingtoneManager</name>
                                    <operator>.</operator><name>getRingtone</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(
                                            <argument><expr><literal type="string">"android.resource://"</literal> <operator>+</operator> <call><name><name>activity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>soundResId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>play</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>

                    <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>final</specifier> class <name>ReceivingAddressViewAdapter</name> <super><extends>extends <name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ReceivingAddressViewAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inflater</name></name> <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>view</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>address_book_row</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><specifier>final</specifier> <name>AddressBookEntry</name></type> <name>entry</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>address_book_row_label</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>address_book_row_address</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>WalletUtils</name><operator>.</operator><name>formatHash</name></name><argument_list>(
                    <argument><expr><call><name><name>entry</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_GROUP_SIZE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_LINE_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>view</name></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Filter</name></type> <name>getFilter</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>FilterResults</name></type> <name>performFiltering</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>trimmedConstraint</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>FilterResults</name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name>FilterResults</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>trimmedConstraint</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name><name>addressBookDao</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>trimmedConstraint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>results</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>results</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name><name>results</name><operator>.</operator><name>values</name></name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>results</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    }</block></else></if>
                    <return>return <expr><name>results</name></expr>;</return>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>publishResults</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>constraint</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>FilterResults</name></type> <name>results</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>setNotifyOnChange</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>results</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name>addAll</name><argument_list>(<argument><expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name><operator>)</operator> <name><name>results</name><operator>.</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></type> <name>activityDismissListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBookDao</name></name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contentResolver</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fragmentManager</name></name> <operator>=</operator> <call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Wallet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>addressBook</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>Constants</name><operator>.</operator><name>ENABLE_EXCHANGE_RATES</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>exchangeRate</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>ExchangeRate</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ExchangeRate</name></type> <name>exchangeRate</name></decl></parameter>)</parameter_list> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name></name></type> <name>state</name> <init>= <expr><name><name>viewModel</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>state</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setExchangeRate</name></name><argument_list>(<argument><expr><name><name>exchangeRate</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>dynamicFees</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>dynamicFees</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>dryrunRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>blockchainState</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>BlockchainState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>balance</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>Coin</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>coin</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ProgressDialogFragment</name><operator>.</operator><name>Observer</name></name><argument_list>(<argument><expr><name>fragmentManager</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>bluetoothAdapter</name> <operator>=</operator> <call><name><name>BluetoothAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backgroundThread</name> <operator>=</operator> <operator>new</operator> <call><name>HandlerThread</name><argument_list>(<argument><expr><literal type="string">"backgroundThread"</literal></expr></argument>, <argument><expr><name><name>Process</name><operator>.</operator><name>THREAD_PRIORITY_BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backgroundHandler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>action</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>intentUri</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>scheme</name> <init>= <expr><ternary><condition><expr><name>intentUri</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>intentUri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><operator>(</operator><call><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>NfcAdapter</name><operator>.</operator><name>ACTION_NDEF_DISCOVERED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>&amp;&amp;</operator> <name>intentUri</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <literal type="string">"bitcoin"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>initStateFromBitcoinUri</name><argument_list>(<argument><expr><name>intentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><call><name><name>NfcAdapter</name><operator>.</operator><name>ACTION_NDEF_DISCOVERED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>&amp;&amp;</operator> <call><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENTREQUEST</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>NdefMessage</name></type> <name>ndefMessage</name> <init>= <expr><operator>(</operator><name>NdefMessage</name><operator>)</operator> <call><name><name>intent</name>
                        <operator>.</operator><name>getParcelableArrayExtra</name></name><argument_list>(<argument><expr><name><name>NfcAdapter</name><operator>.</operator><name>EXTRA_NDEF_MESSAGES</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ndefMessagePayload</name> <init>= <expr><call><name><name>Nfc</name><operator>.</operator><name>extractMimePayload</name></name><argument_list>(<argument><expr><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENTREQUEST</name></name></expr></argument>,
                        <argument><expr><name>ndefMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>initStateFromPaymentRequest</name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>ndefMessagePayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>(</operator><call><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>&amp;&amp;</operator> <call><name><name>PaymentProtocol</name><operator>.</operator><name>MIMETYPE_PAYMENTREQUEST</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paymentRequest</name> <init>= <expr><call><name><name>BitcoinIntegration</name><operator>.</operator><name>paymentRequestFromIntent</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>intentUri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>initStateFromIntentUri</name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>intentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name>paymentRequest</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>initStateFromPaymentRequest</name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>paymentRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                <else>else
                    <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block></else></if>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>hasExtra</name></name><argument_list>(<argument><expr><name><name>SendCoinsActivity</name><operator>.</operator><name>INTENT_EXTRA_PAYMENT_INTENT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>initStateFromIntentExtras</name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name>updateStateFrom</name><argument_list>(<argument><expr><call><name><name>PaymentIntent</name><operator>.</operator><name>blank</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>send_coins_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>payeeGroup</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_payee_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>payeeNameView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_payee_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>payeeVerifiedByView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_payee_verified_by</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>receivingAddressView</name> <operator>=</operator> <operator>(</operator><name>AutoCompleteTextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_receiving_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>receivingAddressViewAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>ReceivingAddressViewAdapter</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>receivingAddressViewAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setOnFocusChangeListener</name></name><argument_list>(<argument><expr><name>receivingAddressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>receivingAddressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><name>receivingAddressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>receivingStaticView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_receiving_static</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>receivingStaticAddressView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_receiving_static_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>receivingStaticLabelView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_receiving_static_label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>amountGroup</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_amount_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>CurrencyAmountView</name></type> <name>btcAmountView</name> <init>= <expr><operator>(</operator><name>CurrencyAmountView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_amount_btc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setCurrencySymbol</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>code</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setInputFormat</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getMaxPrecisionFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btcAmountView</name><operator>.</operator><name>setHintFormat</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>CurrencyAmountView</name></type> <name>localAmountView</name> <init>= <expr><operator>(</operator><name>CurrencyAmountView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_amount_local</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setInputFormat</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>LOCAL_FORMAT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>localAmountView</name><operator>.</operator><name>setHintFormat</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>LOCAL_FORMAT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>amountCalculatorLink</name> <operator>=</operator> <operator>new</operator> <call><name>CurrencyCalculatorLink</name><argument_list>(<argument><expr><name>btcAmountView</name></expr></argument>, <argument><expr><name>localAmountView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setExchangeDirection</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getLastExchangeDirection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>directPaymentEnableView</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_direct_payment_enable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>directPaymentEnableView</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnCheckedChangeListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onCheckedChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>isBluetoothPaymentUrl</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>isChecked</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>bluetoothAdapter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// ask for permission to enable bluetooth</comment>
                    <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>BluetoothAdapter</name><operator>.</operator><name>ACTION_REQUEST_ENABLE</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>REQUEST_CODE_ENABLE_BLUETOOTH_FOR_DIRECT_PAYMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>hintView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>directPaymentMessageView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_direct_payment_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sentTransactionViewGroup</name> <operator>=</operator> <operator>(</operator><name>FrameLayout</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sentTransactionViewGroup</name>
                <operator>.</operator><name>setLayoutAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadLayoutAnimation</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>transaction_layout_anim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sentTransactionViewHolder</name> <operator>=</operator> <operator>new</operator> <call><name><name>TransactionsAdapter</name><operator>.</operator><name>TransactionViewHolder</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>privateKeyPasswordViewGroup</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_private_key_password_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>privateKeyPasswordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_private_key_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>privateKeyBadPasswordView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_private_key_bad_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewGo</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_go</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>validateReceivingAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name>everythingPlausible</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>handleGo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name>requestFocusFirst</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>

                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewCancel</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>handleCancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setLastExchangeDirection</name></name><argument_list>(<argument><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>getExchangeDirection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setListener</name></name><argument_list>(<argument><expr><name>amountsListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>privateKeyPasswordListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>dryrunRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>removeTextChangedListener</name></name><argument_list>(<argument><expr><name>privateKeyPasswordListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDetach</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>removeCallbacksAndMessages</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDetach</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeEventListener</name><argument_list>(<argument><expr><name>sentTransactionConfidenceListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>onActivityResultResumed</name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>onActivityResultResumed</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_SCAN</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>ScanActivity</name><operator>.</operator><name>INTENT_EXTRA_RESULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><operator>new</operator> <class><super><name>StringInputParser</name></super><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>updateStateFrom</name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>handleDirectTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws> <block>{
                        <expr_stmt><expr><call><name>cannotClassify</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_scan</name></name></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_ENABLE_BLUETOOTH_FOR_PAYMENT_REQUEST</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>isBluetoothPaymentRequestUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>requestPaymentRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_ENABLE_BLUETOOTH_FOR_DIRECT_PAYMENT</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>isBluetoothPaymentUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>directPaymentEnableView</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if></elseif></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>send_coins_fragment_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>scanAction</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_scan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scanAction</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name><name>pm</name><operator>.</operator><name>hasSystemFeature</name></name><argument_list>(<argument><expr><name><name>PackageManager</name><operator>.</operator><name>FEATURE_CAMERA</name></name></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>pm</name><operator>.</operator><name>hasSystemFeature</name></name><argument_list>(<argument><expr><name><name>PackageManager</name><operator>.</operator><name>FEATURE_CAMERA_FRONT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scanAction</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>emptyAction</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_empty</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>emptyAction</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name>
                <operator>&amp;&amp;</operator> <call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mayEditAmount</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>viewModel</name><operator>.</operator><name>balance</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>feeCategoryAction</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_fee_category</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>feeCategoryAction</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>feeCategory</name></name> <operator>==</operator> <name><name>FeeCategory</name><operator>.</operator><name>ECONOMIC</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_fee_category_economic</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>feeCategory</name></name> <operator>==</operator> <name><name>FeeCategory</name><operator>.</operator><name>NORMAL</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_fee_category_normal</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>feeCategory</name></name> <operator>==</operator> <name><name>FeeCategory</name><operator>.</operator><name>PRIORITY</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_fee_category_priority</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_scan</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>ScanActivity</name><operator>.</operator><name>startForResult</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><name>REQUEST_CODE_SCAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_fee_category_economic</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleFeeCategory</name><argument_list>(<argument><expr><name><name>FeeCategory</name><operator>.</operator><name>ECONOMIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_fee_category_normal</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleFeeCategory</name><argument_list>(<argument><expr><name><name>FeeCategory</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_fee_category_priority</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleFeeCategory</name><argument_list>(<argument><expr><name><name>FeeCategory</name><operator>.</operator><name>PRIORITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_options_empty</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleEmpty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>validateReceivingAddress</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>addressStr</name> <init>= <expr><call><name><name>receivingAddressView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>addressStr</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>getParametersFromAddress</name></name><argument_list>(<argument><expr><name>addressStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name> <init>= <expr><call><name><name>addressBookDao</name><operator>.</operator><name>resolveLabel</name></name><argument_list>(<argument><expr><name>addressStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name> <operator>=</operator> <operator>new</operator> <call><name>AddressAndLabel</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>addressStr</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Locked to valid address: {}"</literal></expr></argument>, <argument><expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AddressFormatException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// swallow</comment>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleCancel</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>viewModel</name><operator>.</operator><name>state</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isPayeePlausible</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>hasOutputs</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isAmountPlausible</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>dryrunTransaction</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>viewModel</name><operator>.</operator><name>dryrunException</name></name> <operator>==</operator> <literal type="null">null</literal></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mayEditAmount</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>hasAmount</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if></elseif>
        <else>else
            <block type="pseudo"><return>return <expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>hasAmount</name></name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isPasswordPlausible</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>wallet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        <return>return <expr><operator>!</operator><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>everythingPlausible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name> <operator>&amp;&amp;</operator> <call><name>isPayeePlausible</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isAmountPlausible</name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name>isPasswordPlausible</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>requestFocusFirst</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>isPayeePlausible</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name>isAmountPlausible</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name>isPasswordPlausible</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><call><name>everythingPlausible</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"unclear focus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleGo</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>privateKeyBadPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>new</operator> <class><super><name>DeriveKeyTask</name></super><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>scryptIterationsTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>encryptionKey</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>wasChanged</name></decl></parameter>)</parameter_list> <block>{
                    <if>if <condition>(<expr><name>wasChanged</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>WalletUtils</name><operator>.</operator><name>autoBackupWallet</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name>signAndSendPayment</name><argument_list>(<argument><expr><name>encryptionKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class><operator>.</operator><call><name>deriveKey</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECRYPTING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>signAndSendPayment</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>signAndSendPayment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyParameter</name></type> <name>encryptionKey</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SIGNING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// final payment intent</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>finalPaymentIntent</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mergeWithEditedValues</name></name><argument_list>(
                <argument><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name><operator>.</operator><name>address</name></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>finalAmount</name> <init>= <expr><call><name><name>finalPaymentIntent</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// prepare send request</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>fees</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>dynamicFees</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>SendRequest</name></type> <name>sendRequest</name> <init>= <expr><call><name><name>finalPaymentIntent</name><operator>.</operator><name>toSendRequest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>emptyWallet</name></name> <operator>=</operator> <call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mayEditAmount</name></name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>finalAmount</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>AVAILABLE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>feePerKb</name></name> <operator>=</operator> <call><name><name>fees</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>feeCategory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>memo</name></name> <operator>=</operator> <name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>memo</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>exchangeRate</name></name> <operator>=</operator> <call><name><name>amountCalculatorLink</name><operator>.</operator><name>getExchangeRate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>aesKey</name></name> <operator>=</operator> <name>encryptionKey</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>fee</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>dryrunTransaction</name><operator>.</operator><name>getFee</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>fee</name><operator>.</operator><name>isGreaterThan</name></name><argument_list>(<argument><expr><name>finalAmount</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>btcFormat</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_significant_fee_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_significant_fee_message</name></name></expr></argument>, <argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>fee</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>finalAmount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_button_send</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>sendPayment</name><argument_list>(<argument><expr><name>sendRequest</name></expr></argument>, <argument><expr><name>finalAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>sendPayment</name><argument_list>(<argument><expr><name>sendRequest</name></expr></argument>, <argument><expr><name>finalAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>sendPayment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SendRequest</name></type> <name>sendRequest</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>finalAmount</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>new</operator> <class><super><name>SendCoinsOfflineTask</name></super><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>backgroundHandler</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name> <operator>=</operator> <name>transaction</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENDING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addEventListener</name><argument_list>(<argument><expr><name>sentTransactionConfidenceListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>refundAddress</name> <init>= <expr><ternary><condition><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>standard</name></name> <operator>==</operator> <name><name>Standard</name><operator>.</operator><name>BIP70</name></name></expr>
                        ?</condition><then> <expr><call><name><name>wallet</name><operator>.</operator><name>freshAddress</name></name><argument_list>(<argument><expr><name><name>KeyPurpose</name><operator>.</operator><name>REFUND</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Payment</name></type> <name>payment</name> <init>= <expr><call><name><name>PaymentProtocol</name><operator>.</operator><name>createPaymentMessage</name></name><argument_list>(
                        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Transaction</name><index>[]</index></name> <block>{ <expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name></expr> }</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finalAmount</name></expr></argument>, <argument><expr><name>refundAddress</name></expr></argument>,
                        <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>payeeData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>directPaymentEnableView</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>directPay</name><argument_list>(<argument><expr><name>payment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

                <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>broadcastTransaction</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>ComponentName</name></type> <name>callingActivity</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getCallingActivity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>callingActivity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"returning result to calling activity: {}"</literal></expr></argument>, <argument><expr><call><name><name>callingActivity</name><operator>.</operator><name>flattenToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>BitcoinIntegration</name><operator>.</operator><name>transactionHashToResult</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name><operator>.</operator><name>getHashAsString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>standard</name></name> <operator>==</operator> <name><name>Standard</name><operator>.</operator><name>BIP70</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>BitcoinIntegration</name><operator>.</operator><name>paymentToResult</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>payment</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>

            <function><specifier>private</specifier> <type><name>void</name></type> <name>directPay</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Payment</name></type> <name>payment</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>DirectPaymentTask</name><operator>.</operator><name>ResultCallback</name></name></type> <name>callback</name> <init>= <expr><operator>new</operator> <class><super><name><name>DirectPaymentTask</name><operator>.</operator><name>ResultCallback</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ack</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>directPaymentAck</name></name> <operator>=</operator> <name>ack</name></expr>;</expr_stmt>

                        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENDING</name></name></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

                        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onFail</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                                <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_direct_payment_failed_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(
                                <argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>paymentUrl</name></name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call>
                                        <operator>+</operator> <literal type="string">"\n\n"</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_direct_payment_failed_msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_retry</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                            <function><annotation>@<name>Override</name></annotation>
                            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                                <expr_stmt><expr><call><name>directPay</name><argument_list>(<argument><expr><name>payment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></function>
                        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>isHttpPaymentUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><operator>new</operator> <call><name><name>DirectPaymentTask</name><operator>.</operator><name>HttpPaymentTask</name></name><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>,
                            <argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>paymentUrl</name></name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>httpUserAgent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>payment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>isBluetoothPaymentUrl</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal>
                        <operator>&amp;&amp;</operator> <call><name><name>bluetoothAdapter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><operator>new</operator> <call><name><name>DirectPaymentTask</name><operator>.</operator><name>BluetoothPaymentTask</name></name><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>bluetoothAdapter</name></expr></argument>,
                            <argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>getBluetoothMac</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>paymentUrl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>payment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onInsufficientMoney</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>missing</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>estimated</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>ESTIMATED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>available</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>AVAILABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>pending</name> <init>= <expr><call><name><name>estimated</name><operator>.</operator><name>subtract</name></name><argument_list>(<argument><expr><name>available</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>btcFormat</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_insufficient_money_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>msg</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_insufficient_money_msg1</name></name></expr></argument>, <argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>missing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name><name>pending</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_pending</name></name></expr></argument>, <argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mayEditAmount</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_insufficient_money_msg2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mayEditAmount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_options_empty</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name>handleEmpty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onInvalidEncryptionKey</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>privateKeyBadPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onEmptyWalletFailed</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_empty_wallet_failed_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_hint_empty_wallet_failed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>FAILED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_error_msg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>exception</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class><operator>.</operator><call><name>sendCoinsOffline</name><argument_list>(<argument><expr><name>sendRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// send asynchronously</comment>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleFeeCategory</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FeeCategory</name></type> <name>feeCategory</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>feeCategory</name></name> <operator>=</operator> <name>feeCategory</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"switching to {} fee category"</literal></expr></argument>, <argument><expr><name>feeCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>dryrunRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleEmpty</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>available</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>balance</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setBtcAmount</name></name><argument_list>(<argument><expr><name>available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>dryrunRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Runnable</name></type> <name>dryrunRunnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>executeDryrun</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>executeDryrun</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>dryrunTransaction</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>dryrunException</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>fees</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>dynamicFees</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>amount</name> <init>= <expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>amount</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>fees</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>dummy</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>currentReceiveAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// won't be used, tx is never</comment>
                                                                          <comment type="line">// committed</comment>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>SendRequest</name></type> <name>sendRequest</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mergeWithEditedValues</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>toSendRequest</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>signInputs</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>emptyWallet</name></name> <operator>=</operator> <call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mayEditAmount</name></name><argument_list>()</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name><name>amount</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>AVAILABLE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>feePerKb</name></name> <operator>=</operator> <call><name><name>fees</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>feeCategory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>completeTx</name></name><argument_list>(<argument><expr><name>sendRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>dryrunTransaction</name></name> <operator>=</operator> <name><name>sendRequest</name><operator>.</operator><name>tx</name></name></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>dryrunException</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>setState</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name></name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>fees</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>dynamicFees</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BlockchainState</name></type> <name>blockchainState</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>blockchainState</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></type> <name>addressBook</name> <init>= <expr><call><name><name>AddressBookEntry</name><operator>.</operator><name>asMap</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>addressBook</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>btcFormat</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>hasPayee</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>payeeNameView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>payeeNameView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>payeeName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>payeeVerifiedByView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>verifiedBy</name> <init>= <expr><ternary><condition><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>payeeVerifiedBy</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>
                        ?</condition><then> <expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>payeeVerifiedBy</name></name></expr>
                        </then><else>: <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_payee_verified_by_unknown</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>payeeVerifiedByView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CHAR_CHECKMARK</name></name>
                        <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_payee_verified_by</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>verifiedBy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>payeeNameView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>payeeVerifiedByView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>hasOutputs</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>payeeGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>receivingStaticView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(
                        <argument><expr><ternary><condition><expr><operator>!</operator><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>hasPayee</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>payeeVerifiedBy</name></name> <operator>==</operator> <literal type="null">null</literal></expr>
                                ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>receivingStaticLabelView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>hasAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>receivingStaticAddressView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>WalletUtils</name><operator>.</operator><name>formatAddress</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_GROUP_SIZE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_LINE_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>receivingStaticAddressView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_receiving_address_complex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>payeeGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>receivingStaticView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>receivingStaticAddressView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>WalletUtils</name><operator>.</operator><name>formatAddress</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name><operator>.</operator><name>address</name></name></expr></argument>,
                        <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_GROUP_SIZE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ADDRESS_FORMAT_LINE_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>addressBookLabel</name> <init>= <expr><call><name><name>addressBookDao</name>
                        <operator>.</operator><name>resolveLabel</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name><operator>.</operator><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>staticLabel</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>addressBookLabel</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>staticLabel</name> <operator>=</operator> <name>addressBookLabel</name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name><operator>.</operator><name>label</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>staticLabel</name> <operator>=</operator> <name><name>viewModel</name><operator>.</operator><name>validatedAddress</name><operator>.</operator><name>label</name></name></expr>;</expr_stmt></block></then></if></elseif>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>staticLabel</name> <operator>=</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>address_unlabeled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><call><name><name>receivingStaticLabelView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>staticLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>receivingStaticLabelView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(
                        <argument><expr><ternary><condition><expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name><operator>.</operator><name>label</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_significant</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_insignificant</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>standard</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>payeeGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>receivingStaticView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name><name>payeeGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>amountGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>hasAmount</name></name><argument_list>()</argument_list></call>
                    <operator>||</operator> <operator>(</operator><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>viewModel</name><operator>.</operator><name>state</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>
                            ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setEnabled</name></name><argument_list>(
                    <argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name> <operator>&amp;&amp;</operator> <call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mayEditAmount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>directPaymentVisible</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>hasPaymentUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>isBluetoothPaymentUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>directPaymentVisible</name> <operator>=</operator> <name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>directPaymentVisible</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>directPaymentVisible</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>directPaymentEnableView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>directPaymentVisible</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>directPaymentEnableView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>blockchainState</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>blockchainState</name><operator>.</operator><name>replaying</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_error</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_hint_replaying</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mayEditAddress</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name> <operator>==</operator> <literal type="null">null</literal>
                        <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>receivingAddressView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_error</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_receiving_address_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>dryrunException</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_error</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>dryrunException</name></name> <operator>instanceof</operator> <name>DustySendRequested</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_hint_dusty_send</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                    <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>dryrunException</name></name> <operator>instanceof</operator> <name>InsufficientMoneyException</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_hint_insufficient_money</name></name></expr></argument>,
                                <argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>InsufficientMoneyException</name><operator>)</operator> <name><name>viewModel</name><operator>.</operator><name>dryrunException</name></name><operator>)</operator><operator>.</operator><name>missing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                    <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>dryrunException</name></name> <operator>instanceof</operator> <name>CouldNotAdjustDownwards</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_hint_empty_wallet_failed</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>dryrunException</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>dryrunTransaction</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>viewModel</name><operator>.</operator><name>dryrunTransaction</name><operator>.</operator><name>getFee</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>hintResId</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>colorResId</name></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>feeCategory</name></name> <operator>==</operator> <name><name>FeeCategory</name><operator>.</operator><name>ECONOMIC</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>hintResId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_hint_fee_economic</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>colorResId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr>;</expr_stmt>
                    }</block></then> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>feeCategory</name></name> <operator>==</operator> <name><name>FeeCategory</name><operator>.</operator><name>PRIORITY</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>hintResId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_hint_fee_priority</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>colorResId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_less_significant</name></name></expr>;</expr_stmt>
                    }</block></then></if></elseif> <else>else <block>{
                        <expr_stmt><expr><name>hintResId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_hint_fee</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>colorResId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_insignificant</name></name></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>colorResId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>hintResId</name></expr></argument>, <argument><expr><call><name><name>btcFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>dryrunTransaction</name><operator>.</operator><name>getFee</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>mayEditAddress</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name> <operator>!=</operator> <literal type="null">null</literal>
                        <operator>&amp;&amp;</operator> <name>wallet</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>wallet</name><operator>.</operator><name>isPubKeyHashMine</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name><operator>.</operator><name>address</name><operator>.</operator><name>getHash160</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>fg_insignificant</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_receiving_address_own</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>wallet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sentTransactionViewGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sentTransactionViewHolder</name>
                        <operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>TransactionsAdapter</name><operator>.</operator><name>ListItem</name><operator>.</operator><name>TransactionItem</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name></expr></argument>,
                                <argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>addressBook</name></expr></argument>, <argument><expr><name>btcFormat</name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>maxConnectedPeers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>sentTransactionViewGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>directPaymentAck</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>directPaymentMessageView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>directPaymentMessageView</name>
                        <operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>viewModel</name><operator>.</operator><name>directPaymentAck</name></name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_direct_payment_ack</name></name></expr>
                                </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_direct_payment_nack</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>directPaymentMessageView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>REQUEST_PAYMENT_REQUEST</name></name>
                    <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECRYPTING</name></name>
                    <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SIGNING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name>everythingPlausible</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>dryrunTransaction</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>wallet</name> <operator>!=</operator> <literal type="null">null</literal>
                    <operator>&amp;&amp;</operator> <name>fees</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>blockchainState</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><name><name>blockchainState</name><operator>.</operator><name>replaying</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>REQUEST_PAYMENT_REQUEST</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_button_send</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECRYPTING</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_state_decrypting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SIGNING</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_preparation_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENDING</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_button_back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_sending_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENT</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_button_back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_sent_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>FAILED</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_button_back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_failed_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>privateKeyPasswordViewVisible</name> <init>= <expr><operator>(</operator><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name>
                    <operator>||</operator> <name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECRYPTING</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>wallet</name> <operator>!=</operator> <literal type="null">null</literal>
                    <operator>&amp;&amp;</operator> <call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>privateKeyPasswordViewGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>privateKeyPasswordViewVisible</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// focus linking</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>activeAmountViewId</name> <init>= <expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>activeTextView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setNextFocusDownId</name></name><argument_list>(<argument><expr><name>activeAmountViewId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setNextFocusForwardId</name></name><argument_list>(<argument><expr><name>activeAmountViewId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setNextFocusId</name></name><argument_list>(
                    <argument><expr><ternary><condition><expr><name>privateKeyPasswordViewVisible</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_private_key_password</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_go</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>setNextFocusUpId</name></name><argument_list>(<argument><expr><name>activeAmountViewId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>setNextFocusDownId</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_go</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>privateKeyPasswordView</name><operator>.</operator><name>setNextFocusForwardId</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_go</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setNextFocusUpId</name></name><argument_list>(
                    <argument><expr><ternary><condition><expr><name>privateKeyPasswordViewVisible</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_private_key_password</name></name></expr> </then><else>: <expr><name>activeAmountViewId</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initStateFromIntentExtras</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>extras</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>SendCoinsActivity</name><operator>.</operator><name>INTENT_EXTRA_PAYMENT_INTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>FeeCategory</name></type> <name>feeCategory</name> <init>= <expr><operator>(</operator><name>FeeCategory</name><operator>)</operator> <call><name><name>extras</name>
                <operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name><name>SendCoinsActivity</name><operator>.</operator><name>INTENT_EXTRA_FEE_CATEGORY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>feeCategory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got fee category {}"</literal></expr></argument>, <argument><expr><name>feeCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>feeCategory</name></name> <operator>=</operator> <name>feeCategory</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>updateStateFrom</name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initStateFromBitcoinUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>bitcoinUri</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name> <init>= <expr><call><name><name>bitcoinUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <class><super><name>StringInputParser</name></super><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateStateFrom</name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>handlePrivateKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VersionedChecksummedBytes</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
                <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>handleDirectTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws> <block>{
                <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>activityDismissListener</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initStateFromPaymentRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <class><super><name>BinaryInputParser</name></super><argument_list>(<argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateStateFrom</name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>activityDismissListener</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initStateFromIntentUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>bitcoinUri</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>contentResolver</name><operator>.</operator><name>openInputStream</name></name><argument_list>(<argument><expr><name>bitcoinUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><operator>new</operator> <class><super><name>StreamInputParser</name></super><argument_list>(<argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>updateStateFrom</name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>activityDismissListener</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileNotFoundException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateStateFrom</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"got {}"</literal></expr></argument>, <argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name></name> <operator>=</operator> <name>paymentIntent</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>validatedAddress</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>directPaymentAck</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <comment type="line">// delay these actions until fragment is resumed</comment>
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>paymentIntent</name><operator>.</operator><name>hasPaymentRequestUrl</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>paymentIntent</name><operator>.</operator><name>isBluetoothPaymentRequestUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>bluetoothAdapter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name>requestPaymentRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
                    <else>else
                        <comment type="line">// ask for permission to enable bluetooth</comment>
                        <block type="pseudo"><expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>BluetoothAdapter</name><operator>.</operator><name>ACTION_REQUEST_ENABLE</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>REQUEST_CODE_ENABLE_BLUETOOTH_FOR_PAYMENT_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>paymentIntent</name><operator>.</operator><name>hasPaymentRequestUrl</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>paymentIntent</name><operator>.</operator><name>isHttpPaymentRequestUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>requestPaymentRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>receivingAddressView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>amountCalculatorLink</name><operator>.</operator><name>setBtcAmount</name></name><argument_list>(<argument><expr><call><name><name>paymentIntent</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><call><name><name>paymentIntent</name><operator>.</operator><name>isBluetoothPaymentUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>directPaymentEnableView</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>bluetoothAdapter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                    <elseif>else <if>if <condition>(<expr><call><name><name>paymentIntent</name><operator>.</operator><name>isHttpPaymentUrl</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>directPaymentEnableView</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>

                    <expr_stmt><expr><call><name>requestFocusFirst</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>dryrunRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>requestPaymentRequest</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>paymentRequestHost</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>Bluetooth</name><operator>.</operator><name>isBluetoothUrl</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>paymentRequestUrl</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>paymentRequestHost</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>paymentRequestUrl</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getHost</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>paymentRequestHost</name> <operator>=</operator> <call><name><name>Bluetooth</name>
                    <operator>.</operator><name>decompressMac</name></name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>getBluetoothMac</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>paymentRequestUrl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name>
                <operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_request_payment_request_progress</name></name></expr></argument>, <argument><expr><name>paymentRequestHost</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>REQUEST_PAYMENT_REQUEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>RequestPaymentRequestTask</name><operator>.</operator><name>ResultCallback</name></name></type> <name>callback</name> <init>= <expr><operator>new</operator> <class><super><name><name>RequestPaymentRequestTask</name><operator>.</operator><name>ResultCallback</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onPaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>isExtendedBy</name></name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// success</comment>
                    <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>updateStateFrom</name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>dryrunRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>reasons</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>equalsAddress</name></name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>reasons</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>equalsAmount</name></name><argument_list>(<argument><expr><name>paymentIntent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>reasons</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><call><name><name>reasons</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>reasons</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_request_payment_request_failed_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_request_payment_request_failed_message</name></name></expr></argument>,
                            <argument><expr><name>paymentRequestHost</name></expr></argument>, <argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><name>reasons</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>singleDismissButton</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name>handleCancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"BIP72 trust check failed: {}"</literal></expr></argument>, <argument><expr><name>reasons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onFail</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_request_payment_request_failed_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_retry</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>requestPaymentRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                        <if>if <condition>(<expr><operator>!</operator><call><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>hasOutputs</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name>handleCancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
                        <else>else
                            <block type="pseudo"><expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SendCoinsViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>INPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>Bluetooth</name><operator>.</operator><name>isBluetoothUrl</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>paymentRequestUrl</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><operator>new</operator> <call><name><name>RequestPaymentRequestTask</name><operator>.</operator><name>HttpRequestTask</name></name><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>httpUserAgent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>requestPaymentRequest</name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>paymentRequestUrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><operator>new</operator> <call><name><name>RequestPaymentRequestTask</name><operator>.</operator><name>BluetoothRequestTask</name></name><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>bluetoothAdapter</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>requestPaymentRequest</name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>paymentIntent</name><operator>.</operator><name>paymentRequestUrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ECKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>InsufficientMoneyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyCrypterException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>SendRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>CompletionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>CouldNotAdjustDownwards</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SendCoinsOfflineTask</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>callbackHandler</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SendCoinsOfflineTask</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SendCoinsOfflineTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>backgroundHandler</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <name>wallet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backgroundHandler</name></name> <operator>=</operator> <name>backgroundHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callbackHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>sendCoinsOffline</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SendRequest</name></type> <name>sendRequest</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name><operator>.</operator><name>propagate</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CONTEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <try>try <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"sending: {}"</literal></expr></argument>, <argument><expr><name>sendRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>sendCoinsOffline</name></name><argument_list>(<argument><expr><name>sendRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// can take long</comment>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"send successful, transaction committed: {}"</literal></expr></argument>, <argument><expr><call><name><name>transaction</name><operator>.</operator><name>getHashAsString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name>onSuccess</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InsufficientMoneyException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Coin</name></type> <name>missing</name> <init>= <expr><name><name>x</name><operator>.</operator><name>missing</name></name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>missing</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"send failed, {} missing"</literal></expr></argument>, <argument><expr><call><name><name>missing</name><operator>.</operator><name>toFriendlyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"send failed, insufficient coins"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name>onInsufficientMoney</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>missing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>ECKey</name><operator>.</operator><name>KeyIsEncryptedException</name></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"send failed, key is encrypted: {}"</literal></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name>onFailure</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyCrypterException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"send failed, key crypter exception: {}"</literal></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isEncrypted</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <if>if <condition>(<expr><name>isEncrypted</name></expr>)</condition><then>
                                <block type="pseudo"><expr_stmt><expr><call><name>onInvalidEncryptionKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
                            <else>else
                                <block type="pseudo"><expr_stmt><expr><call><name>onFailure</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CouldNotAdjustDownwards</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"send failed, could not adjust downwards: {}"</literal></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name>onEmptyWalletFailed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CompletionException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"send failed, cannot complete: {}"</literal></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>callbackHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                            <expr_stmt><expr><call><name>onFailure</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onInsufficientMoney</name><parameter_list>(<parameter><decl><type><name>Coin</name></type> <name>missing</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onInvalidEncryptionKey</name><parameter_list>()</parameter_list>;</function_decl>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>onEmptyWalletFailed</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>onFailure</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CouldNotAdjustDownwards</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>BalanceType</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AddressBookEntry</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>AppDatabase</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>BlockchainStateLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>DynamicFeeLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>SelectedExchangeRateLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletBalanceLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>WalletLiveData</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AddressAndLabel</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>SendCoinsViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <enum><specifier>public</specifier> enum <name>State</name> <block>{
        <decl><name>REQUEST_PAYMENT_REQUEST</name></decl>, <comment type="line">//</comment>
        <decl><name>INPUT</name></decl>, <comment type="line">// asks for confirmation</comment>
        <decl><name>DECRYPTING</name></decl>, <decl><name>SIGNING</name></decl>, <decl><name>SENDING</name></decl>, <decl><name>SENT</name></decl>, <decl><name>FAILED</name></decl> <comment type="line">// sending states</comment>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WalletLiveData</name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AddressBookEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>addressBook</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>SelectedExchangeRateLiveData</name></type> <name>exchangeRate</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>DynamicFeeLiveData</name></type> <name>dynamicFees</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>BlockchainStateLiveData</name></type> <name>blockchainState</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>WalletBalanceLiveData</name></type> <name>balance</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>progress</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>State</name></type> <name>state</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>PaymentIntent</name></type> <name>paymentIntent</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><name>FeeCategory</name></type> <name>feeCategory</name> <init>= <expr><name><name>FeeCategory</name><operator>.</operator><name>NORMAL</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>AddressAndLabel</name></type> <name>validatedAddress</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Transaction</name></type> <name>sentTransaction</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Boolean</name></type> <name>directPaymentAck</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Transaction</name></type> <name>dryrunTransaction</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Exception</name></type> <name>dryrunException</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SendCoinsViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wallet</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addressBook</name></name> <operator>=</operator> <call><name><name>AppDatabase</name><operator>.</operator><name>getDatabase</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addressBookDao</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exchangeRate</name></name> <operator>=</operator> <operator>new</operator> <call><name>SelectedExchangeRateLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dynamicFees</name></name> <operator>=</operator> <operator>new</operator> <call><name>DynamicFeeLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blockchainState</name></name> <operator>=</operator> <operator>new</operator> <call><name>BlockchainStateLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>balance</name></name> <operator>=</operator> <operator>new</operator> <call><name>WalletBalanceLiveData</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>application</name></name></expr></argument>, <argument><expr><name><name>BalanceType</name><operator>.</operator><name>AVAILABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionedChecksummedBytes</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SweepWalletActivity</name> <super><extends>extends <name>AbstractWalletActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INTENT_EXTRA_KEY</name> <init>= <expr><literal type="string">"sweep_key"</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>SweepWalletActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>VersionedChecksummedBytes</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>SweepWalletActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>INTENT_EXTRA_KEY</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>sweep_wallet_content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkState</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Coin</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>DumpedPrivateKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ECKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>NetworkParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionConfidence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionConfidence</name><operator>.</operator><name>ConfidenceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionOutPoint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>UTXO</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VerificationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionedChecksummedBytes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BIP38PrivateKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>KeyChainGroup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>SendRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>BalanceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ComparisonChain</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>PaymentIntent</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>AbstractWalletActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>DialogBuilder</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>InputParser</name><operator>.</operator><name>StringInputParser</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>ProgressDialogFragment</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>TransactionsAdapter</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>scan</name><operator>.</operator><name>ScanActivity</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name><operator>.</operator><name>MonetarySpannable</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>RingtoneManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>HandlerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>SweepWalletFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>AbstractWalletActivity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Configuration</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>FragmentManager</name></type> <name>fragmentManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>HandlerThread</name></type> <name>backgroundThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Handler</name></type> <name>backgroundHandler</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>messageView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>passwordViewGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>passwordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>badPasswordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>balanceView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>hintView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type> <name>sweepTransactionViewGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>TransactionsAdapter</name><operator>.</operator><name>TransactionViewHolder</name></name></type> <name>sweepTransactionViewHolder</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>viewGo</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>viewCancel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>MenuItem</name></type> <name>reloadAction</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MenuItem</name></type> <name>scanAction</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>SweepWalletViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_CODE_SCAN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SweepWalletFragment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <operator>(</operator><name>AbstractWalletActivity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getWalletApplication</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>application</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fragmentManager</name></name> <operator>=</operator> <call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><operator>!</operator><name><name>Constants</name><operator>.</operator><name>ENABLE_SWEEP_WALLET</name></name></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"ENABLE_SWEEP_WALLET is disabled"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

        <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getDynamicFees</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>dynamicFees</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>observe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ProgressDialogFragment</name><operator>.</operator><name>Observer</name></name><argument_list>(<argument><expr><name>fragmentManager</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backgroundThread</name> <operator>=</operator> <operator>new</operator> <call><name>HandlerThread</name><argument_list>(<argument><expr><literal type="string">"backgroundThread"</literal></expr></argument>, <argument><expr><name><name>Process</name><operator>.</operator><name>THREAD_PRIORITY_BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backgroundHandler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>hasExtra</name></name><argument_list>(<argument><expr><name><name>SweepWalletActivity</name><operator>.</operator><name>INTENT_EXTRA_KEY</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>=</operator> <operator>(</operator><name>VersionedChecksummedBytes</name><operator>)</operator> <call><name><name>intent</name>
                        <operator>.</operator><name>getSerializableExtra</name></name><argument_list>(<argument><expr><name><name>SweepWalletActivity</name><operator>.</operator><name>INTENT_EXTRA_KEY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// delay until fragment is resumed</comment>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>maybeDecodeKeyRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>sweep_wallet_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>messageView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_fragment_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>passwordViewGroup</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_fragment_password_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>passwordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_fragment_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>badPasswordView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_fragment_bad_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>balanceView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_fragment_balance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>hintView</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_fragment_hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sweepTransactionViewGroup</name> <operator>=</operator> <operator>(</operator><name>FrameLayout</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transaction_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sweepTransactionViewGroup</name>
                <operator>.</operator><name>setLayoutAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadLayoutAnimation</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>transaction_layout_anim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sweepTransactionViewHolder</name> <operator>=</operator> <operator>new</operator> <call><name><name>TransactionsAdapter</name><operator>.</operator><name>TransactionViewHolder</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewGo</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_go</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECODE_KEY</name></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>handleDecrypt</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CONFIRM_SWEEP</name></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>handleSweep</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewCancel</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>send_coins_cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>backgroundThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeEventListener</name><argument_list>(<argument><expr><name>sentTransactionConfidenceListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>REQUEST_CODE_SCAN</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>ScanActivity</name><operator>.</operator><name>INTENT_EXTRA_RESULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><operator>new</operator> <class><super><name>StringInputParser</name></super><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>handlePrivateKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VersionedChecksummedBytes</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECODE_KEY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>maybeDecodeKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>handlePaymentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PaymentIntent</name></type> <name>paymentIntent</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>cannotClassify</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>handleDirectTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>VerificationException</name></expr></argument></throws> <block>{
                        <expr_stmt><expr><call><name>cannotClassify</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>dialog</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_scan</name></name></expr></argument>, <argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class><operator>.</operator><call><name>parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>sweep_wallet_fragment_options</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>reloadAction</name> <operator>=</operator> <call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_options_reload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>scanAction</name> <operator>=</operator> <call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_options_scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scanAction</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name><name>pm</name><operator>.</operator><name>hasSystemFeature</name></name><argument_list>(<argument><expr><name><name>PackageManager</name><operator>.</operator><name>FEATURE_CAMERA</name></name></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>pm</name><operator>.</operator><name>hasSystemFeature</name></name><argument_list>(<argument><expr><name><name>PackageManager</name><operator>.</operator><name>FEATURE_CAMERA_FRONT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_options_reload</name></name></expr>:</case>
            <expr_stmt><expr><call><name>handleReload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sweep_wallet_options_scan</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>ScanActivity</name><operator>.</operator><name>startForResult</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><name>REQUEST_CODE_SCAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleReload</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>

        <expr_stmt><expr><call><name>requestWalletBalance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>TransactionConfidence</name><operator>.</operator><name>Listener</name></name></type> <name>sentTransactionConfidenceListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>TransactionConfidence</name><operator>.</operator><name>Listener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onConfidenceChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TransactionConfidence</name></type> <name>confidence</name></decl></parameter>,
                <parameter><decl><type><specifier>final</specifier> <name><name>TransactionConfidence</name><operator>.</operator><name>Listener</name><operator>.</operator><name>ChangeReason</name></name></type> <name>reason</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>runOnUiThread</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <if>if <condition>(<expr><operator>!</operator><call><name>isResumed</name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><return>return;</return></block></then></if>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionConfidence</name></type> <name>confidence</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>TransactionConfidence</name><operator>.</operator><name>ConfidenceType</name></name></type> <name>confidenceType</name> <init>= <expr><call><name><name>confidence</name><operator>.</operator><name>getConfidenceType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numBroadcastPeers</name> <init>= <expr><call><name><name>confidence</name><operator>.</operator><name>numBroadcastPeers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENDING</name></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name>confidenceType</name> <operator>==</operator> <name><name>TransactionConfidence</name><operator>.</operator><name>ConfidenceType</name><operator>.</operator><name>DEAD</name></name></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>FAILED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                        <elseif>else <if>if <condition>(<expr><name>numBroadcastPeers</name> <operator>&gt;</operator> <literal type="number">1</literal>
                                <operator>||</operator> <name>confidenceType</name> <operator>==</operator> <name><name>TransactionConfidence</name><operator>.</operator><name>ConfidenceType</name><operator>.</operator><name>BUILDING</name></name></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
                    }</block></then></if>

                    <if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>ChangeReason</name><operator>.</operator><name>SEEN_PEERS</name></name>
                            <operator>&amp;&amp;</operator> <name>confidenceType</name> <operator>==</operator> <name><name>TransactionConfidence</name><operator>.</operator><name>ConfidenceType</name><operator>.</operator><name>PENDING</name></name></expr>)</condition><then> <block>{
                        <comment type="line">// play sound effect</comment>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>soundResId</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentifier</name><argument_list>(<argument><expr><literal type="string">"send_coins_broadcast_"</literal> <operator>+</operator> <name>numBroadcastPeers</name></expr></argument>,
                                <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><call><name><name>activity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>soundResId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><call><name><name>RingtoneManager</name>
                                    <operator>.</operator><name>getRingtone</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(
                                            <argument><expr><literal type="string">"android.resource://"</literal> <operator>+</operator> <call><name><name>activity</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>soundResId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>play</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>

                    <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Runnable</name></type> <name>maybeDecodeKeyRunnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>maybeDecodeKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeDecodeKey</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkState</name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECODE_KEY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkState</name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>instanceof</operator> <name>DumpedPrivateKey</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ECKey</name></type> <name>key</name> <init>= <expr><operator>(</operator><operator>(</operator><name>DumpedPrivateKey</name><operator>)</operator> <name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name><operator>)</operator><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>askConfirmSweep</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>instanceof</operator> <name>BIP38PrivateKey</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>badPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name> <init>= <expr><call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// get rid of it asap</comment>

            <if>if <condition>(<expr><operator>!</operator><call><name><name>password</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_decrypt_progress</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><operator>new</operator> <class><super><name>DecodePrivateKeyTask</name></super><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>)</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>ECKey</name></type> <name>decryptedKey</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"successfully decoded BIP38 private key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>askConfirmSweep</name><argument_list>(<argument><expr><name>decryptedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>protected</specifier> <type><name>void</name></type> <name>onBadPassphrase</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"failed decoding BIP38 private key (bad password)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>badPasswordView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class><operator>.</operator><call><name>decodePrivateKey</name><argument_list>(<argument><expr><operator>(</operator><name>BIP38PrivateKey</name><operator>)</operator> <name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></elseif> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"cannot handle type: "</literal> <operator>+</operator> <call><name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>askConfirmSweep</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ECKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// create non-HD wallet</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>KeyChainGroup</name></type> <name>group</name> <init>= <expr><operator>new</operator> <call><name>KeyChainGroup</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>importKeys</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name></name> <operator>=</operator> <operator>new</operator> <call><name>Wallet</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CONFIRM_SWEEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// delay until fragment is resumed</comment>
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>requestWalletBalanceRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Runnable</name></type> <name>requestWalletBalanceRunnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>requestWalletBalance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>UTXO</name></argument>&gt;</argument_list></name></type> <name>UTXO_COMPARATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>UTXO</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>UTXO</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>UTXO</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>ComparisonChain</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compare</name><argument_list>(<argument><expr><call><name><name>lhs</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compare</name><argument_list>(<argument><expr><call><name><name>lhs</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>result</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>requestWalletBalance</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_request_wallet_balance_progress</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>RequestWalletBalanceTask</name><operator>.</operator><name>ResultCallback</name></name></type> <name>callback</name> <init>= <expr><operator>new</operator> <class><super><name><name>RequestWalletBalanceTask</name><operator>.</operator><name>ResultCallback</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onResult</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>UTXO</name></argument>&gt;</argument_list></name></type> <name>utxos</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Filter UTXOs we've already spent and sort the rest.</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>walletTxns</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTransactions</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>UTXO</name></argument>&gt;</argument_list></name></type> <name>sortedUtxos</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>UTXO_COMPARATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><specifier>final</specifier> <name>UTXO</name></type> <name>utxo</name> <range>: <expr><name>utxos</name></expr></range></decl></init>)</control>
                    <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><call><name>utxoSpentBy</name><argument_list>(<argument><expr><name>walletTxns</name></expr></argument>, <argument><expr><name>utxo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>sortedUtxos</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>utxo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>

                <comment type="line">// Fake transaction funding the wallet to sweep.</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Sha256Hash</name></argument>, <argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>fakeTxns</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><specifier>final</specifier> <name>UTXO</name></type> <name>utxo</name> <range>: <expr><name>sortedUtxos</name></expr></range></decl></init>)</control> <block>{
                    <decl_stmt><decl><type><name>Transaction</name></type> <name>fakeTx</name> <init>= <expr><call><name><name>fakeTxns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>utxo</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>fakeTx</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>fakeTx</name> <operator>=</operator> <operator>new</operator> <call><name>FakeTransaction</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><call><name><name>utxo</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>fakeTx</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setConfidenceType</name><argument_list>(<argument><expr><name><name>ConfidenceType</name><operator>.</operator><name>BUILDING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>fakeTxns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>fakeTx</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fakeTx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionOutput</name></type> <name>fakeOutput</name> <init>= <expr><operator>new</operator> <call><name>TransactionOutput</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>fakeTx</name></expr></argument>,
                            <argument><expr><call><name><name>utxo</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>utxo</name><operator>.</operator><name>getScript</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProgram</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// Fill with output dummies as needed.</comment>
                    <while>while <condition>(<expr><call><name><name>fakeTx</name><operator>.</operator><name>getOutputs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>utxo</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr>)</condition>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>fakeTx</name><operator>.</operator><name>addOutput</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TransactionOutput</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><name>fakeTx</name></expr></argument>,
                                <argument><expr><name><name>Coin</name><operator>.</operator><name>NEGATIVE_SATOSHI</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
                    <comment type="line">// Add the actual output we will spend later.</comment>
                    <expr_stmt><expr><call><name><name>fakeTx</name><operator>.</operator><name>addOutput</name></name><argument_list>(<argument><expr><name>fakeOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>

                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name><operator>.</operator><name>clearTransactions</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <range>: <expr><call><name><name>fakeTxns</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name>
                            <operator>.</operator><name>addWalletTransaction</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>WalletTransaction</name><argument_list>(<argument><expr><name><name>WalletTransaction</name><operator>.</operator><name>Pool</name><operator>.</operator><name>UNSPENT</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"built wallet to sweep:\n{}"</literal></expr></argument>, <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><specifier>private</specifier> <type><name>boolean</name></type> <name>utxoSpentBy</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>transactions</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>UTXO</name></type> <name>utxo</name></decl></parameter>)</parameter_list> <block>{
                <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name> <range>: <expr><name>transactions</name></expr></range></decl></init>)</control> <block>{
                    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>TransactionInput</name></type> <name>input</name> <range>: <expr><call><name><name>tx</name><operator>.</operator><name>getInputs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionOutPoint</name></type> <name>outpoint</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>getOutpoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>outpoint</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>utxo</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>outpoint</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>utxo</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                            <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
                    }</block></for>
                }</block></for>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onFail</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>messageResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>messageArgs</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>progress</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_request_wallet_balance_failed_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>messageResId</name></expr></argument>, <argument><expr><name>messageArgs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_retry</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name>requestWalletBalance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name><operator>.</operator><name>getImportedKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>toAddress</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>RequestWalletBalanceTask</name><argument_list>(<argument><expr><name>backgroundHandler</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>requestWalletBalance</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getAssets</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>setState</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name></name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>fees</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getDynamicFees</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>MonetaryFormat</name></type> <name>btcFormat</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>balanceView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>MonetarySpannable</name></type> <name>balanceSpannable</name> <init>= <expr><operator>new</operator> <call><name>MonetarySpannable</name><argument_list>(<argument><expr><name>btcFormat</name></expr></argument>,
                    <argument><expr><call><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>ESTIMATED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>balanceSpannable</name><operator>.</operator><name>applyMarkup</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>SpannableStringBuilder</name></type> <name>balance</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>(<argument><expr><name>balanceSpannable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>balance</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>balance</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_balance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>balanceView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>balanceView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECODE_KEY</name></name> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_wallet_unknown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECODE_KEY</name></name> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_encrypted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>messageView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>

        <expr_stmt><expr><call><name><name>passwordViewGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(
                <argument><expr><ternary><condition><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECODE_KEY</name></name> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>
                        ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>hintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(
                <argument><expr><ternary><condition><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECODE_KEY</name></name> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>==</operator> <literal type="null">null</literal></expr>
                        ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sweepTransactionViewGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sweepTransactionViewHolder</name>
                    <operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>TransactionsAdapter</name><operator>.</operator><name>ListItem</name><operator>.</operator><name>TransactionItem</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name></expr></argument>,
                            <argument><expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>btcFormat</name></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>maxConnectedPeers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>sweepTransactionViewGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECODE_KEY</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_button_decrypt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>privateKeyToSweep</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CONFIRM_SWEEP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_button_sweep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name></name> <operator>!=</operator> <literal type="null">null</literal>
                    <operator>&amp;&amp;</operator> <call><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name><operator>.</operator><name>getBalance</name></name><argument_list>(<argument><expr><name><name>BalanceType</name><operator>.</operator><name>ESTIMATED</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>signum</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fees</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>PREPARATION</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_preparation_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENDING</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_button_back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_sending_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_button_back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_sent_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>FAILED</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_fragment_button_back</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_failed_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewGo</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>

        <expr_stmt><expr><call><name><name>viewCancel</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>PREPARATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// enable actions</comment>
        <if>if <condition>(<expr><name>reloadAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>reloadAction</name><operator>.</operator><name>setEnabled</name></name><argument_list>(
                    <argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CONFIRM_SWEEP</name></name> <operator>&amp;&amp;</operator> <name><name>viewModel</name><operator>.</operator><name>walletToSweep</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>scanAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>scanAction</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>DECODE_KEY</name></name>
                    <operator>||</operator> <name><name>viewModel</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CONFIRM_SWEEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleDecrypt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>maybeDecodeKeyRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleSweep</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>PREPARATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FeeCategory</name></argument>, <argument><name>Coin</name></argument>&gt;</argument_list></name></type> <name>fees</name> <init>= <expr><call><name><name>viewModel</name><operator>.</operator><name>getDynamicFees</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>SendRequest</name></type> <name>sendRequest</name> <init>= <expr><call><name><name>SendRequest</name><operator>.</operator><name>emptyWallet</name></name><argument_list>(<argument><expr><call><name><name>application</name><operator>.</operator><name>getWallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>freshReceiveAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sendRequest</name><operator>.</operator><name>feePerKb</name></name> <operator>=</operator> <call><name><name>fees</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>FeeCategory</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <class><super><name>SendCoinsOfflineTask</name></super><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>walletToSweep</name></name></expr></argument>, <argument><expr><name>backgroundHandler</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name> <operator>=</operator> <name>transaction</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>SENDING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name><operator>.</operator><name>getConfidence</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addEventListener</name><argument_list>(<argument><expr><name>sentTransactionConfidenceListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>processDirectTransaction</name></name><argument_list>(<argument><expr><name><name>viewModel</name><operator>.</operator><name>sentTransaction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onInsufficientMoney</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Coin</name></type> <name>missing</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>FAILED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>showInsufficientMoneyDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onEmptyWalletFailed</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>FAILED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>showInsufficientMoneyDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name><name>SweepWalletViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>FAILED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>send_coins_error_msg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>exception</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onInvalidEncryptionKey</name><parameter_list>()</parameter_list> <block>{
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>()</argument_list></call></expr>;</throw> <comment type="line">// cannot happen</comment>
            }</block></function>

            <function><specifier>private</specifier> <type><name>void</name></type> <name>showInsufficientMoneyDialog</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>DialogBuilder</name></type> <name>dialog</name> <init>= <expr><call><name><name>DialogBuilder</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_insufficient_money_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sweep_wallet_fragment_insufficient_money_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>button_dismiss</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class><operator>.</operator><call><name>sendCoinsOffline</name><argument_list>(<argument><expr><name>sendRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// send asynchronously</comment>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>FakeTransaction</name> <super><extends>extends <name>Transaction</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>hash</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>FakeTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>NetworkParameters</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Sha256Hash</name></type> <name>getHash</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>hash</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>ui</name><operator>.</operator><name>send</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>VersionedChecksummedBytes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletApplication</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>data</name><operator>.</operator><name>DynamicFeeLiveData</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>AndroidViewModel</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>SweepWalletViewModel</name> <super><extends>extends <name>AndroidViewModel</name></extends></super> <block>{
    <enum><specifier>public</specifier> enum <name>State</name> <block>{
        <decl><name>DECODE_KEY</name></decl>, <comment type="line">// ask for password</comment>
        <decl><name>CONFIRM_SWEEP</name></decl>, <comment type="line">// displays balance and asks for confirmation</comment>
        <decl><name>PREPARATION</name></decl>, <decl><name>SENDING</name></decl>, <decl><name>SENT</name></decl>, <decl><name>FAILED</name></decl> <comment type="line">// sending states</comment>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WalletApplication</name></type> <name>application</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>DynamicFeeLiveData</name></type> <name>dynamicFees</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>progress</name> <init>= <expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><name>State</name></type> <name>state</name> <init>= <expr><name><name>State</name><operator>.</operator><name>DECODE_KEY</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>VersionedChecksummedBytes</name></type> <name>privateKeyToSweep</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Wallet</name></type> <name>walletToSweep</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Transaction</name></type> <name>sentTransaction</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SweepWalletViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name> <operator>=</operator> <operator>(</operator><name>WalletApplication</name><operator>)</operator> <name>application</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>DynamicFeeLiveData</name></type> <name>getDynamicFees</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>dynamicFees</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>dynamicFees</name> <operator>=</operator> <operator>new</operator> <call><name>DynamicFeeLiveData</name><argument_list>(<argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>dynamicFees</name></expr>;</return>
    }</block></function>
}</block></class>
<comment type="block">/*
 * Copyright 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base43, derived from bitcoinj Base58. It's meant to be used for efficiently stuffing binary data into QR
 * codes. The alphabet is picked to match the 'Alphanumeric' input mode of QR codes as closely as possible,
 * but at the same time be allowed in URIs.
 * 
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>Base43</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>ALPHABET</name> <init>= <expr><literal type="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ$*+-./:"</literal><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>INDEXES</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <static>static <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>INDEXES</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>INDEXES</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ALPHABET</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>INDEXES</name><index>[<expr><name><name>ALPHABET</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
    }</block></static>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">""</literal></expr>;</return></block></then></if>

        <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>copyOfRange</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Count leading zeroes.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>zeroCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>zeroCount</name> <operator>&lt;</operator> <name><name>input</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><name>zeroCount</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>zeroCount</name></expr>;</expr_stmt></block></while>

        <comment type="line">// The actual encoding.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>input</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>temp</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>startAt</name> <init>= <expr><name>zeroCount</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>startAt</name> <operator>&lt;</operator> <name><name>input</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>byte</name></type> <name>mod</name> <init>= <expr><call><name>divmod43</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>startAt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>input</name><index>[<expr><name>startAt</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>startAt</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>temp</name><index>[<expr><operator>--</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <name><name>ALPHABET</name><index>[<expr><name>mod</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// Strip extra '1' if there are some after decoding.</comment>
        <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>temp</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>ALPHABET</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block></while>

        <comment type="line">// Add as many leading '1' as there were leading zeros.</comment>
        <while>while <condition>(<expr><operator>--</operator><name>zeroCount</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><name><name>temp</name><index>[<expr><operator>--</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <name><name>ALPHABET</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></while>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name>copyOfRange</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>temp</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>US_ASCII</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>input43</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// Transform the String to a base43 byte sequence</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>c</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>digit43</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>digit43</name> <operator>=</operator> <name><name>INDEXES</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>

            <if>if <condition>(<expr><name>digit43</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Illegal character "</literal> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="string">" at "</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

            <expr_stmt><expr><name><name>input43</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <name>digit43</name></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// Count leading zeroes</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>zeroCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>zeroCount</name> <operator>&lt;</operator> <name><name>input43</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>input43</name><index>[<expr><name>zeroCount</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>zeroCount</name></expr>;</expr_stmt></block></while>

        <comment type="line">// The encoding</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>temp</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>startAt</name> <init>= <expr><name>zeroCount</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>startAt</name> <operator>&lt;</operator> <name><name>input43</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>byte</name></type> <name>mod</name> <init>= <expr><call><name>divmod256</name><argument_list>(<argument><expr><name>input43</name></expr></argument>, <argument><expr><name>startAt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>input43</name><index>[<expr><name>startAt</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>startAt</name></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><name><name>temp</name><index>[<expr><operator>--</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// Do no add extra leading zeroes, move j to first non null byte.</comment>
        <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>temp</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block></while>

        <return>return <expr><call><name>copyOfRange</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>zeroCount</name></expr></argument>, <argument><expr><name><name>temp</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">//</comment>
    <comment type="line">// number -&gt; number / 43, returns number % 43</comment>
    <comment type="line">//</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>byte</name></type> <name>divmod43</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>number</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>startAt</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>remainder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startAt</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>number</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>digit256</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>number</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>temp</name> <init>= <expr><name>remainder</name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name>digit256</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>number</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>temp</name> <operator>/</operator> <literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>remainder</name> <operator>=</operator> <name>temp</name> <operator>%</operator> <literal type="number">43</literal></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><operator>(</operator><name>byte</name><operator>)</operator> <name>remainder</name></expr>;</return>
    }</block></function>

    <comment type="line">//</comment>
    <comment type="line">// number -&gt; number / 256, returns number % 256</comment>
    <comment type="line">//</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>byte</name></type> <name>divmod256</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>number43</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>startAt</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>remainder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startAt</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>number43</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>digit58</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>number43</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>temp</name> <init>= <expr><name>remainder</name> <operator>*</operator> <literal type="number">43</literal> <operator>+</operator> <name>digit58</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>number43</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>temp</name> <operator>/</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>remainder</name> <operator>=</operator> <name>temp</name> <operator>%</operator> <literal type="number">256</literal></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><operator>(</operator><name>byte</name><operator>)</operator> <name>remainder</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>copyOfRange</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>range</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>to</name> <operator>-</operator> <name>from</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>range</name></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>Bluetooth</name> <block>{
    <comment type="block" format="javadoc">/** Used for local fetching of BIP70 payment requests. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>UUID</name></type> <name>PAYMENT_REQUESTS_UUID</name> <init>= <expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><literal type="string">"3357A7BB-762D-464A-8D9A-DCA592D57D59"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Used for talking BIP70 payment messages and payment acks locally. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>UUID</name></type> <name>BIP70_PAYMENT_PROTOCOL_UUID</name> <init>= <expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><literal type="string">"3357A7BB-762D-464A-8D9A-DCA592D57D5A"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BIP70_PAYMENT_PROTOCOL_NAME</name> <init>= <expr><literal type="string">"Bitcoin BIP70 payment protocol"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Used for talking the deprecated pre-BIP70 payment protocol. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>UUID</name></type> <name>CLASSIC_PAYMENT_PROTOCOL_UUID</name> <init>= <expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><literal type="string">"3357A7BB-762D-464A-8D9A-DCA592D57D5B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CLASSIC_PAYMENT_PROTOCOL_NAME</name> <init>= <expr><literal type="string">"Bitcoin classic payment protocol (deprecated)"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** This URI parameter holds the MAC address for the deprecated pre-BIP70 payment protocol. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MAC_URI_PARAM</name> <init>= <expr><literal type="string">"bt"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Android 6 uses this MAC address instead of the real one. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MARSHMELLOW_FAKE_MAC</name> <init>= <expr><literal type="string">"02:00:00:00:00:00"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Bluetooth</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BluetoothAdapter</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>adapter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>MARSHMELLOW_FAKE_MAC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>address</name></expr>;</return></block></then></if>

        <comment type="line">// Horrible reflection hack needed to get the Bluetooth MAC for Marshmellow and above.</comment>
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Field</name></type> <name>mServiceField</name> <init>= <expr><call><name><name>BluetoothAdapter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"mService"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mServiceField</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>mService</name> <init>= <expr><call><name><name>mServiceField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mService</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
            <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>mService</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"getAddress"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><name>mService</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InvocationTargetException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Problem determining Bluetooth MAC via reflection"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>compressMac</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>mac</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>mac</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>decompressMac</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>compressedMac</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>mac</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>compressedMac</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>compressedMac</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>setLength</name></name><argument_list>(<argument><expr><call><name><name>mac</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>mac</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isBluetoothUrl</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>url</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>GenericUtils</name><operator>.</operator><name>startsWithIgnoreCase</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"bt:"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getBluetoothMac</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>isBluetoothUrl</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>queryIndex</name> <init>= <expr><call><name><name>url</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>queryIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>url</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>queryIndex</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><call><name><name>url</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getBluetoothQuery</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>isBluetoothUrl</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>queryIndex</name> <init>= <expr><call><name><name>url</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>queryIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>url</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>queryIndex</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><literal type="string">"/"</literal></expr>;</return></block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2012 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Helper class for showing cheat sheets (tooltips) for icon-only UI elements on long-press. This is already
 * default platform behavior for icon-only {@link android.app.ActionBar} items and tabs. This class provides
 * this behavior for any other such UI element.
 *
 * &lt;p&gt;
 * Based on the original action bar implementation in &lt;a href=
 * "https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/com/android/internal/view/menu/ActionMenuItemView.java"&gt;
 * ActionMenuItemView.java&lt;/a&gt;.
 */</comment>
<class><specifier>public</specifier> class <name>CheatSheet</name> <block>{
    <comment type="block" format="javadoc">/**
     * The estimated height of a toast, in dips (density-independent pixels). This is used to determine
     * whether or not the toast should appear above or below the UI element.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ESTIMATED_TOAST_HEIGHT_DIPS</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets up a cheat sheet (tooltip) for the given view by setting its
     * {@link android.view.View.OnLongClickListener}. When the view is long-pressed, a {@link Toast} with the
     * view's {@link android.view.View#getContentDescription() content description} will be shown either above
     * (default) or below the view (if there isn't room above it).
     *
     * @param view
     *            The view to add a cheat sheet for.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnLongClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onLongClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name>showCheatSheet</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>getContentDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Sets up a cheat sheet (tooltip) for the given view by setting its
     * {@link android.view.View.OnLongClickListener}. When the view is long-pressed, a {@link Toast} with the
     * given text will be shown either above (default) or below the view (if there isn't room above it).
     *
     * @param view
     *            The view to add a cheat sheet for.
     * @param textResId
     *            The string resource containing the text to show on long-press.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>textResId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnLongClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onLongClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name>showCheatSheet</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>textResId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Sets up a cheat sheet (tooltip) for the given view by setting its
     * {@link android.view.View.OnLongClickListener}. When the view is long-pressed, a {@link Toast} with the
     * given text will be shown either above (default) or below the view (if there isn't room above it).
     *
     * @param view
     *            The view to add a cheat sheet for.
     * @param text
     *            The text to show on long-press.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnLongClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onLongClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name>showCheatSheet</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the cheat sheet for the given view by removing the view's
     * {@link android.view.View.OnLongClickListener}.
     *
     * @param view
     *            The view whose cheat sheet should be removed.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Internal helper method to show the cheat sheet toast.
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>showCheatSheet</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>screenPos</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// origin is device display</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Rect</name></type> <name>displayFrame</name> <init>= <expr><operator>new</operator> <call><name>Rect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// includes decorations (e.g. status bar)</comment>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>getLocationOnScreen</name></name><argument_list>(<argument><expr><name>screenPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>getWindowVisibleDisplayFrame</name></name><argument_list>(<argument><expr><name>displayFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewWidth</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewHeight</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewCenterX</name> <init>= <expr><name><name>screenPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>viewWidth</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>widthPixels</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>estimatedToastHeight</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>ESTIMATED_TOAST_HEIGHT_DIPS</name>
                <operator>*</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>density</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Toast</name></type> <name>cheatSheet</name> <init>= <expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>showBelow</name> <init>= <expr><name><name>screenPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>estimatedToastHeight</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>showBelow</name></expr>)</condition><then> <block>{
            <comment type="line">// Show below</comment>
            <comment type="line">// Offsets are after decorations (e.g. status bar) are factored in</comment>
            <expr_stmt><expr><call><name><name>cheatSheet</name><operator>.</operator><name>setGravity</name></name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>TOP</name></name> <operator>|</operator> <name><name>Gravity</name><operator>.</operator><name>CENTER_HORIZONTAL</name></name></expr></argument>, <argument><expr><name>viewCenterX</name> <operator>-</operator> <name>screenWidth</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
                    <argument><expr><name><name>screenPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>displayFrame</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>viewHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// Show above</comment>
            <comment type="line">// Offsets are after decorations (e.g. status bar) are factored in</comment>
            <comment type="line">// NOTE: We can't use Gravity.BOTTOM because when the keyboard is up</comment>
            <comment type="line">// its height isn't factored in.</comment>
            <expr_stmt><expr><call><name><name>cheatSheet</name><operator>.</operator><name>setGravity</name></name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>TOP</name></name> <operator>|</operator> <name><name>Gravity</name><operator>.</operator><name>CENTER_HORIZONTAL</name></name></expr></argument>, <argument><expr><name>viewCenterX</name> <operator>-</operator> <name>screenWidth</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
                    <argument><expr><name><name>screenPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>displayFrame</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name>estimatedToastHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>cheatSheet</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>GregorianCalendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>CrashReporter</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BACKGROUND_TRACES_FILENAME</name> <init>= <expr><literal type="string">"background.trace"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CRASH_TRACE_FILENAME</name> <init>= <expr><literal type="string">"crash.trace"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>backgroundTracesFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>crashTraceFile</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>TimeZone</name></type> <name>UTC</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CrashReporter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>cacheDir</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>backgroundTracesFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>cacheDir</name></expr></argument>, <argument><expr><name>BACKGROUND_TRACES_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>crashTraceFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>cacheDir</name></expr></argument>, <argument><expr><name>CRASH_TRACE_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>setDefaultUncaughtExceptionHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExceptionHandler</name><argument_list>(<argument><expr><call><name><name>Thread</name><operator>.</operator><name>getDefaultUncaughtExceptionHandler</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>collectSavedBackgroundTraces</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>backgroundTracesFile</name><operator>.</operator><name>renameTo</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasSavedCrashTrace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>crashTraceFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>appendSavedCrashTrace</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>report</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>crashTraceFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <try>try <init>(<decl><type><specifier>final</specifier> <name>BufferedReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>crashTraceFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
                <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></try> <finally>finally <block>{
                <expr_stmt><expr><call><name>deleteSaveCrashTrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally>
        }</block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>deleteSaveCrashTrace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>crashTraceFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BufferedReader</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>line</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>

            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>appendInstalledPackages</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>report</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PackageInfo</name></argument>&gt;</argument_list></name></type> <name>installedPackages</name> <init>= <expr><call><name><name>pm</name><operator>.</operator><name>getInstalledPackages</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// sort by package name</comment>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>installedPackages</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>PackageInfo</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><call><name><name>lhs</name><operator>.</operator><name>packageName</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>packageName</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>p</name> <range>: <expr><name>installedPackages</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>report</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s (%d) - %tF %tF\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>packageName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>versionName</name></name></expr></argument>,
                    <argument><expr><name><name>p</name><operator>.</operator><name>versionCode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>firstInstallTime</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>lastUpdateTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>saveBackgroundTrace</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>throwable</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>PackageInfo</name></type> <name>packageInfo</name></decl></parameter>)</parameter_list> <block>{
        <synchronized>synchronized <init>(<expr><name>backgroundTracesFile</name></expr>)</init> <block>{
            <try>try <init>(<decl><type><specifier>final</specifier> <name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>backgroundTracesFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Calendar</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>GregorianCalendar</name><argument_list>(<argument><expr><name>UTC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"\n--- collected at %tF %tT %tZ on version %s (%d) ---\n"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>,
                        <argument><expr><name>now</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>packageInfo</name><operator>.</operator><name>versionName</name></name></expr></argument>, <argument><expr><name><name>packageInfo</name><operator>.</operator><name>versionCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>appendTrace</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"problem writing background trace"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
        }</block></synchronized>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>appendTrace</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PrintWriter</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>throwable</name><operator>.</operator><name>printStackTrace</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// If the exception was thrown in a background thread inside</comment>
        <comment type="line">// AsyncTask, then the actual exception can be found with getCause</comment>
        <decl_stmt><decl><type><name>Throwable</name></type> <name>cause</name> <init>= <expr><call><name><name>throwable</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>cause</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\nCause:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cause</name><operator>.</operator><name>printStackTrace</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cause</name> <operator>=</operator> <call><name><name>cause</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ExceptionHandler</name> <super><implements>implements <name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></type> <name>previousHandler</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ExceptionHandler</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></type> <name>previousHandler</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>previousHandler</name></name> <operator>=</operator> <name>previousHandler</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>uncaughtException</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Thread</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"crashing because of uncaught exception"</literal></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try>try <block>{
                <expr_stmt><expr><call><name>saveCrashTrace</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem writing crash trace"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <expr_stmt><expr><call><name><name>previousHandler</name><operator>.</operator><name>uncaughtException</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>saveCrashTrace</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>crashTraceFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>appendTrace</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>

<comment type="block">/*
 * Copyright 2012-2015 the original author or authors.
 *
 * Licensed under the MIT license (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://opensource.org/licenses/mit-license.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileFilter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BufferedBlockCipher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>DataLengthException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>InvalidCipherTextException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>PBEParametersGenerator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engines</name><operator>.</operator><name>AESFastEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>generators</name><operator>.</operator><name>OpenSSLPBEParametersGenerator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>modes</name><operator>.</operator><name>CBCBlockCipher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>paddings</name><operator>.</operator><name>PaddedBufferedBlockCipher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>params</name><operator>.</operator><name>ParametersWithIV</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>BaseEncoding</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class encrypts and decrypts a string in a manner that is compatible with OpenSSL.
 * 
 * If you encrypt a string with this class you can decrypt it with the OpenSSL command: openssl enc -d
 * -aes-256-cbc -a -in cipher.txt -out plain.txt -pass pass:aTestPassword
 * 
 * where: cipher.txt = file containing the cipher text plain.txt - where you want the plaintext to be saved
 * 
 * substitute your password for "aTestPassword" or remove the "-pass" parameter to be prompted.
 * 
 * @author jim
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>Crypto</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>BaseEncoding</name></type> <name>BASE64_ENCRYPT</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base64</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>withSeparator</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">76</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>BaseEncoding</name></type> <name>BASE64_DECRYPT</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base64</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>withSeparator</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">76</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * number of times the password &amp; salt are hashed during key creation.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NUMBER_OF_ITERATIONS</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Key length.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>KEY_LENGTH</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Initialization vector length.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IV_LENGTH</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The length of the salt.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SALT_LENGTH</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * OpenSSL salted prefix text.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>OPENSSL_SALTED_TEXT</name> <init>= <expr><literal type="string">"Salted__"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * OpenSSL salted prefix bytes - also used as magic number for encrypted key file.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>OPENSSL_SALTED_BYTES</name> <init>= <expr><call><name><name>OPENSSL_SALTED_TEXT</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Magic text that appears at the beginning of every OpenSSL encrypted file. Used in identifying encrypted
     * key files.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>OPENSSL_MAGIC_TEXT</name> <init>= <expr><call><name><name>BASE64_ENCRYPT</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name><name>Crypto</name><operator>.</operator><name>OPENSSL_SALTED_BYTES</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
            <argument><expr><name><name>Crypto</name><operator>.</operator><name>NUMBER_OF_CHARACTERS_TO_MATCH_IN_OPENSSL_MAGIC_TEXT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NUMBER_OF_CHARACTERS_TO_MATCH_IN_OPENSSL_MAGIC_TEXT</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>SecureRandom</name></type> <name>secureRandom</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Get password and generate key and iv.
     * 
     * @param password
     *            The password to use in key generation
     * @param salt
     *            The salt to use in key generation
     * @return The CipherParameters containing the created key
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>CipherParameters</name></type> <name>getAESPasswordKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>password</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PBEParametersGenerator</name></type> <name>generator</name> <init>= <expr><operator>new</operator> <call><name>OpenSSLPBEParametersGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>generator</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>PBEParametersGenerator</name><operator>.</operator><name>PKCS5PasswordToBytes</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>NUMBER_OF_ITERATIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ParametersWithIV</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>ParametersWithIV</name><operator>)</operator> <call><name><name>generator</name><operator>.</operator><name>generateDerivedParameters</name></name><argument_list>(<argument><expr><name>KEY_LENGTH</name></expr></argument>, <argument><expr><name>IV_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>key</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Password based encryption using AES - CBC 256 bits.
     * 
     * @param plainText
     *            The text to encrypt
     * @param password
     *            The password to use for encryption
     * @return The encrypted string
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encrypt</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>plainText</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>password</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>plainTextAsBytes</name> <init>= <expr><call><name><name>plainText</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>encrypt</name><argument_list>(<argument><expr><name>plainTextAsBytes</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Password based encryption using AES - CBC 256 bits.
     * 
     * @param plainTextAsBytes
     *            The bytes to encrypt
     * @param password
     *            The password to use for encryption
     * @return The encrypted string
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encrypt</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>plainTextAsBytes</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>password</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>encryptedBytes</name> <init>= <expr><call><name>encryptRaw</name><argument_list>(<argument><expr><name>plainTextAsBytes</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// OpenSSL prefixes the salt bytes + encryptedBytes with Salted___ and then base64 encodes it</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>encryptedBytesPlusSaltedText</name> <init>= <expr><call><name>concat</name><argument_list>(<argument><expr><name>OPENSSL_SALTED_BYTES</name></expr></argument>, <argument><expr><name>encryptedBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>BASE64_ENCRYPT</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>encryptedBytesPlusSaltedText</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Password based encryption using AES - CBC 256 bits.
     * 
     * @param plainBytes
     *            The bytes to encrypt
     * @param password
     *            The password to use for encryption
     * @return SALT_LENGTH bytes of salt followed by the encrypted bytes.
     * @throws IOException
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>encryptRaw</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>plainTextAsBytes</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>password</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <comment type="line">// Generate salt - each encryption call has a different salt.</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>salt</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>SALT_LENGTH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>secureRandom</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>ParametersWithIV</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>ParametersWithIV</name><operator>)</operator> <call><name>getAESPasswordKey</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// The following code uses an AES cipher to encrypt the message.</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>BufferedBlockCipher</name></type> <name>cipher</name> <init>= <expr><operator>new</operator> <call><name>PaddedBufferedBlockCipher</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CBCBlockCipher</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AESFastEngine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>encryptedBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>cipher</name><operator>.</operator><name>getOutputSize</name></name><argument_list>(<argument><expr><name><name>plainTextAsBytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>processLen</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>processBytes</name></name><argument_list>(<argument><expr><name>plainTextAsBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>plainTextAsBytes</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>encryptedBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>doFinalLen</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>encryptedBytes</name></expr></argument>, <argument><expr><name>processLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// The result bytes are the SALT_LENGTH bytes followed by the encrypted bytes.</comment>
            <return>return <expr><call><name>concat</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>encryptedBytes</name></expr></argument>, <argument><expr><name>processLen</name> <operator>+</operator> <name>doFinalLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InvalidCipherTextException</name></type> | <type><name>DataLengthException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Could not encrypt bytes"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Decrypt text previously encrypted with this class.
     * 
     * @param textToDecode
     *            The code to decrypt
     * @param password
     *            password to use for decryption
     * @return The decrypted text
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>decrypt</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>textToDecode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>password</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>decryptedBytes</name> <init>= <expr><call><name>decryptBytes</name><argument_list>(<argument><expr><name>textToDecode</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>decryptedBytes</name></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Decrypt bytes previously encrypted with this class.
     * 
     * @param textToDecode
     *            The code to decrypt
     * @param password
     *            password to use for decryption
     * @return The decrypted bytes
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decryptBytes</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>textToDecode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>password</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>decodeTextAsBytes</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>decodeTextAsBytes</name> <operator>=</operator> <call><name><name>BASE64_DECRYPT</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>textToDecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"invalid base64 encoding"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <if>if <condition>(<expr><name><name>decodeTextAsBytes</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name><name>OPENSSL_SALTED_BYTES</name><operator>.</operator><name>length</name></name></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"out of salt"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>cipherBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>decodeTextAsBytes</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>OPENSSL_SALTED_BYTES</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>decodeTextAsBytes</name></expr></argument>, <argument><expr><name><name>OPENSSL_SALTED_BYTES</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>cipherBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                <argument><expr><name><name>decodeTextAsBytes</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>OPENSSL_SALTED_BYTES</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>decryptedBytes</name> <init>= <expr><call><name>decryptRaw</name><argument_list>(<argument><expr><name>cipherBytes</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>decryptedBytes</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Decrypt bytes previously encrypted with this class.
     * 
     * @param bytesToDecode
     *            The bytes to decrypt
     * @param passwordbThe
     *            password to use for decryption
     * @return The decrypted bytes
     * @throws IOException
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decryptRaw</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytesToDecode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>password</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <comment type="line">// separate the salt and bytes to decrypt</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>salt</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>SALT_LENGTH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>bytesToDecode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SALT_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>cipherBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>bytesToDecode</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>SALT_LENGTH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>bytesToDecode</name></expr></argument>, <argument><expr><name>SALT_LENGTH</name></expr></argument>, <argument><expr><name>cipherBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytesToDecode</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>SALT_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>ParametersWithIV</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>ParametersWithIV</name><operator>)</operator> <call><name>getAESPasswordKey</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// decrypt the message</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>BufferedBlockCipher</name></type> <name>cipher</name> <init>= <expr><operator>new</operator> <call><name>PaddedBufferedBlockCipher</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CBCBlockCipher</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AESFastEngine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>decryptedBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>cipher</name><operator>.</operator><name>getOutputSize</name></name><argument_list>(<argument><expr><name><name>cipherBytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>processLen</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>processBytes</name></name><argument_list>(<argument><expr><name>cipherBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cipherBytes</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>decryptedBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>doFinalLen</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>decryptedBytes</name></expr></argument>, <argument><expr><name>processLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>decryptedBytes</name></expr></argument>, <argument><expr><name>processLen</name> <operator>+</operator> <name>doFinalLen</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InvalidCipherTextException</name></type> | <type><name>DataLengthException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Could not decrypt bytes"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Concatenate two byte arrays.
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>concat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>arrayA</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>arrayB</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>arrayA</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name><name>arrayB</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>arrayA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>arrayA</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>arrayB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>arrayA</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>arrayB</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>FileFilter</name></type> <name>OPENSSL_FILE_FILTER</name> <init>= <expr><operator>new</operator> <class><super><name>FileFilter</name></super><argument_list>()</argument_list> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><call><name><name>OPENSSL_MAGIC_TEXT</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
            <try>try <init>(<decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
                <if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>str</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>OPENSSL_MAGIC_TEXT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></catch>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Formats</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>PATTERN_MONETARY_SPANNABLE</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(?:([\\p{Alpha}\\p{Sc}]++)\\s?+)?"</literal> <comment type="line">// prefix</comment>
            <operator>+</operator> <literal type="string">"([\\+\\-"</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>CURRENCY_PLUS_SIGN</name></name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>CURRENCY_MINUS_SIGN</name></name>
            <operator>+</operator> <literal type="string">"]?+(?:\\d*+\\.\\d{0,2}+|\\d++))"</literal> <comment type="line">// significant</comment>
            <operator>+</operator> <literal type="string">"(\\d++)?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// insignificant</comment>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>PATTERN_GROUP_PREFIX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// optional</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>PATTERN_GROUP_SIGNIFICANT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> <comment type="line">// mandatory</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>PATTERN_GROUP_INSIGNIFICANT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt> <comment type="line">// optional</comment>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>PATTERN_MEMO</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(
            <argument><expr><literal type="string">"(?:Payment request for Coinbase order code: (.+)|Payment request for BitPay invoice (.+) for merchant (.+))"</literal></expr></argument>,
            <argument><expr><name><name>Pattern</name><operator>.</operator><name>CASE_INSENSITIVE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>sanitizeMemo</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>memo</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>memo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>m</name> <init>= <expr><call><name><name>PATTERN_MEMO</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>m</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>m</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" (via Coinbase)"</literal></expr> }</block></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>m</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>m</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" (via BitPay)"</literal></expr>, <expr><call><name><name>m</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> }</block></expr>;</return></block></then></if></elseif>
        <else>else
            <block type="pseudo"><return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>memo</name></expr> }</block></expr>;</return></block></else></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Currency</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>GenericUtils</name> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>startsWithIgnoreCase</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>string</name><operator>.</operator><name>regionMatches</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>prefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>currencySymbol</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>currencyCode</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Currency</name></type> <name>currency</name> <init>= <expr><call><name><name>Currency</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>currencyCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>currency</name><operator>.</operator><name>getSymbol</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><name>currencyCode</name></expr>;</return>
        }</block></catch></try>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>HttpUrl</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<enum><specifier>public</specifier> enum <name>Installer</name> <block>{
    <decl><name>F_DROID</name><argument_list>(<argument><expr><literal type="string">"F-Droid"</literal></expr></argument>)</argument_list></decl>, <decl><name>GOOGLE_PLAY</name><argument_list>(<argument><expr><literal type="string">"Google Play"</literal></expr></argument>)</argument_list></decl>, <decl><name>AMAZON_APPSTORE</name><argument_list>(<argument><expr><literal type="string">"Amazon Appstore"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>displayName</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Installer</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>displayName</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayName</name></name> <operator>=</operator> <name>displayName</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>installerPackageName</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>pm</name><operator>.</operator><name>getInstallerPackageName</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Installer</name></type> <name>from</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>installerPackageName</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><literal type="string">"org.fdroid.fdroid"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>installerPackageName</name></expr></argument>)</argument_list></call>
                <operator>||</operator> <literal type="string">"org.fdroid.fdroid.privileged"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>installerPackageName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>F_DROID</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><literal type="string">"com.android.vending"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>installerPackageName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>GOOGLE_PLAY</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><literal type="string">"com.amazon.venezia"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>installerPackageName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>AMAZON_APPSTORE</name></expr>;</return></block></then></if>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Installer</name></type> <name>from</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>from</name><argument_list>(<argument><expr><call><name>installerPackageName</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>HttpUrl</name></type> <name>appStorePageFor</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Application</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>HttpUrl</name><operator>.</operator><name>Builder</name></name></type> <name>url</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>F_DROID</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>url</name> <operator>=</operator> <call><name><name>HttpUrl</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://f-droid.org/de/packages/"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>url</name><operator>.</operator><name>addPathSegment</name></name><argument_list>(<argument><expr><call><name><name>application</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>GOOGLE_PLAY</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>url</name> <operator>=</operator> <call><name><name>HttpUrl</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://play.google.com/store/apps/details"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>url</name><operator>.</operator><name>addQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>AMAZON_APPSTORE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>url</name> <operator>=</operator> <call><name><name>HttpUrl</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.amazon.com/gp/mas/dl/android"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>url</name><operator>.</operator><name>addQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><call><name><name>application</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
        <return>return <expr><call><name><name>url</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></enum>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"SimpleDateFormat"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>Iso8601Format</name> <super><extends>extends <name>SimpleDateFormat</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>TimeZone</name></type> <name>UTC</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Iso8601Format</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>formatString</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>formatString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setTimeZone</name><argument_list>(<argument><expr><name>UTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>DateFormat</name></type> <name>newTimeFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Iso8601Format</name><argument_list>(<argument><expr><literal type="string">"HH:mm:ss"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>DateFormat</name></type> <name>newDateFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Iso8601Format</name><argument_list>(<argument><expr><literal type="string">"yyyy-MM-dd"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>DateFormat</name></type> <name>newDateTimeFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Iso8601Format</name><argument_list>(<argument><expr><literal type="string">"yyyy-MM-dd HH:mm:ss"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>formatDateTime</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>newDateTimeFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Date</name></type> <name>parseDateTime</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>newDateTimeFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>DateFormat</name></type> <name>newDateTimeFormatT</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Iso8601Format</name><argument_list>(<argument><expr><literal type="string">"yyyy-MM-dd'T'HH:mm:ss'Z'"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>formatDateTimeT</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>newDateTimeFormatT</name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Date</name></type> <name>parseDateTimeT</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>newDateTimeFormatT</name><argument_list>()</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Monetary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonetaryFormat</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>RelativeSizeSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>StyleSpan</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>MonetarySpannable</name> <super><extends>extends <name>SpannableString</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>MonetarySpannable</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>signed</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Monetary</name></type> <name>monetary</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>signed</name></expr></argument>, <argument><expr><name>monetary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>MonetarySpannable</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Monetary</name></type> <name>monetary</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>monetary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>CharSequence</name></type> <name>format</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>MonetaryFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>signed</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Monetary</name></type> <name>monetary</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>monetary</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">""</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>monetary</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>

        <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><call><name><name>monetary</name><operator>.</operator><name>signum</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>signed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>signed</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>format</name><operator>.</operator><name>negativeSign</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CURRENCY_MINUS_SIGN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>positiveSign</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CURRENCY_PLUS_SIGN</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>monetary</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><call><name><name>format</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>monetary</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>MonetarySpannable</name></type> <name>applyMarkup</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>prefixSpans</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>insignificantSpans</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>applyMarkup</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>prefixSpans</name></expr></argument>, <argument><expr><name>STANDARD_SIGNIFICANT_SPANS</name></expr></argument>, <argument><expr><name>insignificantSpans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>BOLD_SPAN</name> <init>= <expr><operator>new</operator> <call><name>StyleSpan</name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>RelativeSizeSpan</name></type> <name>SMALLER_SPAN</name> <init>= <expr><operator>new</operator> <call><name>RelativeSizeSpan</name><argument_list>(<argument><expr><literal type="number">0.85f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>STANDARD_SIGNIFICANT_SPANS</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>BOLD_SPAN</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>STANDARD_INSIGNIFICANT_SPANS</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name><name>MonetarySpannable</name><operator>.</operator><name>SMALLER_SPAN</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>applyMarkup</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Spannable</name></type> <name>spannable</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>prefixSpans</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>significantSpans</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>insignificantSpans</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>prefixSpans</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>span</name> <range>: <expr><name>prefixSpans</name></expr></range></decl></init>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name><name>spannable</name><operator>.</operator><name>removeSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
        <if>if <condition>(<expr><name>significantSpans</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>span</name> <range>: <expr><name>significantSpans</name></expr></range></decl></init>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name><name>spannable</name><operator>.</operator><name>removeSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
        <if>if <condition>(<expr><name>insignificantSpans</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>span</name> <range>: <expr><name>insignificantSpans</name></expr></range></decl></init>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name><name>spannable</name><operator>.</operator><name>removeSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>m</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>spannable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>prefixSpans</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>span</name> <range>: <expr><name>prefixSpans</name></expr></range></decl></init>)</control>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>spannable</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>significantSpans</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>span</name> <range>: <expr><name>significantSpans</name></expr></range></decl></init>)</control>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>spannable</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>insignificantSpans</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                    <block type="pseudo"><for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>span</name> <range>: <expr><name>insignificantSpans</name></expr></range></decl></init>)</control>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>spannable</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NdefMessage</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>nfc</name><operator>.</operator><name>NdefRecord</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>Nfc</name> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>NdefRecord</name></type> <name>createMime</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>payload</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>mimeBytes</name> <init>= <expr><call><name><name>mimeType</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>US_ASCII</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>NdefRecord</name></type> <name>mimeRecord</name> <init>= <expr><operator>new</operator> <call><name>NdefRecord</name><argument_list>(<argument><expr><name><name>NdefRecord</name><operator>.</operator><name>TNF_MIME_MEDIA</name></name></expr></argument>, <argument><expr><name>mimeBytes</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>mimeRecord</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>extractMimePayload</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>NdefMessage</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>mimeBytes</name> <init>= <expr><call><name><name>mimeType</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>US_ASCII</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>NdefRecord</name></type> <name>record</name> <range>: <expr><call><name><name>message</name><operator>.</operator><name>getRecords</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>getTnf</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>NdefRecord</name><operator>.</operator><name>TNF_MIME_MEDIA</name></name> <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mimeBytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><call><name><name>record</name><operator>.</operator><name>getPayload</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>
        }</block></for>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewTreeObserver</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>OnFirstPreDraw</name> <super><implements>implements <name><name>ViewTreeObserver</name><operator>.</operator><name>OnPreDrawListener</name></name></implements></super> <block>{
    <interface><specifier>public</specifier> <specifier>static</specifier> interface <name>Callback</name> <block>{
        <function_decl><type><name>boolean</name></type> <name>onFirstPreDraw</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>listen</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Callback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name>OnFirstPreDraw</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getViewTreeObserver</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ViewTreeObserver</name></type> <name>viewTreeObserver</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Callback</name></type> <name>callback</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AtomicBoolean</name></type> <name>fired</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>OnFirstPreDraw</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>OnFirstPreDraw</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ViewTreeObserver</name></type> <name>viewTreeObserver</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Callback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>viewTreeObserver</name></name> <operator>=</operator> <name>viewTreeObserver</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <call><name>checkNotNull</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewTreeObserver</name><operator>.</operator><name>addOnPreDrawListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onPreDraw</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>viewTreeObserver</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>viewTreeObserver</name><operator>.</operator><name>removeOnPreDrawListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"ViewTreeObserver has died, cannot remove listener"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>fired</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>callback</name><operator>.</operator><name>onFirstPreDraw</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Hashtable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPOutputStream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>BarcodeFormat</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>EncodeHintType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>WriterException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>common</name><operator>.</operator><name>BitMatrix</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>qrcode</name><operator>.</operator><name>QRCodeWriter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>zxing</name><operator>.</operator><name>qrcode</name><operator>.</operator><name>decoder</name><operator>.</operator><name>ErrorCorrectionLevel</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>Qr</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>QRCodeWriter</name></type> <name>QR_CODE_WRITER</name> <init>= <expr><operator>new</operator> <call><name>QRCodeWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Qr</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Bitmap</name></type> <name>bitmap</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>content</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Hashtable</name><argument_list type="generic">&lt;<argument><name>EncodeHintType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>hints</name> <init>= <expr><operator>new</operator> <call><name><name>Hashtable</name><argument_list type="generic">&lt;<argument><name>EncodeHintType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>EncodeHintType</name><operator>.</operator><name>MARGIN</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>EncodeHintType</name><operator>.</operator><name>ERROR_CORRECTION</name></name></expr></argument>, <argument><expr><name><name>ErrorCorrectionLevel</name><operator>.</operator><name>H</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>BitMatrix</name></type> <name>result</name> <init>= <expr><call><name><name>QR_CODE_WRITER</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>BarcodeFormat</name><operator>.</operator><name>QR_CODE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>pixels</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>width</name> <operator>*</operator> <name>height</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name> <init>= <expr><name>y</name> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>offset</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><ternary><condition><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>

            <decl_stmt><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><call><name><name>Bitmap</name><operator>.</operator><name>createBitmap</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>ALPHA_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>copyPixelsFromBuffer</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>bitmap</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WriterException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"problem creating qr code"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeCompressBinary</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>bos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>(<argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>GZIPOutputStream</name></type> <name>gos</name> <init>= <expr><operator>new</operator> <call><name>GZIPOutputStream</name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>gos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>gos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>gzippedBytes</name> <init>= <expr><call><name><name>bos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>useCompressioon</name> <init>= <expr><name><name>gzippedBytes</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name><name>bytes</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>str</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>useCompressioon</name></expr> ?</condition><then> <expr><literal type="char">'Z'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Base43</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>useCompressioon</name></expr> ?</condition><then> <expr><name>gzippedBytes</name></expr> </then><else>: <expr><name>bytes</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name><name>str</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeBinary</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Base43</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decodeDecompressBinary</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>content</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>useCompression</name> <init>= <expr><call><name><name>content</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'Z'</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>Base43</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>content</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>useCompression</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>is</name> <operator>=</operator> <operator>new</operator> <call><name>GZIPInputStream</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <operator>(</operator><name>read</name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><call><name><name>baos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><call><name><name>baos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decodeBinary</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>content</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Base43</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>Toast</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>getMainLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Toast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>postToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>textResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>formatArgs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>toast</name><argument_list>(<argument><expr><name>textResId</name></expr></argument>, <argument><expr><name>formatArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>toast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>textResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>formatArgs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>customToast</name><argument_list>(<argument><expr><name>textResId</name></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>, <argument><expr><name>formatArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>postToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>toast</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>toast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>customToast</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>postLongToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>textResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>formatArgs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>longToast</name><argument_list>(<argument><expr><name>textResId</name></expr></argument>, <argument><expr><name>formatArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>longToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>textResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>formatArgs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>customToast</name><argument_list>(<argument><expr><name>textResId</name></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>, <argument><expr><name>formatArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>postLongToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>longToast</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>longToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>customToast</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>customToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>textResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>formatArgs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>customToast</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>textResId</name></expr></argument>, <argument><expr><name>formatArgs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>customToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>viewpager</name><operator>.</operator><name>widget</name><operator>.</operator><name>ViewPager</name><operator>.</operator><name>OnPageChangeListener</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>ViewPagerTabs</name> <super><extends>extends <name>View</name></extends> <implements>implements <name>OnPageChangeListener</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>labels</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>paint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>maxWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// instance state</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>pagePosition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>pageOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ViewPagerTabs</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setSaveEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimension</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>font_size_tiny</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setShadowLayer</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addTabLabels</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name><modifier>...</modifier></type> <name>labelResId</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>int</name></type> <name>resId</name> <range>: <expr><name>labelResId</name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>paint</name><operator>.</operator><name>measureText</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>maxWidth</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>maxWidth</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><call><name><name>labels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Path</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewWidth</name> <init>= <expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewHalfWidth</name> <init>= <expr><name>viewWidth</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>viewBottom</name> <init>= <expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>density</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>density</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>spacing</name> <init>= <expr><literal type="number">32</literal> <operator>*</operator> <name>density</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name>viewHalfWidth</name></expr></argument>, <argument><expr><name>viewBottom</name> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>density</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><name>viewHalfWidth</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>density</name></expr></argument>, <argument><expr><name>viewBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><name>viewHalfWidth</name> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>density</name></expr></argument>, <argument><expr><name>viewBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>y</name> <init>= <expr><call><name>getPaddingTop</name><argument_list>()</argument_list></call> <operator>+</operator> <operator>-</operator><call><name><name>paint</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><name>top</name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>labels</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name> <init>= <expr><call><name><name>labels</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>pagePosition</name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr> </then><else>: <expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>pagePosition</name></expr> ?</condition><then> <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>DKGRAY</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>x</name> <init>= <expr><name>viewHalfWidth</name> <operator>+</operator> <operator>(</operator><name>maxWidth</name> <operator>+</operator> <name>spacing</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>pageOffset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>labelWidth</name> <init>= <expr><call><name><name>paint</name><operator>.</operator><name>measureText</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>labelHalfWidth</name> <init>= <expr><name>labelWidth</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>labelLeft</name> <init>= <expr><name>x</name> <operator>-</operator> <name>labelHalfWidth</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>labelVisibleLeft</name> <init>= <expr><ternary><condition><expr><name>labelLeft</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1f</literal></expr> </then><else>: <expr><literal type="number">1f</literal> <operator>-</operator> <operator>(</operator><operator>-</operator><name>labelLeft</name> <operator>/</operator> <name>labelWidth</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>labelRight</name> <init>= <expr><name>x</name> <operator>+</operator> <name>labelHalfWidth</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>labelVisibleRight</name> <init>= <expr><ternary><condition><expr><name>labelRight</name> <operator>&lt;</operator> <name>viewWidth</name></expr> ?</condition><then> <expr><literal type="number">1f</literal></expr> </then><else>: <expr><literal type="number">1f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>labelRight</name> <operator>-</operator> <name>viewWidth</name><operator>)</operator> <operator>/</operator> <name>labelWidth</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>labelVisible</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>labelVisibleLeft</name></expr></argument>, <argument><expr><name>labelVisibleRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>labelVisible</name> <operator>*</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>labelLeft</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>widthMode</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getMode</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>widthSize</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>widthMode</name> <operator>==</operator> <name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>width</name> <operator>=</operator> <name>widthSize</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>widthMode</name> <operator>==</operator> <name><name>MeasureSpec</name><operator>.</operator><name>AT_MOST</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>width</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name>getMeasuredWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>widthSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>heightMode</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getMode</name></name><argument_list>(<argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>heightSize</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>heightMode</name> <operator>==</operator> <name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>height</name> <operator>=</operator> <name>heightSize</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>heightMode</name> <operator>==</operator> <name><name>MeasureSpec</name><operator>.</operator><name>AT_MOST</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name>getSuggestedMinimumHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>heightSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>getSuggestedMinimumHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>int</name></type> <name>getSuggestedMinimumHeight</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr><operator>-</operator><call><name><name>paint</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><name>top</name> <operator>+</operator> <call><name><name>paint</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><name>bottom</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getPaddingTop</name><argument_list>()</argument_list></call>
                <operator>+</operator> <call><name>getPaddingBottom</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrolled</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>positionOffset</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>positionOffsetPixels</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>pageOffset</name> <operator>=</operator> <name>position</name> <operator>+</operator> <name>positionOffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPageSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>pagePosition</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrollStateChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Parcelable</name></type> <name>onSaveInstanceState</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"super_state"</literal></expr></argument>, <argument><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><literal type="string">"page_position"</literal></expr></argument>, <argument><expr><name>pagePosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><literal type="string">"page_offset"</literal></expr></argument>, <argument><expr><name>pageOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRestoreInstanceState</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Parcelable</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>state</name> <operator>instanceof</operator> <name>Bundle</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>(</operator><name>Bundle</name><operator>)</operator> <name>state</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>pagePosition</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"page_position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pageOffset</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"page_offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><literal type="string">"super_state"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2011-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileFilter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>NetworkParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>ScriptException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Sha256Hash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>core</name><operator>.</operator><name>TransactionOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>script</name><operator>.</operator><name>Script</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Protos</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>UnreadableWalletException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Wallet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletProtobufSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Stopwatch</name></name>;</import>

<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>service</name><operator>.</operator><name>BlockchainService</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannedString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>TypefaceSpan</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletUtils</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>WalletUtils</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Spanned</name></type> <name>formatAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>groupSize</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>lineSize</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>formatHash</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>groupSize</name></expr></argument>, <argument><expr><name>lineSize</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Spanned</name></type> <name>formatAddress</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>groupSize</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>lineSize</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>formatHash</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>toBase58</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>groupSize</name></expr></argument>, <argument><expr><name>lineSize</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>CHAR_THIN_SPACE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Spanned</name></type> <name>formatHash</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>groupSize</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>lineSize</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>formatHash</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>groupSize</name></expr></argument>, <argument><expr><name>lineSize</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>CHAR_THIN_SPACE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>longHash</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Sha256Hash</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>hash</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFl</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFl</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFl</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFl</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFl</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFl</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFl</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFl</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>MonospaceSpan</name> <super><extends>extends <name>TypefaceSpan</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>MonospaceSpan</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"monospace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line">// TypefaceSpan doesn't implement this, and we need it so that Spanned.equals() works.</comment>
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>this</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>getClass</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></function>
    }</block></class>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Spanned</name></type> <name>formatHash</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>groupSize</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>lineSize</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>groupSeparator</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>SpannableStringBuilder</name></type> <name>builder</name> <init>= <expr><ternary><condition><expr><name>prefix</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>groupSize</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><name>i</name> <operator>+</operator> <name>groupSize</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>part</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>end</name> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>end</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MonospaceSpan</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>part</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>endOfLine</name> <init>= <expr><name>lineSize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end</name> <operator>%</operator> <name>lineSize</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>endOfLine</name></expr> ?</condition><then> <expr><literal type="char">'\n'</literal></expr> </then><else>: <expr><name>groupSeparator</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <return>return <expr><call><name><name>SpannedString</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>Address</name></type> <name>getToAddressOfSent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>TransactionOutput</name></type> <name>output</name> <range>: <expr><call><name><name>tx</name><operator>.</operator><name>getOutputs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <try>try <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name><name>output</name><operator>.</operator><name>isMine</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Script</name></type> <name>script</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getScriptPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return>return <expr><call><name><name>script</name><operator>.</operator><name>getToAddress</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ScriptException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// swallow</comment>
            }</block></catch></try>
        }</block></for>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>Address</name></type> <name>getWalletAddressOfReceived</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>TransactionOutput</name></type> <name>output</name> <range>: <expr><call><name><name>tx</name><operator>.</operator><name>getOutputs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <try>try <block>{
                <if>if <condition>(<expr><call><name><name>output</name><operator>.</operator><name>isMine</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Script</name></type> <name>script</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getScriptPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return>return <expr><call><name><name>script</name><operator>.</operator><name>getToAddress</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NETWORK_PARAMETERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ScriptException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// swallow</comment>
            }</block></catch></try>
        }</block></for>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isEntirelySelf</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>TransactionInput</name></type> <name>input</name> <range>: <expr><call><name><name>tx</name><operator>.</operator><name>getInputs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>TransactionOutput</name></type> <name>connectedOutput</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>getConnectedOutput</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>connectedOutput</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>connectedOutput</name><operator>.</operator><name>isMine</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></for>

        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>TransactionOutput</name></type> <name>output</name> <range>: <expr><call><name><name>tx</name><operator>.</operator><name>getOutputs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name><name>output</name><operator>.</operator><name>isMine</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></for>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>autoBackupWallet</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Stopwatch</name></type> <name>watch</name> <init>= <expr><call><name><name>Stopwatch</name><operator>.</operator><name>createStarted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>Wallet</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>WalletProtobufSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>walletToProto</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// strip redundant</comment>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>clearTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>clearLastSeenBlockHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setLastSeenBlockHeight</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>clearLastSeenBlockTimeSecs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Protos</name><operator>.</operator><name>Wallet</name></name></type> <name>walletProto</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <init>(<decl><type><specifier>final</specifier> <name>OutputStream</name></type> <name>os</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>openFileOutput</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_KEY_BACKUP_PROTOBUF</name></name></expr></argument>,
                <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <expr_stmt><expr><call><name><name>walletProto</name><operator>.</operator><name>writeTo</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>watch</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"wallet backed up to: '{}', took {}"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_KEY_BACKUP_PROTOBUF</name></name></expr></argument>, <argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"problem writing wallet backup"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Wallet</name></type> <name>restoreWalletFromAutoBackup</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(<decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>openFileInput</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_KEY_BACKUP_PROTOBUF</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><operator>new</operator> <call><name>WalletProtobufSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readWallet</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>isConsistent</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>Error</name><argument_list>(<argument><expr><literal type="string">"inconsistent backup"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

            <expr_stmt><expr><call><name><name>BlockchainService</name><operator>.</operator><name>resetBlockchain</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"wallet restored from backup: '"</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>Files</name><operator>.</operator><name>WALLET_KEY_BACKUP_PROTOBUF</name></name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>wallet</name></expr>;</return>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> | <type><name>UnreadableWalletException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>Error</name><argument_list>(<argument><expr><literal type="string">"cannot read backup"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Wallet</name></type> <name>restoreWalletFromProtobuf</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>NetworkParameters</name></type> <name>expectedNetworkParameters</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name> <init>= <expr><operator>new</operator> <call><name>WalletProtobufSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readWallet</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>expectedNetworkParameters</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"bad wallet backup network parameters: "</literal> <operator>+</operator> <call><name><name>wallet</name><operator>.</operator><name>getParams</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>isConsistent</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"inconsistent wallet backup"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

            <return>return <expr><name>wallet</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>UnreadableWalletException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"unreadable wallet"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>FileFilter</name></type> <name>BACKUP_FILE_FILTER</name> <init>= <expr><operator>new</operator> <class><super><name>FileFilter</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
            <try>try <init>(<decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
                <return>return <expr><call><name><name>WalletProtobufSerializer</name><operator>.</operator><name>isWallet</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></catch>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isPayToManyTransaction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Transaction</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>transaction</name><operator>.</operator><name>getOutputs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">20</literal></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>StyleSpan</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WholeStringBuilder</name> <super><extends>extends <name>SpannableStringBuilder</name></extends></super> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CharSequence</name></type> <name>bold</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>WholeStringBuilder</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>StyleSpan</name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <constructor><specifier>public</specifier> <name>WholeStringBuilder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>span</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setSpan</name><argument_list>(<argument><expr><name>span</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SpannableStringBuilder</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>

<comment type="block">/*
 * Copyright 2013-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>Base43Test</name> <block>{
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>encode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name><name>Base43</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><call><name><name>Base43</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x0</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"5."</literal></expr></argument>, <argument><expr><call><name><name>Base43</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xff</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"RNO2-MYFN0D35RHM"</literal></expr></argument>, <argument><expr><call><name><name>Base43</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><literal type="string">"Hello World"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>decode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>Base43</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">0x0</literal></expr> }</block></expr></argument>, <argument><expr><call><name><name>Base43</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xff</literal></expr> }</block></expr></argument>, <argument><expr><call><name><name>Base43</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><literal type="string">"5."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><literal type="string">"Hello World"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Base43</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><literal type="string">"RNO2-MYFN0D35RHM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>BluetoothTest</name> <block>{
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>compressDecompressMac</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>mac</name> <init>= <expr><literal type="string">"00:11:22:33:44:55:66"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>mac</name></expr></argument>, <argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>decompressMac</name></name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>compressMac</name></name><argument_list>(<argument><expr><name>mac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>isBluetoothUri</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>isBluetoothUrl</name></name><argument_list>(<argument><expr><literal type="string">"bt:00112233445566"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>isBluetoothUrl</name></name><argument_list>(<argument><expr><literal type="string">"BT:00112233445566"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>getBluetooth</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>simpleUri</name> <init>= <expr><literal type="string">"bt:00112233445566"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"00112233445566"</literal></expr></argument>, <argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>getBluetoothMac</name></name><argument_list>(<argument><expr><name>simpleUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>getBluetoothQuery</name></name><argument_list>(<argument><expr><name>simpleUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>queryUri</name> <init>= <expr><literal type="string">"bt:00112233445566/abc"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"00112233445566"</literal></expr></argument>, <argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>getBluetoothMac</name></name><argument_list>(<argument><expr><name>queryUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"/abc"</literal></expr></argument>, <argument><expr><call><name><name>Bluetooth</name><operator>.</operator><name>getBluetoothQuery</name></name><argument_list>(<argument><expr><name>queryUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletProtobufSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>CharStreams</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>CryptoTest</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PLAIN_TEXT</name> <init>= <expr><literal type="string">"plain text"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>PLAIN_BYTES</name> <init>= <expr><call><name><name>PLAIN_TEXT</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>PASSWORD</name> <init>= <expr><literal type="string">"password"</literal><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>roundtripText</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plainText</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>decrypt</name></name><argument_list>(<argument><expr><call><name><name>Crypto</name><operator>.</operator><name>encrypt</name></name><argument_list>(<argument><expr><name>PLAIN_TEXT</name></expr></argument>, <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>PLAIN_TEXT</name></expr></argument>, <argument><expr><name>plainText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>roundtripDifferentTextSizes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plainText</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>roundtrippedPlainText</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>decrypt</name></name><argument_list>(<argument><expr><call><name><name>Crypto</name><operator>.</operator><name>encrypt</name></name><argument_list>(<argument><expr><name>plainText</name></expr></argument>, <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>plainText</name></expr></argument>, <argument><expr><name>roundtrippedPlainText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>roundtripBytes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>plainBytes</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>decryptBytes</name></name><argument_list>(<argument><expr><call><name><name>Crypto</name><operator>.</operator><name>encrypt</name></name><argument_list>(<argument><expr><name>PLAIN_BYTES</name></expr></argument>, <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>PLAIN_BYTES</name></expr></argument>, <argument><expr><name>plainBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>roundtripDifferentByteSizes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>stream</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>stream</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>plainBytes</name> <init>= <expr><call><name><name>stream</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>roundtrippedPlainBytes</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>decryptBytes</name></name><argument_list>(<argument><expr><call><name><name>Crypto</name><operator>.</operator><name>encrypt</name></name><argument_list>(<argument><expr><name>plainBytes</name></expr></argument>, <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>plainBytes</name></expr></argument>, <argument><expr><name>roundtrippedPlainBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>roundtripDifferentPasswordSizes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>password</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plainText</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>decrypt</name></name><argument_list>(<argument><expr><call><name><name>Crypto</name><operator>.</operator><name>encrypt</name></name><argument_list>(<argument><expr><name>PLAIN_TEXT</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>PLAIN_TEXT</name></expr></argument>, <argument><expr><name>plainText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>backups</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>backup</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>decryptBytes</name></name><argument_list>(<argument><expr><call><name>readBackupFromResource</name><argument_list>(<argument><expr><literal type="string">"bitcoin-wallet-backup-testnet-3.50"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>WalletProtobufSerializer</name><operator>.</operator><name>isWallet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>backupCrLf</name> <init>= <expr><call><name><name>Crypto</name><operator>.</operator><name>decryptBytes</name></name><argument_list>(<argument><expr><call><name>readBackupFromResource</name><argument_list>(<argument><expr><literal type="string">"bitcoin-wallet-backup-testnet-3.50-crlf"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>WalletProtobufSerializer</name><operator>.</operator><name>isWallet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>backupCrLf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>readBackupFromResource</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BufferedReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceAsStream</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>backup</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>CharStreams</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>backup</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright 2014-2015 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>FormatsTest</name> <block>{
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>monetarySpannable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>single</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>single</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>single</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>single</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><call><name><name>single</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>single</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>many</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">"00000000"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>many</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>many</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>many</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><call><name><name>many</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>many</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>standard</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">"0.0000"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>standard</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>standard</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>standard</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"0.00"</literal></expr></argument>, <argument><expr><call><name><name>standard</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>standard</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"00"</literal></expr></argument>, <argument><expr><call><name><name>standard</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>startWithDot</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">".0000"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>startWithDot</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>startWithDot</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>startWithDot</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">".00"</literal></expr></argument>, <argument><expr><call><name><name>startWithDot</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>startWithDot</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"00"</literal></expr></argument>, <argument><expr><call><name><name>startWithDot</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>endWithDot</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">"00."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>endWithDot</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>endWithDot</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>endWithDot</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"00."</literal></expr></argument>, <argument><expr><call><name><name>endWithDot</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>endWithDot</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>signed</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">"-0.00"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>signed</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>signed</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>signed</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"-0.00"</literal></expr></argument>, <argument><expr><call><name><name>signed</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>signed</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>symbol</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">"â¬0.00"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>symbol</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>symbol</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"â¬"</literal></expr></argument>, <argument><expr><call><name><name>symbol</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>symbol</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"0.00"</literal></expr></argument>, <argument><expr><call><name><name>symbol</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>symbol</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>code</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">"BTC 0.00"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>code</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>code</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"BTC"</literal></expr></argument>, <argument><expr><call><name><name>code</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>code</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"0.00"</literal></expr></argument>, <argument><expr><call><name><name>code</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>code</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>subString</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">"###$0###"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>subString</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>subString</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><call><name><name>subString</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>subString</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><call><name><name>subString</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_SIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>subString</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><name><name>Formats</name><operator>.</operator><name>PATTERN_GROUP_INSIGNIFICANT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>empty</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>empty</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>signOnly</name> <init>= <expr><call><name><name>Formats</name><operator>.</operator><name>PATTERN_MONETARY_SPANNABLE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>signOnly</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

<comment type="block">/*
 * Copyright the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>de</name><operator>.</operator><name>schildbach</name><operator>.</operator><name>wallet</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>params</name><operator>.</operator><name>MainNetParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>bitcoinj</name><operator>.</operator><name>params</name><operator>.</operator><name>TestNet3Params</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Andreas Schildbach
 */</comment>
<class><specifier>public</specifier> class <name>WalletUtilsTest</name> <block>{
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>restoreWalletFromProtobufOrBase58</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>WalletUtils</name><operator>.</operator><name>restoreWalletFromProtobuf</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceAsStream</name><argument_list>(<argument><expr><literal type="string">"backup-protobuf-testnet"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>TestNet3Params</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>IOException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>restoreWalletFromProtobuf_wrongNetwork</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>WalletUtils</name><operator>.</operator><name>restoreWalletFromProtobuf</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceAsStream</name><argument_list>(<argument><expr><literal type="string">"backup-protobuf-testnet"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>MainNetParams</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

</unit>
